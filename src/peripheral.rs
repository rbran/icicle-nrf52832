use icicle_vm::cpu::mem::{MemError, MemResult};

mod event;

mod gpio;
use gpio::*;
mod interrupt;
use interrupt::*;
mod powerclock;
use powerclock::*;
mod watchdog;
use watchdog::*;
mod control;
use control::*;
mod ram;
use ram::*;
mod mpu;
use mpu::*;
mod radio;
use radio::*;
mod ppi;
use ppi::*;

pub struct Peripherals {
    pub gpio: [Gpio; 32],
    pub interrupts: Interrupts,
    pub powerclock: PowerClock,
    pub wdt: Wdt,
    pub control: Control,
    pub ram: [RamBlock; 4],
    pub mpu: [MpuRegion; 64],
    pub radio: Radio,
    pub ppi: PPI,
}

impl Default for Peripherals {
    fn default() -> Self {
        Self {
            gpio: Default::default(),
            interrupts: Default::default(),
            powerclock: Default::default(),
            wdt: Default::default(),
            control: Default::default(),
            ram: Default::default(),
            mpu: [MpuRegion::default(); 64],
            radio: Radio::default(),
            ppi: PPI::default(),
        }
    }
}

impl Peripherals {
    #[doc = "FICR CODEPAGESIZE: Code memory page size"]
    #[inline]
    pub(crate) fn read_ficr_codepagesize(&self) -> MemResult<u32> {
        todo ! ("read FICR CODEPAGESIZE reset value 0xffffffff mask 0xffffffffffffffff")
    }
    #[doc = "FICR CODESIZE: Code memory size"]
    #[inline]
    pub(crate) fn read_ficr_codesize(&self) -> MemResult<u32> {
        todo!(
            "read FICR CODESIZE reset value 0xffffffff mask 0xffffffffffffffff"
        )
    }
    #[doc = "FICR DEVICEID[%s]: Description collection[0]:  Device identifier"]
    #[inline]
    pub(crate) fn read_ficr_deviceidn(&self, _dim: usize) -> MemResult<u32> {
        todo ! ("read FICR DEVICEID[%s] reset value 0xffffffff mask 0xffffffffffffffff")
    }
    #[doc = "FICR ER[%s]: Description collection[0]:  Encryption Root, word 0"]
    #[inline]
    pub(crate) fn read_ficr_ern(&self, _dim: usize) -> MemResult<u32> {
        todo!("read FICR ER[%s] reset value 0xffffffff mask 0xffffffffffffffff")
    }
    #[doc = "FICR IR[%s]: Description collection[0]:  Identity Root, word 0"]
    #[inline]
    pub(crate) fn read_ficr_irn(&self, _dim: usize) -> MemResult<u32> {
        todo!("read FICR IR[%s] reset value 0xffffffff mask 0xffffffffffffffff")
    }
    #[doc = "FICR DEVICEADDRTYPE DEVICEADDRTYPE: Device address type"]
    #[inline]
    pub(crate) fn read_ficr_deviceaddrtype_deviceaddrtype(
        &self,
    ) -> MemResult<bool> {
        todo!("read FICR DEVICEADDRTYPE DEVICEADDRTYPE reset value true")
    }
    #[doc = "FICR DEVICEADDR[%s]: Description collection[0]:  Device address 0"]
    #[inline]
    pub(crate) fn read_ficr_deviceaddrn(&self, _dim: usize) -> MemResult<u32> {
        todo ! ("read FICR DEVICEADDR[%s] reset value 0xffffffff mask 0xffffffffffffffff")
    }
    #[doc = "FICR PART: Part code"]
    #[inline]
    pub(crate) fn read_ficr_info_part(&self) -> MemResult<u32> {
        todo!("read FICR PART reset value 0x52832 mask 0xffffffffffffffff")
    }
    #[doc = "FICR VARIANT: Part Variant, Hardware version and Production configuration"]
    #[inline]
    pub(crate) fn read_ficr_info_variant(&self) -> MemResult<u32> {
        todo!(
            "read FICR VARIANT reset value 0x41414142 mask 0xffffffffffffffff"
        )
    }
    #[doc = "FICR PACKAGE: Package option"]
    #[inline]
    pub(crate) fn read_ficr_info_package(&self) -> MemResult<u32> {
        todo!("read FICR PACKAGE reset value 0x2000 mask 0xffffffffffffffff")
    }
    #[doc = "FICR RAM: RAM variant"]
    #[inline]
    pub(crate) fn read_ficr_info_ram(&self) -> MemResult<u32> {
        todo!("read FICR RAM reset value 0x40 mask 0xffffffffffffffff")
    }
    #[doc = "FICR FLASH: Flash variant"]
    #[inline]
    pub(crate) fn read_ficr_info_flash(&self) -> MemResult<u32> {
        todo!("read FICR FLASH reset value 0x200 mask 0xffffffffffffffff")
    }
    #[doc = "FICR UNUSED0[%s]: Description collection[0]: Unspecified"]
    #[inline]
    pub(crate) fn read_ficr_info_unused0n(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo!("read FICR UNUSED0[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "FICR UNUSED0[%s]: Description collection[0]: Unspecified"]
    #[inline]
    pub(crate) fn write_ficr_info_unused0n(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write FICR UNUSED0[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "FICR A0 A: A (slope definition) register."]
    #[inline]
    pub(crate) fn read_ficr_temp_a0_a(&self) -> MemResult<u16> {
        todo!("read FICR A0 A reset value 0x320 mask 0xfff")
    }
    #[doc = "FICR A1 A: A (slope definition) register."]
    #[inline]
    pub(crate) fn read_ficr_temp_a1_a(&self) -> MemResult<u16> {
        todo!("read FICR A1 A reset value 0x343 mask 0xfff")
    }
    #[doc = "FICR A2 A: A (slope definition) register."]
    #[inline]
    pub(crate) fn read_ficr_temp_a2_a(&self) -> MemResult<u16> {
        todo!("read FICR A2 A reset value 0x35d mask 0xfff")
    }
    #[doc = "FICR A3 A: A (slope definition) register."]
    #[inline]
    pub(crate) fn read_ficr_temp_a3_a(&self) -> MemResult<u16> {
        todo!("read FICR A3 A reset value 0x400 mask 0xfff")
    }
    #[doc = "FICR A4 A: A (slope definition) register."]
    #[inline]
    pub(crate) fn read_ficr_temp_a4_a(&self) -> MemResult<u16> {
        todo!("read FICR A4 A reset value 0x452 mask 0xfff")
    }
    #[doc = "FICR A5 A: A (slope definition) register."]
    #[inline]
    pub(crate) fn read_ficr_temp_a5_a(&self) -> MemResult<u16> {
        todo!("read FICR A5 A reset value 0x37b mask 0xfff")
    }
    #[doc = "FICR B0 B: B (y-intercept)"]
    #[inline]
    pub(crate) fn read_ficr_temp_b0_b(&self) -> MemResult<u16> {
        todo!("read FICR B0 B reset value 0x3fcc mask 0x3fff")
    }
    #[doc = "FICR B1 B: B (y-intercept)"]
    #[inline]
    pub(crate) fn read_ficr_temp_b1_b(&self) -> MemResult<u16> {
        todo!("read FICR B1 B reset value 0x3f98 mask 0x3fff")
    }
    #[doc = "FICR B2 B: B (y-intercept)"]
    #[inline]
    pub(crate) fn read_ficr_temp_b2_b(&self) -> MemResult<u16> {
        todo!("read FICR B2 B reset value 0x3f98 mask 0x3fff")
    }
    #[doc = "FICR B3 B: B (y-intercept)"]
    #[inline]
    pub(crate) fn read_ficr_temp_b3_b(&self) -> MemResult<u16> {
        todo!("read FICR B3 B reset value 0x12 mask 0x3fff")
    }
    #[doc = "FICR B4 B: B (y-intercept)"]
    #[inline]
    pub(crate) fn read_ficr_temp_b4_b(&self) -> MemResult<u16> {
        todo!("read FICR B4 B reset value 0x4d mask 0x3fff")
    }
    #[doc = "FICR B5 B: B (y-intercept)"]
    #[inline]
    pub(crate) fn read_ficr_temp_b5_b(&self) -> MemResult<u16> {
        todo!("read FICR B5 B reset value 0x3e10 mask 0x3fff")
    }
    #[doc = "FICR T0 T: T (segment end)register."]
    #[inline]
    pub(crate) fn read_ficr_temp_t0_t(&self) -> MemResult<u8> {
        todo!("read FICR T0 T reset value 0xe2 mask 0xff")
    }
    #[doc = "FICR T1 T: T (segment end)register."]
    #[inline]
    pub(crate) fn read_ficr_temp_t1_t(&self) -> MemResult<u8> {
        todo!("read FICR T1 T reset value 0x00 mask 0xff")
    }
    #[doc = "FICR T2 T: T (segment end)register."]
    #[inline]
    pub(crate) fn read_ficr_temp_t2_t(&self) -> MemResult<u8> {
        todo!("read FICR T2 T reset value 0x14 mask 0xff")
    }
    #[doc = "FICR T3 T: T (segment end)register."]
    #[inline]
    pub(crate) fn read_ficr_temp_t3_t(&self) -> MemResult<u8> {
        todo!("read FICR T3 T reset value 0x19 mask 0xff")
    }
    #[doc = "FICR T4 T: T (segment end)register."]
    #[inline]
    pub(crate) fn read_ficr_temp_t4_t(&self) -> MemResult<u8> {
        todo!("read FICR T4 T reset value 0x50 mask 0xff")
    }
    #[doc = "FICR TAGHEADER0 MFGID: Default Manufacturer ID: Nordic Semiconductor ASA has ICM 0x5F"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader0_mfgid(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER0 MFGID reset value 0x5f mask 0xff")
    }
    #[doc = "FICR TAGHEADER0 UD1: Unique identifier byte 1"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader0_ud1(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER0 UD1 reset value 0xff mask 0xff")
    }
    #[doc = "FICR TAGHEADER0 UD2: Unique identifier byte 2"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader0_ud2(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER0 UD2 reset value 0xff mask 0xff")
    }
    #[doc = "FICR TAGHEADER0 UD3: Unique identifier byte 3"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader0_ud3(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER0 UD3 reset value 0xff mask 0xff")
    }
    #[doc = "FICR TAGHEADER1 UD4: Unique identifier byte 4"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader1_ud4(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER1 UD4 reset value 0xff mask 0xff")
    }
    #[doc = "FICR TAGHEADER1 UD5: Unique identifier byte 5"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader1_ud5(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER1 UD5 reset value 0xff mask 0xff")
    }
    #[doc = "FICR TAGHEADER1 UD6: Unique identifier byte 6"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader1_ud6(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER1 UD6 reset value 0xff mask 0xff")
    }
    #[doc = "FICR TAGHEADER1 UD7: Unique identifier byte 7"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader1_ud7(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER1 UD7 reset value 0xff mask 0xff")
    }
    #[doc = "FICR TAGHEADER2 UD8: Unique identifier byte 8"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader2_ud8(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER2 UD8 reset value 0xff mask 0xff")
    }
    #[doc = "FICR TAGHEADER2 UD9: Unique identifier byte 9"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader2_ud9(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER2 UD9 reset value 0xff mask 0xff")
    }
    #[doc = "FICR TAGHEADER2 UD10: Unique identifier byte 10"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader2_ud10(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER2 UD10 reset value 0xff mask 0xff")
    }
    #[doc = "FICR TAGHEADER2 UD11: Unique identifier byte 11"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader2_ud11(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER2 UD11 reset value 0xff mask 0xff")
    }
    #[doc = "FICR TAGHEADER3 UD12: Unique identifier byte 12"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader3_ud12(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER3 UD12 reset value 0xff mask 0xff")
    }
    #[doc = "FICR TAGHEADER3 UD13: Unique identifier byte 13"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader3_ud13(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER3 UD13 reset value 0xff mask 0xff")
    }
    #[doc = "FICR TAGHEADER3 UD14: Unique identifier byte 14"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader3_ud14(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER3 UD14 reset value 0xff mask 0xff")
    }
    #[doc = "FICR TAGHEADER3 UD15: Unique identifier byte 15"]
    #[inline]
    pub(crate) fn read_ficr_nfc_tagheader3_ud15(&self) -> MemResult<u8> {
        todo!("read FICR TAGHEADER3 UD15 reset value 0xff mask 0xff")
    }
    #[doc = "UICR UNUSED0: Unspecified"]
    #[inline]
    pub(crate) fn read_uicr_unused0(&self) -> MemResult<u32> {
        todo!("read UICR UNUSED0 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UICR UNUSED0: Unspecified"]
    #[inline]
    pub(crate) fn write_uicr_unused0(&mut self, _value: u32) -> MemResult<()> {
        todo!("write UICR UNUSED0 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UICR UNUSED1: Unspecified"]
    #[inline]
    pub(crate) fn read_uicr_unused1(&self) -> MemResult<u32> {
        todo!("read UICR UNUSED1 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UICR UNUSED1: Unspecified"]
    #[inline]
    pub(crate) fn write_uicr_unused1(&mut self, _value: u32) -> MemResult<()> {
        todo!("write UICR UNUSED1 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UICR UNUSED2: Unspecified"]
    #[inline]
    pub(crate) fn read_uicr_unused2(&self) -> MemResult<u32> {
        todo!("read UICR UNUSED2 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UICR UNUSED2: Unspecified"]
    #[inline]
    pub(crate) fn write_uicr_unused2(&mut self, _value: u32) -> MemResult<()> {
        todo!("write UICR UNUSED2 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UICR UNUSED3: Unspecified"]
    #[inline]
    pub(crate) fn read_uicr_unused3(&self) -> MemResult<u32> {
        todo!("read UICR UNUSED3 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UICR UNUSED3: Unspecified"]
    #[inline]
    pub(crate) fn write_uicr_unused3(&mut self, _value: u32) -> MemResult<()> {
        todo!("write UICR UNUSED3 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UICR NRFFW[%s]: Description collection[0]:  Reserved for Nordic firmware design"]
    #[inline]
    pub(crate) fn read_uicr_nrffwn(&self, _dim: usize) -> MemResult<u32> {
        todo ! ("read UICR NRFFW[%s] reset value 0xffffffff mask 0xffffffffffffffff")
    }
    #[doc = "UICR NRFFW[%s]: Description collection[0]:  Reserved for Nordic firmware design"]
    #[inline]
    pub(crate) fn write_uicr_nrffwn(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UICR NRFFW[%s] reset value 0xffffffff mask 0xffffffffffffffff")
    }
    #[doc = "UICR NRFHW[%s]: Description collection[0]:  Reserved for Nordic hardware design"]
    #[inline]
    pub(crate) fn read_uicr_nrfhwn(&self, _dim: usize) -> MemResult<u32> {
        todo ! ("read UICR NRFHW[%s] reset value 0xffffffff mask 0xffffffffffffffff")
    }
    #[doc = "UICR NRFHW[%s]: Description collection[0]:  Reserved for Nordic hardware design"]
    #[inline]
    pub(crate) fn write_uicr_nrfhwn(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UICR NRFHW[%s] reset value 0xffffffff mask 0xffffffffffffffff")
    }
    #[doc = "UICR CUSTOMER[%s]: Description collection[0]:  Reserved for customer"]
    #[inline]
    pub(crate) fn read_uicr_customern(&self, _dim: usize) -> MemResult<u32> {
        todo ! ("read UICR CUSTOMER[%s] reset value 0xffffffff mask 0xffffffffffffffff")
    }
    #[doc = "UICR CUSTOMER[%s]: Description collection[0]:  Reserved for customer"]
    #[inline]
    pub(crate) fn write_uicr_customern(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UICR CUSTOMER[%s] reset value 0xffffffff mask 0xffffffffffffffff")
    }
    #[doc = "UICR PSELRESET[%s] PIN: GPIO number P0.n onto which Reset is exposed"]
    #[inline]
    pub(crate) fn read_uicr_pselresetn_pin(
        &self,
        _dim: usize,
    ) -> MemResult<u8> {
        todo!("read UICR PSELRESET[%s] PIN reset value 0x3f mask 0x3f")
    }
    #[doc = "UICR PSELRESET[%s] PIN: GPIO number P0.n onto which Reset is exposed"]
    #[inline]
    pub(crate) fn write_uicr_pselresetn_pin(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write UICR PSELRESET[%s] PIN reset value 0x3f mask 0x3f")
    }
    #[doc = "UICR PSELRESET[%s] CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_uicr_pselresetn_connect(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read UICR PSELRESET[%s] CONNECT reset value true")
    }
    #[doc = "UICR PSELRESET[%s] CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_uicr_pselresetn_connect(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UICR PSELRESET[%s] CONNECT reset value true")
    }
    #[doc = "UICR APPROTECT PALL: Enable or disable Access Port protection. Any other value than 0xFF being written to this field will enable protection."]
    #[inline]
    pub(crate) fn read_uicr_approtect_pall(&self) -> MemResult<u8> {
        todo!("read UICR APPROTECT PALL reset value 0xff mask 0xff")
    }
    #[doc = "UICR APPROTECT PALL: Enable or disable Access Port protection. Any other value than 0xFF being written to this field will enable protection."]
    #[inline]
    pub(crate) fn write_uicr_approtect_pall(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write UICR APPROTECT PALL reset value 0xff mask 0xff")
    }
    #[doc = "UICR NFCPINS PROTECT: Setting of pins dedicated to NFC functionality"]
    #[inline]
    pub(crate) fn read_uicr_nfcpins_protect(&self) -> MemResult<bool> {
        todo!("read UICR NFCPINS PROTECT reset value true")
    }
    #[doc = "UICR NFCPINS PROTECT: Setting of pins dedicated to NFC functionality"]
    #[inline]
    pub(crate) fn write_uicr_nfcpins_protect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UICR NFCPINS PROTECT reset value true")
    }
    #[doc = "CLOCK TASKS_HFCLKSTART: Start HFCLK crystal oscillator"]
    #[inline]
    pub(crate) fn write_clock_tasks_hfclkstart(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write CLOCK TASKS_HFCLKSTART reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CLOCK TASKS_HFCLKSTOP: Stop HFCLK crystal oscillator"]
    #[inline]
    pub(crate) fn write_clock_tasks_hfclkstop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write CLOCK TASKS_HFCLKSTOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CLOCK TASKS_LFCLKSTART: Start LFCLK source"]
    #[inline]
    pub(crate) fn write_clock_tasks_lfclkstart(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write CLOCK TASKS_LFCLKSTART reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CLOCK TASKS_LFCLKSTOP: Stop LFCLK source"]
    #[inline]
    pub(crate) fn write_clock_tasks_lfclkstop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write CLOCK TASKS_LFCLKSTOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CLOCK TASKS_CAL: Start calibration of LFRC oscillator"]
    #[inline]
    pub(crate) fn write_clock_tasks_cal(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write CLOCK TASKS_CAL reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CLOCK TASKS_CTSTART: Start calibration timer"]
    #[inline]
    pub(crate) fn write_clock_tasks_ctstart(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write CLOCK TASKS_CTSTART reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CLOCK TASKS_CTSTOP: Stop calibration timer"]
    #[inline]
    pub(crate) fn write_clock_tasks_ctstop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write CLOCK TASKS_CTSTOP reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "POWER TASKS_CONSTLAT: Enable constant latency mode"]
    #[inline]
    pub(crate) fn write_power_tasks_constlat(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write POWER TASKS_CONSTLAT reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "POWER TASKS_LOWPWR: Enable low power mode (variable latency)"]
    #[inline]
    pub(crate) fn write_power_tasks_lowpwr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write POWER TASKS_LOWPWR reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "CLOCK EVENTS_HFCLKSTARTED: HFCLK oscillator started"]
    #[inline]
    pub(crate) fn read_clock_events_hfclkstarted(&self) -> MemResult<u32> {
        todo ! ("read CLOCK EVENTS_HFCLKSTARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CLOCK EVENTS_HFCLKSTARTED: HFCLK oscillator started"]
    #[inline]
    pub(crate) fn write_clock_events_hfclkstarted(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write CLOCK EVENTS_HFCLKSTARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CLOCK EVENTS_LFCLKSTARTED: LFCLK started"]
    #[inline]
    pub(crate) fn read_clock_events_lfclkstarted(&self) -> MemResult<u32> {
        Ok(self
            .powerclock
            .event(powerclock::EventId::LFCLKSTARTED)
            .triggered as u32)
    }
    #[doc = "CLOCK EVENTS_LFCLKSTARTED: LFCLK started"]
    #[inline]
    pub(crate) fn write_clock_events_lfclkstarted(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        self.powerclock
            .event_mut(powerclock::EventId::LFCLKSTARTED)
            .triggered = _value != 0;
        Ok(())
    }
    #[doc = "POWER EVENTS_POFWARN: Power failure warning"]
    #[inline]
    pub(crate) fn read_power_events_pofwarn(&self) -> MemResult<u32> {
        todo ! ("read POWER EVENTS_POFWARN reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "POWER EVENTS_POFWARN: Power failure warning"]
    #[inline]
    pub(crate) fn write_power_events_pofwarn(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write POWER EVENTS_POFWARN reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CLOCK EVENTS_DONE: Calibration of LFCLK RC oscillator complete event"]
    #[inline]
    pub(crate) fn read_clock_events_done(&self) -> MemResult<u32> {
        todo!("read CLOCK EVENTS_DONE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CLOCK EVENTS_DONE: Calibration of LFCLK RC oscillator complete event"]
    #[inline]
    pub(crate) fn write_clock_events_done(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write CLOCK EVENTS_DONE reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "CLOCK EVENTS_CTTO: Calibration timer timeout"]
    #[inline]
    pub(crate) fn read_clock_events_ctto(&self) -> MemResult<u32> {
        todo!("read CLOCK EVENTS_CTTO reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CLOCK EVENTS_CTTO: Calibration timer timeout"]
    #[inline]
    pub(crate) fn write_clock_events_ctto(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write CLOCK EVENTS_CTTO reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "POWER EVENTS_SLEEPENTER: CPU entered WFI/WFE sleep"]
    #[inline]
    pub(crate) fn read_power_events_sleepenter(&self) -> MemResult<u32> {
        todo ! ("read POWER EVENTS_SLEEPENTER reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "POWER EVENTS_SLEEPENTER: CPU entered WFI/WFE sleep"]
    #[inline]
    pub(crate) fn write_power_events_sleepenter(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write POWER EVENTS_SLEEPENTER reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "POWER EVENTS_SLEEPEXIT: CPU exited WFI/WFE sleep"]
    #[inline]
    pub(crate) fn read_power_events_sleepexit(&self) -> MemResult<u32> {
        todo ! ("read POWER EVENTS_SLEEPEXIT reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "POWER EVENTS_SLEEPEXIT: CPU exited WFI/WFE sleep"]
    #[inline]
    pub(crate) fn write_power_events_sleepexit(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write POWER EVENTS_SLEEPEXIT reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CLOCK INTENSET HFCLKSTARTED: Write '1' to Enable interrupt for HFCLKSTARTED event"]
    #[inline]
    pub(crate) fn read_powerclock_intenset_hfclkstarted(
        &self,
    ) -> MemResult<bool> {
        Ok(self.powerclock.event(powerclock::EventId::HFCLKSTARTED).on)
    }
    #[doc = "CLOCK INTENSET HFCLKSTARTED: Write '1' to Enable interrupt for HFCLKSTARTED event"]
    #[inline]
    pub(crate) fn write_powerclock_intenset_hfclkstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.powerclock
                .event_mut(powerclock::EventId::HFCLKSTARTED)
                .on = true
        }
        Ok(())
    }
    #[doc = "CLOCK INTENSET LFCLKSTARTED: Write '1' to Enable interrupt for LFCLKSTARTED event"]
    #[inline]
    pub(crate) fn read_powerclock_intenset_lfclkstarted(
        &self,
    ) -> MemResult<bool> {
        Ok(self.powerclock.event(powerclock::EventId::LFCLKSTARTED).on)
    }
    #[doc = "CLOCK INTENSET LFCLKSTARTED: Write '1' to Enable interrupt for LFCLKSTARTED event"]
    #[inline]
    pub(crate) fn write_powerclock_intenset_lfclkstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.powerclock
                .event_mut(powerclock::EventId::LFCLKSTARTED)
                .on = true
        }
        Ok(())
    }
    #[doc = "POWER INTENSET POFWARN: Write '1' to Enable interrupt for POFWARN event"]
    #[inline]
    pub(crate) fn read_powerclock_intenset_pofwarn(&self) -> MemResult<bool> {
        Ok(self.powerclock.event(powerclock::EventId::POFWARN).on)
    }
    #[doc = "POWER INTENSET POFWARN: Write '1' to Enable interrupt for POFWARN event"]
    #[inline]
    pub(crate) fn write_powerclock_intenset_pofwarn(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.powerclock.event_mut(powerclock::EventId::POFWARN).on = true
        }
        Ok(())
    }
    #[doc = "CLOCK INTENSET DONE: Write '1' to Enable interrupt for DONE event"]
    #[inline]
    pub(crate) fn read_powerclock_intenset_done(&self) -> MemResult<bool> {
        Ok(self.powerclock.event(powerclock::EventId::DONE).on)
    }
    #[doc = "CLOCK INTENSET DONE: Write '1' to Enable interrupt for DONE event"]
    #[inline]
    pub(crate) fn write_powerclock_intenset_done(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.powerclock.event_mut(powerclock::EventId::DONE).on = true
        }
        Ok(())
    }
    #[doc = "CLOCK INTENSET CTTO: Write '1' to Enable interrupt for CTTO event"]
    #[inline]
    pub(crate) fn read_powerclock_intenset_ctto(&self) -> MemResult<bool> {
        Ok(self.powerclock.event(powerclock::EventId::CTTO).on)
    }
    #[doc = "CLOCK INTENSET CTTO: Write '1' to Enable interrupt for CTTO event"]
    #[inline]
    pub(crate) fn write_powerclock_intenset_ctto(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.powerclock.event_mut(powerclock::EventId::CTTO).on = true
        }
        Ok(())
    }
    #[doc = "POWER INTENSET SLEEPENTER: Write '1' to Enable interrupt for SLEEPENTER event"]
    #[inline]
    pub(crate) fn read_powerclock_intenset_sleepenter(
        &self,
    ) -> MemResult<bool> {
        Ok(self.powerclock.event(powerclock::EventId::SLEEPENTER).on)
    }
    #[doc = "POWER INTENSET SLEEPENTER: Write '1' to Enable interrupt for SLEEPENTER event"]
    #[inline]
    pub(crate) fn write_powerclock_intenset_sleepenter(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.powerclock.event_mut(powerclock::EventId::SLEEPENTER).on = true
        }
        Ok(())
    }
    #[doc = "POWER INTENSET SLEEPEXIT: Write '1' to Enable interrupt for SLEEPEXIT event"]
    #[inline]
    pub(crate) fn read_powerclock_intenset_sleepexit(&self) -> MemResult<bool> {
        Ok(self.powerclock.event(powerclock::EventId::SLEEPEXIT).on)
    }
    #[doc = "POWER INTENSET SLEEPEXIT: Write '1' to Enable interrupt for SLEEPEXIT event"]
    #[inline]
    pub(crate) fn write_powerclock_intenset_sleepexit(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.powerclock.event_mut(powerclock::EventId::SLEEPEXIT).on = true
        }
        Ok(())
    }
    #[doc = "CLOCK INTENCLR HFCLKSTARTED: Write '1' to Disable interrupt for HFCLKSTARTED event"]
    #[inline]
    pub(crate) fn read_powerclock_intenclr_hfclkstarted(
        &self,
    ) -> MemResult<bool> {
        Ok(self.powerclock.event(powerclock::EventId::HFCLKSTARTED).on)
    }
    #[doc = "CLOCK INTENCLR HFCLKSTARTED: Write '1' to Disable interrupt for HFCLKSTARTED event"]
    #[inline]
    pub(crate) fn write_powerclock_intenclr_hfclkstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.powerclock
                .event_mut(powerclock::EventId::HFCLKSTARTED)
                .on = false
        }
        Ok(())
    }
    #[doc = "CLOCK INTENCLR LFCLKSTARTED: Write '1' to Disable interrupt for LFCLKSTARTED event"]
    #[inline]
    pub(crate) fn read_powerclock_intenclr_lfclkstarted(
        &self,
    ) -> MemResult<bool> {
        Ok(self.powerclock.event(powerclock::EventId::LFCLKSTARTED).on)
    }
    #[doc = "CLOCK INTENCLR LFCLKSTARTED: Write '1' to Disable interrupt for LFCLKSTARTED event"]
    #[inline]
    pub(crate) fn write_powerclock_intenclr_lfclkstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.powerclock
                .event_mut(powerclock::EventId::LFCLKSTARTED)
                .on = false
        }
        Ok(())
    }
    #[doc = "POWER INTENCLR POFWARN: Write '1' to Disable interrupt for POFWARN event"]
    #[inline]
    pub(crate) fn read_powerclock_intenclr_pofwarn(&self) -> MemResult<bool> {
        Ok(self.powerclock.event(powerclock::EventId::POFWARN).on)
    }
    #[doc = "POWER INTENCLR POFWARN: Write '1' to Disable interrupt for POFWARN event"]
    #[inline]
    pub(crate) fn write_powerclock_intenclr_pofwarn(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.powerclock.event_mut(powerclock::EventId::POFWARN).on = false
        }
        Ok(())
    }
    #[doc = "CLOCK INTENCLR DONE: Write '1' to Disable interrupt for DONE event"]
    #[inline]
    pub(crate) fn read_powerclock_intenclr_done(&self) -> MemResult<bool> {
        Ok(self.powerclock.event(powerclock::EventId::DONE).on)
    }
    #[doc = "CLOCK INTENCLR DONE: Write '1' to Disable interrupt for DONE event"]
    #[inline]
    pub(crate) fn write_powerclock_intenclr_done(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.powerclock.event_mut(powerclock::EventId::DONE).on = false
        }
        Ok(())
    }
    #[doc = "CLOCK INTENCLR CTTO: Write '1' to Disable interrupt for CTTO event"]
    #[inline]
    pub(crate) fn read_powerclock_intenclr_ctto(&self) -> MemResult<bool> {
        Ok(self.powerclock.event(powerclock::EventId::CTTO).on)
    }
    #[doc = "CLOCK INTENCLR CTTO: Write '1' to Disable interrupt for CTTO event"]
    #[inline]
    pub(crate) fn write_powerclock_intenclr_ctto(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.powerclock.event_mut(powerclock::EventId::CTTO).on = false
        }
        Ok(())
    }
    #[doc = "POWER INTENCLR SLEEPENTER: Write '1' to Disable interrupt for SLEEPENTER event"]
    #[inline]
    pub(crate) fn read_powerclock_intenclr_sleepenter(
        &self,
    ) -> MemResult<bool> {
        Ok(self.powerclock.event(powerclock::EventId::SLEEPENTER).on)
    }
    #[doc = "POWER INTENCLR SLEEPENTER: Write '1' to Disable interrupt for SLEEPENTER event"]
    #[inline]
    pub(crate) fn write_powerclock_intenclr_sleepenter(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.powerclock.event_mut(powerclock::EventId::SLEEPENTER).on = false
        }
        Ok(())
    }
    #[doc = "POWER INTENCLR SLEEPEXIT: Write '1' to Disable interrupt for SLEEPEXIT event"]
    #[inline]
    pub(crate) fn read_powerclock_intenclr_sleepexit(&self) -> MemResult<bool> {
        Ok(self.powerclock.event(powerclock::EventId::SLEEPEXIT).on)
    }
    #[doc = "POWER INTENCLR SLEEPEXIT: Write '1' to Disable interrupt for SLEEPEXIT event"]
    #[inline]
    pub(crate) fn write_powerclock_intenclr_sleepexit(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.powerclock.event_mut(powerclock::EventId::SLEEPEXIT).on = false
        }
        Ok(())
    }
    #[doc = "POWER RESETREAS RESETPIN: Reset from pin-reset detected"]
    #[inline]
    pub(crate) fn read_power_resetreas_resetpin(&self) -> MemResult<bool> {
        todo!("read POWER RESETREAS RESETPIN reset value false")
    }
    #[doc = "POWER RESETREAS RESETPIN: Reset from pin-reset detected"]
    #[inline]
    pub(crate) fn write_power_resetreas_resetpin(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER RESETREAS RESETPIN reset value false")
    }
    #[doc = "POWER RESETREAS DOG: Reset from watchdog detected"]
    #[inline]
    pub(crate) fn read_power_resetreas_dog(&self) -> MemResult<bool> {
        todo!("read POWER RESETREAS DOG reset value false")
    }
    #[doc = "POWER RESETREAS DOG: Reset from watchdog detected"]
    #[inline]
    pub(crate) fn write_power_resetreas_dog(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER RESETREAS DOG reset value false")
    }
    #[doc = "POWER RESETREAS SREQ: Reset from soft reset detected"]
    #[inline]
    pub(crate) fn read_power_resetreas_sreq(&self) -> MemResult<bool> {
        todo!("read POWER RESETREAS SREQ reset value false")
    }
    #[doc = "POWER RESETREAS SREQ: Reset from soft reset detected"]
    #[inline]
    pub(crate) fn write_power_resetreas_sreq(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER RESETREAS SREQ reset value false")
    }
    #[doc = "POWER RESETREAS LOCKUP: Reset from CPU lock-up detected"]
    #[inline]
    pub(crate) fn read_power_resetreas_lockup(&self) -> MemResult<bool> {
        todo!("read POWER RESETREAS LOCKUP reset value false")
    }
    #[doc = "POWER RESETREAS LOCKUP: Reset from CPU lock-up detected"]
    #[inline]
    pub(crate) fn write_power_resetreas_lockup(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER RESETREAS LOCKUP reset value false")
    }
    #[doc = "POWER RESETREAS OFF: Reset due to wake up from System OFF mode when wakeup is triggered from DETECT signal from GPIO"]
    #[inline]
    pub(crate) fn read_power_resetreas_off(&self) -> MemResult<bool> {
        todo!("read POWER RESETREAS OFF reset value false")
    }
    #[doc = "POWER RESETREAS OFF: Reset due to wake up from System OFF mode when wakeup is triggered from DETECT signal from GPIO"]
    #[inline]
    pub(crate) fn write_power_resetreas_off(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER RESETREAS OFF reset value false")
    }
    #[doc = "POWER RESETREAS LPCOMP: Reset due to wake up from System OFF mode when wakeup is triggered from ANADETECT signal from LPCOMP"]
    #[inline]
    pub(crate) fn read_power_resetreas_lpcomp(&self) -> MemResult<bool> {
        todo!("read POWER RESETREAS LPCOMP reset value false")
    }
    #[doc = "POWER RESETREAS LPCOMP: Reset due to wake up from System OFF mode when wakeup is triggered from ANADETECT signal from LPCOMP"]
    #[inline]
    pub(crate) fn write_power_resetreas_lpcomp(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER RESETREAS LPCOMP reset value false")
    }
    #[doc = "POWER RESETREAS DIF: Reset due to wake up from System OFF mode when wakeup is triggered from entering into debug interface mode"]
    #[inline]
    pub(crate) fn read_power_resetreas_dif(&self) -> MemResult<bool> {
        todo!("read POWER RESETREAS DIF reset value false")
    }
    #[doc = "POWER RESETREAS DIF: Reset due to wake up from System OFF mode when wakeup is triggered from entering into debug interface mode"]
    #[inline]
    pub(crate) fn write_power_resetreas_dif(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER RESETREAS DIF reset value false")
    }
    #[doc = "POWER RESETREAS NFC: Reset due to wake up from System OFF mode by NFC field detect"]
    #[inline]
    pub(crate) fn read_power_resetreas_nfc(&self) -> MemResult<bool> {
        todo!("read POWER RESETREAS NFC reset value false")
    }
    #[doc = "POWER RESETREAS NFC: Reset due to wake up from System OFF mode by NFC field detect"]
    #[inline]
    pub(crate) fn write_power_resetreas_nfc(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER RESETREAS NFC reset value false")
    }
    #[doc = "CLOCK HFCLKRUN STATUS: HFCLKSTART task triggered or not"]
    #[inline]
    pub(crate) fn read_clock_hfclkrun_status(&self) -> MemResult<bool> {
        todo!("read CLOCK HFCLKRUN STATUS reset value false")
    }
    #[doc = "CLOCK HFCLKSTAT SRC: Source of HFCLK"]
    #[inline]
    pub(crate) fn read_clock_hfclkstat_src(&self) -> MemResult<bool> {
        todo!("read CLOCK HFCLKSTAT SRC reset value false")
    }
    #[doc = "CLOCK HFCLKSTAT STATE: HFCLK state"]
    #[inline]
    pub(crate) fn read_clock_hfclkstat_state(&self) -> MemResult<bool> {
        todo!("read CLOCK HFCLKSTAT STATE reset value false")
    }
    #[doc = "CLOCK LFCLKRUN STATUS: LFCLKSTART task triggered or not"]
    #[inline]
    pub(crate) fn read_clock_lfclkrun_status(&self) -> MemResult<bool> {
        todo!("read CLOCK LFCLKRUN STATUS reset value false")
    }
    #[doc = "CLOCK LFCLKSTAT SRC: Source of LFCLK"]
    #[inline]
    pub(crate) fn read_clock_lfclkstat_src(&self) -> MemResult<u8> {
        todo!("read CLOCK LFCLKSTAT SRC reset value 0x00 mask 0x03")
    }
    #[doc = "CLOCK LFCLKSTAT STATE: LFCLK state"]
    #[inline]
    pub(crate) fn read_clock_lfclkstat_state(&self) -> MemResult<bool> {
        todo!("read CLOCK LFCLKSTAT STATE reset value false")
    }
    #[doc = "CLOCK LFCLKSRCCOPY SRC: Clock source"]
    #[inline]
    pub(crate) fn read_clock_lfclksrccopy_src(&self) -> MemResult<u8> {
        todo!("read CLOCK LFCLKSRCCOPY SRC reset value 0x00 mask 0x03")
    }
    #[doc = "POWER RAMSTATUS RAMBLOCK0: RAM block 0 is on or off/powering up"]
    #[inline]
    pub(crate) fn read_power_ramstatus_ramblock0(&self) -> MemResult<bool> {
        Ok(self.ram[0].is_on())
    }
    #[doc = "POWER RAMSTATUS RAMBLOCK1: RAM block 1 is on or off/powering up"]
    #[inline]
    pub(crate) fn read_power_ramstatus_ramblock1(&self) -> MemResult<bool> {
        Ok(self.ram[1].is_on())
    }
    #[doc = "POWER RAMSTATUS RAMBLOCK2: RAM block 2 is on or off/powering up"]
    #[inline]
    pub(crate) fn read_power_ramstatus_ramblock2(&self) -> MemResult<bool> {
        Ok(self.ram[2].is_on())
    }
    #[doc = "POWER RAMSTATUS RAMBLOCK3: RAM block 3 is on or off/powering up"]
    #[inline]
    pub(crate) fn read_power_ramstatus_ramblock3(&self) -> MemResult<bool> {
        Ok(self.ram[3].is_on())
    }
    #[doc = "POWER SYSTEMOFF SYSTEMOFF: Enable System OFF mode"]
    #[inline]
    pub(crate) fn write_power_systemoff_systemoff(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER SYSTEMOFF SYSTEMOFF reset value false")
    }
    #[doc = "POWER POFCON POF: Enable or disable power failure comparator"]
    #[inline]
    pub(crate) fn read_power_pofcon_pof(&self) -> MemResult<bool> {
        todo!("read POWER POFCON POF reset value false")
    }
    #[doc = "POWER POFCON POF: Enable or disable power failure comparator"]
    #[inline]
    pub(crate) fn write_power_pofcon_pof(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER POFCON POF reset value false")
    }
    #[doc = "POWER POFCON THRESHOLD: Power failure comparator threshold setting"]
    #[inline]
    pub(crate) fn read_power_pofcon_threshold(&self) -> MemResult<u8> {
        todo!("read POWER POFCON THRESHOLD reset value 0x00 mask 0x0f")
    }
    #[doc = "POWER POFCON THRESHOLD: Power failure comparator threshold setting"]
    #[inline]
    pub(crate) fn write_power_pofcon_threshold(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write POWER POFCON THRESHOLD reset value 0x00 mask 0x0f")
    }
    #[doc = "CLOCK LFCLKSRC SRC: Clock source"]
    #[inline]
    pub(crate) fn read_clock_lfclksrc_src(&self) -> MemResult<u8> {
        Ok(self.powerclock.source() as u8)
    }
    #[doc = "CLOCK LFCLKSRC SRC: Clock source"]
    #[inline]
    pub(crate) fn write_clock_lfclksrc_src(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.powerclock.set_source(
            powerclock::Source::try_from(_value)
                .map_err(|_| MemError::WriteViolation)?,
        ))
    }
    #[doc = "CLOCK LFCLKSRC BYPASS: Enable or disable bypass of LFCLK crystal oscillator with external clock source"]
    #[inline]
    pub(crate) fn read_clock_lfclksrc_bypass(&self) -> MemResult<bool> {
        Ok(self.powerclock.bypass())
    }
    #[doc = "CLOCK LFCLKSRC BYPASS: Enable or disable bypass of LFCLK crystal oscillator with external clock source"]
    #[inline]
    pub(crate) fn write_clock_lfclksrc_bypass(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.powerclock.set_bypass(_value))
    }
    #[doc = "CLOCK LFCLKSRC EXTERNAL: Enable or disable external source for LFCLK"]
    #[inline]
    pub(crate) fn read_clock_lfclksrc_external(&self) -> MemResult<bool> {
        Ok(self.powerclock.external())
    }
    #[doc = "CLOCK LFCLKSRC EXTERNAL: Enable or disable external source for LFCLK"]
    #[inline]
    pub(crate) fn write_clock_lfclksrc_external(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.powerclock.set_external(_value))
    }
    #[doc = "POWER GPREGRET GPREGRET: General purpose retention register"]
    #[inline]
    pub(crate) fn read_power_gpregret_gpregret(&self) -> MemResult<u8> {
        todo!("read POWER GPREGRET GPREGRET reset value 0x00 mask 0xff")
    }
    #[doc = "POWER GPREGRET GPREGRET: General purpose retention register"]
    #[inline]
    pub(crate) fn write_power_gpregret_gpregret(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write POWER GPREGRET GPREGRET reset value 0x00 mask 0xff")
    }
    #[doc = "POWER GPREGRET2 GPREGRET: General purpose retention register"]
    #[inline]
    pub(crate) fn read_power_gpregret2_gpregret(&self) -> MemResult<u8> {
        todo!("read POWER GPREGRET2 GPREGRET reset value 0x00 mask 0xff")
    }
    #[doc = "POWER GPREGRET2 GPREGRET: General purpose retention register"]
    #[inline]
    pub(crate) fn write_power_gpregret2_gpregret(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write POWER GPREGRET2 GPREGRET reset value 0x00 mask 0xff")
    }
    #[doc = "POWER RAMON ONRAM0: Keep RAM block 0 on or off in system ON Mode"]
    #[inline]
    pub(crate) fn read_power_ramon_onram0(&self) -> MemResult<bool> {
        Ok(self.ram[0].is_keep_on())
    }
    #[doc = "POWER RAMON ONRAM0: Keep RAM block 0 on or off in system ON Mode"]
    #[inline]
    pub(crate) fn write_power_ramon_onram0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ram[0].set_keep_on(_value))
    }
    #[doc = "POWER RAMON ONRAM1: Keep RAM block 1 on or off in system ON Mode"]
    #[inline]
    pub(crate) fn read_power_ramon_onram1(&self) -> MemResult<bool> {
        Ok(self.ram[1].is_keep_on())
    }
    #[doc = "POWER RAMON ONRAM1: Keep RAM block 1 on or off in system ON Mode"]
    #[inline]
    pub(crate) fn write_power_ramon_onram1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ram[1].set_keep_on(_value))
    }
    #[doc = "POWER RAMON OFFRAM0: Keep retention on RAM block 0 when RAM block is switched off"]
    #[inline]
    pub(crate) fn read_power_ramon_offram0(&self) -> MemResult<bool> {
        Ok(self.ram[0].is_retain_on())
    }
    #[doc = "POWER RAMON OFFRAM0: Keep retention on RAM block 0 when RAM block is switched off"]
    #[inline]
    pub(crate) fn write_power_ramon_offram0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ram[0].set_retain_on(_value))
    }
    #[doc = "POWER RAMON OFFRAM1: Keep retention on RAM block 1 when RAM block is switched off"]
    #[inline]
    pub(crate) fn read_power_ramon_offram1(&self) -> MemResult<bool> {
        Ok(self.ram[1].is_retain_on())
    }
    #[doc = "POWER RAMON OFFRAM1: Keep retention on RAM block 1 when RAM block is switched off"]
    #[inline]
    pub(crate) fn write_power_ramon_offram1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ram[1].set_retain_on(_value))
    }
    #[doc = "CLOCK CTIV CTIV: Calibration timer interval in multiple of 0.25 seconds. Range: 0.25 seconds to 31.75 seconds."]
    #[inline]
    pub(crate) fn read_clock_ctiv_ctiv(&self) -> MemResult<u8> {
        todo!("read CLOCK CTIV CTIV reset value 0x00 mask 0x7f")
    }
    #[doc = "CLOCK CTIV CTIV: Calibration timer interval in multiple of 0.25 seconds. Range: 0.25 seconds to 31.75 seconds."]
    #[inline]
    pub(crate) fn write_clock_ctiv_ctiv(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write CLOCK CTIV CTIV reset value 0x00 mask 0x7f")
    }
    #[doc = "POWER RAMONB ONRAM2: Keep RAM block 2 on or off in system ON Mode"]
    #[inline]
    pub(crate) fn read_power_ramonb_onram2(&self) -> MemResult<bool> {
        Ok(self.ram[2].is_keep_on())
    }
    #[doc = "POWER RAMONB ONRAM2: Keep RAM block 2 on or off in system ON Mode"]
    #[inline]
    pub(crate) fn write_power_ramonb_onram2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ram[2].set_keep_on(_value))
    }
    #[doc = "POWER RAMONB ONRAM3: Keep RAM block 3 on or off in system ON Mode"]
    #[inline]
    pub(crate) fn read_power_ramonb_onram3(&self) -> MemResult<bool> {
        Ok(self.ram[3].is_keep_on())
    }
    #[doc = "POWER RAMONB ONRAM3: Keep RAM block 3 on or off in system ON Mode"]
    #[inline]
    pub(crate) fn write_power_ramonb_onram3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ram[3].set_keep_on(_value))
    }
    #[doc = "POWER RAMONB OFFRAM2: Keep retention on RAM block 2 when RAM block is switched off"]
    #[inline]
    pub(crate) fn read_power_ramonb_offram2(&self) -> MemResult<bool> {
        Ok(self.ram[2].is_retain_on())
    }
    #[doc = "POWER RAMONB OFFRAM2: Keep retention on RAM block 2 when RAM block is switched off"]
    #[inline]
    pub(crate) fn write_power_ramonb_offram2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ram[2].set_retain_on(_value))
    }
    #[doc = "POWER RAMONB OFFRAM3: Keep retention on RAM block 3 when RAM block is switched off"]
    #[inline]
    pub(crate) fn read_power_ramonb_offram3(&self) -> MemResult<bool> {
        Ok(self.ram[3].is_retain_on())
    }
    #[doc = "POWER RAMONB OFFRAM3: Keep retention on RAM block 3 when RAM block is switched off"]
    #[inline]
    pub(crate) fn write_power_ramonb_offram3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ram[3].set_retain_on(_value))
    }
    #[doc = "CLOCK TRACECONFIG TRACEPORTSPEED: Speed of Trace Port clock. Note that the TRACECLK pin will output this clock divided by two."]
    #[inline]
    pub(crate) fn read_clock_traceconfig_traceportspeed(
        &self,
    ) -> MemResult<u8> {
        todo!(
            "read CLOCK TRACECONFIG TRACEPORTSPEED reset value 0x00 mask 0x03"
        )
    }
    #[doc = "CLOCK TRACECONFIG TRACEPORTSPEED: Speed of Trace Port clock. Note that the TRACECLK pin will output this clock divided by two."]
    #[inline]
    pub(crate) fn write_clock_traceconfig_traceportspeed(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!(
            "write CLOCK TRACECONFIG TRACEPORTSPEED reset value 0x00 mask 0x03"
        )
    }
    #[doc = "CLOCK TRACECONFIG TRACEMUX: Pin multiplexing of trace signals."]
    #[inline]
    pub(crate) fn read_clock_traceconfig_tracemux(&self) -> MemResult<u8> {
        todo!("read CLOCK TRACECONFIG TRACEMUX reset value 0x00 mask 0x03")
    }
    #[doc = "CLOCK TRACECONFIG TRACEMUX: Pin multiplexing of trace signals."]
    #[inline]
    pub(crate) fn write_clock_traceconfig_tracemux(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write CLOCK TRACECONFIG TRACEMUX reset value 0x00 mask 0x03")
    }
    #[doc = "POWER DCDCEN DCDCEN: Enable or disable DC/DC converter"]
    #[inline]
    pub(crate) fn read_power_dcdcen_dcdcen(&self) -> MemResult<bool> {
        todo!("read POWER DCDCEN DCDCEN reset value false")
    }
    #[doc = "POWER DCDCEN DCDCEN: Enable or disable DC/DC converter"]
    #[inline]
    pub(crate) fn write_power_dcdcen_dcdcen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER DCDCEN DCDCEN reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION0: Enable protection for region 0. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region0(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION0 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION0: Enable protection for region 0. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION0 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION1: Enable protection for region 1. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region1(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION1 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION1: Enable protection for region 1. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION1 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION2: Enable protection for region 2. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region2(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION2 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION2: Enable protection for region 2. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION2 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION3: Enable protection for region 3. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region3(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION3 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION3: Enable protection for region 3. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION3 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION4: Enable protection for region 4. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region4(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION4 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION4: Enable protection for region 4. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region4(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION4 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION5: Enable protection for region 5. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region5(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION5 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION5: Enable protection for region 5. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION5 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION6: Enable protection for region 6. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region6(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION6 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION6: Enable protection for region 6. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region6(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION6 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION7: Enable protection for region 7. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region7(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION7 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION7: Enable protection for region 7. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region7(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION7 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION8: Enable protection for region 8. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region8(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION8 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION8: Enable protection for region 8. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region8(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION8 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION9: Enable protection for region 9. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region9(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION9 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION9: Enable protection for region 9. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region9(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION9 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION10: Enable protection for region 10. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region10(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION10 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION10: Enable protection for region 10. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region10(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION10 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION11: Enable protection for region 11. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region11(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION11 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION11: Enable protection for region 11. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region11(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION11 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION12: Enable protection for region 12. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region12(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION12 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION12: Enable protection for region 12. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region12(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION12 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION13: Enable protection for region 13. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region13(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION13 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION13: Enable protection for region 13. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region13(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION13 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION14: Enable protection for region 14. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region14(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION14 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION14: Enable protection for region 14. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region14(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION14 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION15: Enable protection for region 15. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region15(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION15 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION15: Enable protection for region 15. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region15(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION15 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION16: Enable protection for region 16. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region16(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION16 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION16: Enable protection for region 16. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region16(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION16 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION17: Enable protection for region 17. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region17(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION17 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION17: Enable protection for region 17. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region17(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION17 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION18: Enable protection for region 18. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region18(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION18 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION18: Enable protection for region 18. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region18(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION18 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION19: Enable protection for region 19. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region19(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION19 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION19: Enable protection for region 19. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region19(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION19 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION20: Enable protection for region 20. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region20(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION20 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION20: Enable protection for region 20. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region20(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION20 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION21: Enable protection for region 21. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region21(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION21 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION21: Enable protection for region 21. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region21(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION21 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION22: Enable protection for region 22. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region22(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION22 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION22: Enable protection for region 22. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region22(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION22 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION23: Enable protection for region 23. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region23(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION23 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION23: Enable protection for region 23. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region23(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION23 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION24: Enable protection for region 24. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region24(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION24 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION24: Enable protection for region 24. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region24(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION24 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION25: Enable protection for region 25. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region25(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION25 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION25: Enable protection for region 25. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region25(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION25 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION26: Enable protection for region 26. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region26(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION26 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION26: Enable protection for region 26. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region26(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION26 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION27: Enable protection for region 27. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region27(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION27 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION27: Enable protection for region 27. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region27(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION27 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION28: Enable protection for region 28. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region28(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION28 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION28: Enable protection for region 28. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region28(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION28 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION29: Enable protection for region 29. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region29(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION29 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION29: Enable protection for region 29. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region29(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION29 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION30: Enable protection for region 30. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region30(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION30 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION30: Enable protection for region 30. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region30(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION30 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION31: Enable protection for region 31. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config0_region31(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG0 REGION31 reset value false")
    }
    #[doc = "BPROT CONFIG0 REGION31: Enable protection for region 31. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config0_region31(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG0 REGION31 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION32: Enable protection for region 32. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region32(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION32 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION32: Enable protection for region 32. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region32(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION32 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION33: Enable protection for region 33. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region33(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION33 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION33: Enable protection for region 33. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region33(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION33 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION34: Enable protection for region 34. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region34(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION34 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION34: Enable protection for region 34. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region34(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION34 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION35: Enable protection for region 35. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region35(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION35 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION35: Enable protection for region 35. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region35(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION35 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION36: Enable protection for region 36. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region36(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION36 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION36: Enable protection for region 36. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region36(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION36 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION37: Enable protection for region 37. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region37(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION37 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION37: Enable protection for region 37. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region37(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION37 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION38: Enable protection for region 38. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region38(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION38 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION38: Enable protection for region 38. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region38(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION38 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION39: Enable protection for region 39. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region39(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION39 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION39: Enable protection for region 39. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region39(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION39 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION40: Enable protection for region 40. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region40(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION40 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION40: Enable protection for region 40. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region40(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION40 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION41: Enable protection for region 41. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region41(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION41 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION41: Enable protection for region 41. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region41(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION41 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION42: Enable protection for region 42. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region42(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION42 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION42: Enable protection for region 42. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region42(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION42 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION43: Enable protection for region 43. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region43(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION43 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION43: Enable protection for region 43. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region43(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION43 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION44: Enable protection for region 44. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region44(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION44 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION44: Enable protection for region 44. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region44(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION44 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION45: Enable protection for region 45. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region45(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION45 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION45: Enable protection for region 45. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region45(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION45 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION46: Enable protection for region 46. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region46(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION46 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION46: Enable protection for region 46. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region46(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION46 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION47: Enable protection for region 47. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region47(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION47 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION47: Enable protection for region 47. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region47(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION47 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION48: Enable protection for region 48. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region48(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION48 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION48: Enable protection for region 48. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region48(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION48 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION49: Enable protection for region 49. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region49(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION49 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION49: Enable protection for region 49. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region49(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION49 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION50: Enable protection for region 50. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region50(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION50 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION50: Enable protection for region 50. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region50(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION50 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION51: Enable protection for region 51. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region51(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION51 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION51: Enable protection for region 51. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region51(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION51 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION52: Enable protection for region 52. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region52(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION52 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION52: Enable protection for region 52. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region52(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION52 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION53: Enable protection for region 53. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region53(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION53 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION53: Enable protection for region 53. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region53(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION53 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION54: Enable protection for region 54. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region54(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION54 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION54: Enable protection for region 54. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region54(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION54 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION55: Enable protection for region 55. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region55(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION55 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION55: Enable protection for region 55. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region55(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION55 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION56: Enable protection for region 56. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region56(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION56 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION56: Enable protection for region 56. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region56(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION56 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION57: Enable protection for region 57. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region57(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION57 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION57: Enable protection for region 57. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region57(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION57 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION58: Enable protection for region 58. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region58(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION58 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION58: Enable protection for region 58. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region58(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION58 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION59: Enable protection for region 59. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region59(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION59 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION59: Enable protection for region 59. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region59(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION59 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION60: Enable protection for region 60. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region60(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION60 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION60: Enable protection for region 60. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region60(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION60 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION61: Enable protection for region 61. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region61(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION61 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION61: Enable protection for region 61. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region61(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION61 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION62: Enable protection for region 62. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region62(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION62 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION62: Enable protection for region 62. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region62(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION62 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION63: Enable protection for region 63. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config1_region63(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG1 REGION63 reset value false")
    }
    #[doc = "BPROT CONFIG1 REGION63: Enable protection for region 63. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config1_region63(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG1 REGION63 reset value false")
    }
    #[doc = "BPROT DISABLEINDEBUG DISABLEINDEBUG: Disable the protection mechanism for NVM regions while in debug interface mode. This register will only disable the protection mechanism if the device is in debug interface mode."]
    #[inline]
    pub(crate) fn read_bprot_disableindebug_disableindebug(
        &self,
    ) -> MemResult<bool> {
        todo!("read BPROT DISABLEINDEBUG DISABLEINDEBUG reset value true")
    }
    #[doc = "BPROT DISABLEINDEBUG DISABLEINDEBUG: Disable the protection mechanism for NVM regions while in debug interface mode. This register will only disable the protection mechanism if the device is in debug interface mode."]
    #[inline]
    pub(crate) fn write_bprot_disableindebug_disableindebug(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT DISABLEINDEBUG DISABLEINDEBUG reset value true")
    }
    #[doc = "BPROT UNUSED0: Unspecified"]
    #[inline]
    pub(crate) fn read_bprot_unused0(&self) -> MemResult<u32> {
        todo!("read BPROT UNUSED0 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "BPROT UNUSED0: Unspecified"]
    #[inline]
    pub(crate) fn write_bprot_unused0(&mut self, _value: u32) -> MemResult<()> {
        todo!("write BPROT UNUSED0 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "BPROT CONFIG2 REGION64: Enable protection for region 64. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region64(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION64 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION64: Enable protection for region 64. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region64(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION64 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION65: Enable protection for region 65. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region65(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION65 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION65: Enable protection for region 65. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region65(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION65 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION66: Enable protection for region 66. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region66(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION66 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION66: Enable protection for region 66. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region66(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION66 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION67: Enable protection for region 67. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region67(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION67 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION67: Enable protection for region 67. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region67(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION67 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION68: Enable protection for region 68. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region68(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION68 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION68: Enable protection for region 68. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region68(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION68 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION69: Enable protection for region 69. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region69(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION69 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION69: Enable protection for region 69. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region69(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION69 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION70: Enable protection for region 70. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region70(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION70 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION70: Enable protection for region 70. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region70(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION70 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION71: Enable protection for region 71. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region71(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION71 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION71: Enable protection for region 71. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region71(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION71 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION72: Enable protection for region 72. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region72(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION72 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION72: Enable protection for region 72. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region72(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION72 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION73: Enable protection for region 73. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region73(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION73 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION73: Enable protection for region 73. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region73(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION73 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION74: Enable protection for region 74. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region74(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION74 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION74: Enable protection for region 74. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region74(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION74 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION75: Enable protection for region 75. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region75(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION75 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION75: Enable protection for region 75. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region75(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION75 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION76: Enable protection for region 76. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region76(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION76 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION76: Enable protection for region 76. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region76(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION76 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION77: Enable protection for region 77. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region77(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION77 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION77: Enable protection for region 77. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region77(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION77 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION78: Enable protection for region 78. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region78(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION78 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION78: Enable protection for region 78. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region78(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION78 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION79: Enable protection for region 79. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region79(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION79 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION79: Enable protection for region 79. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region79(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION79 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION80: Enable protection for region 80. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region80(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION80 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION80: Enable protection for region 80. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region80(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION80 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION81: Enable protection for region 81. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region81(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION81 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION81: Enable protection for region 81. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region81(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION81 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION82: Enable protection for region 82. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region82(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION82 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION82: Enable protection for region 82. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region82(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION82 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION83: Enable protection for region 83. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region83(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION83 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION83: Enable protection for region 83. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region83(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION83 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION84: Enable protection for region 84. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region84(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION84 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION84: Enable protection for region 84. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region84(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION84 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION85: Enable protection for region 85. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region85(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION85 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION85: Enable protection for region 85. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region85(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION85 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION86: Enable protection for region 86. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region86(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION86 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION86: Enable protection for region 86. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region86(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION86 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION87: Enable protection for region 87. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region87(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION87 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION87: Enable protection for region 87. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region87(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION87 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION88: Enable protection for region 88. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region88(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION88 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION88: Enable protection for region 88. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region88(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION88 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION89: Enable protection for region 89. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region89(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION89 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION89: Enable protection for region 89. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region89(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION89 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION90: Enable protection for region 90. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region90(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION90 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION90: Enable protection for region 90. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region90(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION90 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION91: Enable protection for region 91. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region91(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION91 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION91: Enable protection for region 91. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region91(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION91 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION92: Enable protection for region 92. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region92(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION92 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION92: Enable protection for region 92. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region92(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION92 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION93: Enable protection for region 93. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region93(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION93 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION93: Enable protection for region 93. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region93(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION93 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION94: Enable protection for region 94. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region94(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION94 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION94: Enable protection for region 94. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region94(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION94 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION95: Enable protection for region 95. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config2_region95(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG2 REGION95 reset value false")
    }
    #[doc = "BPROT CONFIG2 REGION95: Enable protection for region 95. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config2_region95(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG2 REGION95 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION96: Enable protection for region 96. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region96(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION96 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION96: Enable protection for region 96. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region96(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION96 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION97: Enable protection for region 97. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region97(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION97 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION97: Enable protection for region 97. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region97(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION97 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION98: Enable protection for region 98. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region98(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION98 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION98: Enable protection for region 98. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region98(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION98 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION99: Enable protection for region 99. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region99(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION99 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION99: Enable protection for region 99. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region99(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION99 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION100: Enable protection for region 100. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region100(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION100 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION100: Enable protection for region 100. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region100(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION100 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION101: Enable protection for region 101. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region101(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION101 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION101: Enable protection for region 101. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region101(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION101 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION102: Enable protection for region 102. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region102(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION102 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION102: Enable protection for region 102. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region102(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION102 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION103: Enable protection for region 103. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region103(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION103 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION103: Enable protection for region 103. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region103(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION103 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION104: Enable protection for region 104. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region104(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION104 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION104: Enable protection for region 104. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region104(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION104 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION105: Enable protection for region 105. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region105(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION105 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION105: Enable protection for region 105. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region105(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION105 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION106: Enable protection for region 106. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region106(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION106 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION106: Enable protection for region 106. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region106(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION106 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION107: Enable protection for region 107. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region107(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION107 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION107: Enable protection for region 107. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region107(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION107 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION108: Enable protection for region 108. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region108(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION108 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION108: Enable protection for region 108. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region108(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION108 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION109: Enable protection for region 109. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region109(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION109 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION109: Enable protection for region 109. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region109(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION109 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION110: Enable protection for region 110. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region110(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION110 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION110: Enable protection for region 110. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region110(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION110 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION111: Enable protection for region 111. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region111(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION111 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION111: Enable protection for region 111. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region111(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION111 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION112: Enable protection for region 112. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region112(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION112 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION112: Enable protection for region 112. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region112(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION112 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION113: Enable protection for region 113. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region113(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION113 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION113: Enable protection for region 113. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region113(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION113 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION114: Enable protection for region 114. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region114(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION114 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION114: Enable protection for region 114. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region114(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION114 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION115: Enable protection for region 115. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region115(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION115 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION115: Enable protection for region 115. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region115(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION115 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION116: Enable protection for region 116. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region116(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION116 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION116: Enable protection for region 116. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region116(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION116 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION117: Enable protection for region 117. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region117(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION117 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION117: Enable protection for region 117. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region117(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION117 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION118: Enable protection for region 118. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region118(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION118 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION118: Enable protection for region 118. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region118(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION118 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION119: Enable protection for region 119. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region119(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION119 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION119: Enable protection for region 119. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region119(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION119 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION120: Enable protection for region 120. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region120(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION120 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION120: Enable protection for region 120. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region120(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION120 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION121: Enable protection for region 121. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region121(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION121 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION121: Enable protection for region 121. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region121(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION121 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION122: Enable protection for region 122. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region122(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION122 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION122: Enable protection for region 122. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region122(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION122 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION123: Enable protection for region 123. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region123(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION123 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION123: Enable protection for region 123. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region123(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION123 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION124: Enable protection for region 124. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region124(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION124 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION124: Enable protection for region 124. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region124(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION124 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION125: Enable protection for region 125. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region125(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION125 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION125: Enable protection for region 125. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region125(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION125 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION126: Enable protection for region 126. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region126(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION126 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION126: Enable protection for region 126. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region126(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION126 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION127: Enable protection for region 127. Write '0' has no effect."]
    #[inline]
    pub(crate) fn read_bprot_config3_region127(&self) -> MemResult<bool> {
        todo!("read BPROT CONFIG3 REGION127 reset value false")
    }
    #[doc = "BPROT CONFIG3 REGION127: Enable protection for region 127. Write '0' has no effect."]
    #[inline]
    pub(crate) fn write_bprot_config3_region127(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write BPROT CONFIG3 REGION127 reset value false")
    }
    #[doc = "POWER POWER S0POWER: Keep RAM section S0 ON or OFF in System ON mode."]
    #[inline]
    pub(crate) fn read_power_ramn_power_s0power(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read POWER POWER S0POWER reset value true")
    }
    #[doc = "POWER POWER S0POWER: Keep RAM section S0 ON or OFF in System ON mode."]
    #[inline]
    pub(crate) fn write_power_ramn_power_s0power(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER POWER S0POWER reset value true")
    }
    #[doc = "POWER POWER S1POWER: Keep RAM section S1 ON or OFF in System ON mode."]
    #[inline]
    pub(crate) fn read_power_ramn_power_s1power(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read POWER POWER S1POWER reset value true")
    }
    #[doc = "POWER POWER S1POWER: Keep RAM section S1 ON or OFF in System ON mode."]
    #[inline]
    pub(crate) fn write_power_ramn_power_s1power(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER POWER S1POWER reset value true")
    }
    #[doc = "POWER POWER S0RETENTION: Keep retention on RAM section S0 when RAM section is in OFF"]
    #[inline]
    pub(crate) fn read_power_ramn_power_s0retention(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read POWER POWER S0RETENTION reset value false")
    }
    #[doc = "POWER POWER S0RETENTION: Keep retention on RAM section S0 when RAM section is in OFF"]
    #[inline]
    pub(crate) fn write_power_ramn_power_s0retention(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER POWER S0RETENTION reset value false")
    }
    #[doc = "POWER POWER S1RETENTION: Keep retention on RAM section S1 when RAM section is in OFF"]
    #[inline]
    pub(crate) fn read_power_ramn_power_s1retention(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read POWER POWER S1RETENTION reset value false")
    }
    #[doc = "POWER POWER S1RETENTION: Keep retention on RAM section S1 when RAM section is in OFF"]
    #[inline]
    pub(crate) fn write_power_ramn_power_s1retention(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER POWER S1RETENTION reset value false")
    }
    #[doc = "POWER POWERSET S0POWER: Keep RAM section S0 of RAM0 on or off in System ON mode"]
    #[inline]
    pub(crate) fn write_power_ramn_powerset_s0power(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER POWERSET S0POWER reset value true")
    }
    #[doc = "POWER POWERSET S1POWER: Keep RAM section S1 of RAM0 on or off in System ON mode"]
    #[inline]
    pub(crate) fn write_power_ramn_powerset_s1power(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER POWERSET S1POWER reset value true")
    }
    #[doc = "POWER POWERSET S0RETENTION: Keep retention on RAM section S0 when RAM section is switched off"]
    #[inline]
    pub(crate) fn write_power_ramn_powerset_s0retention(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER POWERSET S0RETENTION reset value false")
    }
    #[doc = "POWER POWERSET S1RETENTION: Keep retention on RAM section S1 when RAM section is switched off"]
    #[inline]
    pub(crate) fn write_power_ramn_powerset_s1retention(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER POWERSET S1RETENTION reset value false")
    }
    #[doc = "POWER POWERCLR S0POWER: Keep RAM section S0 of RAM0 on or off in System ON mode"]
    #[inline]
    pub(crate) fn write_power_ramn_powerclr_s0power(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER POWERCLR S0POWER reset value true")
    }
    #[doc = "POWER POWERCLR S1POWER: Keep RAM section S1 of RAM0 on or off in System ON mode"]
    #[inline]
    pub(crate) fn write_power_ramn_powerclr_s1power(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER POWERCLR S1POWER reset value true")
    }
    #[doc = "POWER POWERCLR S0RETENTION: Keep retention on RAM section S0 when RAM section is switched off"]
    #[inline]
    pub(crate) fn write_power_ramn_powerclr_s0retention(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER POWERCLR S0RETENTION reset value false")
    }
    #[doc = "POWER POWERCLR S1RETENTION: Keep retention on RAM section S1 when RAM section is switched off"]
    #[inline]
    pub(crate) fn write_power_ramn_powerclr_s1retention(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write POWER POWERCLR S1RETENTION reset value false")
    }
    #[doc = "RADIO TASKS_TXEN: Enable RADIO in TX mode"]
    #[inline]
    pub(crate) fn write_radio_tasks_txen(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write RADIO TASKS_TXEN reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO TASKS_RXEN: Enable RADIO in RX mode"]
    #[inline]
    pub(crate) fn write_radio_tasks_rxen(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write RADIO TASKS_RXEN reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO TASKS_START: Start RADIO"]
    #[inline]
    pub(crate) fn write_radio_tasks_start(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write RADIO TASKS_START reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "RADIO TASKS_STOP: Stop RADIO"]
    #[inline]
    pub(crate) fn write_radio_tasks_stop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write RADIO TASKS_STOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO TASKS_DISABLE: Disable RADIO"]
    #[inline]
    pub(crate) fn write_radio_tasks_disable(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RADIO TASKS_DISABLE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO TASKS_RSSISTART: Start the RSSI and take one single sample of the receive signal strength."]
    #[inline]
    pub(crate) fn write_radio_tasks_rssistart(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RADIO TASKS_RSSISTART reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO TASKS_RSSISTOP: Stop the RSSI measurement"]
    #[inline]
    pub(crate) fn write_radio_tasks_rssistop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RADIO TASKS_RSSISTOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO TASKS_BCSTART: Start the bit counter"]
    #[inline]
    pub(crate) fn write_radio_tasks_bcstart(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RADIO TASKS_BCSTART reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO TASKS_BCSTOP: Stop the bit counter"]
    #[inline]
    pub(crate) fn write_radio_tasks_bcstop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write RADIO TASKS_BCSTOP reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "RADIO EVENTS_READY: RADIO has ramped up and is ready to be started"]
    #[inline]
    pub(crate) fn read_radio_events_ready(&self) -> MemResult<u32> {
        todo!(
            "read RADIO EVENTS_READY reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "RADIO EVENTS_READY: RADIO has ramped up and is ready to be started"]
    #[inline]
    pub(crate) fn write_radio_events_ready(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write RADIO EVENTS_READY reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "RADIO EVENTS_ADDRESS: Address sent or received"]
    #[inline]
    pub(crate) fn read_radio_events_address(&self) -> MemResult<u32> {
        todo ! ("read RADIO EVENTS_ADDRESS reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_ADDRESS: Address sent or received"]
    #[inline]
    pub(crate) fn write_radio_events_address(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RADIO EVENTS_ADDRESS reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_PAYLOAD: Packet payload sent or received"]
    #[inline]
    pub(crate) fn read_radio_events_payload(&self) -> MemResult<u32> {
        todo ! ("read RADIO EVENTS_PAYLOAD reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_PAYLOAD: Packet payload sent or received"]
    #[inline]
    pub(crate) fn write_radio_events_payload(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RADIO EVENTS_PAYLOAD reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_END: Packet sent or received"]
    #[inline]
    pub(crate) fn read_radio_events_end(&self) -> MemResult<u32> {
        todo!("read RADIO EVENTS_END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_END: Packet sent or received"]
    #[inline]
    pub(crate) fn write_radio_events_end(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write RADIO EVENTS_END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_DISABLED: RADIO has been disabled"]
    #[inline]
    pub(crate) fn read_radio_events_disabled(&self) -> MemResult<u32> {
        todo ! ("read RADIO EVENTS_DISABLED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_DISABLED: RADIO has been disabled"]
    #[inline]
    pub(crate) fn write_radio_events_disabled(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RADIO EVENTS_DISABLED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_DEVMATCH: A device address match occurred on the last received packet"]
    #[inline]
    pub(crate) fn read_radio_events_devmatch(&self) -> MemResult<u32> {
        todo ! ("read RADIO EVENTS_DEVMATCH reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_DEVMATCH: A device address match occurred on the last received packet"]
    #[inline]
    pub(crate) fn write_radio_events_devmatch(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RADIO EVENTS_DEVMATCH reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_DEVMISS: No device address match occurred on the last received packet"]
    #[inline]
    pub(crate) fn read_radio_events_devmiss(&self) -> MemResult<u32> {
        todo ! ("read RADIO EVENTS_DEVMISS reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_DEVMISS: No device address match occurred on the last received packet"]
    #[inline]
    pub(crate) fn write_radio_events_devmiss(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RADIO EVENTS_DEVMISS reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_RSSIEND: Sampling of receive signal strength complete."]
    #[inline]
    pub(crate) fn read_radio_events_rssiend(&self) -> MemResult<u32> {
        todo ! ("read RADIO EVENTS_RSSIEND reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_RSSIEND: Sampling of receive signal strength complete."]
    #[inline]
    pub(crate) fn write_radio_events_rssiend(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RADIO EVENTS_RSSIEND reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_BCMATCH: Bit counter reached bit count value."]
    #[inline]
    pub(crate) fn read_radio_events_bcmatch(&self) -> MemResult<u32> {
        todo ! ("read RADIO EVENTS_BCMATCH reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_BCMATCH: Bit counter reached bit count value."]
    #[inline]
    pub(crate) fn write_radio_events_bcmatch(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RADIO EVENTS_BCMATCH reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_CRCOK: Packet received with CRC ok"]
    #[inline]
    pub(crate) fn read_radio_events_crcok(&self) -> MemResult<u32> {
        todo!(
            "read RADIO EVENTS_CRCOK reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "RADIO EVENTS_CRCOK: Packet received with CRC ok"]
    #[inline]
    pub(crate) fn write_radio_events_crcok(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write RADIO EVENTS_CRCOK reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "RADIO EVENTS_CRCERROR: Packet received with CRC error"]
    #[inline]
    pub(crate) fn read_radio_events_crcerror(&self) -> MemResult<u32> {
        todo ! ("read RADIO EVENTS_CRCERROR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO EVENTS_CRCERROR: Packet received with CRC error"]
    #[inline]
    pub(crate) fn write_radio_events_crcerror(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RADIO EVENTS_CRCERROR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO SHORTS READY_START: Shortcut between READY event and START task"]
    #[inline]
    pub(crate) fn read_radio_shorts_ready_start(&self) -> MemResult<bool> {
        todo!("read RADIO SHORTS READY_START reset value false")
    }
    #[doc = "RADIO SHORTS READY_START: Shortcut between READY event and START task"]
    #[inline]
    pub(crate) fn write_radio_shorts_ready_start(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO SHORTS READY_START reset value false")
    }
    #[doc = "RADIO SHORTS END_DISABLE: Shortcut between END event and DISABLE task"]
    #[inline]
    pub(crate) fn read_radio_shorts_end_disable(&self) -> MemResult<bool> {
        todo!("read RADIO SHORTS END_DISABLE reset value false")
    }
    #[doc = "RADIO SHORTS END_DISABLE: Shortcut between END event and DISABLE task"]
    #[inline]
    pub(crate) fn write_radio_shorts_end_disable(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO SHORTS END_DISABLE reset value false")
    }
    #[doc = "RADIO SHORTS DISABLED_TXEN: Shortcut between DISABLED event and TXEN task"]
    #[inline]
    pub(crate) fn read_radio_shorts_disabled_txen(&self) -> MemResult<bool> {
        todo!("read RADIO SHORTS DISABLED_TXEN reset value false")
    }
    #[doc = "RADIO SHORTS DISABLED_TXEN: Shortcut between DISABLED event and TXEN task"]
    #[inline]
    pub(crate) fn write_radio_shorts_disabled_txen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO SHORTS DISABLED_TXEN reset value false")
    }
    #[doc = "RADIO SHORTS DISABLED_RXEN: Shortcut between DISABLED event and RXEN task"]
    #[inline]
    pub(crate) fn read_radio_shorts_disabled_rxen(&self) -> MemResult<bool> {
        todo!("read RADIO SHORTS DISABLED_RXEN reset value false")
    }
    #[doc = "RADIO SHORTS DISABLED_RXEN: Shortcut between DISABLED event and RXEN task"]
    #[inline]
    pub(crate) fn write_radio_shorts_disabled_rxen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO SHORTS DISABLED_RXEN reset value false")
    }
    #[doc = "RADIO SHORTS ADDRESS_RSSISTART: Shortcut between ADDRESS event and RSSISTART task"]
    #[inline]
    pub(crate) fn read_radio_shorts_address_rssistart(
        &self,
    ) -> MemResult<bool> {
        todo!("read RADIO SHORTS ADDRESS_RSSISTART reset value false")
    }
    #[doc = "RADIO SHORTS ADDRESS_RSSISTART: Shortcut between ADDRESS event and RSSISTART task"]
    #[inline]
    pub(crate) fn write_radio_shorts_address_rssistart(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO SHORTS ADDRESS_RSSISTART reset value false")
    }
    #[doc = "RADIO SHORTS END_START: Shortcut between END event and START task"]
    #[inline]
    pub(crate) fn read_radio_shorts_end_start(&self) -> MemResult<bool> {
        todo!("read RADIO SHORTS END_START reset value false")
    }
    #[doc = "RADIO SHORTS END_START: Shortcut between END event and START task"]
    #[inline]
    pub(crate) fn write_radio_shorts_end_start(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO SHORTS END_START reset value false")
    }
    #[doc = "RADIO SHORTS ADDRESS_BCSTART: Shortcut between ADDRESS event and BCSTART task"]
    #[inline]
    pub(crate) fn read_radio_shorts_address_bcstart(&self) -> MemResult<bool> {
        todo!("read RADIO SHORTS ADDRESS_BCSTART reset value false")
    }
    #[doc = "RADIO SHORTS ADDRESS_BCSTART: Shortcut between ADDRESS event and BCSTART task"]
    #[inline]
    pub(crate) fn write_radio_shorts_address_bcstart(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO SHORTS ADDRESS_BCSTART reset value false")
    }
    #[doc = "RADIO SHORTS DISABLED_RSSISTOP: Shortcut between DISABLED event and RSSISTOP task"]
    #[inline]
    pub(crate) fn read_radio_shorts_disabled_rssistop(
        &self,
    ) -> MemResult<bool> {
        todo!("read RADIO SHORTS DISABLED_RSSISTOP reset value false")
    }
    #[doc = "RADIO SHORTS DISABLED_RSSISTOP: Shortcut between DISABLED event and RSSISTOP task"]
    #[inline]
    pub(crate) fn write_radio_shorts_disabled_rssistop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO SHORTS DISABLED_RSSISTOP reset value false")
    }
    #[doc = "RADIO INTENSET READY: Write '1' to Enable interrupt for READY event"]
    #[inline]
    pub(crate) fn read_radio_intenset_ready(&self) -> MemResult<bool> {
        todo!("read RADIO INTENSET READY reset value false")
    }
    #[doc = "RADIO INTENSET READY: Write '1' to Enable interrupt for READY event"]
    #[inline]
    pub(crate) fn write_radio_intenset_ready(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENSET READY reset value false")
    }
    #[doc = "RADIO INTENSET ADDRESS: Write '1' to Enable interrupt for ADDRESS event"]
    #[inline]
    pub(crate) fn read_radio_intenset_address(&self) -> MemResult<bool> {
        todo!("read RADIO INTENSET ADDRESS reset value false")
    }
    #[doc = "RADIO INTENSET ADDRESS: Write '1' to Enable interrupt for ADDRESS event"]
    #[inline]
    pub(crate) fn write_radio_intenset_address(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENSET ADDRESS reset value false")
    }
    #[doc = "RADIO INTENSET PAYLOAD: Write '1' to Enable interrupt for PAYLOAD event"]
    #[inline]
    pub(crate) fn read_radio_intenset_payload(&self) -> MemResult<bool> {
        todo!("read RADIO INTENSET PAYLOAD reset value false")
    }
    #[doc = "RADIO INTENSET PAYLOAD: Write '1' to Enable interrupt for PAYLOAD event"]
    #[inline]
    pub(crate) fn write_radio_intenset_payload(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENSET PAYLOAD reset value false")
    }
    #[doc = "RADIO INTENSET END: Write '1' to Enable interrupt for END event"]
    #[inline]
    pub(crate) fn read_radio_intenset_end(&self) -> MemResult<bool> {
        todo!("read RADIO INTENSET END reset value false")
    }
    #[doc = "RADIO INTENSET END: Write '1' to Enable interrupt for END event"]
    #[inline]
    pub(crate) fn write_radio_intenset_end(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENSET END reset value false")
    }
    #[doc = "RADIO INTENSET DISABLED: Write '1' to Enable interrupt for DISABLED event"]
    #[inline]
    pub(crate) fn read_radio_intenset_disabled(&self) -> MemResult<bool> {
        todo!("read RADIO INTENSET DISABLED reset value false")
    }
    #[doc = "RADIO INTENSET DISABLED: Write '1' to Enable interrupt for DISABLED event"]
    #[inline]
    pub(crate) fn write_radio_intenset_disabled(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENSET DISABLED reset value false")
    }
    #[doc = "RADIO INTENSET DEVMATCH: Write '1' to Enable interrupt for DEVMATCH event"]
    #[inline]
    pub(crate) fn read_radio_intenset_devmatch(&self) -> MemResult<bool> {
        todo!("read RADIO INTENSET DEVMATCH reset value false")
    }
    #[doc = "RADIO INTENSET DEVMATCH: Write '1' to Enable interrupt for DEVMATCH event"]
    #[inline]
    pub(crate) fn write_radio_intenset_devmatch(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENSET DEVMATCH reset value false")
    }
    #[doc = "RADIO INTENSET DEVMISS: Write '1' to Enable interrupt for DEVMISS event"]
    #[inline]
    pub(crate) fn read_radio_intenset_devmiss(&self) -> MemResult<bool> {
        todo!("read RADIO INTENSET DEVMISS reset value false")
    }
    #[doc = "RADIO INTENSET DEVMISS: Write '1' to Enable interrupt for DEVMISS event"]
    #[inline]
    pub(crate) fn write_radio_intenset_devmiss(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENSET DEVMISS reset value false")
    }
    #[doc = "RADIO INTENSET RSSIEND: Write '1' to Enable interrupt for RSSIEND event"]
    #[inline]
    pub(crate) fn read_radio_intenset_rssiend(&self) -> MemResult<bool> {
        todo!("read RADIO INTENSET RSSIEND reset value false")
    }
    #[doc = "RADIO INTENSET RSSIEND: Write '1' to Enable interrupt for RSSIEND event"]
    #[inline]
    pub(crate) fn write_radio_intenset_rssiend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENSET RSSIEND reset value false")
    }
    #[doc = "RADIO INTENSET BCMATCH: Write '1' to Enable interrupt for BCMATCH event"]
    #[inline]
    pub(crate) fn read_radio_intenset_bcmatch(&self) -> MemResult<bool> {
        todo!("read RADIO INTENSET BCMATCH reset value false")
    }
    #[doc = "RADIO INTENSET BCMATCH: Write '1' to Enable interrupt for BCMATCH event"]
    #[inline]
    pub(crate) fn write_radio_intenset_bcmatch(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENSET BCMATCH reset value false")
    }
    #[doc = "RADIO INTENSET CRCOK: Write '1' to Enable interrupt for CRCOK event"]
    #[inline]
    pub(crate) fn read_radio_intenset_crcok(&self) -> MemResult<bool> {
        todo!("read RADIO INTENSET CRCOK reset value false")
    }
    #[doc = "RADIO INTENSET CRCOK: Write '1' to Enable interrupt for CRCOK event"]
    #[inline]
    pub(crate) fn write_radio_intenset_crcok(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENSET CRCOK reset value false")
    }
    #[doc = "RADIO INTENSET CRCERROR: Write '1' to Enable interrupt for CRCERROR event"]
    #[inline]
    pub(crate) fn read_radio_intenset_crcerror(&self) -> MemResult<bool> {
        todo!("read RADIO INTENSET CRCERROR reset value false")
    }
    #[doc = "RADIO INTENSET CRCERROR: Write '1' to Enable interrupt for CRCERROR event"]
    #[inline]
    pub(crate) fn write_radio_intenset_crcerror(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENSET CRCERROR reset value false")
    }
    #[doc = "RADIO INTENCLR READY: Write '1' to Disable interrupt for READY event"]
    #[inline]
    pub(crate) fn read_radio_intenclr_ready(&self) -> MemResult<bool> {
        todo!("read RADIO INTENCLR READY reset value false")
    }
    #[doc = "RADIO INTENCLR READY: Write '1' to Disable interrupt for READY event"]
    #[inline]
    pub(crate) fn write_radio_intenclr_ready(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENCLR READY reset value false")
    }
    #[doc = "RADIO INTENCLR ADDRESS: Write '1' to Disable interrupt for ADDRESS event"]
    #[inline]
    pub(crate) fn read_radio_intenclr_address(&self) -> MemResult<bool> {
        todo!("read RADIO INTENCLR ADDRESS reset value false")
    }
    #[doc = "RADIO INTENCLR ADDRESS: Write '1' to Disable interrupt for ADDRESS event"]
    #[inline]
    pub(crate) fn write_radio_intenclr_address(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENCLR ADDRESS reset value false")
    }
    #[doc = "RADIO INTENCLR PAYLOAD: Write '1' to Disable interrupt for PAYLOAD event"]
    #[inline]
    pub(crate) fn read_radio_intenclr_payload(&self) -> MemResult<bool> {
        todo!("read RADIO INTENCLR PAYLOAD reset value false")
    }
    #[doc = "RADIO INTENCLR PAYLOAD: Write '1' to Disable interrupt for PAYLOAD event"]
    #[inline]
    pub(crate) fn write_radio_intenclr_payload(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENCLR PAYLOAD reset value false")
    }
    #[doc = "RADIO INTENCLR END: Write '1' to Disable interrupt for END event"]
    #[inline]
    pub(crate) fn read_radio_intenclr_end(&self) -> MemResult<bool> {
        todo!("read RADIO INTENCLR END reset value false")
    }
    #[doc = "RADIO INTENCLR END: Write '1' to Disable interrupt for END event"]
    #[inline]
    pub(crate) fn write_radio_intenclr_end(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENCLR END reset value false")
    }
    #[doc = "RADIO INTENCLR DISABLED: Write '1' to Disable interrupt for DISABLED event"]
    #[inline]
    pub(crate) fn read_radio_intenclr_disabled(&self) -> MemResult<bool> {
        todo!("read RADIO INTENCLR DISABLED reset value false")
    }
    #[doc = "RADIO INTENCLR DISABLED: Write '1' to Disable interrupt for DISABLED event"]
    #[inline]
    pub(crate) fn write_radio_intenclr_disabled(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENCLR DISABLED reset value false")
    }
    #[doc = "RADIO INTENCLR DEVMATCH: Write '1' to Disable interrupt for DEVMATCH event"]
    #[inline]
    pub(crate) fn read_radio_intenclr_devmatch(&self) -> MemResult<bool> {
        todo!("read RADIO INTENCLR DEVMATCH reset value false")
    }
    #[doc = "RADIO INTENCLR DEVMATCH: Write '1' to Disable interrupt for DEVMATCH event"]
    #[inline]
    pub(crate) fn write_radio_intenclr_devmatch(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENCLR DEVMATCH reset value false")
    }
    #[doc = "RADIO INTENCLR DEVMISS: Write '1' to Disable interrupt for DEVMISS event"]
    #[inline]
    pub(crate) fn read_radio_intenclr_devmiss(&self) -> MemResult<bool> {
        todo!("read RADIO INTENCLR DEVMISS reset value false")
    }
    #[doc = "RADIO INTENCLR DEVMISS: Write '1' to Disable interrupt for DEVMISS event"]
    #[inline]
    pub(crate) fn write_radio_intenclr_devmiss(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENCLR DEVMISS reset value false")
    }
    #[doc = "RADIO INTENCLR RSSIEND: Write '1' to Disable interrupt for RSSIEND event"]
    #[inline]
    pub(crate) fn read_radio_intenclr_rssiend(&self) -> MemResult<bool> {
        todo!("read RADIO INTENCLR RSSIEND reset value false")
    }
    #[doc = "RADIO INTENCLR RSSIEND: Write '1' to Disable interrupt for RSSIEND event"]
    #[inline]
    pub(crate) fn write_radio_intenclr_rssiend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENCLR RSSIEND reset value false")
    }
    #[doc = "RADIO INTENCLR BCMATCH: Write '1' to Disable interrupt for BCMATCH event"]
    #[inline]
    pub(crate) fn read_radio_intenclr_bcmatch(&self) -> MemResult<bool> {
        todo!("read RADIO INTENCLR BCMATCH reset value false")
    }
    #[doc = "RADIO INTENCLR BCMATCH: Write '1' to Disable interrupt for BCMATCH event"]
    #[inline]
    pub(crate) fn write_radio_intenclr_bcmatch(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENCLR BCMATCH reset value false")
    }
    #[doc = "RADIO INTENCLR CRCOK: Write '1' to Disable interrupt for CRCOK event"]
    #[inline]
    pub(crate) fn read_radio_intenclr_crcok(&self) -> MemResult<bool> {
        todo!("read RADIO INTENCLR CRCOK reset value false")
    }
    #[doc = "RADIO INTENCLR CRCOK: Write '1' to Disable interrupt for CRCOK event"]
    #[inline]
    pub(crate) fn write_radio_intenclr_crcok(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENCLR CRCOK reset value false")
    }
    #[doc = "RADIO INTENCLR CRCERROR: Write '1' to Disable interrupt for CRCERROR event"]
    #[inline]
    pub(crate) fn read_radio_intenclr_crcerror(&self) -> MemResult<bool> {
        todo!("read RADIO INTENCLR CRCERROR reset value false")
    }
    #[doc = "RADIO INTENCLR CRCERROR: Write '1' to Disable interrupt for CRCERROR event"]
    #[inline]
    pub(crate) fn write_radio_intenclr_crcerror(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO INTENCLR CRCERROR reset value false")
    }
    #[doc = "RADIO CRCSTATUS CRCSTATUS: CRC status of packet received"]
    #[inline]
    pub(crate) fn read_radio_crcstatus_crcstatus(&self) -> MemResult<bool> {
        todo!("read RADIO CRCSTATUS CRCSTATUS reset value false")
    }
    #[doc = "RADIO RXMATCH RXMATCH: Received address"]
    #[inline]
    pub(crate) fn read_radio_rxmatch_rxmatch(&self) -> MemResult<u8> {
        todo!("read RADIO RXMATCH RXMATCH reset value 0x00 mask 0x07")
    }
    #[doc = "RADIO RXCRC RXCRC: CRC field of previously received packet"]
    #[inline]
    pub(crate) fn read_radio_rxcrc_rxcrc(&self) -> MemResult<u32> {
        todo!("read RADIO RXCRC RXCRC reset value 0x00 mask 0xffffff")
    }
    #[doc = "RADIO DAI DAI: Device address match index"]
    #[inline]
    pub(crate) fn read_radio_dai_dai(&self) -> MemResult<u8> {
        todo!("read RADIO DAI DAI reset value 0x00 mask 0x07")
    }
    #[doc = "RADIO PACKETPTR: Packet pointer"]
    #[inline]
    pub(crate) fn read_radio_packetptr(&self) -> MemResult<u32> {
        todo!("read RADIO PACKETPTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO PACKETPTR: Packet pointer"]
    #[inline]
    pub(crate) fn write_radio_packetptr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write RADIO PACKETPTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO FREQUENCY FREQUENCY: Radio channel frequency"]
    #[inline]
    pub(crate) fn read_radio_frequency_frequency(&self) -> MemResult<u8> {
        todo!("read RADIO FREQUENCY FREQUENCY reset value 0x02 mask 0x7f")
    }
    #[doc = "RADIO FREQUENCY FREQUENCY: Radio channel frequency"]
    #[inline]
    pub(crate) fn write_radio_frequency_frequency(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write RADIO FREQUENCY FREQUENCY reset value 0x02 mask 0x7f")
    }
    #[doc = "RADIO FREQUENCY MAP: Channel map selection."]
    #[inline]
    pub(crate) fn read_radio_frequency_map(&self) -> MemResult<bool> {
        todo!("read RADIO FREQUENCY MAP reset value false")
    }
    #[doc = "RADIO FREQUENCY MAP: Channel map selection."]
    #[inline]
    pub(crate) fn write_radio_frequency_map(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO FREQUENCY MAP reset value false")
    }
    #[doc = "RADIO TXPOWER TXPOWER: RADIO output power."]
    #[inline]
    pub(crate) fn read_radio_txpower_txpower(&self) -> MemResult<u8> {
        todo!("read RADIO TXPOWER TXPOWER reset value 0x00 mask 0xff")
    }
    #[doc = "RADIO TXPOWER TXPOWER: RADIO output power."]
    #[inline]
    pub(crate) fn write_radio_txpower_txpower(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write RADIO TXPOWER TXPOWER reset value 0x00 mask 0xff")
    }
    #[doc = "RADIO MODE MODE: Radio data rate and modulation setting. The radio supports Frequency-shift Keying (FSK) modulation."]
    #[inline]
    pub(crate) fn read_radio_mode_mode(&self) -> MemResult<u8> {
        todo!("read RADIO MODE MODE reset value 0x00 mask 0x0f")
    }
    #[doc = "RADIO MODE MODE: Radio data rate and modulation setting. The radio supports Frequency-shift Keying (FSK) modulation."]
    #[inline]
    pub(crate) fn write_radio_mode_mode(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write RADIO MODE MODE reset value 0x00 mask 0x0f")
    }
    #[doc = "RADIO PCNF0 LFLEN: Length on air of LENGTH field in number of bits."]
    #[inline]
    pub(crate) fn read_radio_pcnf0_lflen(&self) -> MemResult<u8> {
        todo!("read RADIO PCNF0 LFLEN reset value 0x00 mask 0x0f")
    }
    #[doc = "RADIO PCNF0 LFLEN: Length on air of LENGTH field in number of bits."]
    #[inline]
    pub(crate) fn write_radio_pcnf0_lflen(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write RADIO PCNF0 LFLEN reset value 0x00 mask 0x0f")
    }
    #[doc = "RADIO PCNF0 S0LEN: Length on air of S0 field in number of bytes."]
    #[inline]
    pub(crate) fn read_radio_pcnf0_s0len(&self) -> MemResult<bool> {
        todo!("read RADIO PCNF0 S0LEN reset value false")
    }
    #[doc = "RADIO PCNF0 S0LEN: Length on air of S0 field in number of bytes."]
    #[inline]
    pub(crate) fn write_radio_pcnf0_s0len(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO PCNF0 S0LEN reset value false")
    }
    #[doc = "RADIO PCNF0 S1LEN: Length on air of S1 field in number of bits."]
    #[inline]
    pub(crate) fn read_radio_pcnf0_s1len(&self) -> MemResult<u8> {
        todo!("read RADIO PCNF0 S1LEN reset value 0x00 mask 0x0f")
    }
    #[doc = "RADIO PCNF0 S1LEN: Length on air of S1 field in number of bits."]
    #[inline]
    pub(crate) fn write_radio_pcnf0_s1len(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write RADIO PCNF0 S1LEN reset value 0x00 mask 0x0f")
    }
    #[doc = "RADIO PCNF0 S1INCL: Include or exclude S1 field in RAM"]
    #[inline]
    pub(crate) fn read_radio_pcnf0_s1incl(&self) -> MemResult<bool> {
        todo!("read RADIO PCNF0 S1INCL reset value false")
    }
    #[doc = "RADIO PCNF0 S1INCL: Include or exclude S1 field in RAM"]
    #[inline]
    pub(crate) fn write_radio_pcnf0_s1incl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO PCNF0 S1INCL reset value false")
    }
    #[doc = "RADIO PCNF0 PLEN: Length of preamble on air. Decision point: TASKS_START task"]
    #[inline]
    pub(crate) fn read_radio_pcnf0_plen(&self) -> MemResult<bool> {
        todo!("read RADIO PCNF0 PLEN reset value false")
    }
    #[doc = "RADIO PCNF0 PLEN: Length of preamble on air. Decision point: TASKS_START task"]
    #[inline]
    pub(crate) fn write_radio_pcnf0_plen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO PCNF0 PLEN reset value false")
    }
    #[doc = "RADIO PCNF1 MAXLEN: Maximum length of packet payload. If the packet payload is larger than MAXLEN, the radio will truncate the payload to MAXLEN."]
    #[inline]
    pub(crate) fn read_radio_pcnf1_maxlen(&self) -> MemResult<u8> {
        todo!("read RADIO PCNF1 MAXLEN reset value 0x00 mask 0xff")
    }
    #[doc = "RADIO PCNF1 MAXLEN: Maximum length of packet payload. If the packet payload is larger than MAXLEN, the radio will truncate the payload to MAXLEN."]
    #[inline]
    pub(crate) fn write_radio_pcnf1_maxlen(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write RADIO PCNF1 MAXLEN reset value 0x00 mask 0xff")
    }
    #[doc = "RADIO PCNF1 STATLEN: Static length in number of bytes"]
    #[inline]
    pub(crate) fn read_radio_pcnf1_statlen(&self) -> MemResult<u8> {
        todo!("read RADIO PCNF1 STATLEN reset value 0x00 mask 0xff")
    }
    #[doc = "RADIO PCNF1 STATLEN: Static length in number of bytes"]
    #[inline]
    pub(crate) fn write_radio_pcnf1_statlen(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write RADIO PCNF1 STATLEN reset value 0x00 mask 0xff")
    }
    #[doc = "RADIO PCNF1 BALEN: Base address length in number of bytes"]
    #[inline]
    pub(crate) fn read_radio_pcnf1_balen(&self) -> MemResult<u8> {
        todo!("read RADIO PCNF1 BALEN reset value 0x00 mask 0x07")
    }
    #[doc = "RADIO PCNF1 BALEN: Base address length in number of bytes"]
    #[inline]
    pub(crate) fn write_radio_pcnf1_balen(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write RADIO PCNF1 BALEN reset value 0x00 mask 0x07")
    }
    #[doc = "RADIO PCNF1 ENDIAN: On air endianness of packet, this applies to the S0, LENGTH, S1 and the PAYLOAD fields."]
    #[inline]
    pub(crate) fn read_radio_pcnf1_endian(&self) -> MemResult<bool> {
        todo!("read RADIO PCNF1 ENDIAN reset value false")
    }
    #[doc = "RADIO PCNF1 ENDIAN: On air endianness of packet, this applies to the S0, LENGTH, S1 and the PAYLOAD fields."]
    #[inline]
    pub(crate) fn write_radio_pcnf1_endian(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO PCNF1 ENDIAN reset value false")
    }
    #[doc = "RADIO PCNF1 WHITEEN: Enable or disable packet whitening"]
    #[inline]
    pub(crate) fn read_radio_pcnf1_whiteen(&self) -> MemResult<bool> {
        todo!("read RADIO PCNF1 WHITEEN reset value false")
    }
    #[doc = "RADIO PCNF1 WHITEEN: Enable or disable packet whitening"]
    #[inline]
    pub(crate) fn write_radio_pcnf1_whiteen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO PCNF1 WHITEEN reset value false")
    }
    #[doc = "RADIO BASE0: Base address 0"]
    #[inline]
    pub(crate) fn read_radio_base0(&self) -> MemResult<u32> {
        todo!("read RADIO BASE0 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO BASE0: Base address 0"]
    #[inline]
    pub(crate) fn write_radio_base0(&mut self, _value: u32) -> MemResult<()> {
        todo!("write RADIO BASE0 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO BASE1: Base address 1"]
    #[inline]
    pub(crate) fn read_radio_base1(&self) -> MemResult<u32> {
        todo!("read RADIO BASE1 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO BASE1: Base address 1"]
    #[inline]
    pub(crate) fn write_radio_base1(&mut self, _value: u32) -> MemResult<()> {
        todo!("write RADIO BASE1 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO PREFIX0 AP0: Address prefix 0. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_prefix0_ap0(&self) -> MemResult<u8> {
        Ok(self.radio.address_prefix(0))
    }
    #[doc = "RADIO PREFIX0 AP0: Address prefix 0. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_prefix0_ap0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix(0, _value))
    }
    #[doc = "RADIO PREFIX0 AP1: Address prefix 1. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_prefix0_ap1(&self) -> MemResult<u8> {
        Ok(self.radio.address_prefix(1))
    }
    #[doc = "RADIO PREFIX0 AP1: Address prefix 1. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_prefix0_ap1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix(1, _value))
    }
    #[doc = "RADIO PREFIX0 AP2: Address prefix 2. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_prefix0_ap2(&self) -> MemResult<u8> {
        Ok(self.radio.address_prefix(2))
    }
    #[doc = "RADIO PREFIX0 AP2: Address prefix 2. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_prefix0_ap2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix(2, _value))
    }
    #[doc = "RADIO PREFIX0 AP3: Address prefix 3. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_prefix0_ap3(&self) -> MemResult<u8> {
        Ok(self.radio.address_prefix(3))
    }
    #[doc = "RADIO PREFIX0 AP3: Address prefix 3. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_prefix0_ap3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix(3, _value))
    }
    #[doc = "RADIO PREFIX1 AP4: Address prefix 4. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_prefix1_ap4(&self) -> MemResult<u8> {
        Ok(self.radio.address_prefix(4))
    }
    #[doc = "RADIO PREFIX1 AP4: Address prefix 4. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_prefix1_ap4(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix(4, _value))
    }
    #[doc = "RADIO PREFIX1 AP5: Address prefix 5. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_prefix1_ap5(&self) -> MemResult<u8> {
        Ok(self.radio.address_prefix(5))
    }
    #[doc = "RADIO PREFIX1 AP5: Address prefix 5. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_prefix1_ap5(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix(5, _value))
    }
    #[doc = "RADIO PREFIX1 AP6: Address prefix 6. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_prefix1_ap6(&self) -> MemResult<u8> {
        Ok(self.radio.address_prefix(6))
    }
    #[doc = "RADIO PREFIX1 AP6: Address prefix 6. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_prefix1_ap6(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix(6, _value))
    }
    #[doc = "RADIO PREFIX1 AP7: Address prefix 7. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_prefix1_ap7(&self) -> MemResult<u8> {
        Ok(self.radio.address_prefix(7))
    }
    #[doc = "RADIO PREFIX1 AP7: Address prefix 7. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_prefix1_ap7(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix(7, _value))
    }
    #[doc = "RADIO TXADDRESS TXADDRESS: Transmit address select"]
    #[inline]
    pub(crate) fn read_radio_txaddress_txaddress(&self) -> MemResult<u8> {
        todo!("read RADIO TXADDRESS TXADDRESS reset value 0x00 mask 0x07")
    }
    #[doc = "RADIO TXADDRESS TXADDRESS: Transmit address select"]
    #[inline]
    pub(crate) fn write_radio_txaddress_txaddress(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write RADIO TXADDRESS TXADDRESS reset value 0x00 mask 0x07")
    }
    #[doc = "RADIO RXADDRESSES ADDR0: Enable reception on logical address 0. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_rxaddresses_addr0(&self) -> MemResult<bool> {
        Ok(self.radio.receive_on_ap(0))
    }
    #[doc = "RADIO RXADDRESSES ADDR0: Enable reception on logical address 0. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_rxaddresses_addr0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_receive_on_ap(0, _value))
    }
    #[doc = "RADIO RXADDRESSES ADDR1: Enable reception on logical address 1. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_rxaddresses_addr1(&self) -> MemResult<bool> {
        Ok(self.radio.receive_on_ap(1))
    }
    #[doc = "RADIO RXADDRESSES ADDR1: Enable reception on logical address 1. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_rxaddresses_addr1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_receive_on_ap(1, _value))
    }
    #[doc = "RADIO RXADDRESSES ADDR2: Enable reception on logical address 2. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_rxaddresses_addr2(&self) -> MemResult<bool> {
        Ok(self.radio.receive_on_ap(2))
    }
    #[doc = "RADIO RXADDRESSES ADDR2: Enable reception on logical address 2. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_rxaddresses_addr2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_receive_on_ap(2, _value))
    }
    #[doc = "RADIO RXADDRESSES ADDR3: Enable reception on logical address 3. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_rxaddresses_addr3(&self) -> MemResult<bool> {
        Ok(self.radio.receive_on_ap(3))
    }
    #[doc = "RADIO RXADDRESSES ADDR3: Enable reception on logical address 3. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_rxaddresses_addr3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_receive_on_ap(3, _value))
    }
    #[doc = "RADIO RXADDRESSES ADDR4: Enable reception on logical address 4. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_rxaddresses_addr4(&self) -> MemResult<bool> {
        Ok(self.radio.receive_on_ap(4))
    }
    #[doc = "RADIO RXADDRESSES ADDR4: Enable reception on logical address 4. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_rxaddresses_addr4(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_receive_on_ap(4, _value))
    }
    #[doc = "RADIO RXADDRESSES ADDR5: Enable reception on logical address 5. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_rxaddresses_addr5(&self) -> MemResult<bool> {
        Ok(self.radio.receive_on_ap(5))
    }
    #[doc = "RADIO RXADDRESSES ADDR5: Enable reception on logical address 5. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_rxaddresses_addr5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_receive_on_ap(5, _value))
    }
    #[doc = "RADIO RXADDRESSES ADDR6: Enable reception on logical address 6. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_rxaddresses_addr6(&self) -> MemResult<bool> {
        Ok(self.radio.receive_on_ap(6))
    }
    #[doc = "RADIO RXADDRESSES ADDR6: Enable reception on logical address 6. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_rxaddresses_addr6(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_receive_on_ap(6, _value))
    }
    #[doc = "RADIO RXADDRESSES ADDR7: Enable reception on logical address 7. Decision point: START task."]
    #[inline]
    pub(crate) fn read_radio_rxaddresses_addr7(&self) -> MemResult<bool> {
        Ok(self.radio.receive_on_ap(7))
    }
    #[doc = "RADIO RXADDRESSES ADDR7: Enable reception on logical address 7. Decision point: START task."]
    #[inline]
    pub(crate) fn write_radio_rxaddresses_addr7(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_receive_on_ap(7, _value))
    }
    #[doc = "RADIO CRCCNF LEN: CRC length in number of bytes."]
    #[inline]
    pub(crate) fn read_radio_crccnf_len(&self) -> MemResult<u8> {
        todo!("read RADIO CRCCNF LEN reset value 0x00 mask 0x03")
    }
    #[doc = "RADIO CRCCNF LEN: CRC length in number of bytes."]
    #[inline]
    pub(crate) fn write_radio_crccnf_len(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write RADIO CRCCNF LEN reset value 0x00 mask 0x03")
    }
    #[doc = "RADIO CRCCNF SKIPADDR: Include or exclude packet address field out of CRC calculation."]
    #[inline]
    pub(crate) fn read_radio_crccnf_skipaddr(&self) -> MemResult<bool> {
        todo!("read RADIO CRCCNF SKIPADDR reset value false")
    }
    #[doc = "RADIO CRCCNF SKIPADDR: Include or exclude packet address field out of CRC calculation."]
    #[inline]
    pub(crate) fn write_radio_crccnf_skipaddr(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO CRCCNF SKIPADDR reset value false")
    }
    #[doc = "RADIO CRCPOLY CRCPOLY: CRC polynomial"]
    #[inline]
    pub(crate) fn read_radio_crcpoly_crcpoly(&self) -> MemResult<u32> {
        todo!("read RADIO CRCPOLY CRCPOLY reset value 0x00 mask 0xffffff")
    }
    #[doc = "RADIO CRCPOLY CRCPOLY: CRC polynomial"]
    #[inline]
    pub(crate) fn write_radio_crcpoly_crcpoly(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write RADIO CRCPOLY CRCPOLY reset value 0x00 mask 0xffffff")
    }
    #[doc = "RADIO CRCINIT CRCINIT: CRC initial value"]
    #[inline]
    pub(crate) fn read_radio_crcinit_crcinit(&self) -> MemResult<u32> {
        todo!("read RADIO CRCINIT CRCINIT reset value 0x00 mask 0xffffff")
    }
    #[doc = "RADIO CRCINIT CRCINIT: CRC initial value"]
    #[inline]
    pub(crate) fn write_radio_crcinit_crcinit(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write RADIO CRCINIT CRCINIT reset value 0x00 mask 0xffffff")
    }
    #[doc = "RADIO UNUSED0: Unspecified"]
    #[inline]
    pub(crate) fn read_radio_unused0(&self) -> MemResult<u32> {
        todo!("read RADIO UNUSED0 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO UNUSED0: Unspecified"]
    #[inline]
    pub(crate) fn write_radio_unused0(&mut self, _value: u32) -> MemResult<()> {
        todo!("write RADIO UNUSED0 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO TIFS TIFS: Inter Frame Spacing in us"]
    #[inline]
    pub(crate) fn read_radio_tifs_tifs(&self) -> MemResult<u8> {
        todo!("read RADIO TIFS TIFS reset value 0x00 mask 0xff")
    }
    #[doc = "RADIO TIFS TIFS: Inter Frame Spacing in us"]
    #[inline]
    pub(crate) fn write_radio_tifs_tifs(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write RADIO TIFS TIFS reset value 0x00 mask 0xff")
    }
    #[doc = "RADIO RSSISAMPLE RSSISAMPLE: RSSI sample"]
    #[inline]
    pub(crate) fn read_radio_rssisample_rssisample(&self) -> MemResult<u8> {
        todo!("read RADIO RSSISAMPLE RSSISAMPLE reset value 0x00 mask 0x7f")
    }
    #[doc = "RADIO STATE STATE: Current radio state"]
    #[inline]
    pub(crate) fn read_radio_state_state(&self) -> MemResult<u8> {
        todo!("read RADIO STATE STATE reset value 0x00 mask 0x0f")
    }
    #[doc = "RADIO DATAWHITEIV DATAWHITEIV: Data whitening initial value. Bit 6 is hard-wired to '1', writing '0' to it has no effect, and it will always be read back and used by the device as '1'."]
    #[inline]
    pub(crate) fn read_radio_datawhiteiv_datawhiteiv(&self) -> MemResult<u8> {
        todo!("read RADIO DATAWHITEIV DATAWHITEIV reset value 0x40 mask 0x7f")
    }
    #[doc = "RADIO DATAWHITEIV DATAWHITEIV: Data whitening initial value. Bit 6 is hard-wired to '1', writing '0' to it has no effect, and it will always be read back and used by the device as '1'."]
    #[inline]
    pub(crate) fn write_radio_datawhiteiv_datawhiteiv(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write RADIO DATAWHITEIV DATAWHITEIV reset value 0x40 mask 0x7f")
    }
    #[doc = "RADIO BCC: Bit counter compare"]
    #[inline]
    pub(crate) fn read_radio_bcc(&self) -> MemResult<u32> {
        todo!("read RADIO BCC reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO BCC: Bit counter compare"]
    #[inline]
    pub(crate) fn write_radio_bcc(&mut self, _value: u32) -> MemResult<()> {
        todo!("write RADIO BCC reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO DAB[%s]: Description collection[0]:  Device address base segment 0"]
    #[inline]
    pub(crate) fn read_radio_dabn(&self, _dim: usize) -> MemResult<u32> {
        todo!("read RADIO DAB[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO DAB[%s]: Description collection[0]:  Device address base segment 0"]
    #[inline]
    pub(crate) fn write_radio_dabn(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write RADIO DAB[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RADIO DAP[%s] DAP: Device address prefix 0"]
    #[inline]
    pub(crate) fn read_radio_dapn_dap(&self, _dim: usize) -> MemResult<u16> {
        todo!("read RADIO DAP[%s] DAP reset value 0x00 mask 0xffff")
    }
    #[doc = "RADIO DAP[%s] DAP: Device address prefix 0"]
    #[inline]
    pub(crate) fn write_radio_dapn_dap(
        &mut self,
        _dim: usize,
        _value: u16,
    ) -> MemResult<()> {
        todo!("write RADIO DAP[%s] DAP reset value 0x00 mask 0xffff")
    }
    pub(crate) fn read_radio_dacnf_ena0(&self) -> MemResult<bool> {
        Ok(self.radio.address_prefix_on(0))
    }
    #[doc = "RADIO DACNF ENA0: Enable or disable device address matching using device address 0."]
    #[inline]
    pub(crate) fn write_radio_dacnf_ena0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix_on(0, _value))
    }
    #[doc = "RADIO DACNF ENA1: Enable or disable device address matching using device address 1."]
    #[inline]
    pub(crate) fn read_radio_dacnf_ena1(&self) -> MemResult<bool> {
        Ok(self.radio.address_prefix_on(1))
    }
    #[doc = "RADIO DACNF ENA1: Enable or disable device address matching using device address 1."]
    #[inline]
    pub(crate) fn write_radio_dacnf_ena1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix_on(1, _value))
    }
    #[doc = "RADIO DACNF ENA2: Enable or disable device address matching using device address 2."]
    #[inline]
    pub(crate) fn read_radio_dacnf_ena2(&self) -> MemResult<bool> {
        Ok(self.radio.address_prefix_on(2))
    }
    #[doc = "RADIO DACNF ENA2: Enable or disable device address matching using device address 2."]
    #[inline]
    pub(crate) fn write_radio_dacnf_ena2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix_on(2, _value))
    }
    #[doc = "RADIO DACNF ENA3: Enable or disable device address matching using device address 3."]
    #[inline]
    pub(crate) fn read_radio_dacnf_ena3(&self) -> MemResult<bool> {
        Ok(self.radio.address_prefix_on(3))
    }
    #[doc = "RADIO DACNF ENA3: Enable or disable device address matching using device address 3."]
    #[inline]
    pub(crate) fn write_radio_dacnf_ena3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix_on(3, _value))
    }
    #[doc = "RADIO DACNF ENA4: Enable or disable device address matching using device address 4."]
    #[inline]
    pub(crate) fn read_radio_dacnf_ena4(&self) -> MemResult<bool> {
        Ok(self.radio.address_prefix_on(4))
    }
    #[doc = "RADIO DACNF ENA4: Enable or disable device address matching using device address 4."]
    #[inline]
    pub(crate) fn write_radio_dacnf_ena4(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix_on(4, _value))
    }
    #[doc = "RADIO DACNF ENA5: Enable or disable device address matching using device address 5."]
    #[inline]
    pub(crate) fn read_radio_dacnf_ena5(&self) -> MemResult<bool> {
        Ok(self.radio.address_prefix_on(5))
    }
    #[doc = "RADIO DACNF ENA5: Enable or disable device address matching using device address 5."]
    #[inline]
    pub(crate) fn write_radio_dacnf_ena5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix_on(5, _value))
    }
    #[doc = "RADIO DACNF ENA6: Enable or disable device address matching using device address 6."]
    #[inline]
    pub(crate) fn read_radio_dacnf_ena6(&self) -> MemResult<bool> {
        Ok(self.radio.address_prefix_on(6))
    }
    #[doc = "RADIO DACNF ENA6: Enable or disable device address matching using device address 6."]
    #[inline]
    pub(crate) fn write_radio_dacnf_ena6(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix_on(6, _value))
    }
    #[doc = "RADIO DACNF ENA7: Enable or disable device address matching using device address 7."]
    #[inline]
    pub(crate) fn read_radio_dacnf_ena7(&self) -> MemResult<bool> {
        Ok(self.radio.address_prefix_on(7))
    }
    #[doc = "RADIO DACNF ENA7: Enable or disable device address matching using device address 7."]
    #[inline]
    pub(crate) fn write_radio_dacnf_ena7(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_address_prefix_on(7, _value))
    }
    #[doc = "RADIO DACNF TXADD0: TxAdd for device address 0."]
    #[inline]
    pub(crate) fn read_radio_dacnf_txadd0(&self) -> MemResult<bool> {
        Ok(self.radio.tx_on_ap(0))
    }
    #[doc = "RADIO DACNF TXADD0: TxAdd for device address 0."]
    #[inline]
    pub(crate) fn write_radio_dacnf_txadd0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_tx_on_ap(0, _value))
    }
    #[doc = "RADIO DACNF TXADD1: TxAdd for device address 1."]
    #[inline]
    pub(crate) fn read_radio_dacnf_txadd1(&self) -> MemResult<bool> {
        Ok(self.radio.tx_on_ap(1))
    }
    #[doc = "RADIO DACNF TXADD1: TxAdd for device address 1."]
    #[inline]
    pub(crate) fn write_radio_dacnf_txadd1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_tx_on_ap(1, _value))
    }
    #[doc = "RADIO DACNF TXADD2: TxAdd for device address 2."]
    #[inline]
    pub(crate) fn read_radio_dacnf_txadd2(&self) -> MemResult<bool> {
        Ok(self.radio.tx_on_ap(2))
    }
    #[doc = "RADIO DACNF TXADD2: TxAdd for device address 2."]
    #[inline]
    pub(crate) fn write_radio_dacnf_txadd2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_tx_on_ap(2, _value))
    }
    #[doc = "RADIO DACNF TXADD3: TxAdd for device address 3."]
    #[inline]
    pub(crate) fn read_radio_dacnf_txadd3(&self) -> MemResult<bool> {
        Ok(self.radio.tx_on_ap(3))
    }
    #[doc = "RADIO DACNF TXADD3: TxAdd for device address 3."]
    #[inline]
    pub(crate) fn write_radio_dacnf_txadd3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_tx_on_ap(3, _value))
    }
    #[doc = "RADIO DACNF TXADD4: TxAdd for device address 4."]
    #[inline]
    pub(crate) fn read_radio_dacnf_txadd4(&self) -> MemResult<bool> {
        Ok(self.radio.tx_on_ap(4))
    }
    #[doc = "RADIO DACNF TXADD4: TxAdd for device address 4."]
    #[inline]
    pub(crate) fn write_radio_dacnf_txadd4(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_tx_on_ap(4, _value))
    }
    #[doc = "RADIO DACNF TXADD5: TxAdd for device address 5."]
    #[inline]
    pub(crate) fn read_radio_dacnf_txadd5(&self) -> MemResult<bool> {
        Ok(self.radio.tx_on_ap(5))
    }
    #[doc = "RADIO DACNF TXADD5: TxAdd for device address 5."]
    #[inline]
    pub(crate) fn write_radio_dacnf_txadd5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_tx_on_ap(5, _value))
    }
    #[doc = "RADIO DACNF TXADD6: TxAdd for device address 6."]
    #[inline]
    pub(crate) fn read_radio_dacnf_txadd6(&self) -> MemResult<bool> {
        Ok(self.radio.tx_on_ap(6))
    }
    #[doc = "RADIO DACNF TXADD6: TxAdd for device address 6."]
    #[inline]
    pub(crate) fn write_radio_dacnf_txadd6(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_tx_on_ap(6, _value))
    }
    #[doc = "RADIO DACNF TXADD7: TxAdd for device address 7."]
    #[inline]
    pub(crate) fn read_radio_dacnf_txadd7(&self) -> MemResult<bool> {
        Ok(self.radio.tx_on_ap(7))
    }
    #[doc = "RADIO DACNF TXADD7: TxAdd for device address 7."]
    #[inline]
    pub(crate) fn write_radio_dacnf_txadd7(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.radio.set_tx_on_ap(7, _value))
    }
    #[doc = "RADIO MODECNF0 RU: Radio ramp-up time"]
    #[inline]
    pub(crate) fn read_radio_modecnf0_ru(&self) -> MemResult<bool> {
        todo!("read RADIO MODECNF0 RU reset value false")
    }
    #[doc = "RADIO MODECNF0 RU: Radio ramp-up time"]
    #[inline]
    pub(crate) fn write_radio_modecnf0_ru(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO MODECNF0 RU reset value false")
    }
    #[doc = "RADIO MODECNF0 DTX: Default TX value"]
    #[inline]
    pub(crate) fn read_radio_modecnf0_dtx(&self) -> MemResult<u8> {
        todo!("read RADIO MODECNF0 DTX reset value 0x02 mask 0x03")
    }
    #[doc = "RADIO MODECNF0 DTX: Default TX value"]
    #[inline]
    pub(crate) fn write_radio_modecnf0_dtx(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write RADIO MODECNF0 DTX reset value 0x02 mask 0x03")
    }
    #[doc = "RADIO POWER POWER: Peripheral power control. The peripheral and its registers will be reset to its initial state by switching the peripheral off and then back on again."]
    #[inline]
    pub(crate) fn read_radio_power_power(&self) -> MemResult<bool> {
        todo!("read RADIO POWER POWER reset value true")
    }
    #[doc = "RADIO POWER POWER: Peripheral power control. The peripheral and its registers will be reset to its initial state by switching the peripheral off and then back on again."]
    #[inline]
    pub(crate) fn write_radio_power_power(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RADIO POWER POWER reset value true")
    }
    #[doc = "UARTE0 TASKS_STARTRX: Start UART receiver\n\nUART0 TASKS_STARTRX: Start UART receiver"]
    #[inline]
    pub(crate) fn write_uarte0uart0_tasks_startrx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 TASKS_STARTRX, UART0 TASKS_STARTRX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 TASKS_STOPRX: Stop UART receiver\n\nUART0 TASKS_STOPRX: Stop UART receiver"]
    #[inline]
    pub(crate) fn write_uarte0uart0_tasks_stoprx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 TASKS_STOPRX, UART0 TASKS_STOPRX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 TASKS_STARTTX: Start UART transmitter\n\nUART0 TASKS_STARTTX: Start UART transmitter"]
    #[inline]
    pub(crate) fn write_uarte0uart0_tasks_starttx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 TASKS_STARTTX, UART0 TASKS_STARTTX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 TASKS_STOPTX: Stop UART transmitter\n\nUART0 TASKS_STOPTX: Stop UART transmitter"]
    #[inline]
    pub(crate) fn write_uarte0uart0_tasks_stoptx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 TASKS_STOPTX, UART0 TASKS_STOPTX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UART0 TASKS_SUSPEND: Suspend UART"]
    #[inline]
    pub(crate) fn write_uart0_tasks_suspend(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UART0 TASKS_SUSPEND reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 TASKS_FLUSHRX: Flush RX FIFO into RX buffer"]
    #[inline]
    pub(crate) fn write_uarte0_tasks_flushrx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 TASKS_FLUSHRX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_CTS: CTS is activated (set low). Clear To Send.\n\nUART0 EVENTS_CTS: CTS is activated (set low). Clear To Send."]
    #[inline]
    pub(crate) fn read_uarte0uart0_events_cts(&self) -> MemResult<u32> {
        todo ! ("read UARTE0 EVENTS_CTS, UART0 EVENTS_CTS reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_CTS: CTS is activated (set low). Clear To Send.\n\nUART0 EVENTS_CTS: CTS is activated (set low). Clear To Send."]
    #[inline]
    pub(crate) fn write_uarte0uart0_events_cts(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 EVENTS_CTS, UART0 EVENTS_CTS reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_NCTS: CTS is deactivated (set high). Not Clear To Send.\n\nUART0 EVENTS_NCTS: CTS is deactivated (set high). Not Clear To Send."]
    #[inline]
    pub(crate) fn read_uarte0uart0_events_ncts(&self) -> MemResult<u32> {
        todo ! ("read UARTE0 EVENTS_NCTS, UART0 EVENTS_NCTS reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_NCTS: CTS is deactivated (set high). Not Clear To Send.\n\nUART0 EVENTS_NCTS: CTS is deactivated (set high). Not Clear To Send."]
    #[inline]
    pub(crate) fn write_uarte0uart0_events_ncts(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 EVENTS_NCTS, UART0 EVENTS_NCTS reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_RXDRDY: Data received in RXD (but potentially not yet transferred to Data RAM)\n\nUART0 EVENTS_RXDRDY: Data received in RXD"]
    #[inline]
    pub(crate) fn read_uarte0uart0_events_rxdrdy(&self) -> MemResult<u32> {
        todo ! ("read UARTE0 EVENTS_RXDRDY, UART0 EVENTS_RXDRDY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_RXDRDY: Data received in RXD (but potentially not yet transferred to Data RAM)\n\nUART0 EVENTS_RXDRDY: Data received in RXD"]
    #[inline]
    pub(crate) fn write_uarte0uart0_events_rxdrdy(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 EVENTS_RXDRDY, UART0 EVENTS_RXDRDY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_ENDRX: Receive buffer is filled up"]
    #[inline]
    pub(crate) fn read_uarte0_events_endrx(&self) -> MemResult<u32> {
        todo!(
            "read UARTE0 EVENTS_ENDRX reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "UARTE0 EVENTS_ENDRX: Receive buffer is filled up"]
    #[inline]
    pub(crate) fn write_uarte0_events_endrx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 EVENTS_ENDRX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_TXDRDY: Data sent from TXD\n\nUART0 EVENTS_TXDRDY: Data sent from TXD"]
    #[inline]
    pub(crate) fn read_uarte0uart0_events_txdrdy(&self) -> MemResult<u32> {
        todo ! ("read UARTE0 EVENTS_TXDRDY, UART0 EVENTS_TXDRDY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_TXDRDY: Data sent from TXD\n\nUART0 EVENTS_TXDRDY: Data sent from TXD"]
    #[inline]
    pub(crate) fn write_uarte0uart0_events_txdrdy(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 EVENTS_TXDRDY, UART0 EVENTS_TXDRDY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_ENDTX: Last TX byte transmitted"]
    #[inline]
    pub(crate) fn read_uarte0_events_endtx(&self) -> MemResult<u32> {
        todo!(
            "read UARTE0 EVENTS_ENDTX reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "UARTE0 EVENTS_ENDTX: Last TX byte transmitted"]
    #[inline]
    pub(crate) fn write_uarte0_events_endtx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 EVENTS_ENDTX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_ERROR: Error detected\n\nUART0 EVENTS_ERROR: Error detected"]
    #[inline]
    pub(crate) fn read_uarte0uart0_events_error(&self) -> MemResult<u32> {
        todo ! ("read UARTE0 EVENTS_ERROR, UART0 EVENTS_ERROR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_ERROR: Error detected\n\nUART0 EVENTS_ERROR: Error detected"]
    #[inline]
    pub(crate) fn write_uarte0uart0_events_error(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 EVENTS_ERROR, UART0 EVENTS_ERROR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_RXTO: Receiver timeout\n\nUART0 EVENTS_RXTO: Receiver timeout"]
    #[inline]
    pub(crate) fn read_uarte0uart0_events_rxto(&self) -> MemResult<u32> {
        todo ! ("read UARTE0 EVENTS_RXTO, UART0 EVENTS_RXTO reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_RXTO: Receiver timeout\n\nUART0 EVENTS_RXTO: Receiver timeout"]
    #[inline]
    pub(crate) fn write_uarte0uart0_events_rxto(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 EVENTS_RXTO, UART0 EVENTS_RXTO reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_RXSTARTED: UART receiver has started"]
    #[inline]
    pub(crate) fn read_uarte0_events_rxstarted(&self) -> MemResult<u32> {
        todo ! ("read UARTE0 EVENTS_RXSTARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_RXSTARTED: UART receiver has started"]
    #[inline]
    pub(crate) fn write_uarte0_events_rxstarted(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 EVENTS_RXSTARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_TXSTARTED: UART transmitter has started"]
    #[inline]
    pub(crate) fn read_uarte0_events_txstarted(&self) -> MemResult<u32> {
        todo ! ("read UARTE0 EVENTS_TXSTARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_TXSTARTED: UART transmitter has started"]
    #[inline]
    pub(crate) fn write_uarte0_events_txstarted(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 EVENTS_TXSTARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_TXSTOPPED: Transmitter stopped"]
    #[inline]
    pub(crate) fn read_uarte0_events_txstopped(&self) -> MemResult<u32> {
        todo ! ("read UARTE0 EVENTS_TXSTOPPED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 EVENTS_TXSTOPPED: Transmitter stopped"]
    #[inline]
    pub(crate) fn write_uarte0_events_txstopped(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 EVENTS_TXSTOPPED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UART0 SHORTS CTS_STARTRX: Shortcut between CTS event and STARTRX task"]
    #[inline]
    pub(crate) fn read_uarte0uart0_shorts_cts_startrx(
        &self,
    ) -> MemResult<bool> {
        todo!("read UART0 SHORTS CTS_STARTRX reset value false")
    }
    #[doc = "UART0 SHORTS CTS_STARTRX: Shortcut between CTS event and STARTRX task"]
    #[inline]
    pub(crate) fn write_uarte0uart0_shorts_cts_startrx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UART0 SHORTS CTS_STARTRX reset value false")
    }
    #[doc = "UART0 SHORTS NCTS_STOPRX: Shortcut between NCTS event and STOPRX task"]
    #[inline]
    pub(crate) fn read_uarte0uart0_shorts_ncts_stoprx(
        &self,
    ) -> MemResult<bool> {
        todo!("read UART0 SHORTS NCTS_STOPRX reset value false")
    }
    #[doc = "UART0 SHORTS NCTS_STOPRX: Shortcut between NCTS event and STOPRX task"]
    #[inline]
    pub(crate) fn write_uarte0uart0_shorts_ncts_stoprx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UART0 SHORTS NCTS_STOPRX reset value false")
    }
    #[doc = "UARTE0 SHORTS ENDRX_STARTRX: Shortcut between ENDRX event and STARTRX task"]
    #[inline]
    pub(crate) fn read_uarte0uart0_shorts_endrx_startrx(
        &self,
    ) -> MemResult<bool> {
        todo!("read UARTE0 SHORTS ENDRX_STARTRX reset value false")
    }
    #[doc = "UARTE0 SHORTS ENDRX_STARTRX: Shortcut between ENDRX event and STARTRX task"]
    #[inline]
    pub(crate) fn write_uarte0uart0_shorts_endrx_startrx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 SHORTS ENDRX_STARTRX reset value false")
    }
    #[doc = "UARTE0 SHORTS ENDRX_STOPRX: Shortcut between ENDRX event and STOPRX task"]
    #[inline]
    pub(crate) fn read_uarte0uart0_shorts_endrx_stoprx(
        &self,
    ) -> MemResult<bool> {
        todo!("read UARTE0 SHORTS ENDRX_STOPRX reset value false")
    }
    #[doc = "UARTE0 SHORTS ENDRX_STOPRX: Shortcut between ENDRX event and STOPRX task"]
    #[inline]
    pub(crate) fn write_uarte0uart0_shorts_endrx_stoprx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 SHORTS ENDRX_STOPRX reset value false")
    }
    #[doc = "UARTE0 INTEN CTS: Enable or disable interrupt for CTS event"]
    #[inline]
    pub(crate) fn read_uarte0_inten_cts(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTEN CTS reset value false")
    }
    #[doc = "UARTE0 INTEN CTS: Enable or disable interrupt for CTS event"]
    #[inline]
    pub(crate) fn write_uarte0_inten_cts(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTEN CTS reset value false")
    }
    #[doc = "UARTE0 INTEN NCTS: Enable or disable interrupt for NCTS event"]
    #[inline]
    pub(crate) fn read_uarte0_inten_ncts(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTEN NCTS reset value false")
    }
    #[doc = "UARTE0 INTEN NCTS: Enable or disable interrupt for NCTS event"]
    #[inline]
    pub(crate) fn write_uarte0_inten_ncts(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTEN NCTS reset value false")
    }
    #[doc = "UARTE0 INTEN RXDRDY: Enable or disable interrupt for RXDRDY event"]
    #[inline]
    pub(crate) fn read_uarte0_inten_rxdrdy(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTEN RXDRDY reset value false")
    }
    #[doc = "UARTE0 INTEN RXDRDY: Enable or disable interrupt for RXDRDY event"]
    #[inline]
    pub(crate) fn write_uarte0_inten_rxdrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTEN RXDRDY reset value false")
    }
    #[doc = "UARTE0 INTEN ENDRX: Enable or disable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn read_uarte0_inten_endrx(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTEN ENDRX reset value false")
    }
    #[doc = "UARTE0 INTEN ENDRX: Enable or disable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn write_uarte0_inten_endrx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTEN ENDRX reset value false")
    }
    #[doc = "UARTE0 INTEN TXDRDY: Enable or disable interrupt for TXDRDY event"]
    #[inline]
    pub(crate) fn read_uarte0_inten_txdrdy(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTEN TXDRDY reset value false")
    }
    #[doc = "UARTE0 INTEN TXDRDY: Enable or disable interrupt for TXDRDY event"]
    #[inline]
    pub(crate) fn write_uarte0_inten_txdrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTEN TXDRDY reset value false")
    }
    #[doc = "UARTE0 INTEN ENDTX: Enable or disable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn read_uarte0_inten_endtx(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTEN ENDTX reset value false")
    }
    #[doc = "UARTE0 INTEN ENDTX: Enable or disable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn write_uarte0_inten_endtx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTEN ENDTX reset value false")
    }
    #[doc = "UARTE0 INTEN ERROR: Enable or disable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn read_uarte0_inten_error(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTEN ERROR reset value false")
    }
    #[doc = "UARTE0 INTEN ERROR: Enable or disable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn write_uarte0_inten_error(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTEN ERROR reset value false")
    }
    #[doc = "UARTE0 INTEN RXTO: Enable or disable interrupt for RXTO event"]
    #[inline]
    pub(crate) fn read_uarte0_inten_rxto(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTEN RXTO reset value false")
    }
    #[doc = "UARTE0 INTEN RXTO: Enable or disable interrupt for RXTO event"]
    #[inline]
    pub(crate) fn write_uarte0_inten_rxto(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTEN RXTO reset value false")
    }
    #[doc = "UARTE0 INTEN RXSTARTED: Enable or disable interrupt for RXSTARTED event"]
    #[inline]
    pub(crate) fn read_uarte0_inten_rxstarted(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTEN RXSTARTED reset value false")
    }
    #[doc = "UARTE0 INTEN RXSTARTED: Enable or disable interrupt for RXSTARTED event"]
    #[inline]
    pub(crate) fn write_uarte0_inten_rxstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTEN RXSTARTED reset value false")
    }
    #[doc = "UARTE0 INTEN TXSTARTED: Enable or disable interrupt for TXSTARTED event"]
    #[inline]
    pub(crate) fn read_uarte0_inten_txstarted(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTEN TXSTARTED reset value false")
    }
    #[doc = "UARTE0 INTEN TXSTARTED: Enable or disable interrupt for TXSTARTED event"]
    #[inline]
    pub(crate) fn write_uarte0_inten_txstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTEN TXSTARTED reset value false")
    }
    #[doc = "UARTE0 INTEN TXSTOPPED: Enable or disable interrupt for TXSTOPPED event"]
    #[inline]
    pub(crate) fn read_uarte0_inten_txstopped(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTEN TXSTOPPED reset value false")
    }
    #[doc = "UARTE0 INTEN TXSTOPPED: Enable or disable interrupt for TXSTOPPED event"]
    #[inline]
    pub(crate) fn write_uarte0_inten_txstopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTEN TXSTOPPED reset value false")
    }
    #[doc = "UARTE0 INTENSET CTS: Write '1' to Enable interrupt for CTS event\n\nUART0 INTENSET CTS: Write '1' to Enable interrupt for CTS event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenset_cts(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTENSET CTS, UART0 INTENSET CTS reset value false")
    }
    #[doc = "UARTE0 INTENSET CTS: Write '1' to Enable interrupt for CTS event\n\nUART0 INTENSET CTS: Write '1' to Enable interrupt for CTS event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenset_cts(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTENSET CTS, UART0 INTENSET CTS reset value false")
    }
    #[doc = "UARTE0 INTENSET NCTS: Write '1' to Enable interrupt for NCTS event\n\nUART0 INTENSET NCTS: Write '1' to Enable interrupt for NCTS event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenset_ncts(&self) -> MemResult<bool> {
        todo!(
            "read UARTE0 INTENSET NCTS, UART0 INTENSET NCTS reset value false"
        )
    }
    #[doc = "UARTE0 INTENSET NCTS: Write '1' to Enable interrupt for NCTS event\n\nUART0 INTENSET NCTS: Write '1' to Enable interrupt for NCTS event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenset_ncts(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!(
            "write UARTE0 INTENSET NCTS, UART0 INTENSET NCTS reset value false"
        )
    }
    #[doc = "UARTE0 INTENSET RXDRDY: Write '1' to Enable interrupt for RXDRDY event\n\nUART0 INTENSET RXDRDY: Write '1' to Enable interrupt for RXDRDY event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenset_rxdrdy(&self) -> MemResult<bool> {
        todo ! ("read UARTE0 INTENSET RXDRDY, UART0 INTENSET RXDRDY reset value false")
    }
    #[doc = "UARTE0 INTENSET RXDRDY: Write '1' to Enable interrupt for RXDRDY event\n\nUART0 INTENSET RXDRDY: Write '1' to Enable interrupt for RXDRDY event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenset_rxdrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 INTENSET RXDRDY, UART0 INTENSET RXDRDY reset value false")
    }
    #[doc = "UARTE0 INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenset_endrx(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTENSET ENDRX reset value false")
    }
    #[doc = "UARTE0 INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenset_endrx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTENSET ENDRX reset value false")
    }
    #[doc = "UARTE0 INTENSET TXDRDY: Write '1' to Enable interrupt for TXDRDY event\n\nUART0 INTENSET TXDRDY: Write '1' to Enable interrupt for TXDRDY event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenset_txdrdy(&self) -> MemResult<bool> {
        todo ! ("read UARTE0 INTENSET TXDRDY, UART0 INTENSET TXDRDY reset value false")
    }
    #[doc = "UARTE0 INTENSET TXDRDY: Write '1' to Enable interrupt for TXDRDY event\n\nUART0 INTENSET TXDRDY: Write '1' to Enable interrupt for TXDRDY event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenset_txdrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 INTENSET TXDRDY, UART0 INTENSET TXDRDY reset value false")
    }
    #[doc = "UARTE0 INTENSET ENDTX: Write '1' to Enable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenset_endtx(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTENSET ENDTX reset value false")
    }
    #[doc = "UARTE0 INTENSET ENDTX: Write '1' to Enable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenset_endtx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTENSET ENDTX reset value false")
    }
    #[doc = "UARTE0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event\n\nUART0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenset_error(&self) -> MemResult<bool> {
        todo ! ("read UARTE0 INTENSET ERROR, UART0 INTENSET ERROR reset value false")
    }
    #[doc = "UARTE0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event\n\nUART0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenset_error(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 INTENSET ERROR, UART0 INTENSET ERROR reset value false")
    }
    #[doc = "UARTE0 INTENSET RXTO: Write '1' to Enable interrupt for RXTO event\n\nUART0 INTENSET RXTO: Write '1' to Enable interrupt for RXTO event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenset_rxto(&self) -> MemResult<bool> {
        todo!(
            "read UARTE0 INTENSET RXTO, UART0 INTENSET RXTO reset value false"
        )
    }
    #[doc = "UARTE0 INTENSET RXTO: Write '1' to Enable interrupt for RXTO event\n\nUART0 INTENSET RXTO: Write '1' to Enable interrupt for RXTO event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenset_rxto(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!(
            "write UARTE0 INTENSET RXTO, UART0 INTENSET RXTO reset value false"
        )
    }
    #[doc = "UARTE0 INTENSET RXSTARTED: Write '1' to Enable interrupt for RXSTARTED event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenset_rxstarted(
        &self,
    ) -> MemResult<bool> {
        todo!("read UARTE0 INTENSET RXSTARTED reset value false")
    }
    #[doc = "UARTE0 INTENSET RXSTARTED: Write '1' to Enable interrupt for RXSTARTED event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenset_rxstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTENSET RXSTARTED reset value false")
    }
    #[doc = "UARTE0 INTENSET TXSTARTED: Write '1' to Enable interrupt for TXSTARTED event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenset_txstarted(
        &self,
    ) -> MemResult<bool> {
        todo!("read UARTE0 INTENSET TXSTARTED reset value false")
    }
    #[doc = "UARTE0 INTENSET TXSTARTED: Write '1' to Enable interrupt for TXSTARTED event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenset_txstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTENSET TXSTARTED reset value false")
    }
    #[doc = "UARTE0 INTENSET TXSTOPPED: Write '1' to Enable interrupt for TXSTOPPED event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenset_txstopped(
        &self,
    ) -> MemResult<bool> {
        todo!("read UARTE0 INTENSET TXSTOPPED reset value false")
    }
    #[doc = "UARTE0 INTENSET TXSTOPPED: Write '1' to Enable interrupt for TXSTOPPED event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenset_txstopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTENSET TXSTOPPED reset value false")
    }
    #[doc = "UARTE0 INTENCLR CTS: Write '1' to Disable interrupt for CTS event\n\nUART0 INTENCLR CTS: Write '1' to Disable interrupt for CTS event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenclr_cts(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTENCLR CTS, UART0 INTENCLR CTS reset value false")
    }
    #[doc = "UARTE0 INTENCLR CTS: Write '1' to Disable interrupt for CTS event\n\nUART0 INTENCLR CTS: Write '1' to Disable interrupt for CTS event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenclr_cts(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTENCLR CTS, UART0 INTENCLR CTS reset value false")
    }
    #[doc = "UARTE0 INTENCLR NCTS: Write '1' to Disable interrupt for NCTS event\n\nUART0 INTENCLR NCTS: Write '1' to Disable interrupt for NCTS event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenclr_ncts(&self) -> MemResult<bool> {
        todo!(
            "read UARTE0 INTENCLR NCTS, UART0 INTENCLR NCTS reset value false"
        )
    }
    #[doc = "UARTE0 INTENCLR NCTS: Write '1' to Disable interrupt for NCTS event\n\nUART0 INTENCLR NCTS: Write '1' to Disable interrupt for NCTS event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenclr_ncts(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!(
            "write UARTE0 INTENCLR NCTS, UART0 INTENCLR NCTS reset value false"
        )
    }
    #[doc = "UARTE0 INTENCLR RXDRDY: Write '1' to Disable interrupt for RXDRDY event\n\nUART0 INTENCLR RXDRDY: Write '1' to Disable interrupt for RXDRDY event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenclr_rxdrdy(&self) -> MemResult<bool> {
        todo ! ("read UARTE0 INTENCLR RXDRDY, UART0 INTENCLR RXDRDY reset value false")
    }
    #[doc = "UARTE0 INTENCLR RXDRDY: Write '1' to Disable interrupt for RXDRDY event\n\nUART0 INTENCLR RXDRDY: Write '1' to Disable interrupt for RXDRDY event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenclr_rxdrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 INTENCLR RXDRDY, UART0 INTENCLR RXDRDY reset value false")
    }
    #[doc = "UARTE0 INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenclr_endrx(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTENCLR ENDRX reset value false")
    }
    #[doc = "UARTE0 INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenclr_endrx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTENCLR ENDRX reset value false")
    }
    #[doc = "UARTE0 INTENCLR TXDRDY: Write '1' to Disable interrupt for TXDRDY event\n\nUART0 INTENCLR TXDRDY: Write '1' to Disable interrupt for TXDRDY event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenclr_txdrdy(&self) -> MemResult<bool> {
        todo ! ("read UARTE0 INTENCLR TXDRDY, UART0 INTENCLR TXDRDY reset value false")
    }
    #[doc = "UARTE0 INTENCLR TXDRDY: Write '1' to Disable interrupt for TXDRDY event\n\nUART0 INTENCLR TXDRDY: Write '1' to Disable interrupt for TXDRDY event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenclr_txdrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 INTENCLR TXDRDY, UART0 INTENCLR TXDRDY reset value false")
    }
    #[doc = "UARTE0 INTENCLR ENDTX: Write '1' to Disable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenclr_endtx(&self) -> MemResult<bool> {
        todo!("read UARTE0 INTENCLR ENDTX reset value false")
    }
    #[doc = "UARTE0 INTENCLR ENDTX: Write '1' to Disable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenclr_endtx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTENCLR ENDTX reset value false")
    }
    #[doc = "UARTE0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event\n\nUART0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenclr_error(&self) -> MemResult<bool> {
        todo ! ("read UARTE0 INTENCLR ERROR, UART0 INTENCLR ERROR reset value false")
    }
    #[doc = "UARTE0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event\n\nUART0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenclr_error(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 INTENCLR ERROR, UART0 INTENCLR ERROR reset value false")
    }
    #[doc = "UARTE0 INTENCLR RXTO: Write '1' to Disable interrupt for RXTO event\n\nUART0 INTENCLR RXTO: Write '1' to Disable interrupt for RXTO event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenclr_rxto(&self) -> MemResult<bool> {
        todo!(
            "read UARTE0 INTENCLR RXTO, UART0 INTENCLR RXTO reset value false"
        )
    }
    #[doc = "UARTE0 INTENCLR RXTO: Write '1' to Disable interrupt for RXTO event\n\nUART0 INTENCLR RXTO: Write '1' to Disable interrupt for RXTO event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenclr_rxto(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!(
            "write UARTE0 INTENCLR RXTO, UART0 INTENCLR RXTO reset value false"
        )
    }
    #[doc = "UARTE0 INTENCLR RXSTARTED: Write '1' to Disable interrupt for RXSTARTED event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenclr_rxstarted(
        &self,
    ) -> MemResult<bool> {
        todo!("read UARTE0 INTENCLR RXSTARTED reset value false")
    }
    #[doc = "UARTE0 INTENCLR RXSTARTED: Write '1' to Disable interrupt for RXSTARTED event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenclr_rxstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTENCLR RXSTARTED reset value false")
    }
    #[doc = "UARTE0 INTENCLR TXSTARTED: Write '1' to Disable interrupt for TXSTARTED event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenclr_txstarted(
        &self,
    ) -> MemResult<bool> {
        todo!("read UARTE0 INTENCLR TXSTARTED reset value false")
    }
    #[doc = "UARTE0 INTENCLR TXSTARTED: Write '1' to Disable interrupt for TXSTARTED event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenclr_txstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTENCLR TXSTARTED reset value false")
    }
    #[doc = "UARTE0 INTENCLR TXSTOPPED: Write '1' to Disable interrupt for TXSTOPPED event"]
    #[inline]
    pub(crate) fn read_uarte0uart0_intenclr_txstopped(
        &self,
    ) -> MemResult<bool> {
        todo!("read UARTE0 INTENCLR TXSTOPPED reset value false")
    }
    #[doc = "UARTE0 INTENCLR TXSTOPPED: Write '1' to Disable interrupt for TXSTOPPED event"]
    #[inline]
    pub(crate) fn write_uarte0uart0_intenclr_txstopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 INTENCLR TXSTOPPED reset value false")
    }
    #[doc = "UARTE0 ERRORSRC OVERRUN: Overrun error\n\nUART0 ERRORSRC OVERRUN: Overrun error"]
    #[inline]
    pub(crate) fn read_uarte0uart0_errorsrc_overrun(&self) -> MemResult<bool> {
        todo ! ("read UARTE0 ERRORSRC OVERRUN, UART0 ERRORSRC OVERRUN reset value false")
    }
    #[doc = "UARTE0 ERRORSRC OVERRUN: Overrun error\n\nUART0 ERRORSRC OVERRUN: Overrun error"]
    #[inline]
    pub(crate) fn write_uarte0uart0_errorsrc_overrun(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 ERRORSRC OVERRUN, UART0 ERRORSRC OVERRUN reset value false")
    }
    #[doc = "UARTE0 ERRORSRC PARITY: Parity error\n\nUART0 ERRORSRC PARITY: Parity error"]
    #[inline]
    pub(crate) fn read_uarte0uart0_errorsrc_parity(&self) -> MemResult<bool> {
        todo ! ("read UARTE0 ERRORSRC PARITY, UART0 ERRORSRC PARITY reset value false")
    }
    #[doc = "UARTE0 ERRORSRC PARITY: Parity error\n\nUART0 ERRORSRC PARITY: Parity error"]
    #[inline]
    pub(crate) fn write_uarte0uart0_errorsrc_parity(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 ERRORSRC PARITY, UART0 ERRORSRC PARITY reset value false")
    }
    #[doc = "UARTE0 ERRORSRC FRAMING: Framing error occurred\n\nUART0 ERRORSRC FRAMING: Framing error occurred"]
    #[inline]
    pub(crate) fn read_uarte0uart0_errorsrc_framing(&self) -> MemResult<bool> {
        todo ! ("read UARTE0 ERRORSRC FRAMING, UART0 ERRORSRC FRAMING reset value false")
    }
    #[doc = "UARTE0 ERRORSRC FRAMING: Framing error occurred\n\nUART0 ERRORSRC FRAMING: Framing error occurred"]
    #[inline]
    pub(crate) fn write_uarte0uart0_errorsrc_framing(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 ERRORSRC FRAMING, UART0 ERRORSRC FRAMING reset value false")
    }
    #[doc = "UARTE0 ERRORSRC BREAK: Break condition\n\nUART0 ERRORSRC BREAK: Break condition"]
    #[inline]
    pub(crate) fn read_uarte0uart0_errorsrc_break(&self) -> MemResult<bool> {
        todo ! ("read UARTE0 ERRORSRC BREAK, UART0 ERRORSRC BREAK reset value false")
    }
    #[doc = "UARTE0 ERRORSRC BREAK: Break condition\n\nUART0 ERRORSRC BREAK: Break condition"]
    #[inline]
    pub(crate) fn write_uarte0uart0_errorsrc_break(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 ERRORSRC BREAK, UART0 ERRORSRC BREAK reset value false")
    }
    #[doc = "UARTE0 ENABLE ENABLE: Enable or disable UARTE\n\nUART0 ENABLE ENABLE: Enable or disable UART"]
    #[inline]
    pub(crate) fn read_uarte0uart0_enable_enable(&self) -> MemResult<u8> {
        todo ! ("read UARTE0 ENABLE ENABLE, UART0 ENABLE ENABLE reset value 0x00 mask 0x0f")
    }
    #[doc = "UARTE0 ENABLE ENABLE: Enable or disable UARTE\n\nUART0 ENABLE ENABLE: Enable or disable UART"]
    #[inline]
    pub(crate) fn write_uarte0uart0_enable_enable(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 ENABLE ENABLE, UART0 ENABLE ENABLE reset value 0x00 mask 0x0f")
    }
    #[doc = "UARTE0 RTS PIN: Pin number\n\nUART0 PSELRTS PSELRTS: Pin number configuration for UART RTS signal"]
    #[inline]
    pub(crate) fn read_uarte0uart0_psel_rts_pin(&self) -> MemResult<u8> {
        todo ! ("read UARTE0 RTS PIN, UART0 PSELRTS PSELRTS reset value 0x1f mask 0x1f")
    }
    #[doc = "UARTE0 RTS PIN: Pin number\n\nUART0 PSELRTS PSELRTS: Pin number configuration for UART RTS signal"]
    #[inline]
    pub(crate) fn write_uarte0uart0_psel_rts_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 RTS PIN, UART0 PSELRTS PSELRTS reset value 0x1f mask 0x1f")
    }
    #[doc = "UARTE0 RTS CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_uarte0uart0_psel_rts_connect(&self) -> MemResult<bool> {
        todo!("read UARTE0 RTS CONNECT reset value true")
    }
    #[doc = "UARTE0 RTS CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_uarte0uart0_psel_rts_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 RTS CONNECT reset value true")
    }
    #[doc = "UARTE0 TXD PIN: Pin number\n\nUART0 PSELTXD PSELTXD: Pin number configuration for UART TXD signal"]
    #[inline]
    pub(crate) fn read_uarte0uart0_psel_txd_pin(&self) -> MemResult<u8> {
        todo ! ("read UARTE0 TXD PIN, UART0 PSELTXD PSELTXD reset value 0x1f mask 0x1f")
    }
    #[doc = "UARTE0 TXD PIN: Pin number\n\nUART0 PSELTXD PSELTXD: Pin number configuration for UART TXD signal"]
    #[inline]
    pub(crate) fn write_uarte0uart0_psel_txd_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 TXD PIN, UART0 PSELTXD PSELTXD reset value 0x1f mask 0x1f")
    }
    #[doc = "UARTE0 TXD CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_uarte0uart0_psel_txd_connect(&self) -> MemResult<bool> {
        todo!("read UARTE0 TXD CONNECT reset value true")
    }
    #[doc = "UARTE0 TXD CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_uarte0uart0_psel_txd_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 TXD CONNECT reset value true")
    }
    #[doc = "UARTE0 CTS PIN: Pin number\n\nUART0 PSELCTS PSELCTS: Pin number configuration for UART CTS signal"]
    #[inline]
    pub(crate) fn read_uarte0uart0_psel_cts_pin(&self) -> MemResult<u8> {
        todo ! ("read UARTE0 CTS PIN, UART0 PSELCTS PSELCTS reset value 0x1f mask 0x1f")
    }
    #[doc = "UARTE0 CTS PIN: Pin number\n\nUART0 PSELCTS PSELCTS: Pin number configuration for UART CTS signal"]
    #[inline]
    pub(crate) fn write_uarte0uart0_psel_cts_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 CTS PIN, UART0 PSELCTS PSELCTS reset value 0x1f mask 0x1f")
    }
    #[doc = "UARTE0 CTS CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_uarte0uart0_psel_cts_connect(&self) -> MemResult<bool> {
        todo!("read UARTE0 CTS CONNECT reset value true")
    }
    #[doc = "UARTE0 CTS CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_uarte0uart0_psel_cts_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 CTS CONNECT reset value true")
    }
    #[doc = "UARTE0 RXD PIN: Pin number\n\nUART0 PSELRXD PSELRXD: Pin number configuration for UART RXD signal"]
    #[inline]
    pub(crate) fn read_uarte0uart0_psel_rxd_pin(&self) -> MemResult<u8> {
        todo ! ("read UARTE0 RXD PIN, UART0 PSELRXD PSELRXD reset value 0x1f mask 0x1f")
    }
    #[doc = "UARTE0 RXD PIN: Pin number\n\nUART0 PSELRXD PSELRXD: Pin number configuration for UART RXD signal"]
    #[inline]
    pub(crate) fn write_uarte0uart0_psel_rxd_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 RXD PIN, UART0 PSELRXD PSELRXD reset value 0x1f mask 0x1f")
    }
    #[doc = "UARTE0 RXD CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_uarte0uart0_psel_rxd_connect(&self) -> MemResult<bool> {
        todo!("read UARTE0 RXD CONNECT reset value true")
    }
    #[doc = "UARTE0 RXD CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_uarte0uart0_psel_rxd_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 RXD CONNECT reset value true")
    }
    #[doc = "UART0 RXD RXD: RX data received in previous transfers, double buffered"]
    #[inline]
    pub(crate) fn read_uart0_rxd_rxd(&self) -> MemResult<u8> {
        todo!("read UART0 RXD RXD reset value 0x00 mask 0xff")
    }
    #[doc = "UART0 TXD TXD: TX data to be transferred"]
    #[inline]
    pub(crate) fn write_uart0_txd_txd(&mut self, _value: u8) -> MemResult<()> {
        todo!("write UART0 TXD TXD reset value 0x00 mask 0xff")
    }
    #[doc = "UARTE0 BAUDRATE: Baud rate. Accuracy depends on the HFCLK source selected.\n\nUART0 BAUDRATE: Baud rate"]
    #[inline]
    pub(crate) fn read_uarte0uart0_baudrate(&self) -> MemResult<u32> {
        todo ! ("read UARTE0 BAUDRATE, UART0 BAUDRATE reset value 0x4000000 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 BAUDRATE: Baud rate. Accuracy depends on the HFCLK source selected.\n\nUART0 BAUDRATE: Baud rate"]
    #[inline]
    pub(crate) fn write_uarte0uart0_baudrate(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 BAUDRATE, UART0 BAUDRATE reset value 0x4000000 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 PTR: Data pointer"]
    #[inline]
    pub(crate) fn read_uarte0_rxd_ptr(&self) -> MemResult<u32> {
        todo!("read UARTE0 PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 PTR: Data pointer"]
    #[inline]
    pub(crate) fn write_uarte0_rxd_ptr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write UARTE0 PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer"]
    #[inline]
    pub(crate) fn read_uarte0_rxd_maxcnt_maxcnt(&self) -> MemResult<u8> {
        todo!("read UARTE0 MAXCNT MAXCNT reset value 0x00 mask 0xff")
    }
    #[doc = "UARTE0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer"]
    #[inline]
    pub(crate) fn write_uarte0_rxd_maxcnt_maxcnt(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write UARTE0 MAXCNT MAXCNT reset value 0x00 mask 0xff")
    }
    #[doc = "UARTE0 AMOUNT AMOUNT: Number of bytes transferred in the last transaction"]
    #[inline]
    pub(crate) fn read_uarte0_rxd_amount_amount(&self) -> MemResult<u8> {
        todo!("read UARTE0 AMOUNT AMOUNT reset value 0x00 mask 0xff")
    }
    #[doc = "UARTE0 PTR: Data pointer"]
    #[inline]
    pub(crate) fn read_uarte0_txd_ptr(&self) -> MemResult<u32> {
        todo!("read UARTE0 PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 PTR: Data pointer"]
    #[inline]
    pub(crate) fn write_uarte0_txd_ptr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write UARTE0 PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "UARTE0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer"]
    #[inline]
    pub(crate) fn read_uarte0_txd_maxcnt_maxcnt(&self) -> MemResult<u8> {
        todo!("read UARTE0 MAXCNT MAXCNT reset value 0x00 mask 0xff")
    }
    #[doc = "UARTE0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer"]
    #[inline]
    pub(crate) fn write_uarte0_txd_maxcnt_maxcnt(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write UARTE0 MAXCNT MAXCNT reset value 0x00 mask 0xff")
    }
    #[doc = "UARTE0 AMOUNT AMOUNT: Number of bytes transferred in the last transaction"]
    #[inline]
    pub(crate) fn read_uarte0_txd_amount_amount(&self) -> MemResult<u8> {
        todo!("read UARTE0 AMOUNT AMOUNT reset value 0x00 mask 0xff")
    }
    #[doc = "UARTE0 CONFIG HWFC: Hardware flow control\n\nUART0 CONFIG HWFC: Hardware flow control"]
    #[inline]
    pub(crate) fn read_uarte0uart0_config_hwfc(&self) -> MemResult<bool> {
        todo!("read UARTE0 CONFIG HWFC, UART0 CONFIG HWFC reset value false")
    }
    #[doc = "UARTE0 CONFIG HWFC: Hardware flow control\n\nUART0 CONFIG HWFC: Hardware flow control"]
    #[inline]
    pub(crate) fn write_uarte0uart0_config_hwfc(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write UARTE0 CONFIG HWFC, UART0 CONFIG HWFC reset value false")
    }
    #[doc = "UARTE0 CONFIG PARITY: Parity\n\nUART0 CONFIG PARITY: Parity"]
    #[inline]
    pub(crate) fn read_uarte0uart0_config_parity(&self) -> MemResult<u8> {
        todo ! ("read UARTE0 CONFIG PARITY, UART0 CONFIG PARITY reset value 0x00 mask 0x07")
    }
    #[doc = "UARTE0 CONFIG PARITY: Parity\n\nUART0 CONFIG PARITY: Parity"]
    #[inline]
    pub(crate) fn write_uarte0uart0_config_parity(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write UARTE0 CONFIG PARITY, UART0 CONFIG PARITY reset value 0x00 mask 0x07")
    }
    #[doc = "TWIM0 TASKS_STARTRX: Start TWI receive sequence\n\nTWI0 TASKS_STARTRX: Start TWI receive sequence\n\nTWIM0 TASKS_STARTRX: Start TWI receive sequence\n\nTWI0 TASKS_STARTRX: Start TWI receive sequence"]
    #[inline]
    pub(crate) fn write_twim0twi0_tasks_startrx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 TASKS_STARTRX, TWI0 TASKS_STARTRX, TWIM0 TASKS_STARTRX, TWI0 TASKS_STARTRX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIM0 TASKS_STARTTX: Start TWI transmit sequence\n\nTWI0 TASKS_STARTTX: Start TWI transmit sequence\n\nTWIM0 TASKS_STARTTX: Start TWI transmit sequence\n\nTWI0 TASKS_STARTTX: Start TWI transmit sequence"]
    #[inline]
    pub(crate) fn write_twim0twi0_tasks_starttx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 TASKS_STARTTX, TWI0 TASKS_STARTTX, TWIM0 TASKS_STARTTX, TWI0 TASKS_STARTTX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 TASKS_START: Start SPI transaction\n\nSPIM0 TASKS_START: Start SPI transaction\n\nSPIM0 TASKS_START: Start SPI transaction"]
    #[inline]
    pub(crate) fn write_spim0_tasks_start(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 TASKS_START, SPIM0 TASKS_START, SPIM0 TASKS_START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 TASKS_STOP: Stop SPI transaction\n\nTWIM0 TASKS_STOP: Stop TWI transaction. Must be issued while the TWI master is not suspended.\n\nTWIS0 TASKS_STOP: Stop TWI transaction\n\nTWI0 TASKS_STOP: Stop TWI transaction\n\nSPIM0 TASKS_STOP: Stop SPI transaction\n\nTWIM0 TASKS_STOP: Stop TWI transaction. Must be issued while the TWI master is not suspended.\n\nTWIS0 TASKS_STOP: Stop TWI transaction\n\nTWI0 TASKS_STOP: Stop TWI transaction\n\nSPIM0 TASKS_STOP: Stop SPI transaction"]
    #[inline]
    pub(crate) fn write_spim0twim0twis0twi0_tasks_stop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 TASKS_STOP, TWIM0 TASKS_STOP, TWIS0 TASKS_STOP, TWI0 TASKS_STOP, SPIM0 TASKS_STOP, TWIM0 TASKS_STOP, TWIS0 TASKS_STOP, TWI0 TASKS_STOP, SPIM0 TASKS_STOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 TASKS_SUSPEND: Suspend SPI transaction\n\nTWIM0 TASKS_SUSPEND: Suspend TWI transaction\n\nTWIS0 TASKS_SUSPEND: Suspend TWI transaction\n\nTWI0 TASKS_SUSPEND: Suspend TWI transaction\n\nSPIM0 TASKS_SUSPEND: Suspend SPI transaction\n\nTWIM0 TASKS_SUSPEND: Suspend TWI transaction\n\nTWIS0 TASKS_SUSPEND: Suspend TWI transaction\n\nTWI0 TASKS_SUSPEND: Suspend TWI transaction\n\nSPIM0 TASKS_SUSPEND: Suspend SPI transaction"]
    #[inline]
    pub(crate) fn write_spim0twim0twis0twi0_tasks_suspend(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 TASKS_SUSPEND, TWIM0 TASKS_SUSPEND, TWIS0 TASKS_SUSPEND, TWI0 TASKS_SUSPEND, SPIM0 TASKS_SUSPEND, TWIM0 TASKS_SUSPEND, TWIS0 TASKS_SUSPEND, TWI0 TASKS_SUSPEND, SPIM0 TASKS_SUSPEND reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 TASKS_RESUME: Resume SPI transaction\n\nTWIM0 TASKS_RESUME: Resume TWI transaction\n\nTWIS0 TASKS_RESUME: Resume TWI transaction\n\nTWI0 TASKS_RESUME: Resume TWI transaction\n\nSPIM0 TASKS_RESUME: Resume SPI transaction\n\nTWIM0 TASKS_RESUME: Resume TWI transaction\n\nTWIS0 TASKS_RESUME: Resume TWI transaction\n\nTWI0 TASKS_RESUME: Resume TWI transaction\n\nSPIM0 TASKS_RESUME: Resume SPI transaction"]
    #[inline]
    pub(crate) fn write_spim0twim0twis0twi0_tasks_resume(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 TASKS_RESUME, TWIM0 TASKS_RESUME, TWIS0 TASKS_RESUME, TWI0 TASKS_RESUME, SPIM0 TASKS_RESUME, TWIM0 TASKS_RESUME, TWIS0 TASKS_RESUME, TWI0 TASKS_RESUME, SPIM0 TASKS_RESUME reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIS0 TASKS_ACQUIRE: Acquire SPI semaphore\n\nSPIS0 TASKS_ACQUIRE: Acquire SPI semaphore\n\nSPIS0 TASKS_ACQUIRE: Acquire SPI semaphore"]
    #[inline]
    pub(crate) fn write_spis0_tasks_acquire(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIS0 TASKS_ACQUIRE, SPIS0 TASKS_ACQUIRE, SPIS0 TASKS_ACQUIRE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIS0 TASKS_RELEASE: Release SPI semaphore, enabling the SPI slave to acquire it\n\nSPIS0 TASKS_RELEASE: Release SPI semaphore, enabling the SPI slave to acquire it\n\nSPIS0 TASKS_RELEASE: Release SPI semaphore, enabling the SPI slave to acquire it"]
    #[inline]
    pub(crate) fn write_spis0_tasks_release(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIS0 TASKS_RELEASE, SPIS0 TASKS_RELEASE, SPIS0 TASKS_RELEASE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIS0 TASKS_PREPARERX: Prepare the TWI slave to respond to a write command\n\nTWIS0 TASKS_PREPARERX: Prepare the TWI slave to respond to a write command"]
    #[inline]
    pub(crate) fn write_twis0_tasks_preparerx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TWIS0 TASKS_PREPARERX, TWIS0 TASKS_PREPARERX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIS0 TASKS_PREPARETX: Prepare the TWI slave to respond to a read command\n\nTWIS0 TASKS_PREPARETX: Prepare the TWI slave to respond to a read command"]
    #[inline]
    pub(crate) fn write_twis0_tasks_preparetx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TWIS0 TASKS_PREPARETX, TWIS0 TASKS_PREPARETX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 EVENTS_STOPPED: SPI transaction has stopped\n\nSPIS0 EVENTS_END: Granted transaction completed\n\nTWIM0 EVENTS_STOPPED: TWI stopped\n\nTWIS0 EVENTS_STOPPED: TWI stopped\n\nTWI0 EVENTS_STOPPED: TWI stopped\n\nSPIM0 EVENTS_STOPPED: SPI transaction has stopped\n\nSPIS0 EVENTS_END: Granted transaction completed\n\nTWIM0 EVENTS_STOPPED: TWI stopped\n\nTWIS0 EVENTS_STOPPED: TWI stopped\n\nTWI0 EVENTS_STOPPED: TWI stopped\n\nSPIM0 EVENTS_STOPPED: SPI transaction has stopped\n\nSPIS0 EVENTS_END: Granted transaction completed"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0twi0_events_stopped(
        &self,
    ) -> MemResult<u32> {
        todo ! ("read SPIM0 EVENTS_STOPPED, SPIS0 EVENTS_END, TWIM0 EVENTS_STOPPED, TWIS0 EVENTS_STOPPED, TWI0 EVENTS_STOPPED, SPIM0 EVENTS_STOPPED, SPIS0 EVENTS_END, TWIM0 EVENTS_STOPPED, TWIS0 EVENTS_STOPPED, TWI0 EVENTS_STOPPED, SPIM0 EVENTS_STOPPED, SPIS0 EVENTS_END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 EVENTS_STOPPED: SPI transaction has stopped\n\nSPIS0 EVENTS_END: Granted transaction completed\n\nTWIM0 EVENTS_STOPPED: TWI stopped\n\nTWIS0 EVENTS_STOPPED: TWI stopped\n\nTWI0 EVENTS_STOPPED: TWI stopped\n\nSPIM0 EVENTS_STOPPED: SPI transaction has stopped\n\nSPIS0 EVENTS_END: Granted transaction completed\n\nTWIM0 EVENTS_STOPPED: TWI stopped\n\nTWIS0 EVENTS_STOPPED: TWI stopped\n\nTWI0 EVENTS_STOPPED: TWI stopped\n\nSPIM0 EVENTS_STOPPED: SPI transaction has stopped\n\nSPIS0 EVENTS_END: Granted transaction completed"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0twi0_events_stopped(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 EVENTS_STOPPED, SPIS0 EVENTS_END, TWIM0 EVENTS_STOPPED, TWIS0 EVENTS_STOPPED, TWI0 EVENTS_STOPPED, SPIM0 EVENTS_STOPPED, SPIS0 EVENTS_END, TWIM0 EVENTS_STOPPED, TWIS0 EVENTS_STOPPED, TWI0 EVENTS_STOPPED, SPIM0 EVENTS_STOPPED, SPIS0 EVENTS_END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPI0 EVENTS_READY: TXD byte sent and RXD byte received\n\nTWI0 EVENTS_RXDREADY: TWI RXD byte received\n\nSPI0 EVENTS_READY: TXD byte sent and RXD byte received\n\nTWI0 EVENTS_RXDREADY: TWI RXD byte received\n\nSPI0 EVENTS_READY: TXD byte sent and RXD byte received"]
    #[inline]
    pub(crate) fn read_spi0twi0_events_ready(&self) -> MemResult<u32> {
        todo ! ("read SPI0 EVENTS_READY, TWI0 EVENTS_RXDREADY, SPI0 EVENTS_READY, TWI0 EVENTS_RXDREADY, SPI0 EVENTS_READY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPI0 EVENTS_READY: TXD byte sent and RXD byte received\n\nTWI0 EVENTS_RXDREADY: TWI RXD byte received\n\nSPI0 EVENTS_READY: TXD byte sent and RXD byte received\n\nTWI0 EVENTS_RXDREADY: TWI RXD byte received\n\nSPI0 EVENTS_READY: TXD byte sent and RXD byte received"]
    #[inline]
    pub(crate) fn write_spi0twi0_events_ready(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPI0 EVENTS_READY, TWI0 EVENTS_RXDREADY, SPI0 EVENTS_READY, TWI0 EVENTS_RXDREADY, SPI0 EVENTS_READY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 EVENTS_ENDRX: End of RXD buffer reached\n\nSPIS0 EVENTS_ENDRX: End of RXD buffer reached\n\nSPIM0 EVENTS_ENDRX: End of RXD buffer reached\n\nSPIS0 EVENTS_ENDRX: End of RXD buffer reached\n\nSPIM0 EVENTS_ENDRX: End of RXD buffer reached\n\nSPIS0 EVENTS_ENDRX: End of RXD buffer reached"]
    #[inline]
    pub(crate) fn read_spim0spis0_events_endrx(&self) -> MemResult<u32> {
        todo ! ("read SPIM0 EVENTS_ENDRX, SPIS0 EVENTS_ENDRX, SPIM0 EVENTS_ENDRX, SPIS0 EVENTS_ENDRX, SPIM0 EVENTS_ENDRX, SPIS0 EVENTS_ENDRX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 EVENTS_ENDRX: End of RXD buffer reached\n\nSPIS0 EVENTS_ENDRX: End of RXD buffer reached\n\nSPIM0 EVENTS_ENDRX: End of RXD buffer reached\n\nSPIS0 EVENTS_ENDRX: End of RXD buffer reached\n\nSPIM0 EVENTS_ENDRX: End of RXD buffer reached\n\nSPIS0 EVENTS_ENDRX: End of RXD buffer reached"]
    #[inline]
    pub(crate) fn write_spim0spis0_events_endrx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 EVENTS_ENDRX, SPIS0 EVENTS_ENDRX, SPIM0 EVENTS_ENDRX, SPIS0 EVENTS_ENDRX, SPIM0 EVENTS_ENDRX, SPIS0 EVENTS_ENDRX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 EVENTS_END: End of RXD buffer and TXD buffer reached\n\nSPIM0 EVENTS_END: End of RXD buffer and TXD buffer reached\n\nSPIM0 EVENTS_END: End of RXD buffer and TXD buffer reached"]
    #[inline]
    pub(crate) fn read_spim0_events_end(&self) -> MemResult<u32> {
        todo ! ("read SPIM0 EVENTS_END, SPIM0 EVENTS_END, SPIM0 EVENTS_END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 EVENTS_END: End of RXD buffer and TXD buffer reached\n\nSPIM0 EVENTS_END: End of RXD buffer and TXD buffer reached\n\nSPIM0 EVENTS_END: End of RXD buffer and TXD buffer reached"]
    #[inline]
    pub(crate) fn write_spim0_events_end(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 EVENTS_END, SPIM0 EVENTS_END, SPIM0 EVENTS_END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWI0 EVENTS_TXDSENT: TWI TXD byte sent\n\nTWI0 EVENTS_TXDSENT: TWI TXD byte sent"]
    #[inline]
    pub(crate) fn read_twi0_events_txdsent(&self) -> MemResult<u32> {
        todo ! ("read TWI0 EVENTS_TXDSENT, TWI0 EVENTS_TXDSENT reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWI0 EVENTS_TXDSENT: TWI TXD byte sent\n\nTWI0 EVENTS_TXDSENT: TWI TXD byte sent"]
    #[inline]
    pub(crate) fn write_twi0_events_txdsent(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TWI0 EVENTS_TXDSENT, TWI0 EVENTS_TXDSENT reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 EVENTS_ENDTX: End of TXD buffer reached\n\nSPIM0 EVENTS_ENDTX: End of TXD buffer reached\n\nSPIM0 EVENTS_ENDTX: End of TXD buffer reached"]
    #[inline]
    pub(crate) fn read_spim0_events_endtx(&self) -> MemResult<u32> {
        todo ! ("read SPIM0 EVENTS_ENDTX, SPIM0 EVENTS_ENDTX, SPIM0 EVENTS_ENDTX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 EVENTS_ENDTX: End of TXD buffer reached\n\nSPIM0 EVENTS_ENDTX: End of TXD buffer reached\n\nSPIM0 EVENTS_ENDTX: End of TXD buffer reached"]
    #[inline]
    pub(crate) fn write_spim0_events_endtx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 EVENTS_ENDTX, SPIM0 EVENTS_ENDTX, SPIM0 EVENTS_ENDTX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIM0 EVENTS_ERROR: TWI error\n\nTWIS0 EVENTS_ERROR: TWI error\n\nTWI0 EVENTS_ERROR: TWI error\n\nTWIM0 EVENTS_ERROR: TWI error\n\nTWIS0 EVENTS_ERROR: TWI error\n\nTWI0 EVENTS_ERROR: TWI error"]
    #[inline]
    pub(crate) fn read_twim0twis0twi0_events_error(&self) -> MemResult<u32> {
        todo ! ("read TWIM0 EVENTS_ERROR, TWIS0 EVENTS_ERROR, TWI0 EVENTS_ERROR, TWIM0 EVENTS_ERROR, TWIS0 EVENTS_ERROR, TWI0 EVENTS_ERROR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIM0 EVENTS_ERROR: TWI error\n\nTWIS0 EVENTS_ERROR: TWI error\n\nTWI0 EVENTS_ERROR: TWI error\n\nTWIM0 EVENTS_ERROR: TWI error\n\nTWIS0 EVENTS_ERROR: TWI error\n\nTWI0 EVENTS_ERROR: TWI error"]
    #[inline]
    pub(crate) fn write_twim0twis0twi0_events_error(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 EVENTS_ERROR, TWIS0 EVENTS_ERROR, TWI0 EVENTS_ERROR, TWIM0 EVENTS_ERROR, TWIS0 EVENTS_ERROR, TWI0 EVENTS_ERROR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIS0 EVENTS_ACQUIRED: Semaphore acquired\n\nSPIS0 EVENTS_ACQUIRED: Semaphore acquired\n\nSPIS0 EVENTS_ACQUIRED: Semaphore acquired"]
    #[inline]
    pub(crate) fn read_spis0_events_acquired(&self) -> MemResult<u32> {
        todo ! ("read SPIS0 EVENTS_ACQUIRED, SPIS0 EVENTS_ACQUIRED, SPIS0 EVENTS_ACQUIRED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIS0 EVENTS_ACQUIRED: Semaphore acquired\n\nSPIS0 EVENTS_ACQUIRED: Semaphore acquired\n\nSPIS0 EVENTS_ACQUIRED: Semaphore acquired"]
    #[inline]
    pub(crate) fn write_spis0_events_acquired(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIS0 EVENTS_ACQUIRED, SPIS0 EVENTS_ACQUIRED, SPIS0 EVENTS_ACQUIRED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWI0 EVENTS_BB: TWI byte boundary, generated before each byte that is sent or received\n\nTWI0 EVENTS_BB: TWI byte boundary, generated before each byte that is sent or received"]
    #[inline]
    pub(crate) fn read_twi0_events_bb(&self) -> MemResult<u32> {
        todo ! ("read TWI0 EVENTS_BB, TWI0 EVENTS_BB reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWI0 EVENTS_BB: TWI byte boundary, generated before each byte that is sent or received\n\nTWI0 EVENTS_BB: TWI byte boundary, generated before each byte that is sent or received"]
    #[inline]
    pub(crate) fn write_twi0_events_bb(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TWI0 EVENTS_BB, TWI0 EVENTS_BB reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIM0 EVENTS_SUSPENDED: Last byte has been sent out after the SUSPEND task has been issued, TWI traffic is now suspended.\n\nTWI0 EVENTS_SUSPENDED: TWI entered the suspended state\n\nTWIM0 EVENTS_SUSPENDED: Last byte has been sent out after the SUSPEND task has been issued, TWI traffic is now suspended.\n\nTWI0 EVENTS_SUSPENDED: TWI entered the suspended state"]
    #[inline]
    pub(crate) fn read_twim0twi0_events_suspended(&self) -> MemResult<u32> {
        todo ! ("read TWIM0 EVENTS_SUSPENDED, TWI0 EVENTS_SUSPENDED, TWIM0 EVENTS_SUSPENDED, TWI0 EVENTS_SUSPENDED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIM0 EVENTS_SUSPENDED: Last byte has been sent out after the SUSPEND task has been issued, TWI traffic is now suspended.\n\nTWI0 EVENTS_SUSPENDED: TWI entered the suspended state\n\nTWIM0 EVENTS_SUSPENDED: Last byte has been sent out after the SUSPEND task has been issued, TWI traffic is now suspended.\n\nTWI0 EVENTS_SUSPENDED: TWI entered the suspended state"]
    #[inline]
    pub(crate) fn write_twim0twi0_events_suspended(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 EVENTS_SUSPENDED, TWI0 EVENTS_SUSPENDED, TWIM0 EVENTS_SUSPENDED, TWI0 EVENTS_SUSPENDED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 EVENTS_STARTED: Transaction started\n\nTWIM0 EVENTS_RXSTARTED: Receive sequence started\n\nTWIS0 EVENTS_RXSTARTED: Receive sequence started\n\nSPIM0 EVENTS_STARTED: Transaction started\n\nTWIM0 EVENTS_RXSTARTED: Receive sequence started\n\nTWIS0 EVENTS_RXSTARTED: Receive sequence started\n\nSPIM0 EVENTS_STARTED: Transaction started"]
    #[inline]
    pub(crate) fn read_spim0twim0twis0_events_started(&self) -> MemResult<u32> {
        todo ! ("read SPIM0 EVENTS_STARTED, TWIM0 EVENTS_RXSTARTED, TWIS0 EVENTS_RXSTARTED, SPIM0 EVENTS_STARTED, TWIM0 EVENTS_RXSTARTED, TWIS0 EVENTS_RXSTARTED, SPIM0 EVENTS_STARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 EVENTS_STARTED: Transaction started\n\nTWIM0 EVENTS_RXSTARTED: Receive sequence started\n\nTWIS0 EVENTS_RXSTARTED: Receive sequence started\n\nSPIM0 EVENTS_STARTED: Transaction started\n\nTWIM0 EVENTS_RXSTARTED: Receive sequence started\n\nTWIS0 EVENTS_RXSTARTED: Receive sequence started\n\nSPIM0 EVENTS_STARTED: Transaction started"]
    #[inline]
    pub(crate) fn write_spim0twim0twis0_events_started(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 EVENTS_STARTED, TWIM0 EVENTS_RXSTARTED, TWIS0 EVENTS_RXSTARTED, SPIM0 EVENTS_STARTED, TWIM0 EVENTS_RXSTARTED, TWIS0 EVENTS_RXSTARTED, SPIM0 EVENTS_STARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIM0 EVENTS_TXSTARTED: Transmit sequence started\n\nTWIS0 EVENTS_TXSTARTED: Transmit sequence started\n\nTWIM0 EVENTS_TXSTARTED: Transmit sequence started\n\nTWIS0 EVENTS_TXSTARTED: Transmit sequence started"]
    #[inline]
    pub(crate) fn read_twim0twis0_events_txstarted(&self) -> MemResult<u32> {
        todo ! ("read TWIM0 EVENTS_TXSTARTED, TWIS0 EVENTS_TXSTARTED, TWIM0 EVENTS_TXSTARTED, TWIS0 EVENTS_TXSTARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIM0 EVENTS_TXSTARTED: Transmit sequence started\n\nTWIS0 EVENTS_TXSTARTED: Transmit sequence started\n\nTWIM0 EVENTS_TXSTARTED: Transmit sequence started\n\nTWIS0 EVENTS_TXSTARTED: Transmit sequence started"]
    #[inline]
    pub(crate) fn write_twim0twis0_events_txstarted(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 EVENTS_TXSTARTED, TWIS0 EVENTS_TXSTARTED, TWIM0 EVENTS_TXSTARTED, TWIS0 EVENTS_TXSTARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIM0 EVENTS_LASTRX: Byte boundary, starting to receive the last byte\n\nTWIM0 EVENTS_LASTRX: Byte boundary, starting to receive the last byte"]
    #[inline]
    pub(crate) fn read_twim0_events_lastrx(&self) -> MemResult<u32> {
        todo ! ("read TWIM0 EVENTS_LASTRX, TWIM0 EVENTS_LASTRX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIM0 EVENTS_LASTRX: Byte boundary, starting to receive the last byte\n\nTWIM0 EVENTS_LASTRX: Byte boundary, starting to receive the last byte"]
    #[inline]
    pub(crate) fn write_twim0_events_lastrx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 EVENTS_LASTRX, TWIM0 EVENTS_LASTRX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIM0 EVENTS_LASTTX: Byte boundary, starting to transmit the last byte\n\nTWIM0 EVENTS_LASTTX: Byte boundary, starting to transmit the last byte"]
    #[inline]
    pub(crate) fn read_twim0_events_lasttx(&self) -> MemResult<u32> {
        todo ! ("read TWIM0 EVENTS_LASTTX, TWIM0 EVENTS_LASTTX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIM0 EVENTS_LASTTX: Byte boundary, starting to transmit the last byte\n\nTWIM0 EVENTS_LASTTX: Byte boundary, starting to transmit the last byte"]
    #[inline]
    pub(crate) fn write_twim0_events_lasttx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 EVENTS_LASTTX, TWIM0 EVENTS_LASTTX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIS0 EVENTS_WRITE: Write command received\n\nTWIS0 EVENTS_WRITE: Write command received"]
    #[inline]
    pub(crate) fn read_twis0_events_write(&self) -> MemResult<u32> {
        todo ! ("read TWIS0 EVENTS_WRITE, TWIS0 EVENTS_WRITE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIS0 EVENTS_WRITE: Write command received\n\nTWIS0 EVENTS_WRITE: Write command received"]
    #[inline]
    pub(crate) fn write_twis0_events_write(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TWIS0 EVENTS_WRITE, TWIS0 EVENTS_WRITE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIS0 EVENTS_READ: Read command received\n\nTWIS0 EVENTS_READ: Read command received"]
    #[inline]
    pub(crate) fn read_twis0_events_read(&self) -> MemResult<u32> {
        todo ! ("read TWIS0 EVENTS_READ, TWIS0 EVENTS_READ reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWIS0 EVENTS_READ: Read command received\n\nTWIS0 EVENTS_READ: Read command received"]
    #[inline]
    pub(crate) fn write_twis0_events_read(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TWIS0 EVENTS_READ, TWIS0 EVENTS_READ reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TWI0 SHORTS BB_SUSPEND: Shortcut between BB event and SUSPEND task\n\nTWI0 SHORTS BB_SUSPEND: Shortcut between BB event and SUSPEND task"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0twi0_shorts_bb_suspend(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWI0 SHORTS BB_SUSPEND, TWI0 SHORTS BB_SUSPEND reset value false")
    }
    #[doc = "TWI0 SHORTS BB_SUSPEND: Shortcut between BB event and SUSPEND task\n\nTWI0 SHORTS BB_SUSPEND: Shortcut between BB event and SUSPEND task"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0twi0_shorts_bb_suspend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWI0 SHORTS BB_SUSPEND, TWI0 SHORTS BB_SUSPEND reset value false")
    }
    #[doc = "TWI0 SHORTS BB_STOP: Shortcut between BB event and STOP task\n\nTWI0 SHORTS BB_STOP: Shortcut between BB event and STOP task"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0twi0_shorts_bb_stop(
        &self,
    ) -> MemResult<bool> {
        todo!("read TWI0 SHORTS BB_STOP, TWI0 SHORTS BB_STOP reset value false")
    }
    #[doc = "TWI0 SHORTS BB_STOP: Shortcut between BB event and STOP task\n\nTWI0 SHORTS BB_STOP: Shortcut between BB event and STOP task"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0twi0_shorts_bb_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!(
            "write TWI0 SHORTS BB_STOP, TWI0 SHORTS BB_STOP reset value false"
        )
    }
    #[doc = "SPIS0 SHORTS END_ACQUIRE: Shortcut between END event and ACQUIRE task\n\nSPIS0 SHORTS END_ACQUIRE: Shortcut between END event and ACQUIRE task\n\nSPIS0 SHORTS END_ACQUIRE: Shortcut between END event and ACQUIRE task"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0twi0_shorts_end_acquire(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIS0 SHORTS END_ACQUIRE, SPIS0 SHORTS END_ACQUIRE, SPIS0 SHORTS END_ACQUIRE reset value false")
    }
    #[doc = "SPIS0 SHORTS END_ACQUIRE: Shortcut between END event and ACQUIRE task\n\nSPIS0 SHORTS END_ACQUIRE: Shortcut between END event and ACQUIRE task\n\nSPIS0 SHORTS END_ACQUIRE: Shortcut between END event and ACQUIRE task"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0twi0_shorts_end_acquire(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIS0 SHORTS END_ACQUIRE, SPIS0 SHORTS END_ACQUIRE, SPIS0 SHORTS END_ACQUIRE reset value false")
    }
    #[doc = "TWIM0 SHORTS LASTTX_STARTRX: Shortcut between LASTTX event and STARTRX task\n\nTWIM0 SHORTS LASTTX_STARTRX: Shortcut between LASTTX event and STARTRX task"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0twi0_shorts_lasttx_startrx(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 SHORTS LASTTX_STARTRX, TWIM0 SHORTS LASTTX_STARTRX reset value false")
    }
    #[doc = "TWIM0 SHORTS LASTTX_STARTRX: Shortcut between LASTTX event and STARTRX task\n\nTWIM0 SHORTS LASTTX_STARTRX: Shortcut between LASTTX event and STARTRX task"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0twi0_shorts_lasttx_startrx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 SHORTS LASTTX_STARTRX, TWIM0 SHORTS LASTTX_STARTRX reset value false")
    }
    #[doc = "TWIM0 SHORTS LASTTX_SUSPEND: Shortcut between LASTTX event and SUSPEND task\n\nTWIM0 SHORTS LASTTX_SUSPEND: Shortcut between LASTTX event and SUSPEND task"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0twi0_shorts_lasttx_suspend(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 SHORTS LASTTX_SUSPEND, TWIM0 SHORTS LASTTX_SUSPEND reset value false")
    }
    #[doc = "TWIM0 SHORTS LASTTX_SUSPEND: Shortcut between LASTTX event and SUSPEND task\n\nTWIM0 SHORTS LASTTX_SUSPEND: Shortcut between LASTTX event and SUSPEND task"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0twi0_shorts_lasttx_suspend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 SHORTS LASTTX_SUSPEND, TWIM0 SHORTS LASTTX_SUSPEND reset value false")
    }
    #[doc = "TWIM0 SHORTS LASTTX_STOP: Shortcut between LASTTX event and STOP task\n\nTWIM0 SHORTS LASTTX_STOP: Shortcut between LASTTX event and STOP task"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0twi0_shorts_lasttx_stop(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 SHORTS LASTTX_STOP, TWIM0 SHORTS LASTTX_STOP reset value false")
    }
    #[doc = "TWIM0 SHORTS LASTTX_STOP: Shortcut between LASTTX event and STOP task\n\nTWIM0 SHORTS LASTTX_STOP: Shortcut between LASTTX event and STOP task"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0twi0_shorts_lasttx_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 SHORTS LASTTX_STOP, TWIM0 SHORTS LASTTX_STOP reset value false")
    }
    #[doc = "TWIM0 SHORTS LASTRX_STARTTX: Shortcut between LASTRX event and STARTTX task\n\nTWIM0 SHORTS LASTRX_STARTTX: Shortcut between LASTRX event and STARTTX task"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0twi0_shorts_lastrx_starttx(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 SHORTS LASTRX_STARTTX, TWIM0 SHORTS LASTRX_STARTTX reset value false")
    }
    #[doc = "TWIM0 SHORTS LASTRX_STARTTX: Shortcut between LASTRX event and STARTTX task\n\nTWIM0 SHORTS LASTRX_STARTTX: Shortcut between LASTRX event and STARTTX task"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0twi0_shorts_lastrx_starttx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 SHORTS LASTRX_STARTTX, TWIM0 SHORTS LASTRX_STARTTX reset value false")
    }
    #[doc = "TWIM0 SHORTS LASTRX_STOP: Shortcut between LASTRX event and STOP task\n\nTWIM0 SHORTS LASTRX_STOP: Shortcut between LASTRX event and STOP task"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0twi0_shorts_lastrx_stop(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 SHORTS LASTRX_STOP, TWIM0 SHORTS LASTRX_STOP reset value false")
    }
    #[doc = "TWIM0 SHORTS LASTRX_STOP: Shortcut between LASTRX event and STOP task\n\nTWIM0 SHORTS LASTRX_STOP: Shortcut between LASTRX event and STOP task"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0twi0_shorts_lastrx_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 SHORTS LASTRX_STOP, TWIM0 SHORTS LASTRX_STOP reset value false")
    }
    #[doc = "TWIS0 SHORTS WRITE_SUSPEND: Shortcut between WRITE event and SUSPEND task\n\nTWIS0 SHORTS WRITE_SUSPEND: Shortcut between WRITE event and SUSPEND task"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0twi0_shorts_write_suspend(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIS0 SHORTS WRITE_SUSPEND, TWIS0 SHORTS WRITE_SUSPEND reset value false")
    }
    #[doc = "TWIS0 SHORTS WRITE_SUSPEND: Shortcut between WRITE event and SUSPEND task\n\nTWIS0 SHORTS WRITE_SUSPEND: Shortcut between WRITE event and SUSPEND task"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0twi0_shorts_write_suspend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIS0 SHORTS WRITE_SUSPEND, TWIS0 SHORTS WRITE_SUSPEND reset value false")
    }
    #[doc = "TWIS0 SHORTS READ_SUSPEND: Shortcut between READ event and SUSPEND task\n\nTWIS0 SHORTS READ_SUSPEND: Shortcut between READ event and SUSPEND task"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0twi0_shorts_read_suspend(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIS0 SHORTS READ_SUSPEND, TWIS0 SHORTS READ_SUSPEND reset value false")
    }
    #[doc = "TWIS0 SHORTS READ_SUSPEND: Shortcut between READ event and SUSPEND task\n\nTWIS0 SHORTS READ_SUSPEND: Shortcut between READ event and SUSPEND task"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0twi0_shorts_read_suspend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIS0 SHORTS READ_SUSPEND, TWIS0 SHORTS READ_SUSPEND reset value false")
    }
    #[doc = "SPIM0 SHORTS END_START: Shortcut between END event and START task\n\nSPIM0 SHORTS END_START: Shortcut between END event and START task\n\nSPIM0 SHORTS END_START: Shortcut between END event and START task"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0twi0_shorts_end_start(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIM0 SHORTS END_START, SPIM0 SHORTS END_START, SPIM0 SHORTS END_START reset value false")
    }
    #[doc = "SPIM0 SHORTS END_START: Shortcut between END event and START task\n\nSPIM0 SHORTS END_START: Shortcut between END event and START task\n\nSPIM0 SHORTS END_START: Shortcut between END event and START task"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0twi0_shorts_end_start(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 SHORTS END_START, SPIM0 SHORTS END_START, SPIM0 SHORTS END_START reset value false")
    }
    #[doc = "TWIM0 INTEN STOPPED: Enable or disable interrupt for STOPPED event\n\nTWIS0 INTEN STOPPED: Enable or disable interrupt for STOPPED event\n\nTWIM0 INTEN STOPPED: Enable or disable interrupt for STOPPED event\n\nTWIS0 INTEN STOPPED: Enable or disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_twim0twis0_inten_stopped(&self) -> MemResult<bool> {
        todo ! ("read TWIM0 INTEN STOPPED, TWIS0 INTEN STOPPED, TWIM0 INTEN STOPPED, TWIS0 INTEN STOPPED reset value false")
    }
    #[doc = "TWIM0 INTEN STOPPED: Enable or disable interrupt for STOPPED event\n\nTWIS0 INTEN STOPPED: Enable or disable interrupt for STOPPED event\n\nTWIM0 INTEN STOPPED: Enable or disable interrupt for STOPPED event\n\nTWIS0 INTEN STOPPED: Enable or disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_twim0twis0_inten_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTEN STOPPED, TWIS0 INTEN STOPPED, TWIM0 INTEN STOPPED, TWIS0 INTEN STOPPED reset value false")
    }
    #[doc = "TWIM0 INTEN ERROR: Enable or disable interrupt for ERROR event\n\nTWIS0 INTEN ERROR: Enable or disable interrupt for ERROR event\n\nTWIM0 INTEN ERROR: Enable or disable interrupt for ERROR event\n\nTWIS0 INTEN ERROR: Enable or disable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn read_twim0twis0_inten_error(&self) -> MemResult<bool> {
        todo ! ("read TWIM0 INTEN ERROR, TWIS0 INTEN ERROR, TWIM0 INTEN ERROR, TWIS0 INTEN ERROR reset value false")
    }
    #[doc = "TWIM0 INTEN ERROR: Enable or disable interrupt for ERROR event\n\nTWIS0 INTEN ERROR: Enable or disable interrupt for ERROR event\n\nTWIM0 INTEN ERROR: Enable or disable interrupt for ERROR event\n\nTWIS0 INTEN ERROR: Enable or disable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn write_twim0twis0_inten_error(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTEN ERROR, TWIS0 INTEN ERROR, TWIM0 INTEN ERROR, TWIS0 INTEN ERROR reset value false")
    }
    #[doc = "TWIM0 INTEN SUSPENDED: Enable or disable interrupt for SUSPENDED event\n\nTWIM0 INTEN SUSPENDED: Enable or disable interrupt for SUSPENDED event"]
    #[inline]
    pub(crate) fn read_twim0twis0_inten_suspended(&self) -> MemResult<bool> {
        todo ! ("read TWIM0 INTEN SUSPENDED, TWIM0 INTEN SUSPENDED reset value false")
    }
    #[doc = "TWIM0 INTEN SUSPENDED: Enable or disable interrupt for SUSPENDED event\n\nTWIM0 INTEN SUSPENDED: Enable or disable interrupt for SUSPENDED event"]
    #[inline]
    pub(crate) fn write_twim0twis0_inten_suspended(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTEN SUSPENDED, TWIM0 INTEN SUSPENDED reset value false")
    }
    #[doc = "TWIM0 INTEN RXSTARTED: Enable or disable interrupt for RXSTARTED event\n\nTWIS0 INTEN RXSTARTED: Enable or disable interrupt for RXSTARTED event\n\nTWIM0 INTEN RXSTARTED: Enable or disable interrupt for RXSTARTED event\n\nTWIS0 INTEN RXSTARTED: Enable or disable interrupt for RXSTARTED event"]
    #[inline]
    pub(crate) fn read_twim0twis0_inten_rxstarted(&self) -> MemResult<bool> {
        todo ! ("read TWIM0 INTEN RXSTARTED, TWIS0 INTEN RXSTARTED, TWIM0 INTEN RXSTARTED, TWIS0 INTEN RXSTARTED reset value false")
    }
    #[doc = "TWIM0 INTEN RXSTARTED: Enable or disable interrupt for RXSTARTED event\n\nTWIS0 INTEN RXSTARTED: Enable or disable interrupt for RXSTARTED event\n\nTWIM0 INTEN RXSTARTED: Enable or disable interrupt for RXSTARTED event\n\nTWIS0 INTEN RXSTARTED: Enable or disable interrupt for RXSTARTED event"]
    #[inline]
    pub(crate) fn write_twim0twis0_inten_rxstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTEN RXSTARTED, TWIS0 INTEN RXSTARTED, TWIM0 INTEN RXSTARTED, TWIS0 INTEN RXSTARTED reset value false")
    }
    #[doc = "TWIM0 INTEN TXSTARTED: Enable or disable interrupt for TXSTARTED event\n\nTWIS0 INTEN TXSTARTED: Enable or disable interrupt for TXSTARTED event\n\nTWIM0 INTEN TXSTARTED: Enable or disable interrupt for TXSTARTED event\n\nTWIS0 INTEN TXSTARTED: Enable or disable interrupt for TXSTARTED event"]
    #[inline]
    pub(crate) fn read_twim0twis0_inten_txstarted(&self) -> MemResult<bool> {
        todo ! ("read TWIM0 INTEN TXSTARTED, TWIS0 INTEN TXSTARTED, TWIM0 INTEN TXSTARTED, TWIS0 INTEN TXSTARTED reset value false")
    }
    #[doc = "TWIM0 INTEN TXSTARTED: Enable or disable interrupt for TXSTARTED event\n\nTWIS0 INTEN TXSTARTED: Enable or disable interrupt for TXSTARTED event\n\nTWIM0 INTEN TXSTARTED: Enable or disable interrupt for TXSTARTED event\n\nTWIS0 INTEN TXSTARTED: Enable or disable interrupt for TXSTARTED event"]
    #[inline]
    pub(crate) fn write_twim0twis0_inten_txstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTEN TXSTARTED, TWIS0 INTEN TXSTARTED, TWIM0 INTEN TXSTARTED, TWIS0 INTEN TXSTARTED reset value false")
    }
    #[doc = "TWIM0 INTEN LASTRX: Enable or disable interrupt for LASTRX event\n\nTWIM0 INTEN LASTRX: Enable or disable interrupt for LASTRX event"]
    #[inline]
    pub(crate) fn read_twim0twis0_inten_lastrx(&self) -> MemResult<bool> {
        todo!("read TWIM0 INTEN LASTRX, TWIM0 INTEN LASTRX reset value false")
    }
    #[doc = "TWIM0 INTEN LASTRX: Enable or disable interrupt for LASTRX event\n\nTWIM0 INTEN LASTRX: Enable or disable interrupt for LASTRX event"]
    #[inline]
    pub(crate) fn write_twim0twis0_inten_lastrx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write TWIM0 INTEN LASTRX, TWIM0 INTEN LASTRX reset value false")
    }
    #[doc = "TWIM0 INTEN LASTTX: Enable or disable interrupt for LASTTX event\n\nTWIM0 INTEN LASTTX: Enable or disable interrupt for LASTTX event"]
    #[inline]
    pub(crate) fn read_twim0twis0_inten_lasttx(&self) -> MemResult<bool> {
        todo!("read TWIM0 INTEN LASTTX, TWIM0 INTEN LASTTX reset value false")
    }
    #[doc = "TWIM0 INTEN LASTTX: Enable or disable interrupt for LASTTX event\n\nTWIM0 INTEN LASTTX: Enable or disable interrupt for LASTTX event"]
    #[inline]
    pub(crate) fn write_twim0twis0_inten_lasttx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write TWIM0 INTEN LASTTX, TWIM0 INTEN LASTTX reset value false")
    }
    #[doc = "TWIS0 INTEN WRITE: Enable or disable interrupt for WRITE event\n\nTWIS0 INTEN WRITE: Enable or disable interrupt for WRITE event"]
    #[inline]
    pub(crate) fn read_twim0twis0_inten_write(&self) -> MemResult<bool> {
        todo!("read TWIS0 INTEN WRITE, TWIS0 INTEN WRITE reset value false")
    }
    #[doc = "TWIS0 INTEN WRITE: Enable or disable interrupt for WRITE event\n\nTWIS0 INTEN WRITE: Enable or disable interrupt for WRITE event"]
    #[inline]
    pub(crate) fn write_twim0twis0_inten_write(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write TWIS0 INTEN WRITE, TWIS0 INTEN WRITE reset value false")
    }
    #[doc = "TWIS0 INTEN READ: Enable or disable interrupt for READ event\n\nTWIS0 INTEN READ: Enable or disable interrupt for READ event"]
    #[inline]
    pub(crate) fn read_twim0twis0_inten_read(&self) -> MemResult<bool> {
        todo!("read TWIS0 INTEN READ, TWIS0 INTEN READ reset value false")
    }
    #[doc = "TWIS0 INTEN READ: Enable or disable interrupt for READ event\n\nTWIS0 INTEN READ: Enable or disable interrupt for READ event"]
    #[inline]
    pub(crate) fn write_twim0twis0_inten_read(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write TWIS0 INTEN READ, TWIS0 INTEN READ reset value false")
    }
    #[doc = "SPIM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nSPIS0 INTENSET END: Write '1' to Enable interrupt for END event\n\nTWIM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nTWIS0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nTWI0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nSPIM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nSPIS0 INTENSET END: Write '1' to Enable interrupt for END event\n\nTWIM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nTWIS0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nTWI0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nSPIM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nSPIS0 INTENSET END: Write '1' to Enable interrupt for END event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_stopped(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIM0 INTENSET STOPPED, SPIS0 INTENSET END, TWIM0 INTENSET STOPPED, TWIS0 INTENSET STOPPED, TWI0 INTENSET STOPPED, SPIM0 INTENSET STOPPED, SPIS0 INTENSET END, TWIM0 INTENSET STOPPED, TWIS0 INTENSET STOPPED, TWI0 INTENSET STOPPED, SPIM0 INTENSET STOPPED, SPIS0 INTENSET END reset value false")
    }
    #[doc = "SPIM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nSPIS0 INTENSET END: Write '1' to Enable interrupt for END event\n\nTWIM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nTWIS0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nTWI0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nSPIM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nSPIS0 INTENSET END: Write '1' to Enable interrupt for END event\n\nTWIM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nTWIS0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nTWI0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nSPIM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nSPIS0 INTENSET END: Write '1' to Enable interrupt for END event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 INTENSET STOPPED, SPIS0 INTENSET END, TWIM0 INTENSET STOPPED, TWIS0 INTENSET STOPPED, TWI0 INTENSET STOPPED, SPIM0 INTENSET STOPPED, SPIS0 INTENSET END, TWIM0 INTENSET STOPPED, TWIS0 INTENSET STOPPED, TWI0 INTENSET STOPPED, SPIM0 INTENSET STOPPED, SPIS0 INTENSET END reset value false")
    }
    #[doc = "SPI0 INTENSET READY: Write '1' to Enable interrupt for READY event\n\nTWI0 INTENSET RXDREADY: Write '1' to Enable interrupt for RXDREADY event\n\nSPI0 INTENSET READY: Write '1' to Enable interrupt for READY event\n\nTWI0 INTENSET RXDREADY: Write '1' to Enable interrupt for RXDREADY event\n\nSPI0 INTENSET READY: Write '1' to Enable interrupt for READY event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_ready(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPI0 INTENSET READY, TWI0 INTENSET RXDREADY, SPI0 INTENSET READY, TWI0 INTENSET RXDREADY, SPI0 INTENSET READY reset value false")
    }
    #[doc = "SPI0 INTENSET READY: Write '1' to Enable interrupt for READY event\n\nTWI0 INTENSET RXDREADY: Write '1' to Enable interrupt for RXDREADY event\n\nSPI0 INTENSET READY: Write '1' to Enable interrupt for READY event\n\nTWI0 INTENSET RXDREADY: Write '1' to Enable interrupt for RXDREADY event\n\nSPI0 INTENSET READY: Write '1' to Enable interrupt for READY event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_ready(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPI0 INTENSET READY, TWI0 INTENSET RXDREADY, SPI0 INTENSET READY, TWI0 INTENSET RXDREADY, SPI0 INTENSET READY reset value false")
    }
    #[doc = "SPIM0 INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event\n\nSPIS0 INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event\n\nSPIM0 INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event\n\nSPIS0 INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event\n\nSPIM0 INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event\n\nSPIS0 INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_endrx(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIM0 INTENSET ENDRX, SPIS0 INTENSET ENDRX, SPIM0 INTENSET ENDRX, SPIS0 INTENSET ENDRX, SPIM0 INTENSET ENDRX, SPIS0 INTENSET ENDRX reset value false")
    }
    #[doc = "SPIM0 INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event\n\nSPIS0 INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event\n\nSPIM0 INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event\n\nSPIS0 INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event\n\nSPIM0 INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event\n\nSPIS0 INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_endrx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 INTENSET ENDRX, SPIS0 INTENSET ENDRX, SPIM0 INTENSET ENDRX, SPIS0 INTENSET ENDRX, SPIM0 INTENSET ENDRX, SPIS0 INTENSET ENDRX reset value false")
    }
    #[doc = "SPIM0 INTENSET END: Write '1' to Enable interrupt for END event\n\nSPIM0 INTENSET END: Write '1' to Enable interrupt for END event\n\nSPIM0 INTENSET END: Write '1' to Enable interrupt for END event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_end(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIM0 INTENSET END, SPIM0 INTENSET END, SPIM0 INTENSET END reset value false")
    }
    #[doc = "SPIM0 INTENSET END: Write '1' to Enable interrupt for END event\n\nSPIM0 INTENSET END: Write '1' to Enable interrupt for END event\n\nSPIM0 INTENSET END: Write '1' to Enable interrupt for END event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_end(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 INTENSET END, SPIM0 INTENSET END, SPIM0 INTENSET END reset value false")
    }
    #[doc = "TWI0 INTENSET TXDSENT: Write '1' to Enable interrupt for TXDSENT event\n\nTWI0 INTENSET TXDSENT: Write '1' to Enable interrupt for TXDSENT event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_txdsent(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWI0 INTENSET TXDSENT, TWI0 INTENSET TXDSENT reset value false")
    }
    #[doc = "TWI0 INTENSET TXDSENT: Write '1' to Enable interrupt for TXDSENT event\n\nTWI0 INTENSET TXDSENT: Write '1' to Enable interrupt for TXDSENT event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_txdsent(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWI0 INTENSET TXDSENT, TWI0 INTENSET TXDSENT reset value false")
    }
    #[doc = "SPIM0 INTENSET ENDTX: Write '1' to Enable interrupt for ENDTX event\n\nSPIM0 INTENSET ENDTX: Write '1' to Enable interrupt for ENDTX event\n\nSPIM0 INTENSET ENDTX: Write '1' to Enable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_endtx(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIM0 INTENSET ENDTX, SPIM0 INTENSET ENDTX, SPIM0 INTENSET ENDTX reset value false")
    }
    #[doc = "SPIM0 INTENSET ENDTX: Write '1' to Enable interrupt for ENDTX event\n\nSPIM0 INTENSET ENDTX: Write '1' to Enable interrupt for ENDTX event\n\nSPIM0 INTENSET ENDTX: Write '1' to Enable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_endtx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 INTENSET ENDTX, SPIM0 INTENSET ENDTX, SPIM0 INTENSET ENDTX reset value false")
    }
    #[doc = "TWIM0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event\n\nTWIS0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event\n\nTWI0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event\n\nTWIM0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event\n\nTWIS0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event\n\nTWI0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_error(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 INTENSET ERROR, TWIS0 INTENSET ERROR, TWI0 INTENSET ERROR, TWIM0 INTENSET ERROR, TWIS0 INTENSET ERROR, TWI0 INTENSET ERROR reset value false")
    }
    #[doc = "TWIM0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event\n\nTWIS0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event\n\nTWI0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event\n\nTWIM0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event\n\nTWIS0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event\n\nTWI0 INTENSET ERROR: Write '1' to Enable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_error(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTENSET ERROR, TWIS0 INTENSET ERROR, TWI0 INTENSET ERROR, TWIM0 INTENSET ERROR, TWIS0 INTENSET ERROR, TWI0 INTENSET ERROR reset value false")
    }
    #[doc = "SPIS0 INTENSET ACQUIRED: Write '1' to Enable interrupt for ACQUIRED event\n\nSPIS0 INTENSET ACQUIRED: Write '1' to Enable interrupt for ACQUIRED event\n\nSPIS0 INTENSET ACQUIRED: Write '1' to Enable interrupt for ACQUIRED event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_acquired(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIS0 INTENSET ACQUIRED, SPIS0 INTENSET ACQUIRED, SPIS0 INTENSET ACQUIRED reset value false")
    }
    #[doc = "SPIS0 INTENSET ACQUIRED: Write '1' to Enable interrupt for ACQUIRED event\n\nSPIS0 INTENSET ACQUIRED: Write '1' to Enable interrupt for ACQUIRED event\n\nSPIS0 INTENSET ACQUIRED: Write '1' to Enable interrupt for ACQUIRED event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_acquired(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIS0 INTENSET ACQUIRED, SPIS0 INTENSET ACQUIRED, SPIS0 INTENSET ACQUIRED reset value false")
    }
    #[doc = "TWI0 INTENSET BB: Write '1' to Enable interrupt for BB event\n\nTWI0 INTENSET BB: Write '1' to Enable interrupt for BB event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_bb(
        &self,
    ) -> MemResult<bool> {
        todo!("read TWI0 INTENSET BB, TWI0 INTENSET BB reset value false")
    }
    #[doc = "TWI0 INTENSET BB: Write '1' to Enable interrupt for BB event\n\nTWI0 INTENSET BB: Write '1' to Enable interrupt for BB event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_bb(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write TWI0 INTENSET BB, TWI0 INTENSET BB reset value false")
    }
    #[doc = "TWIM0 INTENSET SUSPENDED: Write '1' to Enable interrupt for SUSPENDED event\n\nTWI0 INTENSET SUSPENDED: Write '1' to Enable interrupt for SUSPENDED event\n\nTWIM0 INTENSET SUSPENDED: Write '1' to Enable interrupt for SUSPENDED event\n\nTWI0 INTENSET SUSPENDED: Write '1' to Enable interrupt for SUSPENDED event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_suspended(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 INTENSET SUSPENDED, TWI0 INTENSET SUSPENDED, TWIM0 INTENSET SUSPENDED, TWI0 INTENSET SUSPENDED reset value false")
    }
    #[doc = "TWIM0 INTENSET SUSPENDED: Write '1' to Enable interrupt for SUSPENDED event\n\nTWI0 INTENSET SUSPENDED: Write '1' to Enable interrupt for SUSPENDED event\n\nTWIM0 INTENSET SUSPENDED: Write '1' to Enable interrupt for SUSPENDED event\n\nTWI0 INTENSET SUSPENDED: Write '1' to Enable interrupt for SUSPENDED event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_suspended(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTENSET SUSPENDED, TWI0 INTENSET SUSPENDED, TWIM0 INTENSET SUSPENDED, TWI0 INTENSET SUSPENDED reset value false")
    }
    #[doc = "SPIM0 INTENSET STARTED: Write '1' to Enable interrupt for STARTED event\n\nTWIM0 INTENSET RXSTARTED: Write '1' to Enable interrupt for RXSTARTED event\n\nTWIS0 INTENSET RXSTARTED: Write '1' to Enable interrupt for RXSTARTED event\n\nSPIM0 INTENSET STARTED: Write '1' to Enable interrupt for STARTED event\n\nTWIM0 INTENSET RXSTARTED: Write '1' to Enable interrupt for RXSTARTED event\n\nTWIS0 INTENSET RXSTARTED: Write '1' to Enable interrupt for RXSTARTED event\n\nSPIM0 INTENSET STARTED: Write '1' to Enable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_started(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIM0 INTENSET STARTED, TWIM0 INTENSET RXSTARTED, TWIS0 INTENSET RXSTARTED, SPIM0 INTENSET STARTED, TWIM0 INTENSET RXSTARTED, TWIS0 INTENSET RXSTARTED, SPIM0 INTENSET STARTED reset value false")
    }
    #[doc = "SPIM0 INTENSET STARTED: Write '1' to Enable interrupt for STARTED event\n\nTWIM0 INTENSET RXSTARTED: Write '1' to Enable interrupt for RXSTARTED event\n\nTWIS0 INTENSET RXSTARTED: Write '1' to Enable interrupt for RXSTARTED event\n\nSPIM0 INTENSET STARTED: Write '1' to Enable interrupt for STARTED event\n\nTWIM0 INTENSET RXSTARTED: Write '1' to Enable interrupt for RXSTARTED event\n\nTWIS0 INTENSET RXSTARTED: Write '1' to Enable interrupt for RXSTARTED event\n\nSPIM0 INTENSET STARTED: Write '1' to Enable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_started(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 INTENSET STARTED, TWIM0 INTENSET RXSTARTED, TWIS0 INTENSET RXSTARTED, SPIM0 INTENSET STARTED, TWIM0 INTENSET RXSTARTED, TWIS0 INTENSET RXSTARTED, SPIM0 INTENSET STARTED reset value false")
    }
    #[doc = "TWIM0 INTENSET TXSTARTED: Write '1' to Enable interrupt for TXSTARTED event\n\nTWIS0 INTENSET TXSTARTED: Write '1' to Enable interrupt for TXSTARTED event\n\nTWIM0 INTENSET TXSTARTED: Write '1' to Enable interrupt for TXSTARTED event\n\nTWIS0 INTENSET TXSTARTED: Write '1' to Enable interrupt for TXSTARTED event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_txstarted(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 INTENSET TXSTARTED, TWIS0 INTENSET TXSTARTED, TWIM0 INTENSET TXSTARTED, TWIS0 INTENSET TXSTARTED reset value false")
    }
    #[doc = "TWIM0 INTENSET TXSTARTED: Write '1' to Enable interrupt for TXSTARTED event\n\nTWIS0 INTENSET TXSTARTED: Write '1' to Enable interrupt for TXSTARTED event\n\nTWIM0 INTENSET TXSTARTED: Write '1' to Enable interrupt for TXSTARTED event\n\nTWIS0 INTENSET TXSTARTED: Write '1' to Enable interrupt for TXSTARTED event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_txstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTENSET TXSTARTED, TWIS0 INTENSET TXSTARTED, TWIM0 INTENSET TXSTARTED, TWIS0 INTENSET TXSTARTED reset value false")
    }
    #[doc = "TWIM0 INTENSET LASTRX: Write '1' to Enable interrupt for LASTRX event\n\nTWIM0 INTENSET LASTRX: Write '1' to Enable interrupt for LASTRX event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_lastrx(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 INTENSET LASTRX, TWIM0 INTENSET LASTRX reset value false")
    }
    #[doc = "TWIM0 INTENSET LASTRX: Write '1' to Enable interrupt for LASTRX event\n\nTWIM0 INTENSET LASTRX: Write '1' to Enable interrupt for LASTRX event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_lastrx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTENSET LASTRX, TWIM0 INTENSET LASTRX reset value false")
    }
    #[doc = "TWIM0 INTENSET LASTTX: Write '1' to Enable interrupt for LASTTX event\n\nTWIM0 INTENSET LASTTX: Write '1' to Enable interrupt for LASTTX event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_lasttx(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 INTENSET LASTTX, TWIM0 INTENSET LASTTX reset value false")
    }
    #[doc = "TWIM0 INTENSET LASTTX: Write '1' to Enable interrupt for LASTTX event\n\nTWIM0 INTENSET LASTTX: Write '1' to Enable interrupt for LASTTX event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_lasttx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTENSET LASTTX, TWIM0 INTENSET LASTTX reset value false")
    }
    #[doc = "TWIS0 INTENSET WRITE: Write '1' to Enable interrupt for WRITE event\n\nTWIS0 INTENSET WRITE: Write '1' to Enable interrupt for WRITE event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_write(
        &self,
    ) -> MemResult<bool> {
        todo!(
            "read TWIS0 INTENSET WRITE, TWIS0 INTENSET WRITE reset value false"
        )
    }
    #[doc = "TWIS0 INTENSET WRITE: Write '1' to Enable interrupt for WRITE event\n\nTWIS0 INTENSET WRITE: Write '1' to Enable interrupt for WRITE event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_write(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIS0 INTENSET WRITE, TWIS0 INTENSET WRITE reset value false")
    }
    #[doc = "TWIS0 INTENSET READ: Write '1' to Enable interrupt for READ event\n\nTWIS0 INTENSET READ: Write '1' to Enable interrupt for READ event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenset_read(
        &self,
    ) -> MemResult<bool> {
        todo!("read TWIS0 INTENSET READ, TWIS0 INTENSET READ reset value false")
    }
    #[doc = "TWIS0 INTENSET READ: Write '1' to Enable interrupt for READ event\n\nTWIS0 INTENSET READ: Write '1' to Enable interrupt for READ event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenset_read(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!(
            "write TWIS0 INTENSET READ, TWIS0 INTENSET READ reset value false"
        )
    }
    #[doc = "SPIM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nSPIS0 INTENCLR END: Write '1' to Disable interrupt for END event\n\nTWIM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nTWIS0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nTWI0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nSPIM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nSPIS0 INTENCLR END: Write '1' to Disable interrupt for END event\n\nTWIM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nTWIS0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nTWI0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nSPIM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nSPIS0 INTENCLR END: Write '1' to Disable interrupt for END event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_stopped(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIM0 INTENCLR STOPPED, SPIS0 INTENCLR END, TWIM0 INTENCLR STOPPED, TWIS0 INTENCLR STOPPED, TWI0 INTENCLR STOPPED, SPIM0 INTENCLR STOPPED, SPIS0 INTENCLR END, TWIM0 INTENCLR STOPPED, TWIS0 INTENCLR STOPPED, TWI0 INTENCLR STOPPED, SPIM0 INTENCLR STOPPED, SPIS0 INTENCLR END reset value false")
    }
    #[doc = "SPIM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nSPIS0 INTENCLR END: Write '1' to Disable interrupt for END event\n\nTWIM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nTWIS0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nTWI0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nSPIM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nSPIS0 INTENCLR END: Write '1' to Disable interrupt for END event\n\nTWIM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nTWIS0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nTWI0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nSPIM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nSPIS0 INTENCLR END: Write '1' to Disable interrupt for END event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 INTENCLR STOPPED, SPIS0 INTENCLR END, TWIM0 INTENCLR STOPPED, TWIS0 INTENCLR STOPPED, TWI0 INTENCLR STOPPED, SPIM0 INTENCLR STOPPED, SPIS0 INTENCLR END, TWIM0 INTENCLR STOPPED, TWIS0 INTENCLR STOPPED, TWI0 INTENCLR STOPPED, SPIM0 INTENCLR STOPPED, SPIS0 INTENCLR END reset value false")
    }
    #[doc = "SPI0 INTENCLR READY: Write '1' to Disable interrupt for READY event\n\nTWI0 INTENCLR RXDREADY: Write '1' to Disable interrupt for RXDREADY event\n\nSPI0 INTENCLR READY: Write '1' to Disable interrupt for READY event\n\nTWI0 INTENCLR RXDREADY: Write '1' to Disable interrupt for RXDREADY event\n\nSPI0 INTENCLR READY: Write '1' to Disable interrupt for READY event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_ready(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPI0 INTENCLR READY, TWI0 INTENCLR RXDREADY, SPI0 INTENCLR READY, TWI0 INTENCLR RXDREADY, SPI0 INTENCLR READY reset value false")
    }
    #[doc = "SPI0 INTENCLR READY: Write '1' to Disable interrupt for READY event\n\nTWI0 INTENCLR RXDREADY: Write '1' to Disable interrupt for RXDREADY event\n\nSPI0 INTENCLR READY: Write '1' to Disable interrupt for READY event\n\nTWI0 INTENCLR RXDREADY: Write '1' to Disable interrupt for RXDREADY event\n\nSPI0 INTENCLR READY: Write '1' to Disable interrupt for READY event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_ready(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPI0 INTENCLR READY, TWI0 INTENCLR RXDREADY, SPI0 INTENCLR READY, TWI0 INTENCLR RXDREADY, SPI0 INTENCLR READY reset value false")
    }
    #[doc = "SPIM0 INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event\n\nSPIS0 INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event\n\nSPIM0 INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event\n\nSPIS0 INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event\n\nSPIM0 INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event\n\nSPIS0 INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_endrx(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIM0 INTENCLR ENDRX, SPIS0 INTENCLR ENDRX, SPIM0 INTENCLR ENDRX, SPIS0 INTENCLR ENDRX, SPIM0 INTENCLR ENDRX, SPIS0 INTENCLR ENDRX reset value false")
    }
    #[doc = "SPIM0 INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event\n\nSPIS0 INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event\n\nSPIM0 INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event\n\nSPIS0 INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event\n\nSPIM0 INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event\n\nSPIS0 INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_endrx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 INTENCLR ENDRX, SPIS0 INTENCLR ENDRX, SPIM0 INTENCLR ENDRX, SPIS0 INTENCLR ENDRX, SPIM0 INTENCLR ENDRX, SPIS0 INTENCLR ENDRX reset value false")
    }
    #[doc = "SPIM0 INTENCLR END: Write '1' to Disable interrupt for END event\n\nSPIM0 INTENCLR END: Write '1' to Disable interrupt for END event\n\nSPIM0 INTENCLR END: Write '1' to Disable interrupt for END event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_end(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIM0 INTENCLR END, SPIM0 INTENCLR END, SPIM0 INTENCLR END reset value false")
    }
    #[doc = "SPIM0 INTENCLR END: Write '1' to Disable interrupt for END event\n\nSPIM0 INTENCLR END: Write '1' to Disable interrupt for END event\n\nSPIM0 INTENCLR END: Write '1' to Disable interrupt for END event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_end(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 INTENCLR END, SPIM0 INTENCLR END, SPIM0 INTENCLR END reset value false")
    }
    #[doc = "TWI0 INTENCLR TXDSENT: Write '1' to Disable interrupt for TXDSENT event\n\nTWI0 INTENCLR TXDSENT: Write '1' to Disable interrupt for TXDSENT event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_txdsent(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWI0 INTENCLR TXDSENT, TWI0 INTENCLR TXDSENT reset value false")
    }
    #[doc = "TWI0 INTENCLR TXDSENT: Write '1' to Disable interrupt for TXDSENT event\n\nTWI0 INTENCLR TXDSENT: Write '1' to Disable interrupt for TXDSENT event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_txdsent(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWI0 INTENCLR TXDSENT, TWI0 INTENCLR TXDSENT reset value false")
    }
    #[doc = "SPIM0 INTENCLR ENDTX: Write '1' to Disable interrupt for ENDTX event\n\nSPIM0 INTENCLR ENDTX: Write '1' to Disable interrupt for ENDTX event\n\nSPIM0 INTENCLR ENDTX: Write '1' to Disable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_endtx(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIM0 INTENCLR ENDTX, SPIM0 INTENCLR ENDTX, SPIM0 INTENCLR ENDTX reset value false")
    }
    #[doc = "SPIM0 INTENCLR ENDTX: Write '1' to Disable interrupt for ENDTX event\n\nSPIM0 INTENCLR ENDTX: Write '1' to Disable interrupt for ENDTX event\n\nSPIM0 INTENCLR ENDTX: Write '1' to Disable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_endtx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 INTENCLR ENDTX, SPIM0 INTENCLR ENDTX, SPIM0 INTENCLR ENDTX reset value false")
    }
    #[doc = "TWIM0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event\n\nTWIS0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event\n\nTWI0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event\n\nTWIM0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event\n\nTWIS0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event\n\nTWI0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_error(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 INTENCLR ERROR, TWIS0 INTENCLR ERROR, TWI0 INTENCLR ERROR, TWIM0 INTENCLR ERROR, TWIS0 INTENCLR ERROR, TWI0 INTENCLR ERROR reset value false")
    }
    #[doc = "TWIM0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event\n\nTWIS0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event\n\nTWI0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event\n\nTWIM0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event\n\nTWIS0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event\n\nTWI0 INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_error(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTENCLR ERROR, TWIS0 INTENCLR ERROR, TWI0 INTENCLR ERROR, TWIM0 INTENCLR ERROR, TWIS0 INTENCLR ERROR, TWI0 INTENCLR ERROR reset value false")
    }
    #[doc = "SPIS0 INTENCLR ACQUIRED: Write '1' to Disable interrupt for ACQUIRED event\n\nSPIS0 INTENCLR ACQUIRED: Write '1' to Disable interrupt for ACQUIRED event\n\nSPIS0 INTENCLR ACQUIRED: Write '1' to Disable interrupt for ACQUIRED event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_acquired(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIS0 INTENCLR ACQUIRED, SPIS0 INTENCLR ACQUIRED, SPIS0 INTENCLR ACQUIRED reset value false")
    }
    #[doc = "SPIS0 INTENCLR ACQUIRED: Write '1' to Disable interrupt for ACQUIRED event\n\nSPIS0 INTENCLR ACQUIRED: Write '1' to Disable interrupt for ACQUIRED event\n\nSPIS0 INTENCLR ACQUIRED: Write '1' to Disable interrupt for ACQUIRED event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_acquired(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIS0 INTENCLR ACQUIRED, SPIS0 INTENCLR ACQUIRED, SPIS0 INTENCLR ACQUIRED reset value false")
    }
    #[doc = "TWI0 INTENCLR BB: Write '1' to Disable interrupt for BB event\n\nTWI0 INTENCLR BB: Write '1' to Disable interrupt for BB event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_bb(
        &self,
    ) -> MemResult<bool> {
        todo!("read TWI0 INTENCLR BB, TWI0 INTENCLR BB reset value false")
    }
    #[doc = "TWI0 INTENCLR BB: Write '1' to Disable interrupt for BB event\n\nTWI0 INTENCLR BB: Write '1' to Disable interrupt for BB event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_bb(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write TWI0 INTENCLR BB, TWI0 INTENCLR BB reset value false")
    }
    #[doc = "TWIM0 INTENCLR SUSPENDED: Write '1' to Disable interrupt for SUSPENDED event\n\nTWI0 INTENCLR SUSPENDED: Write '1' to Disable interrupt for SUSPENDED event\n\nTWIM0 INTENCLR SUSPENDED: Write '1' to Disable interrupt for SUSPENDED event\n\nTWI0 INTENCLR SUSPENDED: Write '1' to Disable interrupt for SUSPENDED event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_suspended(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 INTENCLR SUSPENDED, TWI0 INTENCLR SUSPENDED, TWIM0 INTENCLR SUSPENDED, TWI0 INTENCLR SUSPENDED reset value false")
    }
    #[doc = "TWIM0 INTENCLR SUSPENDED: Write '1' to Disable interrupt for SUSPENDED event\n\nTWI0 INTENCLR SUSPENDED: Write '1' to Disable interrupt for SUSPENDED event\n\nTWIM0 INTENCLR SUSPENDED: Write '1' to Disable interrupt for SUSPENDED event\n\nTWI0 INTENCLR SUSPENDED: Write '1' to Disable interrupt for SUSPENDED event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_suspended(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTENCLR SUSPENDED, TWI0 INTENCLR SUSPENDED, TWIM0 INTENCLR SUSPENDED, TWI0 INTENCLR SUSPENDED reset value false")
    }
    #[doc = "SPIM0 INTENCLR STARTED: Write '1' to Disable interrupt for STARTED event\n\nTWIM0 INTENCLR RXSTARTED: Write '1' to Disable interrupt for RXSTARTED event\n\nTWIS0 INTENCLR RXSTARTED: Write '1' to Disable interrupt for RXSTARTED event\n\nSPIM0 INTENCLR STARTED: Write '1' to Disable interrupt for STARTED event\n\nTWIM0 INTENCLR RXSTARTED: Write '1' to Disable interrupt for RXSTARTED event\n\nTWIS0 INTENCLR RXSTARTED: Write '1' to Disable interrupt for RXSTARTED event\n\nSPIM0 INTENCLR STARTED: Write '1' to Disable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_started(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIM0 INTENCLR STARTED, TWIM0 INTENCLR RXSTARTED, TWIS0 INTENCLR RXSTARTED, SPIM0 INTENCLR STARTED, TWIM0 INTENCLR RXSTARTED, TWIS0 INTENCLR RXSTARTED, SPIM0 INTENCLR STARTED reset value false")
    }
    #[doc = "SPIM0 INTENCLR STARTED: Write '1' to Disable interrupt for STARTED event\n\nTWIM0 INTENCLR RXSTARTED: Write '1' to Disable interrupt for RXSTARTED event\n\nTWIS0 INTENCLR RXSTARTED: Write '1' to Disable interrupt for RXSTARTED event\n\nSPIM0 INTENCLR STARTED: Write '1' to Disable interrupt for STARTED event\n\nTWIM0 INTENCLR RXSTARTED: Write '1' to Disable interrupt for RXSTARTED event\n\nTWIS0 INTENCLR RXSTARTED: Write '1' to Disable interrupt for RXSTARTED event\n\nSPIM0 INTENCLR STARTED: Write '1' to Disable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_started(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 INTENCLR STARTED, TWIM0 INTENCLR RXSTARTED, TWIS0 INTENCLR RXSTARTED, SPIM0 INTENCLR STARTED, TWIM0 INTENCLR RXSTARTED, TWIS0 INTENCLR RXSTARTED, SPIM0 INTENCLR STARTED reset value false")
    }
    #[doc = "TWIM0 INTENCLR TXSTARTED: Write '1' to Disable interrupt for TXSTARTED event\n\nTWIS0 INTENCLR TXSTARTED: Write '1' to Disable interrupt for TXSTARTED event\n\nTWIM0 INTENCLR TXSTARTED: Write '1' to Disable interrupt for TXSTARTED event\n\nTWIS0 INTENCLR TXSTARTED: Write '1' to Disable interrupt for TXSTARTED event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_txstarted(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 INTENCLR TXSTARTED, TWIS0 INTENCLR TXSTARTED, TWIM0 INTENCLR TXSTARTED, TWIS0 INTENCLR TXSTARTED reset value false")
    }
    #[doc = "TWIM0 INTENCLR TXSTARTED: Write '1' to Disable interrupt for TXSTARTED event\n\nTWIS0 INTENCLR TXSTARTED: Write '1' to Disable interrupt for TXSTARTED event\n\nTWIM0 INTENCLR TXSTARTED: Write '1' to Disable interrupt for TXSTARTED event\n\nTWIS0 INTENCLR TXSTARTED: Write '1' to Disable interrupt for TXSTARTED event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_txstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTENCLR TXSTARTED, TWIS0 INTENCLR TXSTARTED, TWIM0 INTENCLR TXSTARTED, TWIS0 INTENCLR TXSTARTED reset value false")
    }
    #[doc = "TWIM0 INTENCLR LASTRX: Write '1' to Disable interrupt for LASTRX event\n\nTWIM0 INTENCLR LASTRX: Write '1' to Disable interrupt for LASTRX event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_lastrx(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 INTENCLR LASTRX, TWIM0 INTENCLR LASTRX reset value false")
    }
    #[doc = "TWIM0 INTENCLR LASTRX: Write '1' to Disable interrupt for LASTRX event\n\nTWIM0 INTENCLR LASTRX: Write '1' to Disable interrupt for LASTRX event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_lastrx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTENCLR LASTRX, TWIM0 INTENCLR LASTRX reset value false")
    }
    #[doc = "TWIM0 INTENCLR LASTTX: Write '1' to Disable interrupt for LASTTX event\n\nTWIM0 INTENCLR LASTTX: Write '1' to Disable interrupt for LASTTX event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_lasttx(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read TWIM0 INTENCLR LASTTX, TWIM0 INTENCLR LASTTX reset value false")
    }
    #[doc = "TWIM0 INTENCLR LASTTX: Write '1' to Disable interrupt for LASTTX event\n\nTWIM0 INTENCLR LASTTX: Write '1' to Disable interrupt for LASTTX event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_lasttx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 INTENCLR LASTTX, TWIM0 INTENCLR LASTTX reset value false")
    }
    #[doc = "TWIS0 INTENCLR WRITE: Write '1' to Disable interrupt for WRITE event\n\nTWIS0 INTENCLR WRITE: Write '1' to Disable interrupt for WRITE event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_write(
        &self,
    ) -> MemResult<bool> {
        todo!(
            "read TWIS0 INTENCLR WRITE, TWIS0 INTENCLR WRITE reset value false"
        )
    }
    #[doc = "TWIS0 INTENCLR WRITE: Write '1' to Disable interrupt for WRITE event\n\nTWIS0 INTENCLR WRITE: Write '1' to Disable interrupt for WRITE event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_write(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIS0 INTENCLR WRITE, TWIS0 INTENCLR WRITE reset value false")
    }
    #[doc = "TWIS0 INTENCLR READ: Write '1' to Disable interrupt for READ event\n\nTWIS0 INTENCLR READ: Write '1' to Disable interrupt for READ event"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_intenclr_read(
        &self,
    ) -> MemResult<bool> {
        todo!("read TWIS0 INTENCLR READ, TWIS0 INTENCLR READ reset value false")
    }
    #[doc = "TWIS0 INTENCLR READ: Write '1' to Disable interrupt for READ event\n\nTWIS0 INTENCLR READ: Write '1' to Disable interrupt for READ event"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_intenclr_read(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!(
            "write TWIS0 INTENCLR READ, TWIS0 INTENCLR READ reset value false"
        )
    }
    #[doc = "SPIS0 SEMSTAT SEMSTAT: Semaphore status\n\nSPIS0 SEMSTAT SEMSTAT: Semaphore status\n\nSPIS0 SEMSTAT SEMSTAT: Semaphore status"]
    #[inline]
    pub(crate) fn read_spis0_semstat_semstat(&self) -> MemResult<u8> {
        todo ! ("read SPIS0 SEMSTAT SEMSTAT, SPIS0 SEMSTAT SEMSTAT, SPIS0 SEMSTAT SEMSTAT reset value 0x01 mask 0x03")
    }
    #[doc = "SPIS0 STATUS OVERREAD: TX buffer over-read detected, and prevented\n\nSPIS0 STATUS OVERREAD: TX buffer over-read detected, and prevented\n\nSPIS0 STATUS OVERREAD: TX buffer over-read detected, and prevented"]
    #[inline]
    pub(crate) fn read_spis0_status_overread(&self) -> MemResult<bool> {
        todo ! ("read SPIS0 STATUS OVERREAD, SPIS0 STATUS OVERREAD, SPIS0 STATUS OVERREAD reset value false")
    }
    #[doc = "SPIS0 STATUS OVERREAD: TX buffer over-read detected, and prevented\n\nSPIS0 STATUS OVERREAD: TX buffer over-read detected, and prevented\n\nSPIS0 STATUS OVERREAD: TX buffer over-read detected, and prevented"]
    #[inline]
    pub(crate) fn write_spis0_status_overread(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIS0 STATUS OVERREAD, SPIS0 STATUS OVERREAD, SPIS0 STATUS OVERREAD reset value false")
    }
    #[doc = "SPIS0 STATUS OVERFLOW: RX buffer overflow detected, and prevented\n\nSPIS0 STATUS OVERFLOW: RX buffer overflow detected, and prevented\n\nSPIS0 STATUS OVERFLOW: RX buffer overflow detected, and prevented"]
    #[inline]
    pub(crate) fn read_spis0_status_overflow(&self) -> MemResult<bool> {
        todo ! ("read SPIS0 STATUS OVERFLOW, SPIS0 STATUS OVERFLOW, SPIS0 STATUS OVERFLOW reset value false")
    }
    #[doc = "SPIS0 STATUS OVERFLOW: RX buffer overflow detected, and prevented\n\nSPIS0 STATUS OVERFLOW: RX buffer overflow detected, and prevented\n\nSPIS0 STATUS OVERFLOW: RX buffer overflow detected, and prevented"]
    #[inline]
    pub(crate) fn write_spis0_status_overflow(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIS0 STATUS OVERFLOW, SPIS0 STATUS OVERFLOW, SPIS0 STATUS OVERFLOW reset value false")
    }
    #[doc = "TWIM0 ERRORSRC OVERRUN: Overrun error\n\nTWI0 ERRORSRC OVERRUN: Overrun error\n\nTWIM0 ERRORSRC OVERRUN: Overrun error\n\nTWI0 ERRORSRC OVERRUN: Overrun error"]
    #[inline]
    pub(crate) fn read_twim0twi0_errorsrc_overrun(&self) -> MemResult<bool> {
        todo ! ("read TWIM0 ERRORSRC OVERRUN, TWI0 ERRORSRC OVERRUN, TWIM0 ERRORSRC OVERRUN, TWI0 ERRORSRC OVERRUN reset value false")
    }
    #[doc = "TWIM0 ERRORSRC OVERRUN: Overrun error\n\nTWI0 ERRORSRC OVERRUN: Overrun error\n\nTWIM0 ERRORSRC OVERRUN: Overrun error\n\nTWI0 ERRORSRC OVERRUN: Overrun error"]
    #[inline]
    pub(crate) fn write_twim0twi0_errorsrc_overrun(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 ERRORSRC OVERRUN, TWI0 ERRORSRC OVERRUN, TWIM0 ERRORSRC OVERRUN, TWI0 ERRORSRC OVERRUN reset value false")
    }
    #[doc = "TWIM0 ERRORSRC ANACK: NACK received after sending the address (write '1' to clear)\n\nTWI0 ERRORSRC ANACK: NACK received after sending the address (write '1' to clear)\n\nTWIM0 ERRORSRC ANACK: NACK received after sending the address (write '1' to clear)\n\nTWI0 ERRORSRC ANACK: NACK received after sending the address (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_twim0twi0_errorsrc_anack(&self) -> MemResult<bool> {
        todo ! ("read TWIM0 ERRORSRC ANACK, TWI0 ERRORSRC ANACK, TWIM0 ERRORSRC ANACK, TWI0 ERRORSRC ANACK reset value false")
    }
    #[doc = "TWIM0 ERRORSRC ANACK: NACK received after sending the address (write '1' to clear)\n\nTWI0 ERRORSRC ANACK: NACK received after sending the address (write '1' to clear)\n\nTWIM0 ERRORSRC ANACK: NACK received after sending the address (write '1' to clear)\n\nTWI0 ERRORSRC ANACK: NACK received after sending the address (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_twim0twi0_errorsrc_anack(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 ERRORSRC ANACK, TWI0 ERRORSRC ANACK, TWIM0 ERRORSRC ANACK, TWI0 ERRORSRC ANACK reset value false")
    }
    #[doc = "TWIM0 ERRORSRC DNACK: NACK received after sending a data byte (write '1' to clear)\n\nTWI0 ERRORSRC DNACK: NACK received after sending a data byte (write '1' to clear)\n\nTWIM0 ERRORSRC DNACK: NACK received after sending a data byte (write '1' to clear)\n\nTWI0 ERRORSRC DNACK: NACK received after sending a data byte (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_twim0twi0_errorsrc_dnack(&self) -> MemResult<bool> {
        todo ! ("read TWIM0 ERRORSRC DNACK, TWI0 ERRORSRC DNACK, TWIM0 ERRORSRC DNACK, TWI0 ERRORSRC DNACK reset value false")
    }
    #[doc = "TWIM0 ERRORSRC DNACK: NACK received after sending a data byte (write '1' to clear)\n\nTWI0 ERRORSRC DNACK: NACK received after sending a data byte (write '1' to clear)\n\nTWIM0 ERRORSRC DNACK: NACK received after sending a data byte (write '1' to clear)\n\nTWI0 ERRORSRC DNACK: NACK received after sending a data byte (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_twim0twi0_errorsrc_dnack(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 ERRORSRC DNACK, TWI0 ERRORSRC DNACK, TWIM0 ERRORSRC DNACK, TWI0 ERRORSRC DNACK reset value false")
    }
    #[doc = "TWIS0 ERRORSRC OVERFLOW: RX buffer overflow detected, and prevented\n\nTWIS0 ERRORSRC OVERFLOW: RX buffer overflow detected, and prevented"]
    #[inline]
    pub(crate) fn read_twis0_errorsrc_overflow(&self) -> MemResult<bool> {
        todo ! ("read TWIS0 ERRORSRC OVERFLOW, TWIS0 ERRORSRC OVERFLOW reset value false")
    }
    #[doc = "TWIS0 ERRORSRC OVERFLOW: RX buffer overflow detected, and prevented\n\nTWIS0 ERRORSRC OVERFLOW: RX buffer overflow detected, and prevented"]
    #[inline]
    pub(crate) fn write_twis0_errorsrc_overflow(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIS0 ERRORSRC OVERFLOW, TWIS0 ERRORSRC OVERFLOW reset value false")
    }
    #[doc = "TWIS0 ERRORSRC DNACK: NACK sent after receiving a data byte\n\nTWIS0 ERRORSRC DNACK: NACK sent after receiving a data byte"]
    #[inline]
    pub(crate) fn read_twis0_errorsrc_dnack(&self) -> MemResult<bool> {
        todo!(
            "read TWIS0 ERRORSRC DNACK, TWIS0 ERRORSRC DNACK reset value false"
        )
    }
    #[doc = "TWIS0 ERRORSRC DNACK: NACK sent after receiving a data byte\n\nTWIS0 ERRORSRC DNACK: NACK sent after receiving a data byte"]
    #[inline]
    pub(crate) fn write_twis0_errorsrc_dnack(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIS0 ERRORSRC DNACK, TWIS0 ERRORSRC DNACK reset value false")
    }
    #[doc = "TWIS0 ERRORSRC OVERREAD: TX buffer over-read detected, and prevented\n\nTWIS0 ERRORSRC OVERREAD: TX buffer over-read detected, and prevented"]
    #[inline]
    pub(crate) fn read_twis0_errorsrc_overread(&self) -> MemResult<bool> {
        todo ! ("read TWIS0 ERRORSRC OVERREAD, TWIS0 ERRORSRC OVERREAD reset value false")
    }
    #[doc = "TWIS0 ERRORSRC OVERREAD: TX buffer over-read detected, and prevented\n\nTWIS0 ERRORSRC OVERREAD: TX buffer over-read detected, and prevented"]
    #[inline]
    pub(crate) fn write_twis0_errorsrc_overread(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIS0 ERRORSRC OVERREAD, TWIS0 ERRORSRC OVERREAD reset value false")
    }
    #[doc = "TWIS0 MATCH MATCH: Which of the addresses in {ADDRESS} matched the incoming address\n\nTWIS0 MATCH MATCH: Which of the addresses in {ADDRESS} matched the incoming address"]
    #[inline]
    pub(crate) fn read_twis0_match_match(&self) -> MemResult<bool> {
        todo!("read TWIS0 MATCH MATCH, TWIS0 MATCH MATCH reset value false")
    }
    #[doc = "SPIM0 ENABLE ENABLE: Enable or disable SPIM\n\nSPIS0 ENABLE ENABLE: Enable or disable SPI slave\n\nTWIM0 ENABLE ENABLE: Enable or disable TWIM\n\nTWIS0 ENABLE ENABLE: Enable or disable TWIS\n\nSPI0 ENABLE ENABLE: Enable or disable SPI\n\nTWI0 ENABLE ENABLE: Enable or disable TWI\n\nSPIM0 ENABLE ENABLE: Enable or disable SPIM\n\nSPIS0 ENABLE ENABLE: Enable or disable SPI slave\n\nTWIM0 ENABLE ENABLE: Enable or disable TWIM\n\nTWIS0 ENABLE ENABLE: Enable or disable TWIS\n\nSPI0 ENABLE ENABLE: Enable or disable SPI\n\nTWI0 ENABLE ENABLE: Enable or disable TWI\n\nSPIM0 ENABLE ENABLE: Enable or disable SPIM\n\nSPIS0 ENABLE ENABLE: Enable or disable SPI slave\n\nSPI0 ENABLE ENABLE: Enable or disable SPI"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_enable_enable(
        &self,
    ) -> MemResult<u8> {
        todo ! ("read SPIM0 ENABLE ENABLE, SPIS0 ENABLE ENABLE, TWIM0 ENABLE ENABLE, TWIS0 ENABLE ENABLE, SPI0 ENABLE ENABLE, TWI0 ENABLE ENABLE, SPIM0 ENABLE ENABLE, SPIS0 ENABLE ENABLE, TWIM0 ENABLE ENABLE, TWIS0 ENABLE ENABLE, SPI0 ENABLE ENABLE, TWI0 ENABLE ENABLE, SPIM0 ENABLE ENABLE, SPIS0 ENABLE ENABLE, SPI0 ENABLE ENABLE reset value 0x00 mask 0x0f")
    }
    #[doc = "SPIM0 ENABLE ENABLE: Enable or disable SPIM\n\nSPIS0 ENABLE ENABLE: Enable or disable SPI slave\n\nTWIM0 ENABLE ENABLE: Enable or disable TWIM\n\nTWIS0 ENABLE ENABLE: Enable or disable TWIS\n\nSPI0 ENABLE ENABLE: Enable or disable SPI\n\nTWI0 ENABLE ENABLE: Enable or disable TWI\n\nSPIM0 ENABLE ENABLE: Enable or disable SPIM\n\nSPIS0 ENABLE ENABLE: Enable or disable SPI slave\n\nTWIM0 ENABLE ENABLE: Enable or disable TWIM\n\nTWIS0 ENABLE ENABLE: Enable or disable TWIS\n\nSPI0 ENABLE ENABLE: Enable or disable SPI\n\nTWI0 ENABLE ENABLE: Enable or disable TWI\n\nSPIM0 ENABLE ENABLE: Enable or disable SPIM\n\nSPIS0 ENABLE ENABLE: Enable or disable SPI slave\n\nSPI0 ENABLE ENABLE: Enable or disable SPI"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_enable_enable(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 ENABLE ENABLE, SPIS0 ENABLE ENABLE, TWIM0 ENABLE ENABLE, TWIS0 ENABLE ENABLE, SPI0 ENABLE ENABLE, TWI0 ENABLE ENABLE, SPIM0 ENABLE ENABLE, SPIS0 ENABLE ENABLE, TWIM0 ENABLE ENABLE, TWIS0 ENABLE ENABLE, SPI0 ENABLE ENABLE, TWI0 ENABLE ENABLE, SPIM0 ENABLE ENABLE, SPIS0 ENABLE ENABLE, SPI0 ENABLE ENABLE reset value 0x00 mask 0x0f")
    }
    #[doc = "SPIM0 SCK PIN: Pin number\n\nSPIS0 SCK PIN: Pin number\n\nTWIM0 SCL PIN: Pin number\n\nTWIS0 SCL PIN: Pin number\n\nSPI0 SCK PSELSCK: Pin number configuration for SPI SCK signal\n\nTWI0 PSELSCL PSELSCL: Pin number configuration for TWI SCL signal\n\nSPIM0 SCK PIN: Pin number\n\nSPIS0 SCK PIN: Pin number\n\nTWIM0 SCL PIN: Pin number\n\nTWIS0 SCL PIN: Pin number\n\nSPI0 SCK PSELSCK: Pin number configuration for SPI SCK signal\n\nTWI0 PSELSCL PSELSCL: Pin number configuration for TWI SCL signal\n\nSPIM0 SCK PIN: Pin number\n\nSPIS0 SCK PIN: Pin number\n\nSPI0 SCK PSELSCK: Pin number configuration for SPI SCK signal"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_psel_sck_pin(
        &self,
    ) -> MemResult<u8> {
        todo ! ("read SPIM0 SCK PIN, SPIS0 SCK PIN, TWIM0 SCL PIN, TWIS0 SCL PIN, SPI0 SCK PSELSCK, TWI0 PSELSCL PSELSCL, SPIM0 SCK PIN, SPIS0 SCK PIN, TWIM0 SCL PIN, TWIS0 SCL PIN, SPI0 SCK PSELSCK, TWI0 PSELSCL PSELSCL, SPIM0 SCK PIN, SPIS0 SCK PIN, SPI0 SCK PSELSCK reset value 0x1f mask 0x1f")
    }
    #[doc = "SPIM0 SCK PIN: Pin number\n\nSPIS0 SCK PIN: Pin number\n\nTWIM0 SCL PIN: Pin number\n\nTWIS0 SCL PIN: Pin number\n\nSPI0 SCK PSELSCK: Pin number configuration for SPI SCK signal\n\nTWI0 PSELSCL PSELSCL: Pin number configuration for TWI SCL signal\n\nSPIM0 SCK PIN: Pin number\n\nSPIS0 SCK PIN: Pin number\n\nTWIM0 SCL PIN: Pin number\n\nTWIS0 SCL PIN: Pin number\n\nSPI0 SCK PSELSCK: Pin number configuration for SPI SCK signal\n\nTWI0 PSELSCL PSELSCL: Pin number configuration for TWI SCL signal\n\nSPIM0 SCK PIN: Pin number\n\nSPIS0 SCK PIN: Pin number\n\nSPI0 SCK PSELSCK: Pin number configuration for SPI SCK signal"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_psel_sck_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 SCK PIN, SPIS0 SCK PIN, TWIM0 SCL PIN, TWIS0 SCL PIN, SPI0 SCK PSELSCK, TWI0 PSELSCL PSELSCL, SPIM0 SCK PIN, SPIS0 SCK PIN, TWIM0 SCL PIN, TWIS0 SCL PIN, SPI0 SCK PSELSCK, TWI0 PSELSCL PSELSCL, SPIM0 SCK PIN, SPIS0 SCK PIN, SPI0 SCK PSELSCK reset value 0x1f mask 0x1f")
    }
    #[doc = "SPIM0 SCK CONNECT: Connection\n\nSPIS0 SCK CONNECT: Connection\n\nTWIM0 SCL CONNECT: Connection\n\nTWIS0 SCL CONNECT: Connection\n\nSPIM0 SCK CONNECT: Connection\n\nSPIS0 SCK CONNECT: Connection\n\nTWIM0 SCL CONNECT: Connection\n\nTWIS0 SCL CONNECT: Connection\n\nSPIM0 SCK CONNECT: Connection\n\nSPIS0 SCK CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_psel_sck_connect(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIM0 SCK CONNECT, SPIS0 SCK CONNECT, TWIM0 SCL CONNECT, TWIS0 SCL CONNECT, SPIM0 SCK CONNECT, SPIS0 SCK CONNECT, TWIM0 SCL CONNECT, TWIS0 SCL CONNECT, SPIM0 SCK CONNECT, SPIS0 SCK CONNECT reset value true")
    }
    #[doc = "SPIM0 SCK CONNECT: Connection\n\nSPIS0 SCK CONNECT: Connection\n\nTWIM0 SCL CONNECT: Connection\n\nTWIS0 SCL CONNECT: Connection\n\nSPIM0 SCK CONNECT: Connection\n\nSPIS0 SCK CONNECT: Connection\n\nTWIM0 SCL CONNECT: Connection\n\nTWIS0 SCL CONNECT: Connection\n\nSPIM0 SCK CONNECT: Connection\n\nSPIS0 SCK CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_psel_sck_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 SCK CONNECT, SPIS0 SCK CONNECT, TWIM0 SCL CONNECT, TWIS0 SCL CONNECT, SPIM0 SCK CONNECT, SPIS0 SCK CONNECT, TWIM0 SCL CONNECT, TWIS0 SCL CONNECT, SPIM0 SCK CONNECT, SPIS0 SCK CONNECT reset value true")
    }
    #[doc = "SPIM0 MOSI PIN: Pin number\n\nSPIS0 MISO PIN: Pin number\n\nTWIM0 SDA PIN: Pin number\n\nTWIS0 SDA PIN: Pin number\n\nSPI0 MOSI PSELMOSI: Pin number configuration for SPI MOSI signal\n\nTWI0 PSELSDA PSELSDA: Pin number configuration for TWI SDA signal\n\nSPIM0 MOSI PIN: Pin number\n\nSPIS0 MISO PIN: Pin number\n\nTWIM0 SDA PIN: Pin number\n\nTWIS0 SDA PIN: Pin number\n\nSPI0 MOSI PSELMOSI: Pin number configuration for SPI MOSI signal\n\nTWI0 PSELSDA PSELSDA: Pin number configuration for TWI SDA signal\n\nSPIM0 MOSI PIN: Pin number\n\nSPIS0 MISO PIN: Pin number\n\nSPI0 MOSI PSELMOSI: Pin number configuration for SPI MOSI signal"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_psel_mosi_pin(
        &self,
    ) -> MemResult<u8> {
        todo ! ("read SPIM0 MOSI PIN, SPIS0 MISO PIN, TWIM0 SDA PIN, TWIS0 SDA PIN, SPI0 MOSI PSELMOSI, TWI0 PSELSDA PSELSDA, SPIM0 MOSI PIN, SPIS0 MISO PIN, TWIM0 SDA PIN, TWIS0 SDA PIN, SPI0 MOSI PSELMOSI, TWI0 PSELSDA PSELSDA, SPIM0 MOSI PIN, SPIS0 MISO PIN, SPI0 MOSI PSELMOSI reset value 0x1f mask 0x1f")
    }
    #[doc = "SPIM0 MOSI PIN: Pin number\n\nSPIS0 MISO PIN: Pin number\n\nTWIM0 SDA PIN: Pin number\n\nTWIS0 SDA PIN: Pin number\n\nSPI0 MOSI PSELMOSI: Pin number configuration for SPI MOSI signal\n\nTWI0 PSELSDA PSELSDA: Pin number configuration for TWI SDA signal\n\nSPIM0 MOSI PIN: Pin number\n\nSPIS0 MISO PIN: Pin number\n\nTWIM0 SDA PIN: Pin number\n\nTWIS0 SDA PIN: Pin number\n\nSPI0 MOSI PSELMOSI: Pin number configuration for SPI MOSI signal\n\nTWI0 PSELSDA PSELSDA: Pin number configuration for TWI SDA signal\n\nSPIM0 MOSI PIN: Pin number\n\nSPIS0 MISO PIN: Pin number\n\nSPI0 MOSI PSELMOSI: Pin number configuration for SPI MOSI signal"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_psel_mosi_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 MOSI PIN, SPIS0 MISO PIN, TWIM0 SDA PIN, TWIS0 SDA PIN, SPI0 MOSI PSELMOSI, TWI0 PSELSDA PSELSDA, SPIM0 MOSI PIN, SPIS0 MISO PIN, TWIM0 SDA PIN, TWIS0 SDA PIN, SPI0 MOSI PSELMOSI, TWI0 PSELSDA PSELSDA, SPIM0 MOSI PIN, SPIS0 MISO PIN, SPI0 MOSI PSELMOSI reset value 0x1f mask 0x1f")
    }
    #[doc = "SPIM0 MOSI CONNECT: Connection\n\nSPIS0 MISO CONNECT: Connection\n\nTWIM0 SDA CONNECT: Connection\n\nTWIS0 SDA CONNECT: Connection\n\nSPIM0 MOSI CONNECT: Connection\n\nSPIS0 MISO CONNECT: Connection\n\nTWIM0 SDA CONNECT: Connection\n\nTWIS0 SDA CONNECT: Connection\n\nSPIM0 MOSI CONNECT: Connection\n\nSPIS0 MISO CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0spi0twi0_psel_mosi_connect(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIM0 MOSI CONNECT, SPIS0 MISO CONNECT, TWIM0 SDA CONNECT, TWIS0 SDA CONNECT, SPIM0 MOSI CONNECT, SPIS0 MISO CONNECT, TWIM0 SDA CONNECT, TWIS0 SDA CONNECT, SPIM0 MOSI CONNECT, SPIS0 MISO CONNECT reset value true")
    }
    #[doc = "SPIM0 MOSI CONNECT: Connection\n\nSPIS0 MISO CONNECT: Connection\n\nTWIM0 SDA CONNECT: Connection\n\nTWIS0 SDA CONNECT: Connection\n\nSPIM0 MOSI CONNECT: Connection\n\nSPIS0 MISO CONNECT: Connection\n\nTWIM0 SDA CONNECT: Connection\n\nTWIS0 SDA CONNECT: Connection\n\nSPIM0 MOSI CONNECT: Connection\n\nSPIS0 MISO CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0spi0twi0_psel_mosi_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 MOSI CONNECT, SPIS0 MISO CONNECT, TWIM0 SDA CONNECT, TWIS0 SDA CONNECT, SPIM0 MOSI CONNECT, SPIS0 MISO CONNECT, TWIM0 SDA CONNECT, TWIS0 SDA CONNECT, SPIM0 MOSI CONNECT, SPIS0 MISO CONNECT reset value true")
    }
    #[doc = "SPIM0 MISO PIN: Pin number\n\nSPIS0 MOSI PIN: Pin number\n\nSPI0 MISO PSELMISO: Pin number configuration for SPI MISO signal\n\nSPIM0 MISO PIN: Pin number\n\nSPIS0 MOSI PIN: Pin number\n\nSPI0 MISO PSELMISO: Pin number configuration for SPI MISO signal\n\nSPIM0 MISO PIN: Pin number\n\nSPIS0 MOSI PIN: Pin number\n\nSPI0 MISO PSELMISO: Pin number configuration for SPI MISO signal"]
    #[inline]
    pub(crate) fn read_spim0spis0spi0_psel_miso_pin(&self) -> MemResult<u8> {
        todo ! ("read SPIM0 MISO PIN, SPIS0 MOSI PIN, SPI0 MISO PSELMISO, SPIM0 MISO PIN, SPIS0 MOSI PIN, SPI0 MISO PSELMISO, SPIM0 MISO PIN, SPIS0 MOSI PIN, SPI0 MISO PSELMISO reset value 0x1f mask 0x1f")
    }
    #[doc = "SPIM0 MISO PIN: Pin number\n\nSPIS0 MOSI PIN: Pin number\n\nSPI0 MISO PSELMISO: Pin number configuration for SPI MISO signal\n\nSPIM0 MISO PIN: Pin number\n\nSPIS0 MOSI PIN: Pin number\n\nSPI0 MISO PSELMISO: Pin number configuration for SPI MISO signal\n\nSPIM0 MISO PIN: Pin number\n\nSPIS0 MOSI PIN: Pin number\n\nSPI0 MISO PSELMISO: Pin number configuration for SPI MISO signal"]
    #[inline]
    pub(crate) fn write_spim0spis0spi0_psel_miso_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 MISO PIN, SPIS0 MOSI PIN, SPI0 MISO PSELMISO, SPIM0 MISO PIN, SPIS0 MOSI PIN, SPI0 MISO PSELMISO, SPIM0 MISO PIN, SPIS0 MOSI PIN, SPI0 MISO PSELMISO reset value 0x1f mask 0x1f")
    }
    #[doc = "SPIM0 MISO CONNECT: Connection\n\nSPIS0 MOSI CONNECT: Connection\n\nSPIM0 MISO CONNECT: Connection\n\nSPIS0 MOSI CONNECT: Connection\n\nSPIM0 MISO CONNECT: Connection\n\nSPIS0 MOSI CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_spim0spis0spi0_psel_miso_connect(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read SPIM0 MISO CONNECT, SPIS0 MOSI CONNECT, SPIM0 MISO CONNECT, SPIS0 MOSI CONNECT, SPIM0 MISO CONNECT, SPIS0 MOSI CONNECT reset value true")
    }
    #[doc = "SPIM0 MISO CONNECT: Connection\n\nSPIS0 MOSI CONNECT: Connection\n\nSPIM0 MISO CONNECT: Connection\n\nSPIS0 MOSI CONNECT: Connection\n\nSPIM0 MISO CONNECT: Connection\n\nSPIS0 MOSI CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_spim0spis0spi0_psel_miso_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 MISO CONNECT, SPIS0 MOSI CONNECT, SPIM0 MISO CONNECT, SPIS0 MOSI CONNECT, SPIM0 MISO CONNECT, SPIS0 MOSI CONNECT reset value true")
    }
    #[doc = "SPIS0 CSN PIN: Pin number\n\nSPIS0 CSN PIN: Pin number\n\nSPIS0 CSN PIN: Pin number"]
    #[inline]
    pub(crate) fn read_spis0_psel_csn_pin(&self) -> MemResult<u8> {
        todo ! ("read SPIS0 CSN PIN, SPIS0 CSN PIN, SPIS0 CSN PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "SPIS0 CSN PIN: Pin number\n\nSPIS0 CSN PIN: Pin number\n\nSPIS0 CSN PIN: Pin number"]
    #[inline]
    pub(crate) fn write_spis0_psel_csn_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write SPIS0 CSN PIN, SPIS0 CSN PIN, SPIS0 CSN PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "SPIS0 CSN CONNECT: Connection\n\nSPIS0 CSN CONNECT: Connection\n\nSPIS0 CSN CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_spis0_psel_csn_connect(&self) -> MemResult<bool> {
        todo ! ("read SPIS0 CSN CONNECT, SPIS0 CSN CONNECT, SPIS0 CSN CONNECT reset value true")
    }
    #[doc = "SPIS0 CSN CONNECT: Connection\n\nSPIS0 CSN CONNECT: Connection\n\nSPIS0 CSN CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_spis0_psel_csn_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIS0 CSN CONNECT, SPIS0 CSN CONNECT, SPIS0 CSN CONNECT reset value true")
    }
    #[doc = "SPI0 RXD RXD: RX data received. Double buffered\n\nTWI0 RXD RXD: RXD register\n\nSPI0 RXD RXD: RX data received. Double buffered\n\nTWI0 RXD RXD: RXD register\n\nSPI0 RXD RXD: RX data received. Double buffered"]
    #[inline]
    pub(crate) fn read_spi0twi0_rxd_rxd(&self) -> MemResult<u8> {
        todo ! ("read SPI0 RXD RXD, TWI0 RXD RXD, SPI0 RXD RXD, TWI0 RXD RXD, SPI0 RXD RXD reset value 0x00 mask 0xff")
    }
    #[doc = "SPI0 TXD TXD: TX data to send. Double buffered\n\nTWI0 TXD TXD: TXD register\n\nSPI0 TXD TXD: TX data to send. Double buffered\n\nTWI0 TXD TXD: TXD register\n\nSPI0 TXD TXD: TX data to send. Double buffered"]
    #[inline]
    pub(crate) fn read_spi0twi0_txd_txd(&self) -> MemResult<u8> {
        todo ! ("read SPI0 TXD TXD, TWI0 TXD TXD, SPI0 TXD TXD, TWI0 TXD TXD, SPI0 TXD TXD reset value 0x00 mask 0xff")
    }
    #[doc = "SPI0 TXD TXD: TX data to send. Double buffered\n\nTWI0 TXD TXD: TXD register\n\nSPI0 TXD TXD: TX data to send. Double buffered\n\nTWI0 TXD TXD: TXD register\n\nSPI0 TXD TXD: TX data to send. Double buffered"]
    #[inline]
    pub(crate) fn write_spi0twi0_txd_txd(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write SPI0 TXD TXD, TWI0 TXD TXD, SPI0 TXD TXD, TWI0 TXD TXD, SPI0 TXD TXD reset value 0x00 mask 0xff")
    }
    #[doc = "SPIM0 FREQUENCY: SPI frequency. Accuracy depends on the HFCLK source selected.\n\nTWIM0 FREQUENCY: TWI frequency\n\nSPI0 FREQUENCY: SPI frequency\n\nTWI0 FREQUENCY: TWI frequency\n\nSPIM0 FREQUENCY: SPI frequency. Accuracy depends on the HFCLK source selected.\n\nTWIM0 FREQUENCY: TWI frequency\n\nSPI0 FREQUENCY: SPI frequency\n\nTWI0 FREQUENCY: TWI frequency\n\nSPIM0 FREQUENCY: SPI frequency. Accuracy depends on the HFCLK source selected.\n\nSPI0 FREQUENCY: SPI frequency"]
    #[inline]
    pub(crate) fn read_spim0twim0spi0twi0_frequency(&self) -> MemResult<u32> {
        todo ! ("read SPIM0 FREQUENCY, TWIM0 FREQUENCY, SPI0 FREQUENCY, TWI0 FREQUENCY, SPIM0 FREQUENCY, TWIM0 FREQUENCY, SPI0 FREQUENCY, TWI0 FREQUENCY, SPIM0 FREQUENCY, SPI0 FREQUENCY reset value 0x4000000 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 FREQUENCY: SPI frequency. Accuracy depends on the HFCLK source selected.\n\nTWIM0 FREQUENCY: TWI frequency\n\nSPI0 FREQUENCY: SPI frequency\n\nTWI0 FREQUENCY: TWI frequency\n\nSPIM0 FREQUENCY: SPI frequency. Accuracy depends on the HFCLK source selected.\n\nTWIM0 FREQUENCY: TWI frequency\n\nSPI0 FREQUENCY: SPI frequency\n\nTWI0 FREQUENCY: TWI frequency\n\nSPIM0 FREQUENCY: SPI frequency. Accuracy depends on the HFCLK source selected.\n\nSPI0 FREQUENCY: SPI frequency"]
    #[inline]
    pub(crate) fn write_spim0twim0spi0twi0_frequency(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 FREQUENCY, TWIM0 FREQUENCY, SPI0 FREQUENCY, TWI0 FREQUENCY, SPIM0 FREQUENCY, TWIM0 FREQUENCY, SPI0 FREQUENCY, TWI0 FREQUENCY, SPIM0 FREQUENCY, SPI0 FREQUENCY reset value 0x4000000 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 PTR: Data pointer\n\nSPIS0 PTR: RXD data pointer\n\nTWIM0 PTR: Data pointer\n\nTWIS0 PTR: RXD Data pointer\n\nSPIM0 PTR: Data pointer\n\nSPIS0 PTR: RXD data pointer\n\nTWIM0 PTR: Data pointer\n\nTWIS0 PTR: RXD Data pointer\n\nSPIM0 PTR: Data pointer\n\nSPIS0 PTR: RXD data pointer"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0_rxd_ptr(&self) -> MemResult<u32> {
        todo ! ("read SPIM0 PTR, SPIS0 PTR, TWIM0 PTR, TWIS0 PTR, SPIM0 PTR, SPIS0 PTR, TWIM0 PTR, TWIS0 PTR, SPIM0 PTR, SPIS0 PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 PTR: Data pointer\n\nSPIS0 PTR: RXD data pointer\n\nTWIM0 PTR: Data pointer\n\nTWIS0 PTR: RXD Data pointer\n\nSPIM0 PTR: Data pointer\n\nSPIS0 PTR: RXD data pointer\n\nTWIM0 PTR: Data pointer\n\nTWIS0 PTR: RXD Data pointer\n\nSPIM0 PTR: Data pointer\n\nSPIS0 PTR: RXD data pointer"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0_rxd_ptr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 PTR, SPIS0 PTR, TWIM0 PTR, TWIS0 PTR, SPIM0 PTR, SPIS0 PTR, TWIM0 PTR, TWIS0 PTR, SPIM0 PTR, SPIS0 PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer\n\nSPIS0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer\n\nTWIM0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer\n\nTWIS0 MAXCNT MAXCNT: Maximum number of bytes in RXD buffer\n\nSPIM0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer\n\nSPIS0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer\n\nTWIM0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer\n\nTWIS0 MAXCNT MAXCNT: Maximum number of bytes in RXD buffer\n\nSPIM0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer\n\nSPIS0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0_rxd_maxcnt_maxcnt(
        &self,
    ) -> MemResult<u8> {
        todo ! ("read SPIM0 MAXCNT MAXCNT, SPIS0 MAXCNT MAXCNT, TWIM0 MAXCNT MAXCNT, TWIS0 MAXCNT MAXCNT, SPIM0 MAXCNT MAXCNT, SPIS0 MAXCNT MAXCNT, TWIM0 MAXCNT MAXCNT, TWIS0 MAXCNT MAXCNT, SPIM0 MAXCNT MAXCNT, SPIS0 MAXCNT MAXCNT reset value 0x00 mask 0xff")
    }
    #[doc = "SPIM0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer\n\nSPIS0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer\n\nTWIM0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer\n\nTWIS0 MAXCNT MAXCNT: Maximum number of bytes in RXD buffer\n\nSPIM0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer\n\nSPIS0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer\n\nTWIM0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer\n\nTWIS0 MAXCNT MAXCNT: Maximum number of bytes in RXD buffer\n\nSPIM0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer\n\nSPIS0 MAXCNT MAXCNT: Maximum number of bytes in receive buffer"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0_rxd_maxcnt_maxcnt(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 MAXCNT MAXCNT, SPIS0 MAXCNT MAXCNT, TWIM0 MAXCNT MAXCNT, TWIS0 MAXCNT MAXCNT, SPIM0 MAXCNT MAXCNT, SPIS0 MAXCNT MAXCNT, TWIM0 MAXCNT MAXCNT, TWIS0 MAXCNT MAXCNT, SPIM0 MAXCNT MAXCNT, SPIS0 MAXCNT MAXCNT reset value 0x00 mask 0xff")
    }
    #[doc = "SPIM0 AMOUNT AMOUNT: Number of bytes transferred in the last transaction\n\nSPIS0 AMOUNT AMOUNT: Number of bytes received in the last granted transaction\n\nTWIM0 AMOUNT AMOUNT: Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte.\n\nTWIS0 AMOUNT AMOUNT: Number of bytes transferred in the last RXD transaction\n\nSPIM0 AMOUNT AMOUNT: Number of bytes transferred in the last transaction\n\nSPIS0 AMOUNT AMOUNT: Number of bytes received in the last granted transaction\n\nTWIM0 AMOUNT AMOUNT: Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte.\n\nTWIS0 AMOUNT AMOUNT: Number of bytes transferred in the last RXD transaction\n\nSPIM0 AMOUNT AMOUNT: Number of bytes transferred in the last transaction\n\nSPIS0 AMOUNT AMOUNT: Number of bytes received in the last granted transaction"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0_rxd_amount_amount(
        &self,
    ) -> MemResult<u8> {
        todo ! ("read SPIM0 AMOUNT AMOUNT, SPIS0 AMOUNT AMOUNT, TWIM0 AMOUNT AMOUNT, TWIS0 AMOUNT AMOUNT, SPIM0 AMOUNT AMOUNT, SPIS0 AMOUNT AMOUNT, TWIM0 AMOUNT AMOUNT, TWIS0 AMOUNT AMOUNT, SPIM0 AMOUNT AMOUNT, SPIS0 AMOUNT AMOUNT reset value 0x00 mask 0xff")
    }
    #[doc = "SPIM0 LIST LIST: List type\n\nTWIM0 LIST LIST: List type\n\nSPIM0 LIST LIST: List type\n\nTWIM0 LIST LIST: List type\n\nSPIM0 LIST LIST: List type"]
    #[inline]
    pub(crate) fn read_spim0twim0_rxd_list_list(&self) -> MemResult<u8> {
        todo ! ("read SPIM0 LIST LIST, TWIM0 LIST LIST, SPIM0 LIST LIST, TWIM0 LIST LIST, SPIM0 LIST LIST reset value 0x00 mask 0x07")
    }
    #[doc = "SPIM0 LIST LIST: List type\n\nTWIM0 LIST LIST: List type\n\nSPIM0 LIST LIST: List type\n\nTWIM0 LIST LIST: List type\n\nSPIM0 LIST LIST: List type"]
    #[inline]
    pub(crate) fn write_spim0twim0_rxd_list_list(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 LIST LIST, TWIM0 LIST LIST, SPIM0 LIST LIST, TWIM0 LIST LIST, SPIM0 LIST LIST reset value 0x00 mask 0x07")
    }
    #[doc = "SPIM0 PTR: Data pointer\n\nSPIS0 PTR: TXD data pointer\n\nTWIM0 PTR: Data pointer\n\nTWIS0 PTR: TXD Data pointer\n\nSPIM0 PTR: Data pointer\n\nSPIS0 PTR: TXD data pointer\n\nTWIM0 PTR: Data pointer\n\nTWIS0 PTR: TXD Data pointer\n\nSPIM0 PTR: Data pointer\n\nSPIS0 PTR: TXD data pointer"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0_txd_ptr(&self) -> MemResult<u32> {
        todo ! ("read SPIM0 PTR, SPIS0 PTR, TWIM0 PTR, TWIS0 PTR, SPIM0 PTR, SPIS0 PTR, TWIM0 PTR, TWIS0 PTR, SPIM0 PTR, SPIS0 PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 PTR: Data pointer\n\nSPIS0 PTR: TXD data pointer\n\nTWIM0 PTR: Data pointer\n\nTWIS0 PTR: TXD Data pointer\n\nSPIM0 PTR: Data pointer\n\nSPIS0 PTR: TXD data pointer\n\nTWIM0 PTR: Data pointer\n\nTWIS0 PTR: TXD Data pointer\n\nSPIM0 PTR: Data pointer\n\nSPIS0 PTR: TXD data pointer"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0_txd_ptr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 PTR, SPIS0 PTR, TWIM0 PTR, TWIS0 PTR, SPIM0 PTR, SPIS0 PTR, TWIM0 PTR, TWIS0 PTR, SPIM0 PTR, SPIS0 PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SPIM0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer\n\nSPIS0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer\n\nTWIM0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer\n\nTWIS0 MAXCNT MAXCNT: Maximum number of bytes in TXD buffer\n\nSPIM0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer\n\nSPIS0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer\n\nTWIM0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer\n\nTWIS0 MAXCNT MAXCNT: Maximum number of bytes in TXD buffer\n\nSPIM0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer\n\nSPIS0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0_txd_maxcnt_maxcnt(
        &self,
    ) -> MemResult<u8> {
        todo ! ("read SPIM0 MAXCNT MAXCNT, SPIS0 MAXCNT MAXCNT, TWIM0 MAXCNT MAXCNT, TWIS0 MAXCNT MAXCNT, SPIM0 MAXCNT MAXCNT, SPIS0 MAXCNT MAXCNT, TWIM0 MAXCNT MAXCNT, TWIS0 MAXCNT MAXCNT, SPIM0 MAXCNT MAXCNT, SPIS0 MAXCNT MAXCNT reset value 0x00 mask 0xff")
    }
    #[doc = "SPIM0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer\n\nSPIS0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer\n\nTWIM0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer\n\nTWIS0 MAXCNT MAXCNT: Maximum number of bytes in TXD buffer\n\nSPIM0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer\n\nSPIS0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer\n\nTWIM0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer\n\nTWIS0 MAXCNT MAXCNT: Maximum number of bytes in TXD buffer\n\nSPIM0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer\n\nSPIS0 MAXCNT MAXCNT: Maximum number of bytes in transmit buffer"]
    #[inline]
    pub(crate) fn write_spim0spis0twim0twis0_txd_maxcnt_maxcnt(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 MAXCNT MAXCNT, SPIS0 MAXCNT MAXCNT, TWIM0 MAXCNT MAXCNT, TWIS0 MAXCNT MAXCNT, SPIM0 MAXCNT MAXCNT, SPIS0 MAXCNT MAXCNT, TWIM0 MAXCNT MAXCNT, TWIS0 MAXCNT MAXCNT, SPIM0 MAXCNT MAXCNT, SPIS0 MAXCNT MAXCNT reset value 0x00 mask 0xff")
    }
    #[doc = "SPIM0 AMOUNT AMOUNT: Number of bytes transferred in the last transaction\n\nSPIS0 AMOUNT AMOUNT: Number of bytes transmitted in last granted transaction\n\nTWIM0 AMOUNT AMOUNT: Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte.\n\nTWIS0 AMOUNT AMOUNT: Number of bytes transferred in the last TXD transaction\n\nSPIM0 AMOUNT AMOUNT: Number of bytes transferred in the last transaction\n\nSPIS0 AMOUNT AMOUNT: Number of bytes transmitted in last granted transaction\n\nTWIM0 AMOUNT AMOUNT: Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte.\n\nTWIS0 AMOUNT AMOUNT: Number of bytes transferred in the last TXD transaction\n\nSPIM0 AMOUNT AMOUNT: Number of bytes transferred in the last transaction\n\nSPIS0 AMOUNT AMOUNT: Number of bytes transmitted in last granted transaction"]
    #[inline]
    pub(crate) fn read_spim0spis0twim0twis0_txd_amount_amount(
        &self,
    ) -> MemResult<u8> {
        todo ! ("read SPIM0 AMOUNT AMOUNT, SPIS0 AMOUNT AMOUNT, TWIM0 AMOUNT AMOUNT, TWIS0 AMOUNT AMOUNT, SPIM0 AMOUNT AMOUNT, SPIS0 AMOUNT AMOUNT, TWIM0 AMOUNT AMOUNT, TWIS0 AMOUNT AMOUNT, SPIM0 AMOUNT AMOUNT, SPIS0 AMOUNT AMOUNT reset value 0x00 mask 0xff")
    }
    #[doc = "SPIM0 LIST LIST: List type\n\nTWIM0 LIST LIST: List type\n\nSPIM0 LIST LIST: List type\n\nTWIM0 LIST LIST: List type\n\nSPIM0 LIST LIST: List type"]
    #[inline]
    pub(crate) fn read_spim0twim0_txd_list_list(&self) -> MemResult<u8> {
        todo ! ("read SPIM0 LIST LIST, TWIM0 LIST LIST, SPIM0 LIST LIST, TWIM0 LIST LIST, SPIM0 LIST LIST reset value 0x00 mask 0x07")
    }
    #[doc = "SPIM0 LIST LIST: List type\n\nTWIM0 LIST LIST: List type\n\nSPIM0 LIST LIST: List type\n\nTWIM0 LIST LIST: List type\n\nSPIM0 LIST LIST: List type"]
    #[inline]
    pub(crate) fn write_spim0twim0_txd_list_list(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 LIST LIST, TWIM0 LIST LIST, SPIM0 LIST LIST, TWIM0 LIST LIST, SPIM0 LIST LIST reset value 0x00 mask 0x07")
    }
    #[doc = "SPIM0 CONFIG ORDER: Bit order\n\nSPIS0 CONFIG ORDER: Bit order\n\nSPI0 CONFIG ORDER: Bit order\n\nSPIM0 CONFIG ORDER: Bit order\n\nSPIS0 CONFIG ORDER: Bit order\n\nSPI0 CONFIG ORDER: Bit order\n\nSPIM0 CONFIG ORDER: Bit order\n\nSPIS0 CONFIG ORDER: Bit order\n\nSPI0 CONFIG ORDER: Bit order"]
    #[inline]
    pub(crate) fn read_spim0spis0spi0_config_order(&self) -> MemResult<bool> {
        todo ! ("read SPIM0 CONFIG ORDER, SPIS0 CONFIG ORDER, SPI0 CONFIG ORDER, SPIM0 CONFIG ORDER, SPIS0 CONFIG ORDER, SPI0 CONFIG ORDER, SPIM0 CONFIG ORDER, SPIS0 CONFIG ORDER, SPI0 CONFIG ORDER reset value false")
    }
    #[doc = "SPIM0 CONFIG ORDER: Bit order\n\nSPIS0 CONFIG ORDER: Bit order\n\nSPI0 CONFIG ORDER: Bit order\n\nSPIM0 CONFIG ORDER: Bit order\n\nSPIS0 CONFIG ORDER: Bit order\n\nSPI0 CONFIG ORDER: Bit order\n\nSPIM0 CONFIG ORDER: Bit order\n\nSPIS0 CONFIG ORDER: Bit order\n\nSPI0 CONFIG ORDER: Bit order"]
    #[inline]
    pub(crate) fn write_spim0spis0spi0_config_order(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 CONFIG ORDER, SPIS0 CONFIG ORDER, SPI0 CONFIG ORDER, SPIM0 CONFIG ORDER, SPIS0 CONFIG ORDER, SPI0 CONFIG ORDER, SPIM0 CONFIG ORDER, SPIS0 CONFIG ORDER, SPI0 CONFIG ORDER reset value false")
    }
    #[doc = "SPIM0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPIS0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPI0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPIM0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPIS0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPI0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPIM0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPIS0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPI0 CONFIG CPHA: Serial clock (SCK) phase"]
    #[inline]
    pub(crate) fn read_spim0spis0spi0_config_cpha(&self) -> MemResult<bool> {
        todo ! ("read SPIM0 CONFIG CPHA, SPIS0 CONFIG CPHA, SPI0 CONFIG CPHA, SPIM0 CONFIG CPHA, SPIS0 CONFIG CPHA, SPI0 CONFIG CPHA, SPIM0 CONFIG CPHA, SPIS0 CONFIG CPHA, SPI0 CONFIG CPHA reset value false")
    }
    #[doc = "SPIM0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPIS0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPI0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPIM0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPIS0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPI0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPIM0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPIS0 CONFIG CPHA: Serial clock (SCK) phase\n\nSPI0 CONFIG CPHA: Serial clock (SCK) phase"]
    #[inline]
    pub(crate) fn write_spim0spis0spi0_config_cpha(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 CONFIG CPHA, SPIS0 CONFIG CPHA, SPI0 CONFIG CPHA, SPIM0 CONFIG CPHA, SPIS0 CONFIG CPHA, SPI0 CONFIG CPHA, SPIM0 CONFIG CPHA, SPIS0 CONFIG CPHA, SPI0 CONFIG CPHA reset value false")
    }
    #[doc = "SPIM0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPIS0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPI0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPIM0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPIS0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPI0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPIM0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPIS0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPI0 CONFIG CPOL: Serial clock (SCK) polarity"]
    #[inline]
    pub(crate) fn read_spim0spis0spi0_config_cpol(&self) -> MemResult<bool> {
        todo ! ("read SPIM0 CONFIG CPOL, SPIS0 CONFIG CPOL, SPI0 CONFIG CPOL, SPIM0 CONFIG CPOL, SPIS0 CONFIG CPOL, SPI0 CONFIG CPOL, SPIM0 CONFIG CPOL, SPIS0 CONFIG CPOL, SPI0 CONFIG CPOL reset value false")
    }
    #[doc = "SPIM0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPIS0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPI0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPIM0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPIS0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPI0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPIM0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPIS0 CONFIG CPOL: Serial clock (SCK) polarity\n\nSPI0 CONFIG CPOL: Serial clock (SCK) polarity"]
    #[inline]
    pub(crate) fn write_spim0spis0spi0_config_cpol(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 CONFIG CPOL, SPIS0 CONFIG CPOL, SPI0 CONFIG CPOL, SPIM0 CONFIG CPOL, SPIS0 CONFIG CPOL, SPI0 CONFIG CPOL, SPIM0 CONFIG CPOL, SPIS0 CONFIG CPOL, SPI0 CONFIG CPOL reset value false")
    }
    #[doc = "SPIS0 DEF DEF: Default character. Character clocked out in case of an ignored transaction.\n\nSPIS0 DEF DEF: Default character. Character clocked out in case of an ignored transaction.\n\nSPIS0 DEF DEF: Default character. Character clocked out in case of an ignored transaction."]
    #[inline]
    pub(crate) fn read_spis0_def_def(&self) -> MemResult<u8> {
        todo ! ("read SPIS0 DEF DEF, SPIS0 DEF DEF, SPIS0 DEF DEF reset value 0x00 mask 0xff")
    }
    #[doc = "SPIS0 DEF DEF: Default character. Character clocked out in case of an ignored transaction.\n\nSPIS0 DEF DEF: Default character. Character clocked out in case of an ignored transaction.\n\nSPIS0 DEF DEF: Default character. Character clocked out in case of an ignored transaction."]
    #[inline]
    pub(crate) fn write_spis0_def_def(&mut self, _value: u8) -> MemResult<()> {
        todo ! ("write SPIS0 DEF DEF, SPIS0 DEF DEF, SPIS0 DEF DEF reset value 0x00 mask 0xff")
    }
    #[doc = "TWIM0 ADDRESS ADDRESS: Address used in the TWI transfer\n\nTWIS0 ADDRESS[%s] ADDRESS: TWI slave address\n\nTWI0 ADDRESS ADDRESS: Address used in the TWI transfer\n\nTWIM0 ADDRESS ADDRESS: Address used in the TWI transfer\n\nTWIS0 ADDRESS[%s] ADDRESS: TWI slave address\n\nTWI0 ADDRESS ADDRESS: Address used in the TWI transfer"]
    #[inline]
    pub(crate) fn read_twim0twis0twi0_address_address(
        &self,
        _dim: usize,
    ) -> MemResult<u8> {
        todo ! ("read TWIM0 ADDRESS ADDRESS, TWIS0 ADDRESS[%s] ADDRESS, TWI0 ADDRESS ADDRESS, TWIM0 ADDRESS ADDRESS, TWIS0 ADDRESS[%s] ADDRESS, TWI0 ADDRESS ADDRESS reset value 0x00 mask 0x7f")
    }
    #[doc = "TWIM0 ADDRESS ADDRESS: Address used in the TWI transfer\n\nTWIS0 ADDRESS[%s] ADDRESS: TWI slave address\n\nTWI0 ADDRESS ADDRESS: Address used in the TWI transfer\n\nTWIM0 ADDRESS ADDRESS: Address used in the TWI transfer\n\nTWIS0 ADDRESS[%s] ADDRESS: TWI slave address\n\nTWI0 ADDRESS ADDRESS: Address used in the TWI transfer"]
    #[inline]
    pub(crate) fn write_twim0twis0twi0_address_address(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write TWIM0 ADDRESS ADDRESS, TWIS0 ADDRESS[%s] ADDRESS, TWI0 ADDRESS ADDRESS, TWIM0 ADDRESS ADDRESS, TWIS0 ADDRESS[%s] ADDRESS, TWI0 ADDRESS ADDRESS reset value 0x00 mask 0x7f")
    }
    #[doc = "TWIS0 CONFIG ADDRESS0: Enable or disable address matching on ADDRESS[0]\n\nTWIS0 CONFIG ADDRESS0: Enable or disable address matching on ADDRESS[0]"]
    #[inline]
    pub(crate) fn read_twis0_config_address0(&self) -> MemResult<bool> {
        todo ! ("read TWIS0 CONFIG ADDRESS0, TWIS0 CONFIG ADDRESS0 reset value true")
    }
    #[doc = "TWIS0 CONFIG ADDRESS0: Enable or disable address matching on ADDRESS[0]\n\nTWIS0 CONFIG ADDRESS0: Enable or disable address matching on ADDRESS[0]"]
    #[inline]
    pub(crate) fn write_twis0_config_address0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIS0 CONFIG ADDRESS0, TWIS0 CONFIG ADDRESS0 reset value true")
    }
    #[doc = "TWIS0 CONFIG ADDRESS1: Enable or disable address matching on ADDRESS[1]\n\nTWIS0 CONFIG ADDRESS1: Enable or disable address matching on ADDRESS[1]"]
    #[inline]
    pub(crate) fn read_twis0_config_address1(&self) -> MemResult<bool> {
        todo ! ("read TWIS0 CONFIG ADDRESS1, TWIS0 CONFIG ADDRESS1 reset value false")
    }
    #[doc = "TWIS0 CONFIG ADDRESS1: Enable or disable address matching on ADDRESS[1]\n\nTWIS0 CONFIG ADDRESS1: Enable or disable address matching on ADDRESS[1]"]
    #[inline]
    pub(crate) fn write_twis0_config_address1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TWIS0 CONFIG ADDRESS1, TWIS0 CONFIG ADDRESS1 reset value false")
    }
    #[doc = "SPIM0 ORC ORC: Over-read character. Character clocked out in case and over-read of the TXD buffer.\n\nSPIS0 ORC ORC: Over-read character. Character clocked out after an over-read of the transmit buffer.\n\nTWIS0 ORC ORC: Over-read character. Character sent out in case of an over-read of the transmit buffer.\n\nSPIM0 ORC ORC: Over-read character. Character clocked out in case and over-read of the TXD buffer.\n\nSPIS0 ORC ORC: Over-read character. Character clocked out after an over-read of the transmit buffer.\n\nTWIS0 ORC ORC: Over-read character. Character sent out in case of an over-read of the transmit buffer.\n\nSPIM0 ORC ORC: Over-read character. Character clocked out in case and over-read of the TXD buffer.\n\nSPIS0 ORC ORC: Over-read character. Character clocked out after an over-read of the transmit buffer."]
    #[inline]
    pub(crate) fn read_spim0spis0twis0_orc_orc(&self) -> MemResult<u8> {
        todo ! ("read SPIM0 ORC ORC, SPIS0 ORC ORC, TWIS0 ORC ORC, SPIM0 ORC ORC, SPIS0 ORC ORC, TWIS0 ORC ORC, SPIM0 ORC ORC, SPIS0 ORC ORC reset value 0x00 mask 0xff")
    }
    #[doc = "SPIM0 ORC ORC: Over-read character. Character clocked out in case and over-read of the TXD buffer.\n\nSPIS0 ORC ORC: Over-read character. Character clocked out after an over-read of the transmit buffer.\n\nTWIS0 ORC ORC: Over-read character. Character sent out in case of an over-read of the transmit buffer.\n\nSPIM0 ORC ORC: Over-read character. Character clocked out in case and over-read of the TXD buffer.\n\nSPIS0 ORC ORC: Over-read character. Character clocked out after an over-read of the transmit buffer.\n\nTWIS0 ORC ORC: Over-read character. Character sent out in case of an over-read of the transmit buffer.\n\nSPIM0 ORC ORC: Over-read character. Character clocked out in case and over-read of the TXD buffer.\n\nSPIS0 ORC ORC: Over-read character. Character clocked out after an over-read of the transmit buffer."]
    #[inline]
    pub(crate) fn write_spim0spis0twis0_orc_orc(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write SPIM0 ORC ORC, SPIS0 ORC ORC, TWIS0 ORC ORC, SPIM0 ORC ORC, SPIS0 ORC ORC, TWIS0 ORC ORC, SPIM0 ORC ORC, SPIS0 ORC ORC reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT TASKS_ACTIVATE: Activate NFC peripheral for incoming and outgoing frames, change state to activated"]
    #[inline]
    pub(crate) fn write_nfct_tasks_activate(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write NFCT TASKS_ACTIVATE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT TASKS_DISABLE: Disable NFC peripheral"]
    #[inline]
    pub(crate) fn write_nfct_tasks_disable(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write NFCT TASKS_DISABLE reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "NFCT TASKS_SENSE: Enable NFC sense field mode, change state to sense mode"]
    #[inline]
    pub(crate) fn write_nfct_tasks_sense(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write NFCT TASKS_SENSE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT TASKS_STARTTX: Start transmission of a outgoing frame, change state to transmit"]
    #[inline]
    pub(crate) fn write_nfct_tasks_starttx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write NFCT TASKS_STARTTX reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "NFCT TASKS_ENABLERXDATA: Initializes the EasyDMA for receive."]
    #[inline]
    pub(crate) fn write_nfct_tasks_enablerxdata(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write NFCT TASKS_ENABLERXDATA reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT TASKS_GOIDLE: Force state machine to IDLE state"]
    #[inline]
    pub(crate) fn write_nfct_tasks_goidle(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write NFCT TASKS_GOIDLE reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "NFCT TASKS_GOSLEEP: Force state machine to SLEEP_A state"]
    #[inline]
    pub(crate) fn write_nfct_tasks_gosleep(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write NFCT TASKS_GOSLEEP reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "NFCT EVENTS_READY: The NFC peripheral is ready to receive and send frames"]
    #[inline]
    pub(crate) fn read_nfct_events_ready(&self) -> MemResult<u32> {
        todo!("read NFCT EVENTS_READY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_READY: The NFC peripheral is ready to receive and send frames"]
    #[inline]
    pub(crate) fn write_nfct_events_ready(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write NFCT EVENTS_READY reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "NFCT EVENTS_FIELDDETECTED: Remote NFC field detected"]
    #[inline]
    pub(crate) fn read_nfct_events_fielddetected(&self) -> MemResult<u32> {
        todo ! ("read NFCT EVENTS_FIELDDETECTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_FIELDDETECTED: Remote NFC field detected"]
    #[inline]
    pub(crate) fn write_nfct_events_fielddetected(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write NFCT EVENTS_FIELDDETECTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_FIELDLOST: Remote NFC field lost"]
    #[inline]
    pub(crate) fn read_nfct_events_fieldlost(&self) -> MemResult<u32> {
        todo ! ("read NFCT EVENTS_FIELDLOST reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_FIELDLOST: Remote NFC field lost"]
    #[inline]
    pub(crate) fn write_nfct_events_fieldlost(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write NFCT EVENTS_FIELDLOST reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_TXFRAMESTART: Marks the start of the first symbol of a transmitted frame"]
    #[inline]
    pub(crate) fn read_nfct_events_txframestart(&self) -> MemResult<u32> {
        todo ! ("read NFCT EVENTS_TXFRAMESTART reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_TXFRAMESTART: Marks the start of the first symbol of a transmitted frame"]
    #[inline]
    pub(crate) fn write_nfct_events_txframestart(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write NFCT EVENTS_TXFRAMESTART reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_TXFRAMEEND: Marks the end of the last transmitted on-air symbol of a frame"]
    #[inline]
    pub(crate) fn read_nfct_events_txframeend(&self) -> MemResult<u32> {
        todo ! ("read NFCT EVENTS_TXFRAMEEND reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_TXFRAMEEND: Marks the end of the last transmitted on-air symbol of a frame"]
    #[inline]
    pub(crate) fn write_nfct_events_txframeend(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write NFCT EVENTS_TXFRAMEEND reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_RXFRAMESTART: Marks the end of the first symbol of a received frame"]
    #[inline]
    pub(crate) fn read_nfct_events_rxframestart(&self) -> MemResult<u32> {
        todo ! ("read NFCT EVENTS_RXFRAMESTART reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_RXFRAMESTART: Marks the end of the first symbol of a received frame"]
    #[inline]
    pub(crate) fn write_nfct_events_rxframestart(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write NFCT EVENTS_RXFRAMESTART reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_RXFRAMEEND: Received data have been checked (CRC, parity) and transferred to RAM, and EasyDMA has ended accessing the RX buffer"]
    #[inline]
    pub(crate) fn read_nfct_events_rxframeend(&self) -> MemResult<u32> {
        todo ! ("read NFCT EVENTS_RXFRAMEEND reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_RXFRAMEEND: Received data have been checked (CRC, parity) and transferred to RAM, and EasyDMA has ended accessing the RX buffer"]
    #[inline]
    pub(crate) fn write_nfct_events_rxframeend(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write NFCT EVENTS_RXFRAMEEND reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_ERROR: NFC error reported. The ERRORSTATUS register contains details on the source of the error."]
    #[inline]
    pub(crate) fn read_nfct_events_error(&self) -> MemResult<u32> {
        todo!("read NFCT EVENTS_ERROR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_ERROR: NFC error reported. The ERRORSTATUS register contains details on the source of the error."]
    #[inline]
    pub(crate) fn write_nfct_events_error(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write NFCT EVENTS_ERROR reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "NFCT EVENTS_RXERROR: NFC RX frame error reported. The FRAMESTATUS.RX register contains details on the source of the error."]
    #[inline]
    pub(crate) fn read_nfct_events_rxerror(&self) -> MemResult<u32> {
        todo!(
            "read NFCT EVENTS_RXERROR reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "NFCT EVENTS_RXERROR: NFC RX frame error reported. The FRAMESTATUS.RX register contains details on the source of the error."]
    #[inline]
    pub(crate) fn write_nfct_events_rxerror(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write NFCT EVENTS_RXERROR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_ENDRX: RX buffer (as defined by PACKETPTR and MAXLEN) in Data RAM full."]
    #[inline]
    pub(crate) fn read_nfct_events_endrx(&self) -> MemResult<u32> {
        todo!("read NFCT EVENTS_ENDRX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_ENDRX: RX buffer (as defined by PACKETPTR and MAXLEN) in Data RAM full."]
    #[inline]
    pub(crate) fn write_nfct_events_endrx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write NFCT EVENTS_ENDRX reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "NFCT EVENTS_ENDTX: Transmission of data in RAM has ended, and EasyDMA has ended accessing the TX buffer"]
    #[inline]
    pub(crate) fn read_nfct_events_endtx(&self) -> MemResult<u32> {
        todo!("read NFCT EVENTS_ENDTX reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_ENDTX: Transmission of data in RAM has ended, and EasyDMA has ended accessing the TX buffer"]
    #[inline]
    pub(crate) fn write_nfct_events_endtx(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write NFCT EVENTS_ENDTX reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "NFCT EVENTS_AUTOCOLRESSTARTED: Auto collision resolution process has started"]
    #[inline]
    pub(crate) fn read_nfct_events_autocolresstarted(&self) -> MemResult<u32> {
        todo ! ("read NFCT EVENTS_AUTOCOLRESSTARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_AUTOCOLRESSTARTED: Auto collision resolution process has started"]
    #[inline]
    pub(crate) fn write_nfct_events_autocolresstarted(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write NFCT EVENTS_AUTOCOLRESSTARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_COLLISION: NFC Auto collision resolution error reported."]
    #[inline]
    pub(crate) fn read_nfct_events_collision(&self) -> MemResult<u32> {
        todo ! ("read NFCT EVENTS_COLLISION reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_COLLISION: NFC Auto collision resolution error reported."]
    #[inline]
    pub(crate) fn write_nfct_events_collision(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write NFCT EVENTS_COLLISION reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_SELECTED: NFC Auto collision resolution successfully completed"]
    #[inline]
    pub(crate) fn read_nfct_events_selected(&self) -> MemResult<u32> {
        todo ! ("read NFCT EVENTS_SELECTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_SELECTED: NFC Auto collision resolution successfully completed"]
    #[inline]
    pub(crate) fn write_nfct_events_selected(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write NFCT EVENTS_SELECTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT EVENTS_STARTED: EasyDMA is ready to receive or send frames."]
    #[inline]
    pub(crate) fn read_nfct_events_started(&self) -> MemResult<u32> {
        todo!(
            "read NFCT EVENTS_STARTED reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "NFCT EVENTS_STARTED: EasyDMA is ready to receive or send frames."]
    #[inline]
    pub(crate) fn write_nfct_events_started(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write NFCT EVENTS_STARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT SHORTS FIELDDETECTED_ACTIVATE: Shortcut between FIELDDETECTED event and ACTIVATE task"]
    #[inline]
    pub(crate) fn read_nfct_shorts_fielddetected_activate(
        &self,
    ) -> MemResult<bool> {
        todo!("read NFCT SHORTS FIELDDETECTED_ACTIVATE reset value false")
    }
    #[doc = "NFCT SHORTS FIELDDETECTED_ACTIVATE: Shortcut between FIELDDETECTED event and ACTIVATE task"]
    #[inline]
    pub(crate) fn write_nfct_shorts_fielddetected_activate(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT SHORTS FIELDDETECTED_ACTIVATE reset value false")
    }
    #[doc = "NFCT SHORTS FIELDLOST_SENSE: Shortcut between FIELDLOST event and SENSE task"]
    #[inline]
    pub(crate) fn read_nfct_shorts_fieldlost_sense(&self) -> MemResult<bool> {
        todo!("read NFCT SHORTS FIELDLOST_SENSE reset value false")
    }
    #[doc = "NFCT SHORTS FIELDLOST_SENSE: Shortcut between FIELDLOST event and SENSE task"]
    #[inline]
    pub(crate) fn write_nfct_shorts_fieldlost_sense(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT SHORTS FIELDLOST_SENSE reset value false")
    }
    #[doc = "NFCT INTEN READY: Enable or disable interrupt for READY event"]
    #[inline]
    pub(crate) fn read_nfct_inten_ready(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN READY reset value false")
    }
    #[doc = "NFCT INTEN READY: Enable or disable interrupt for READY event"]
    #[inline]
    pub(crate) fn write_nfct_inten_ready(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN READY reset value false")
    }
    #[doc = "NFCT INTEN FIELDDETECTED: Enable or disable interrupt for FIELDDETECTED event"]
    #[inline]
    pub(crate) fn read_nfct_inten_fielddetected(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN FIELDDETECTED reset value false")
    }
    #[doc = "NFCT INTEN FIELDDETECTED: Enable or disable interrupt for FIELDDETECTED event"]
    #[inline]
    pub(crate) fn write_nfct_inten_fielddetected(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN FIELDDETECTED reset value false")
    }
    #[doc = "NFCT INTEN FIELDLOST: Enable or disable interrupt for FIELDLOST event"]
    #[inline]
    pub(crate) fn read_nfct_inten_fieldlost(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN FIELDLOST reset value false")
    }
    #[doc = "NFCT INTEN FIELDLOST: Enable or disable interrupt for FIELDLOST event"]
    #[inline]
    pub(crate) fn write_nfct_inten_fieldlost(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN FIELDLOST reset value false")
    }
    #[doc = "NFCT INTEN TXFRAMESTART: Enable or disable interrupt for TXFRAMESTART event"]
    #[inline]
    pub(crate) fn read_nfct_inten_txframestart(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN TXFRAMESTART reset value false")
    }
    #[doc = "NFCT INTEN TXFRAMESTART: Enable or disable interrupt for TXFRAMESTART event"]
    #[inline]
    pub(crate) fn write_nfct_inten_txframestart(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN TXFRAMESTART reset value false")
    }
    #[doc = "NFCT INTEN TXFRAMEEND: Enable or disable interrupt for TXFRAMEEND event"]
    #[inline]
    pub(crate) fn read_nfct_inten_txframeend(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN TXFRAMEEND reset value false")
    }
    #[doc = "NFCT INTEN TXFRAMEEND: Enable or disable interrupt for TXFRAMEEND event"]
    #[inline]
    pub(crate) fn write_nfct_inten_txframeend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN TXFRAMEEND reset value false")
    }
    #[doc = "NFCT INTEN RXFRAMESTART: Enable or disable interrupt for RXFRAMESTART event"]
    #[inline]
    pub(crate) fn read_nfct_inten_rxframestart(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN RXFRAMESTART reset value false")
    }
    #[doc = "NFCT INTEN RXFRAMESTART: Enable or disable interrupt for RXFRAMESTART event"]
    #[inline]
    pub(crate) fn write_nfct_inten_rxframestart(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN RXFRAMESTART reset value false")
    }
    #[doc = "NFCT INTEN RXFRAMEEND: Enable or disable interrupt for RXFRAMEEND event"]
    #[inline]
    pub(crate) fn read_nfct_inten_rxframeend(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN RXFRAMEEND reset value false")
    }
    #[doc = "NFCT INTEN RXFRAMEEND: Enable or disable interrupt for RXFRAMEEND event"]
    #[inline]
    pub(crate) fn write_nfct_inten_rxframeend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN RXFRAMEEND reset value false")
    }
    #[doc = "NFCT INTEN ERROR: Enable or disable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn read_nfct_inten_error(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN ERROR reset value false")
    }
    #[doc = "NFCT INTEN ERROR: Enable or disable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn write_nfct_inten_error(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN ERROR reset value false")
    }
    #[doc = "NFCT INTEN RXERROR: Enable or disable interrupt for RXERROR event"]
    #[inline]
    pub(crate) fn read_nfct_inten_rxerror(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN RXERROR reset value false")
    }
    #[doc = "NFCT INTEN RXERROR: Enable or disable interrupt for RXERROR event"]
    #[inline]
    pub(crate) fn write_nfct_inten_rxerror(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN RXERROR reset value false")
    }
    #[doc = "NFCT INTEN ENDRX: Enable or disable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn read_nfct_inten_endrx(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN ENDRX reset value false")
    }
    #[doc = "NFCT INTEN ENDRX: Enable or disable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn write_nfct_inten_endrx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN ENDRX reset value false")
    }
    #[doc = "NFCT INTEN ENDTX: Enable or disable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn read_nfct_inten_endtx(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN ENDTX reset value false")
    }
    #[doc = "NFCT INTEN ENDTX: Enable or disable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn write_nfct_inten_endtx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN ENDTX reset value false")
    }
    #[doc = "NFCT INTEN AUTOCOLRESSTARTED: Enable or disable interrupt for AUTOCOLRESSTARTED event"]
    #[inline]
    pub(crate) fn read_nfct_inten_autocolresstarted(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN AUTOCOLRESSTARTED reset value false")
    }
    #[doc = "NFCT INTEN AUTOCOLRESSTARTED: Enable or disable interrupt for AUTOCOLRESSTARTED event"]
    #[inline]
    pub(crate) fn write_nfct_inten_autocolresstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN AUTOCOLRESSTARTED reset value false")
    }
    #[doc = "NFCT INTEN COLLISION: Enable or disable interrupt for COLLISION event"]
    #[inline]
    pub(crate) fn read_nfct_inten_collision(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN COLLISION reset value false")
    }
    #[doc = "NFCT INTEN COLLISION: Enable or disable interrupt for COLLISION event"]
    #[inline]
    pub(crate) fn write_nfct_inten_collision(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN COLLISION reset value false")
    }
    #[doc = "NFCT INTEN SELECTED: Enable or disable interrupt for SELECTED event"]
    #[inline]
    pub(crate) fn read_nfct_inten_selected(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN SELECTED reset value false")
    }
    #[doc = "NFCT INTEN SELECTED: Enable or disable interrupt for SELECTED event"]
    #[inline]
    pub(crate) fn write_nfct_inten_selected(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN SELECTED reset value false")
    }
    #[doc = "NFCT INTEN STARTED: Enable or disable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn read_nfct_inten_started(&self) -> MemResult<bool> {
        todo!("read NFCT INTEN STARTED reset value false")
    }
    #[doc = "NFCT INTEN STARTED: Enable or disable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn write_nfct_inten_started(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTEN STARTED reset value false")
    }
    #[doc = "NFCT INTENSET READY: Write '1' to Enable interrupt for READY event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_ready(&self) -> MemResult<bool> {
        todo!("read NFCT INTENSET READY reset value false")
    }
    #[doc = "NFCT INTENSET READY: Write '1' to Enable interrupt for READY event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_ready(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET READY reset value false")
    }
    #[doc = "NFCT INTENSET FIELDDETECTED: Write '1' to Enable interrupt for FIELDDETECTED event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_fielddetected(&self) -> MemResult<bool> {
        todo!("read NFCT INTENSET FIELDDETECTED reset value false")
    }
    #[doc = "NFCT INTENSET FIELDDETECTED: Write '1' to Enable interrupt for FIELDDETECTED event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_fielddetected(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET FIELDDETECTED reset value false")
    }
    #[doc = "NFCT INTENSET FIELDLOST: Write '1' to Enable interrupt for FIELDLOST event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_fieldlost(&self) -> MemResult<bool> {
        todo!("read NFCT INTENSET FIELDLOST reset value false")
    }
    #[doc = "NFCT INTENSET FIELDLOST: Write '1' to Enable interrupt for FIELDLOST event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_fieldlost(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET FIELDLOST reset value false")
    }
    #[doc = "NFCT INTENSET TXFRAMESTART: Write '1' to Enable interrupt for TXFRAMESTART event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_txframestart(&self) -> MemResult<bool> {
        todo!("read NFCT INTENSET TXFRAMESTART reset value false")
    }
    #[doc = "NFCT INTENSET TXFRAMESTART: Write '1' to Enable interrupt for TXFRAMESTART event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_txframestart(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET TXFRAMESTART reset value false")
    }
    #[doc = "NFCT INTENSET TXFRAMEEND: Write '1' to Enable interrupt for TXFRAMEEND event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_txframeend(&self) -> MemResult<bool> {
        todo!("read NFCT INTENSET TXFRAMEEND reset value false")
    }
    #[doc = "NFCT INTENSET TXFRAMEEND: Write '1' to Enable interrupt for TXFRAMEEND event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_txframeend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET TXFRAMEEND reset value false")
    }
    #[doc = "NFCT INTENSET RXFRAMESTART: Write '1' to Enable interrupt for RXFRAMESTART event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_rxframestart(&self) -> MemResult<bool> {
        todo!("read NFCT INTENSET RXFRAMESTART reset value false")
    }
    #[doc = "NFCT INTENSET RXFRAMESTART: Write '1' to Enable interrupt for RXFRAMESTART event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_rxframestart(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET RXFRAMESTART reset value false")
    }
    #[doc = "NFCT INTENSET RXFRAMEEND: Write '1' to Enable interrupt for RXFRAMEEND event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_rxframeend(&self) -> MemResult<bool> {
        todo!("read NFCT INTENSET RXFRAMEEND reset value false")
    }
    #[doc = "NFCT INTENSET RXFRAMEEND: Write '1' to Enable interrupt for RXFRAMEEND event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_rxframeend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET RXFRAMEEND reset value false")
    }
    #[doc = "NFCT INTENSET ERROR: Write '1' to Enable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_error(&self) -> MemResult<bool> {
        todo!("read NFCT INTENSET ERROR reset value false")
    }
    #[doc = "NFCT INTENSET ERROR: Write '1' to Enable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_error(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET ERROR reset value false")
    }
    #[doc = "NFCT INTENSET RXERROR: Write '1' to Enable interrupt for RXERROR event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_rxerror(&self) -> MemResult<bool> {
        todo!("read NFCT INTENSET RXERROR reset value false")
    }
    #[doc = "NFCT INTENSET RXERROR: Write '1' to Enable interrupt for RXERROR event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_rxerror(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET RXERROR reset value false")
    }
    #[doc = "NFCT INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_endrx(&self) -> MemResult<bool> {
        todo!("read NFCT INTENSET ENDRX reset value false")
    }
    #[doc = "NFCT INTENSET ENDRX: Write '1' to Enable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_endrx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET ENDRX reset value false")
    }
    #[doc = "NFCT INTENSET ENDTX: Write '1' to Enable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_endtx(&self) -> MemResult<bool> {
        todo!("read NFCT INTENSET ENDTX reset value false")
    }
    #[doc = "NFCT INTENSET ENDTX: Write '1' to Enable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_endtx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET ENDTX reset value false")
    }
    #[doc = "NFCT INTENSET AUTOCOLRESSTARTED: Write '1' to Enable interrupt for AUTOCOLRESSTARTED event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_autocolresstarted(
        &self,
    ) -> MemResult<bool> {
        todo!("read NFCT INTENSET AUTOCOLRESSTARTED reset value false")
    }
    #[doc = "NFCT INTENSET AUTOCOLRESSTARTED: Write '1' to Enable interrupt for AUTOCOLRESSTARTED event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_autocolresstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET AUTOCOLRESSTARTED reset value false")
    }
    #[doc = "NFCT INTENSET COLLISION: Write '1' to Enable interrupt for COLLISION event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_collision(&self) -> MemResult<bool> {
        todo!("read NFCT INTENSET COLLISION reset value false")
    }
    #[doc = "NFCT INTENSET COLLISION: Write '1' to Enable interrupt for COLLISION event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_collision(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET COLLISION reset value false")
    }
    #[doc = "NFCT INTENSET SELECTED: Write '1' to Enable interrupt for SELECTED event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_selected(&self) -> MemResult<bool> {
        todo!("read NFCT INTENSET SELECTED reset value false")
    }
    #[doc = "NFCT INTENSET SELECTED: Write '1' to Enable interrupt for SELECTED event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_selected(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET SELECTED reset value false")
    }
    #[doc = "NFCT INTENSET STARTED: Write '1' to Enable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn read_nfct_intenset_started(&self) -> MemResult<bool> {
        todo!("read NFCT INTENSET STARTED reset value false")
    }
    #[doc = "NFCT INTENSET STARTED: Write '1' to Enable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn write_nfct_intenset_started(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENSET STARTED reset value false")
    }
    #[doc = "NFCT INTENCLR READY: Write '1' to Disable interrupt for READY event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_ready(&self) -> MemResult<bool> {
        todo!("read NFCT INTENCLR READY reset value false")
    }
    #[doc = "NFCT INTENCLR READY: Write '1' to Disable interrupt for READY event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_ready(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR READY reset value false")
    }
    #[doc = "NFCT INTENCLR FIELDDETECTED: Write '1' to Disable interrupt for FIELDDETECTED event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_fielddetected(&self) -> MemResult<bool> {
        todo!("read NFCT INTENCLR FIELDDETECTED reset value false")
    }
    #[doc = "NFCT INTENCLR FIELDDETECTED: Write '1' to Disable interrupt for FIELDDETECTED event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_fielddetected(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR FIELDDETECTED reset value false")
    }
    #[doc = "NFCT INTENCLR FIELDLOST: Write '1' to Disable interrupt for FIELDLOST event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_fieldlost(&self) -> MemResult<bool> {
        todo!("read NFCT INTENCLR FIELDLOST reset value false")
    }
    #[doc = "NFCT INTENCLR FIELDLOST: Write '1' to Disable interrupt for FIELDLOST event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_fieldlost(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR FIELDLOST reset value false")
    }
    #[doc = "NFCT INTENCLR TXFRAMESTART: Write '1' to Disable interrupt for TXFRAMESTART event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_txframestart(&self) -> MemResult<bool> {
        todo!("read NFCT INTENCLR TXFRAMESTART reset value false")
    }
    #[doc = "NFCT INTENCLR TXFRAMESTART: Write '1' to Disable interrupt for TXFRAMESTART event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_txframestart(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR TXFRAMESTART reset value false")
    }
    #[doc = "NFCT INTENCLR TXFRAMEEND: Write '1' to Disable interrupt for TXFRAMEEND event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_txframeend(&self) -> MemResult<bool> {
        todo!("read NFCT INTENCLR TXFRAMEEND reset value false")
    }
    #[doc = "NFCT INTENCLR TXFRAMEEND: Write '1' to Disable interrupt for TXFRAMEEND event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_txframeend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR TXFRAMEEND reset value false")
    }
    #[doc = "NFCT INTENCLR RXFRAMESTART: Write '1' to Disable interrupt for RXFRAMESTART event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_rxframestart(&self) -> MemResult<bool> {
        todo!("read NFCT INTENCLR RXFRAMESTART reset value false")
    }
    #[doc = "NFCT INTENCLR RXFRAMESTART: Write '1' to Disable interrupt for RXFRAMESTART event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_rxframestart(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR RXFRAMESTART reset value false")
    }
    #[doc = "NFCT INTENCLR RXFRAMEEND: Write '1' to Disable interrupt for RXFRAMEEND event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_rxframeend(&self) -> MemResult<bool> {
        todo!("read NFCT INTENCLR RXFRAMEEND reset value false")
    }
    #[doc = "NFCT INTENCLR RXFRAMEEND: Write '1' to Disable interrupt for RXFRAMEEND event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_rxframeend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR RXFRAMEEND reset value false")
    }
    #[doc = "NFCT INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_error(&self) -> MemResult<bool> {
        todo!("read NFCT INTENCLR ERROR reset value false")
    }
    #[doc = "NFCT INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_error(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR ERROR reset value false")
    }
    #[doc = "NFCT INTENCLR RXERROR: Write '1' to Disable interrupt for RXERROR event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_rxerror(&self) -> MemResult<bool> {
        todo!("read NFCT INTENCLR RXERROR reset value false")
    }
    #[doc = "NFCT INTENCLR RXERROR: Write '1' to Disable interrupt for RXERROR event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_rxerror(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR RXERROR reset value false")
    }
    #[doc = "NFCT INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_endrx(&self) -> MemResult<bool> {
        todo!("read NFCT INTENCLR ENDRX reset value false")
    }
    #[doc = "NFCT INTENCLR ENDRX: Write '1' to Disable interrupt for ENDRX event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_endrx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR ENDRX reset value false")
    }
    #[doc = "NFCT INTENCLR ENDTX: Write '1' to Disable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_endtx(&self) -> MemResult<bool> {
        todo!("read NFCT INTENCLR ENDTX reset value false")
    }
    #[doc = "NFCT INTENCLR ENDTX: Write '1' to Disable interrupt for ENDTX event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_endtx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR ENDTX reset value false")
    }
    #[doc = "NFCT INTENCLR AUTOCOLRESSTARTED: Write '1' to Disable interrupt for AUTOCOLRESSTARTED event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_autocolresstarted(
        &self,
    ) -> MemResult<bool> {
        todo!("read NFCT INTENCLR AUTOCOLRESSTARTED reset value false")
    }
    #[doc = "NFCT INTENCLR AUTOCOLRESSTARTED: Write '1' to Disable interrupt for AUTOCOLRESSTARTED event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_autocolresstarted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR AUTOCOLRESSTARTED reset value false")
    }
    #[doc = "NFCT INTENCLR COLLISION: Write '1' to Disable interrupt for COLLISION event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_collision(&self) -> MemResult<bool> {
        todo!("read NFCT INTENCLR COLLISION reset value false")
    }
    #[doc = "NFCT INTENCLR COLLISION: Write '1' to Disable interrupt for COLLISION event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_collision(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR COLLISION reset value false")
    }
    #[doc = "NFCT INTENCLR SELECTED: Write '1' to Disable interrupt for SELECTED event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_selected(&self) -> MemResult<bool> {
        todo!("read NFCT INTENCLR SELECTED reset value false")
    }
    #[doc = "NFCT INTENCLR SELECTED: Write '1' to Disable interrupt for SELECTED event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_selected(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR SELECTED reset value false")
    }
    #[doc = "NFCT INTENCLR STARTED: Write '1' to Disable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn read_nfct_intenclr_started(&self) -> MemResult<bool> {
        todo!("read NFCT INTENCLR STARTED reset value false")
    }
    #[doc = "NFCT INTENCLR STARTED: Write '1' to Disable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn write_nfct_intenclr_started(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT INTENCLR STARTED reset value false")
    }
    #[doc = "NFCT ERRORSTATUS FRAMEDELAYTIMEOUT: No STARTTX task triggered before expiration of the time set in FRAMEDELAYMAX"]
    #[inline]
    pub(crate) fn read_nfct_errorstatus_framedelaytimeout(
        &self,
    ) -> MemResult<bool> {
        todo!("read NFCT ERRORSTATUS FRAMEDELAYTIMEOUT reset value false")
    }
    #[doc = "NFCT ERRORSTATUS FRAMEDELAYTIMEOUT: No STARTTX task triggered before expiration of the time set in FRAMEDELAYMAX"]
    #[inline]
    pub(crate) fn write_nfct_errorstatus_framedelaytimeout(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT ERRORSTATUS FRAMEDELAYTIMEOUT reset value false")
    }
    #[doc = "NFCT ERRORSTATUS NFCFIELDTOOSTRONG: Field level is too high at max load resistance"]
    #[inline]
    pub(crate) fn read_nfct_errorstatus_nfcfieldtoostrong(
        &self,
    ) -> MemResult<bool> {
        todo!("read NFCT ERRORSTATUS NFCFIELDTOOSTRONG reset value false")
    }
    #[doc = "NFCT ERRORSTATUS NFCFIELDTOOSTRONG: Field level is too high at max load resistance"]
    #[inline]
    pub(crate) fn write_nfct_errorstatus_nfcfieldtoostrong(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT ERRORSTATUS NFCFIELDTOOSTRONG reset value false")
    }
    #[doc = "NFCT ERRORSTATUS NFCFIELDTOOWEAK: Field level is too low at min load resistance"]
    #[inline]
    pub(crate) fn read_nfct_errorstatus_nfcfieldtooweak(
        &self,
    ) -> MemResult<bool> {
        todo!("read NFCT ERRORSTATUS NFCFIELDTOOWEAK reset value false")
    }
    #[doc = "NFCT ERRORSTATUS NFCFIELDTOOWEAK: Field level is too low at min load resistance"]
    #[inline]
    pub(crate) fn write_nfct_errorstatus_nfcfieldtooweak(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT ERRORSTATUS NFCFIELDTOOWEAK reset value false")
    }
    #[doc = "NFCT RX CRCERROR: No valid End of Frame detected"]
    #[inline]
    pub(crate) fn read_nfct_framestatus_rx_crcerror(&self) -> MemResult<bool> {
        todo!("read NFCT RX CRCERROR reset value false")
    }
    #[doc = "NFCT RX CRCERROR: No valid End of Frame detected"]
    #[inline]
    pub(crate) fn write_nfct_framestatus_rx_crcerror(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT RX CRCERROR reset value false")
    }
    #[doc = "NFCT RX PARITYSTATUS: Parity status of received frame"]
    #[inline]
    pub(crate) fn read_nfct_framestatus_rx_paritystatus(
        &self,
    ) -> MemResult<bool> {
        todo!("read NFCT RX PARITYSTATUS reset value false")
    }
    #[doc = "NFCT RX PARITYSTATUS: Parity status of received frame"]
    #[inline]
    pub(crate) fn write_nfct_framestatus_rx_paritystatus(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT RX PARITYSTATUS reset value false")
    }
    #[doc = "NFCT RX OVERRUN: Overrun detected"]
    #[inline]
    pub(crate) fn read_nfct_framestatus_rx_overrun(&self) -> MemResult<bool> {
        todo!("read NFCT RX OVERRUN reset value false")
    }
    #[doc = "NFCT RX OVERRUN: Overrun detected"]
    #[inline]
    pub(crate) fn write_nfct_framestatus_rx_overrun(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT RX OVERRUN reset value false")
    }
    #[doc = "NFCT CURRENTLOADCTRL CURRENTLOADCTRL: Current value driven to the NFC Load Control"]
    #[inline]
    pub(crate) fn read_nfct_currentloadctrl_currentloadctrl(
        &self,
    ) -> MemResult<u8> {
        todo ! ("read NFCT CURRENTLOADCTRL CURRENTLOADCTRL reset value 0x00 mask 0x3f")
    }
    #[doc = "NFCT FIELDPRESENT FIELDPRESENT: Indicates the presence or not of a valid field. Available only in the activated state."]
    #[inline]
    pub(crate) fn read_nfct_fieldpresent_fieldpresent(
        &self,
    ) -> MemResult<bool> {
        todo!("read NFCT FIELDPRESENT FIELDPRESENT reset value false")
    }
    #[doc = "NFCT FIELDPRESENT LOCKDETECT: Indicates if the low level has locked to the field"]
    #[inline]
    pub(crate) fn read_nfct_fieldpresent_lockdetect(&self) -> MemResult<bool> {
        todo!("read NFCT FIELDPRESENT LOCKDETECT reset value false")
    }
    #[doc = "NFCT FRAMEDELAYMIN FRAMEDELAYMIN: Minimum frame delay in number of 13.56 MHz clocks"]
    #[inline]
    pub(crate) fn read_nfct_framedelaymin_framedelaymin(
        &self,
    ) -> MemResult<u16> {
        todo ! ("read NFCT FRAMEDELAYMIN FRAMEDELAYMIN reset value 0x480 mask 0xffff")
    }
    #[doc = "NFCT FRAMEDELAYMIN FRAMEDELAYMIN: Minimum frame delay in number of 13.56 MHz clocks"]
    #[inline]
    pub(crate) fn write_nfct_framedelaymin_framedelaymin(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo ! ("write NFCT FRAMEDELAYMIN FRAMEDELAYMIN reset value 0x480 mask 0xffff")
    }
    #[doc = "NFCT FRAMEDELAYMAX FRAMEDELAYMAX: Maximum frame delay in number of 13.56 MHz clocks"]
    #[inline]
    pub(crate) fn read_nfct_framedelaymax_framedelaymax(
        &self,
    ) -> MemResult<u16> {
        todo ! ("read NFCT FRAMEDELAYMAX FRAMEDELAYMAX reset value 0x1000 mask 0xffff")
    }
    #[doc = "NFCT FRAMEDELAYMAX FRAMEDELAYMAX: Maximum frame delay in number of 13.56 MHz clocks"]
    #[inline]
    pub(crate) fn write_nfct_framedelaymax_framedelaymax(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo ! ("write NFCT FRAMEDELAYMAX FRAMEDELAYMAX reset value 0x1000 mask 0xffff")
    }
    #[doc = "NFCT FRAMEDELAYMODE FRAMEDELAYMODE: Configuration register for the Frame Delay Timer"]
    #[inline]
    pub(crate) fn read_nfct_framedelaymode_framedelaymode(
        &self,
    ) -> MemResult<u8> {
        todo ! ("read NFCT FRAMEDELAYMODE FRAMEDELAYMODE reset value 0x01 mask 0x03")
    }
    #[doc = "NFCT FRAMEDELAYMODE FRAMEDELAYMODE: Configuration register for the Frame Delay Timer"]
    #[inline]
    pub(crate) fn write_nfct_framedelaymode_framedelaymode(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write NFCT FRAMEDELAYMODE FRAMEDELAYMODE reset value 0x01 mask 0x03")
    }
    #[doc = "NFCT PACKETPTR: Packet pointer for TXD and RXD data storage in Data RAM"]
    #[inline]
    pub(crate) fn read_nfct_packetptr(&self) -> MemResult<u32> {
        todo!("read NFCT PACKETPTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT PACKETPTR: Packet pointer for TXD and RXD data storage in Data RAM"]
    #[inline]
    pub(crate) fn write_nfct_packetptr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write NFCT PACKETPTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NFCT MAXLEN MAXLEN: Size of allocated for TXD and RXD data storage buffer in Data RAM"]
    #[inline]
    pub(crate) fn read_nfct_maxlen_maxlen(&self) -> MemResult<u16> {
        todo!("read NFCT MAXLEN MAXLEN reset value 0x00 mask 0x1ff")
    }
    #[doc = "NFCT MAXLEN MAXLEN: Size of allocated for TXD and RXD data storage buffer in Data RAM"]
    #[inline]
    pub(crate) fn write_nfct_maxlen_maxlen(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo!("write NFCT MAXLEN MAXLEN reset value 0x00 mask 0x1ff")
    }
    #[doc = "NFCT FRAMECONFIG PARITY: Adding parity or not in the frame"]
    #[inline]
    pub(crate) fn read_nfct_txd_frameconfig_parity(&self) -> MemResult<bool> {
        todo!("read NFCT FRAMECONFIG PARITY reset value true")
    }
    #[doc = "NFCT FRAMECONFIG PARITY: Adding parity or not in the frame"]
    #[inline]
    pub(crate) fn write_nfct_txd_frameconfig_parity(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT FRAMECONFIG PARITY reset value true")
    }
    #[doc = "NFCT FRAMECONFIG DISCARDMODE: Discarding unused bits in start or at end of a Frame"]
    #[inline]
    pub(crate) fn read_nfct_txd_frameconfig_discardmode(
        &self,
    ) -> MemResult<bool> {
        todo!("read NFCT FRAMECONFIG DISCARDMODE reset value true")
    }
    #[doc = "NFCT FRAMECONFIG DISCARDMODE: Discarding unused bits in start or at end of a Frame"]
    #[inline]
    pub(crate) fn write_nfct_txd_frameconfig_discardmode(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT FRAMECONFIG DISCARDMODE reset value true")
    }
    #[doc = "NFCT FRAMECONFIG SOF: Adding SoF or not in TX frames"]
    #[inline]
    pub(crate) fn read_nfct_txd_frameconfig_sof(&self) -> MemResult<bool> {
        todo!("read NFCT FRAMECONFIG SOF reset value true")
    }
    #[doc = "NFCT FRAMECONFIG SOF: Adding SoF or not in TX frames"]
    #[inline]
    pub(crate) fn write_nfct_txd_frameconfig_sof(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT FRAMECONFIG SOF reset value true")
    }
    #[doc = "NFCT FRAMECONFIG CRCMODETX: CRC mode for outgoing frames"]
    #[inline]
    pub(crate) fn read_nfct_txd_frameconfig_crcmodetx(
        &self,
    ) -> MemResult<bool> {
        todo!("read NFCT FRAMECONFIG CRCMODETX reset value true")
    }
    #[doc = "NFCT FRAMECONFIG CRCMODETX: CRC mode for outgoing frames"]
    #[inline]
    pub(crate) fn write_nfct_txd_frameconfig_crcmodetx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT FRAMECONFIG CRCMODETX reset value true")
    }
    #[doc = "NFCT AMOUNT TXDATABITS: Number of bits in the last or first byte read from RAM that shall be included in the frame (excluding parity bit)."]
    #[inline]
    pub(crate) fn read_nfct_txd_amount_txdatabits(&self) -> MemResult<u8> {
        todo!("read NFCT AMOUNT TXDATABITS reset value 0x00 mask 0x07")
    }
    #[doc = "NFCT AMOUNT TXDATABITS: Number of bits in the last or first byte read from RAM that shall be included in the frame (excluding parity bit)."]
    #[inline]
    pub(crate) fn write_nfct_txd_amount_txdatabits(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT AMOUNT TXDATABITS reset value 0x00 mask 0x07")
    }
    #[doc = "NFCT AMOUNT TXDATABYTES: Number of complete bytes that shall be included in the frame, excluding CRC, parity and framing"]
    #[inline]
    pub(crate) fn read_nfct_txd_amount_txdatabytes(&self) -> MemResult<u16> {
        todo!("read NFCT AMOUNT TXDATABYTES reset value 0x00 mask 0x1ff")
    }
    #[doc = "NFCT AMOUNT TXDATABYTES: Number of complete bytes that shall be included in the frame, excluding CRC, parity and framing"]
    #[inline]
    pub(crate) fn write_nfct_txd_amount_txdatabytes(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo!("write NFCT AMOUNT TXDATABYTES reset value 0x00 mask 0x1ff")
    }
    #[doc = "NFCT FRAMECONFIG PARITY: Parity expected or not in RX frame"]
    #[inline]
    pub(crate) fn read_nfct_rxd_frameconfig_parity(&self) -> MemResult<bool> {
        todo!("read NFCT FRAMECONFIG PARITY reset value true")
    }
    #[doc = "NFCT FRAMECONFIG PARITY: Parity expected or not in RX frame"]
    #[inline]
    pub(crate) fn write_nfct_rxd_frameconfig_parity(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT FRAMECONFIG PARITY reset value true")
    }
    #[doc = "NFCT FRAMECONFIG SOF: SoF expected or not in RX frames"]
    #[inline]
    pub(crate) fn read_nfct_rxd_frameconfig_sof(&self) -> MemResult<bool> {
        todo!("read NFCT FRAMECONFIG SOF reset value true")
    }
    #[doc = "NFCT FRAMECONFIG SOF: SoF expected or not in RX frames"]
    #[inline]
    pub(crate) fn write_nfct_rxd_frameconfig_sof(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT FRAMECONFIG SOF reset value true")
    }
    #[doc = "NFCT FRAMECONFIG CRCMODERX: CRC mode for incoming frames"]
    #[inline]
    pub(crate) fn read_nfct_rxd_frameconfig_crcmoderx(
        &self,
    ) -> MemResult<bool> {
        todo!("read NFCT FRAMECONFIG CRCMODERX reset value true")
    }
    #[doc = "NFCT FRAMECONFIG CRCMODERX: CRC mode for incoming frames"]
    #[inline]
    pub(crate) fn write_nfct_rxd_frameconfig_crcmoderx(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT FRAMECONFIG CRCMODERX reset value true")
    }
    #[doc = "NFCT AMOUNT RXDATABITS: Number of bits in the last byte in the frame, if less than 8 (including CRC, but excluding parity and SoF/EoF framing)."]
    #[inline]
    pub(crate) fn read_nfct_rxd_amount_rxdatabits(&self) -> MemResult<u8> {
        todo!("read NFCT AMOUNT RXDATABITS reset value 0x00 mask 0x07")
    }
    #[doc = "NFCT AMOUNT RXDATABYTES: Number of complete bytes received in the frame (including CRC, but excluding parity and SoF/EoF framing)"]
    #[inline]
    pub(crate) fn read_nfct_rxd_amount_rxdatabytes(&self) -> MemResult<u16> {
        todo!("read NFCT AMOUNT RXDATABYTES reset value 0x00 mask 0x1ff")
    }
    #[doc = "NFCT NFCID1_LAST NFCID1_Z: NFCID1 byte Z (very last byte sent)"]
    #[inline]
    pub(crate) fn read_nfct_nfcid1_last_nfcid1_z(&self) -> MemResult<u8> {
        todo!("read NFCT NFCID1_LAST NFCID1_Z reset value 0x63 mask 0xff")
    }
    #[doc = "NFCT NFCID1_LAST NFCID1_Z: NFCID1 byte Z (very last byte sent)"]
    #[inline]
    pub(crate) fn write_nfct_nfcid1_last_nfcid1_z(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT NFCID1_LAST NFCID1_Z reset value 0x63 mask 0xff")
    }
    #[doc = "NFCT NFCID1_LAST NFCID1_Y: NFCID1 byte Y"]
    #[inline]
    pub(crate) fn read_nfct_nfcid1_last_nfcid1_y(&self) -> MemResult<u8> {
        todo!("read NFCT NFCID1_LAST NFCID1_Y reset value 0x63 mask 0xff")
    }
    #[doc = "NFCT NFCID1_LAST NFCID1_Y: NFCID1 byte Y"]
    #[inline]
    pub(crate) fn write_nfct_nfcid1_last_nfcid1_y(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT NFCID1_LAST NFCID1_Y reset value 0x63 mask 0xff")
    }
    #[doc = "NFCT NFCID1_LAST NFCID1_X: NFCID1 byte X"]
    #[inline]
    pub(crate) fn read_nfct_nfcid1_last_nfcid1_x(&self) -> MemResult<u8> {
        todo!("read NFCT NFCID1_LAST NFCID1_X reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_LAST NFCID1_X: NFCID1 byte X"]
    #[inline]
    pub(crate) fn write_nfct_nfcid1_last_nfcid1_x(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT NFCID1_LAST NFCID1_X reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_LAST NFCID1_W: NFCID1 byte W"]
    #[inline]
    pub(crate) fn read_nfct_nfcid1_last_nfcid1_w(&self) -> MemResult<u8> {
        todo!("read NFCT NFCID1_LAST NFCID1_W reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_LAST NFCID1_W: NFCID1 byte W"]
    #[inline]
    pub(crate) fn write_nfct_nfcid1_last_nfcid1_w(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT NFCID1_LAST NFCID1_W reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_2ND_LAST NFCID1_V: NFCID1 byte V"]
    #[inline]
    pub(crate) fn read_nfct_nfcid1_2nd_last_nfcid1_v(&self) -> MemResult<u8> {
        todo!("read NFCT NFCID1_2ND_LAST NFCID1_V reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_2ND_LAST NFCID1_V: NFCID1 byte V"]
    #[inline]
    pub(crate) fn write_nfct_nfcid1_2nd_last_nfcid1_v(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT NFCID1_2ND_LAST NFCID1_V reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_2ND_LAST NFCID1_U: NFCID1 byte U"]
    #[inline]
    pub(crate) fn read_nfct_nfcid1_2nd_last_nfcid1_u(&self) -> MemResult<u8> {
        todo!("read NFCT NFCID1_2ND_LAST NFCID1_U reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_2ND_LAST NFCID1_U: NFCID1 byte U"]
    #[inline]
    pub(crate) fn write_nfct_nfcid1_2nd_last_nfcid1_u(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT NFCID1_2ND_LAST NFCID1_U reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_2ND_LAST NFCID1_T: NFCID1 byte T"]
    #[inline]
    pub(crate) fn read_nfct_nfcid1_2nd_last_nfcid1_t(&self) -> MemResult<u8> {
        todo!("read NFCT NFCID1_2ND_LAST NFCID1_T reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_2ND_LAST NFCID1_T: NFCID1 byte T"]
    #[inline]
    pub(crate) fn write_nfct_nfcid1_2nd_last_nfcid1_t(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT NFCID1_2ND_LAST NFCID1_T reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_3RD_LAST NFCID1_S: NFCID1 byte S"]
    #[inline]
    pub(crate) fn read_nfct_nfcid1_3rd_last_nfcid1_s(&self) -> MemResult<u8> {
        todo!("read NFCT NFCID1_3RD_LAST NFCID1_S reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_3RD_LAST NFCID1_S: NFCID1 byte S"]
    #[inline]
    pub(crate) fn write_nfct_nfcid1_3rd_last_nfcid1_s(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT NFCID1_3RD_LAST NFCID1_S reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_3RD_LAST NFCID1_R: NFCID1 byte R"]
    #[inline]
    pub(crate) fn read_nfct_nfcid1_3rd_last_nfcid1_r(&self) -> MemResult<u8> {
        todo!("read NFCT NFCID1_3RD_LAST NFCID1_R reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_3RD_LAST NFCID1_R: NFCID1 byte R"]
    #[inline]
    pub(crate) fn write_nfct_nfcid1_3rd_last_nfcid1_r(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT NFCID1_3RD_LAST NFCID1_R reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_3RD_LAST NFCID1_Q: NFCID1 byte Q"]
    #[inline]
    pub(crate) fn read_nfct_nfcid1_3rd_last_nfcid1_q(&self) -> MemResult<u8> {
        todo!("read NFCT NFCID1_3RD_LAST NFCID1_Q reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT NFCID1_3RD_LAST NFCID1_Q: NFCID1 byte Q"]
    #[inline]
    pub(crate) fn write_nfct_nfcid1_3rd_last_nfcid1_q(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT NFCID1_3RD_LAST NFCID1_Q reset value 0x00 mask 0xff")
    }
    #[doc = "NFCT SENSRES BITFRAMESDD: Bit frame SDD as defined by the b5:b1 of byte 1 in SENS_RES response in the NFC Forum, NFC Digital Protocol Technical Specification"]
    #[inline]
    pub(crate) fn read_nfct_sensres_bitframesdd(&self) -> MemResult<u8> {
        todo!("read NFCT SENSRES BITFRAMESDD reset value 0x01 mask 0x1f")
    }
    #[doc = "NFCT SENSRES BITFRAMESDD: Bit frame SDD as defined by the b5:b1 of byte 1 in SENS_RES response in the NFC Forum, NFC Digital Protocol Technical Specification"]
    #[inline]
    pub(crate) fn write_nfct_sensres_bitframesdd(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT SENSRES BITFRAMESDD reset value 0x01 mask 0x1f")
    }
    #[doc = "NFCT SENSRES RFU5: Reserved for future use. Shall be 0."]
    #[inline]
    pub(crate) fn read_nfct_sensres_rfu5(&self) -> MemResult<bool> {
        todo!("read NFCT SENSRES RFU5 reset value false")
    }
    #[doc = "NFCT SENSRES RFU5: Reserved for future use. Shall be 0."]
    #[inline]
    pub(crate) fn write_nfct_sensres_rfu5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT SENSRES RFU5 reset value false")
    }
    #[doc = "NFCT SENSRES NFCIDSIZE: NFCID1 size. This value is used by the Auto collision resolution engine."]
    #[inline]
    pub(crate) fn read_nfct_sensres_nfcidsize(&self) -> MemResult<u8> {
        todo!("read NFCT SENSRES NFCIDSIZE reset value 0x00 mask 0x03")
    }
    #[doc = "NFCT SENSRES NFCIDSIZE: NFCID1 size. This value is used by the Auto collision resolution engine."]
    #[inline]
    pub(crate) fn write_nfct_sensres_nfcidsize(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT SENSRES NFCIDSIZE reset value 0x00 mask 0x03")
    }
    #[doc = "NFCT SENSRES PLATFCONFIG: Tag platform configuration as defined by the b4:b1 of byte 2 in SENS_RES response in the NFC Forum, NFC Digital Protocol Technical Specification"]
    #[inline]
    pub(crate) fn read_nfct_sensres_platfconfig(&self) -> MemResult<u8> {
        todo!("read NFCT SENSRES PLATFCONFIG reset value 0x00 mask 0x0f")
    }
    #[doc = "NFCT SENSRES PLATFCONFIG: Tag platform configuration as defined by the b4:b1 of byte 2 in SENS_RES response in the NFC Forum, NFC Digital Protocol Technical Specification"]
    #[inline]
    pub(crate) fn write_nfct_sensres_platfconfig(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT SENSRES PLATFCONFIG reset value 0x00 mask 0x0f")
    }
    #[doc = "NFCT SENSRES RFU74: Reserved for future use. Shall be 0."]
    #[inline]
    pub(crate) fn read_nfct_sensres_rfu74(&self) -> MemResult<u8> {
        todo!("read NFCT SENSRES RFU74 reset value 0x00 mask 0x0f")
    }
    #[doc = "NFCT SENSRES RFU74: Reserved for future use. Shall be 0."]
    #[inline]
    pub(crate) fn write_nfct_sensres_rfu74(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT SENSRES RFU74 reset value 0x00 mask 0x0f")
    }
    #[doc = "NFCT SELRES RFU10: Reserved for future use. Shall be 0."]
    #[inline]
    pub(crate) fn read_nfct_selres_rfu10(&self) -> MemResult<u8> {
        todo!("read NFCT SELRES RFU10 reset value 0x00 mask 0x03")
    }
    #[doc = "NFCT SELRES RFU10: Reserved for future use. Shall be 0."]
    #[inline]
    pub(crate) fn write_nfct_selres_rfu10(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT SELRES RFU10 reset value 0x00 mask 0x03")
    }
    #[doc = "NFCT SELRES CASCADE: Cascade bit (controlled by hardware, write has no effect)"]
    #[inline]
    pub(crate) fn read_nfct_selres_cascade(&self) -> MemResult<bool> {
        todo!("read NFCT SELRES CASCADE reset value false")
    }
    #[doc = "NFCT SELRES CASCADE: Cascade bit (controlled by hardware, write has no effect)"]
    #[inline]
    pub(crate) fn write_nfct_selres_cascade(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT SELRES CASCADE reset value false")
    }
    #[doc = "NFCT SELRES RFU43: Reserved for future use. Shall be 0."]
    #[inline]
    pub(crate) fn read_nfct_selres_rfu43(&self) -> MemResult<u8> {
        todo!("read NFCT SELRES RFU43 reset value 0x00 mask 0x03")
    }
    #[doc = "NFCT SELRES RFU43: Reserved for future use. Shall be 0."]
    #[inline]
    pub(crate) fn write_nfct_selres_rfu43(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT SELRES RFU43 reset value 0x00 mask 0x03")
    }
    #[doc = "NFCT SELRES PROTOCOL: Protocol as defined by the b7:b6 of SEL_RES response in the NFC Forum, NFC Digital Protocol Technical Specification"]
    #[inline]
    pub(crate) fn read_nfct_selres_protocol(&self) -> MemResult<u8> {
        todo!("read NFCT SELRES PROTOCOL reset value 0x00 mask 0x03")
    }
    #[doc = "NFCT SELRES PROTOCOL: Protocol as defined by the b7:b6 of SEL_RES response in the NFC Forum, NFC Digital Protocol Technical Specification"]
    #[inline]
    pub(crate) fn write_nfct_selres_protocol(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NFCT SELRES PROTOCOL reset value 0x00 mask 0x03")
    }
    #[doc = "NFCT SELRES RFU7: Reserved for future use. Shall be 0."]
    #[inline]
    pub(crate) fn read_nfct_selres_rfu7(&self) -> MemResult<bool> {
        todo!("read NFCT SELRES RFU7 reset value false")
    }
    #[doc = "NFCT SELRES RFU7: Reserved for future use. Shall be 0."]
    #[inline]
    pub(crate) fn write_nfct_selres_rfu7(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NFCT SELRES RFU7 reset value false")
    }
    #[doc = "GPIOTE TASKS_OUT[%s]: Description collection[0]:  Task for writing to pin specified in CONFIG[0].PSEL. Action on pin is configured in CONFIG[0].POLARITY."]
    #[inline]
    pub(crate) fn write_gpiote_tasks_outn(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write GPIOTE TASKS_OUT[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "GPIOTE TASKS_SET[%s]: Description collection[0]:  Task for writing to pin specified in CONFIG[0].PSEL. Action on pin is to set it high."]
    #[inline]
    pub(crate) fn write_gpiote_tasks_setn(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write GPIOTE TASKS_SET[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "GPIOTE TASKS_CLR[%s]: Description collection[0]:  Task for writing to pin specified in CONFIG[0].PSEL. Action on pin is to set it low."]
    #[inline]
    pub(crate) fn write_gpiote_tasks_clrn(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write GPIOTE TASKS_CLR[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "GPIOTE EVENTS_IN[%s]: Description collection[0]:  Event generated from pin specified in CONFIG[0].PSEL"]
    #[inline]
    pub(crate) fn read_gpiote_events_inn(&self, _dim: usize) -> MemResult<u32> {
        todo ! ("read GPIOTE EVENTS_IN[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "GPIOTE EVENTS_IN[%s]: Description collection[0]:  Event generated from pin specified in CONFIG[0].PSEL"]
    #[inline]
    pub(crate) fn write_gpiote_events_inn(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write GPIOTE EVENTS_IN[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "GPIOTE EVENTS_PORT: Event generated from multiple input GPIO pins with SENSE mechanism enabled"]
    #[inline]
    pub(crate) fn read_gpiote_events_port(&self) -> MemResult<u32> {
        todo!(
            "read GPIOTE EVENTS_PORT reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "GPIOTE EVENTS_PORT: Event generated from multiple input GPIO pins with SENSE mechanism enabled"]
    #[inline]
    pub(crate) fn write_gpiote_events_port(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write GPIOTE EVENTS_PORT reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "GPIOTE INTENSET IN0: Write '1' to Enable interrupt for IN[0] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenset_in0(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENSET IN0 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN0: Write '1' to Enable interrupt for IN[0] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenset_in0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENSET IN0 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN1: Write '1' to Enable interrupt for IN[1] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenset_in1(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENSET IN1 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN1: Write '1' to Enable interrupt for IN[1] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenset_in1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENSET IN1 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN2: Write '1' to Enable interrupt for IN[2] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenset_in2(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENSET IN2 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN2: Write '1' to Enable interrupt for IN[2] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenset_in2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENSET IN2 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN3: Write '1' to Enable interrupt for IN[3] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenset_in3(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENSET IN3 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN3: Write '1' to Enable interrupt for IN[3] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenset_in3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENSET IN3 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN4: Write '1' to Enable interrupt for IN[4] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenset_in4(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENSET IN4 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN4: Write '1' to Enable interrupt for IN[4] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenset_in4(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENSET IN4 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN5: Write '1' to Enable interrupt for IN[5] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenset_in5(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENSET IN5 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN5: Write '1' to Enable interrupt for IN[5] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenset_in5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENSET IN5 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN6: Write '1' to Enable interrupt for IN[6] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenset_in6(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENSET IN6 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN6: Write '1' to Enable interrupt for IN[6] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenset_in6(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENSET IN6 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN7: Write '1' to Enable interrupt for IN[7] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenset_in7(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENSET IN7 reset value false")
    }
    #[doc = "GPIOTE INTENSET IN7: Write '1' to Enable interrupt for IN[7] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenset_in7(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENSET IN7 reset value false")
    }
    #[doc = "GPIOTE INTENSET PORT: Write '1' to Enable interrupt for PORT event"]
    #[inline]
    pub(crate) fn read_gpiote_intenset_port(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENSET PORT reset value false")
    }
    #[doc = "GPIOTE INTENSET PORT: Write '1' to Enable interrupt for PORT event"]
    #[inline]
    pub(crate) fn write_gpiote_intenset_port(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENSET PORT reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN0: Write '1' to Disable interrupt for IN[0] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenclr_in0(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENCLR IN0 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN0: Write '1' to Disable interrupt for IN[0] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenclr_in0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENCLR IN0 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN1: Write '1' to Disable interrupt for IN[1] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenclr_in1(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENCLR IN1 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN1: Write '1' to Disable interrupt for IN[1] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenclr_in1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENCLR IN1 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN2: Write '1' to Disable interrupt for IN[2] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenclr_in2(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENCLR IN2 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN2: Write '1' to Disable interrupt for IN[2] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenclr_in2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENCLR IN2 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN3: Write '1' to Disable interrupt for IN[3] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenclr_in3(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENCLR IN3 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN3: Write '1' to Disable interrupt for IN[3] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenclr_in3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENCLR IN3 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN4: Write '1' to Disable interrupt for IN[4] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenclr_in4(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENCLR IN4 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN4: Write '1' to Disable interrupt for IN[4] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenclr_in4(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENCLR IN4 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN5: Write '1' to Disable interrupt for IN[5] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenclr_in5(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENCLR IN5 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN5: Write '1' to Disable interrupt for IN[5] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenclr_in5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENCLR IN5 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN6: Write '1' to Disable interrupt for IN[6] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenclr_in6(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENCLR IN6 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN6: Write '1' to Disable interrupt for IN[6] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenclr_in6(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENCLR IN6 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN7: Write '1' to Disable interrupt for IN[7] event"]
    #[inline]
    pub(crate) fn read_gpiote_intenclr_in7(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENCLR IN7 reset value false")
    }
    #[doc = "GPIOTE INTENCLR IN7: Write '1' to Disable interrupt for IN[7] event"]
    #[inline]
    pub(crate) fn write_gpiote_intenclr_in7(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENCLR IN7 reset value false")
    }
    #[doc = "GPIOTE INTENCLR PORT: Write '1' to Disable interrupt for PORT event"]
    #[inline]
    pub(crate) fn read_gpiote_intenclr_port(&self) -> MemResult<bool> {
        todo!("read GPIOTE INTENCLR PORT reset value false")
    }
    #[doc = "GPIOTE INTENCLR PORT: Write '1' to Disable interrupt for PORT event"]
    #[inline]
    pub(crate) fn write_gpiote_intenclr_port(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE INTENCLR PORT reset value false")
    }
    #[doc = "GPIOTE CONFIG[%s] MODE: Mode"]
    #[inline]
    pub(crate) fn read_gpiote_confign_mode(
        &self,
        _dim: usize,
    ) -> MemResult<u8> {
        todo!("read GPIOTE CONFIG[%s] MODE reset value 0x00 mask 0x03")
    }
    #[doc = "GPIOTE CONFIG[%s] MODE: Mode"]
    #[inline]
    pub(crate) fn write_gpiote_confign_mode(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write GPIOTE CONFIG[%s] MODE reset value 0x00 mask 0x03")
    }
    #[doc = "GPIOTE CONFIG[%s] PSEL: GPIO number associated with SET[n], CLR[n] and OUT[n] tasks and IN[n] event"]
    #[inline]
    pub(crate) fn read_gpiote_confign_psel(
        &self,
        _dim: usize,
    ) -> MemResult<u8> {
        todo!("read GPIOTE CONFIG[%s] PSEL reset value 0x00 mask 0x1f")
    }
    #[doc = "GPIOTE CONFIG[%s] PSEL: GPIO number associated with SET[n], CLR[n] and OUT[n] tasks and IN[n] event"]
    #[inline]
    pub(crate) fn write_gpiote_confign_psel(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write GPIOTE CONFIG[%s] PSEL reset value 0x00 mask 0x1f")
    }
    #[doc = "GPIOTE CONFIG[%s] POLARITY: When In task mode: Operation to be performed on output when OUT[n] task is triggered. When In event mode: Operation on input that shall trigger IN[n] event."]
    #[inline]
    pub(crate) fn read_gpiote_confign_polarity(
        &self,
        _dim: usize,
    ) -> MemResult<u8> {
        todo!("read GPIOTE CONFIG[%s] POLARITY reset value 0x00 mask 0x03")
    }
    #[doc = "GPIOTE CONFIG[%s] POLARITY: When In task mode: Operation to be performed on output when OUT[n] task is triggered. When In event mode: Operation on input that shall trigger IN[n] event."]
    #[inline]
    pub(crate) fn write_gpiote_confign_polarity(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write GPIOTE CONFIG[%s] POLARITY reset value 0x00 mask 0x03")
    }
    #[doc = "GPIOTE CONFIG[%s] OUTINIT: When in task mode: Initial value of the output when the GPIOTE channel is configured. When in event mode: No effect."]
    #[inline]
    pub(crate) fn read_gpiote_confign_outinit(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read GPIOTE CONFIG[%s] OUTINIT reset value false")
    }
    #[doc = "GPIOTE CONFIG[%s] OUTINIT: When in task mode: Initial value of the output when the GPIOTE channel is configured. When in event mode: No effect."]
    #[inline]
    pub(crate) fn write_gpiote_confign_outinit(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write GPIOTE CONFIG[%s] OUTINIT reset value false")
    }
    #[doc = "SAADC TASKS_START: Start the ADC and prepare the result buffer in RAM"]
    #[inline]
    pub(crate) fn write_saadc_tasks_start(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write SAADC TASKS_START reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "SAADC TASKS_SAMPLE: Take one ADC sample, if scan is enabled all channels are sampled"]
    #[inline]
    pub(crate) fn write_saadc_tasks_sample(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write SAADC TASKS_SAMPLE reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "SAADC TASKS_STOP: Stop the ADC and terminate any on-going conversion"]
    #[inline]
    pub(crate) fn write_saadc_tasks_stop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write SAADC TASKS_STOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC TASKS_CALIBRATEOFFSET: Starts offset auto-calibration"]
    #[inline]
    pub(crate) fn write_saadc_tasks_calibrateoffset(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SAADC TASKS_CALIBRATEOFFSET reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC EVENTS_STARTED: The ADC has started"]
    #[inline]
    pub(crate) fn read_saadc_events_started(&self) -> MemResult<u32> {
        todo ! ("read SAADC EVENTS_STARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC EVENTS_STARTED: The ADC has started"]
    #[inline]
    pub(crate) fn write_saadc_events_started(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SAADC EVENTS_STARTED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC EVENTS_END: The ADC has filled up the Result buffer"]
    #[inline]
    pub(crate) fn read_saadc_events_end(&self) -> MemResult<u32> {
        todo!("read SAADC EVENTS_END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC EVENTS_END: The ADC has filled up the Result buffer"]
    #[inline]
    pub(crate) fn write_saadc_events_end(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write SAADC EVENTS_END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC EVENTS_DONE: A conversion task has been completed. Depending on the mode, multiple conversions might be needed for a result to be transferred to RAM."]
    #[inline]
    pub(crate) fn read_saadc_events_done(&self) -> MemResult<u32> {
        todo!("read SAADC EVENTS_DONE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC EVENTS_DONE: A conversion task has been completed. Depending on the mode, multiple conversions might be needed for a result to be transferred to RAM."]
    #[inline]
    pub(crate) fn write_saadc_events_done(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write SAADC EVENTS_DONE reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "SAADC EVENTS_RESULTDONE: A result is ready to get transferred to RAM."]
    #[inline]
    pub(crate) fn read_saadc_events_resultdone(&self) -> MemResult<u32> {
        todo ! ("read SAADC EVENTS_RESULTDONE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC EVENTS_RESULTDONE: A result is ready to get transferred to RAM."]
    #[inline]
    pub(crate) fn write_saadc_events_resultdone(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SAADC EVENTS_RESULTDONE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC EVENTS_CALIBRATEDONE: Calibration is complete"]
    #[inline]
    pub(crate) fn read_saadc_events_calibratedone(&self) -> MemResult<u32> {
        todo ! ("read SAADC EVENTS_CALIBRATEDONE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC EVENTS_CALIBRATEDONE: Calibration is complete"]
    #[inline]
    pub(crate) fn write_saadc_events_calibratedone(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SAADC EVENTS_CALIBRATEDONE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC EVENTS_STOPPED: The ADC has stopped"]
    #[inline]
    pub(crate) fn read_saadc_events_stopped(&self) -> MemResult<u32> {
        todo ! ("read SAADC EVENTS_STOPPED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC EVENTS_STOPPED: The ADC has stopped"]
    #[inline]
    pub(crate) fn write_saadc_events_stopped(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SAADC EVENTS_STOPPED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC LIMITH: Description cluster[0]:  Last results is equal or above CH[0].LIMIT.HIGH"]
    #[inline]
    pub(crate) fn read_saadc_events_chn_limith(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo!("read SAADC LIMITH reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC LIMITH: Description cluster[0]:  Last results is equal or above CH[0].LIMIT.HIGH"]
    #[inline]
    pub(crate) fn write_saadc_events_chn_limith(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write SAADC LIMITH reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC LIMITL: Description cluster[0]:  Last results is equal or below CH[0].LIMIT.LOW"]
    #[inline]
    pub(crate) fn read_saadc_events_chn_limitl(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo!("read SAADC LIMITL reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC LIMITL: Description cluster[0]:  Last results is equal or below CH[0].LIMIT.LOW"]
    #[inline]
    pub(crate) fn write_saadc_events_chn_limitl(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write SAADC LIMITL reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC INTEN STARTED: Enable or disable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn read_saadc_inten_started(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN STARTED reset value false")
    }
    #[doc = "SAADC INTEN STARTED: Enable or disable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn write_saadc_inten_started(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN STARTED reset value false")
    }
    #[doc = "SAADC INTEN END: Enable or disable interrupt for END event"]
    #[inline]
    pub(crate) fn read_saadc_inten_end(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN END reset value false")
    }
    #[doc = "SAADC INTEN END: Enable or disable interrupt for END event"]
    #[inline]
    pub(crate) fn write_saadc_inten_end(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN END reset value false")
    }
    #[doc = "SAADC INTEN DONE: Enable or disable interrupt for DONE event"]
    #[inline]
    pub(crate) fn read_saadc_inten_done(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN DONE reset value false")
    }
    #[doc = "SAADC INTEN DONE: Enable or disable interrupt for DONE event"]
    #[inline]
    pub(crate) fn write_saadc_inten_done(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN DONE reset value false")
    }
    #[doc = "SAADC INTEN RESULTDONE: Enable or disable interrupt for RESULTDONE event"]
    #[inline]
    pub(crate) fn read_saadc_inten_resultdone(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN RESULTDONE reset value false")
    }
    #[doc = "SAADC INTEN RESULTDONE: Enable or disable interrupt for RESULTDONE event"]
    #[inline]
    pub(crate) fn write_saadc_inten_resultdone(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN RESULTDONE reset value false")
    }
    #[doc = "SAADC INTEN CALIBRATEDONE: Enable or disable interrupt for CALIBRATEDONE event"]
    #[inline]
    pub(crate) fn read_saadc_inten_calibratedone(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CALIBRATEDONE reset value false")
    }
    #[doc = "SAADC INTEN CALIBRATEDONE: Enable or disable interrupt for CALIBRATEDONE event"]
    #[inline]
    pub(crate) fn write_saadc_inten_calibratedone(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CALIBRATEDONE reset value false")
    }
    #[doc = "SAADC INTEN STOPPED: Enable or disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_saadc_inten_stopped(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN STOPPED reset value false")
    }
    #[doc = "SAADC INTEN STOPPED: Enable or disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_saadc_inten_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN STOPPED reset value false")
    }
    #[doc = "SAADC INTEN CH0LIMITH: Enable or disable interrupt for CH[0].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch0limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH0LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH0LIMITH: Enable or disable interrupt for CH[0].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch0limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH0LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH0LIMITL: Enable or disable interrupt for CH[0].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch0limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH0LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH0LIMITL: Enable or disable interrupt for CH[0].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch0limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH0LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH1LIMITH: Enable or disable interrupt for CH[1].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch1limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH1LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH1LIMITH: Enable or disable interrupt for CH[1].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch1limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH1LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH1LIMITL: Enable or disable interrupt for CH[1].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch1limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH1LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH1LIMITL: Enable or disable interrupt for CH[1].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch1limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH1LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH2LIMITH: Enable or disable interrupt for CH[2].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch2limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH2LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH2LIMITH: Enable or disable interrupt for CH[2].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch2limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH2LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH2LIMITL: Enable or disable interrupt for CH[2].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch2limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH2LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH2LIMITL: Enable or disable interrupt for CH[2].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch2limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH2LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH3LIMITH: Enable or disable interrupt for CH[3].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch3limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH3LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH3LIMITH: Enable or disable interrupt for CH[3].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch3limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH3LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH3LIMITL: Enable or disable interrupt for CH[3].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch3limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH3LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH3LIMITL: Enable or disable interrupt for CH[3].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch3limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH3LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH4LIMITH: Enable or disable interrupt for CH[4].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch4limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH4LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH4LIMITH: Enable or disable interrupt for CH[4].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch4limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH4LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH4LIMITL: Enable or disable interrupt for CH[4].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch4limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH4LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH4LIMITL: Enable or disable interrupt for CH[4].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch4limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH4LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH5LIMITH: Enable or disable interrupt for CH[5].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch5limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH5LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH5LIMITH: Enable or disable interrupt for CH[5].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch5limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH5LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH5LIMITL: Enable or disable interrupt for CH[5].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch5limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH5LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH5LIMITL: Enable or disable interrupt for CH[5].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch5limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH5LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH6LIMITH: Enable or disable interrupt for CH[6].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch6limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH6LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH6LIMITH: Enable or disable interrupt for CH[6].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch6limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH6LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH6LIMITL: Enable or disable interrupt for CH[6].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch6limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH6LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH6LIMITL: Enable or disable interrupt for CH[6].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch6limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH6LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH7LIMITH: Enable or disable interrupt for CH[7].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch7limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH7LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH7LIMITH: Enable or disable interrupt for CH[7].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch7limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH7LIMITH reset value false")
    }
    #[doc = "SAADC INTEN CH7LIMITL: Enable or disable interrupt for CH[7].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_inten_ch7limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTEN CH7LIMITL reset value false")
    }
    #[doc = "SAADC INTEN CH7LIMITL: Enable or disable interrupt for CH[7].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_inten_ch7limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTEN CH7LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET STARTED: Write '1' to Enable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_started(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET STARTED reset value false")
    }
    #[doc = "SAADC INTENSET STARTED: Write '1' to Enable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_started(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET STARTED reset value false")
    }
    #[doc = "SAADC INTENSET END: Write '1' to Enable interrupt for END event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_end(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET END reset value false")
    }
    #[doc = "SAADC INTENSET END: Write '1' to Enable interrupt for END event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_end(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET END reset value false")
    }
    #[doc = "SAADC INTENSET DONE: Write '1' to Enable interrupt for DONE event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_done(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET DONE reset value false")
    }
    #[doc = "SAADC INTENSET DONE: Write '1' to Enable interrupt for DONE event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_done(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET DONE reset value false")
    }
    #[doc = "SAADC INTENSET RESULTDONE: Write '1' to Enable interrupt for RESULTDONE event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_resultdone(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET RESULTDONE reset value false")
    }
    #[doc = "SAADC INTENSET RESULTDONE: Write '1' to Enable interrupt for RESULTDONE event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_resultdone(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET RESULTDONE reset value false")
    }
    #[doc = "SAADC INTENSET CALIBRATEDONE: Write '1' to Enable interrupt for CALIBRATEDONE event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_calibratedone(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CALIBRATEDONE reset value false")
    }
    #[doc = "SAADC INTENSET CALIBRATEDONE: Write '1' to Enable interrupt for CALIBRATEDONE event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_calibratedone(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CALIBRATEDONE reset value false")
    }
    #[doc = "SAADC INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_stopped(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET STOPPED reset value false")
    }
    #[doc = "SAADC INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET STOPPED reset value false")
    }
    #[doc = "SAADC INTENSET CH0LIMITH: Write '1' to Enable interrupt for CH[0].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch0limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH0LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH0LIMITH: Write '1' to Enable interrupt for CH[0].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch0limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH0LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH0LIMITL: Write '1' to Enable interrupt for CH[0].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch0limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH0LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH0LIMITL: Write '1' to Enable interrupt for CH[0].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch0limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH0LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH1LIMITH: Write '1' to Enable interrupt for CH[1].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch1limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH1LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH1LIMITH: Write '1' to Enable interrupt for CH[1].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch1limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH1LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH1LIMITL: Write '1' to Enable interrupt for CH[1].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch1limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH1LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH1LIMITL: Write '1' to Enable interrupt for CH[1].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch1limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH1LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH2LIMITH: Write '1' to Enable interrupt for CH[2].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch2limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH2LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH2LIMITH: Write '1' to Enable interrupt for CH[2].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch2limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH2LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH2LIMITL: Write '1' to Enable interrupt for CH[2].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch2limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH2LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH2LIMITL: Write '1' to Enable interrupt for CH[2].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch2limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH2LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH3LIMITH: Write '1' to Enable interrupt for CH[3].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch3limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH3LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH3LIMITH: Write '1' to Enable interrupt for CH[3].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch3limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH3LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH3LIMITL: Write '1' to Enable interrupt for CH[3].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch3limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH3LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH3LIMITL: Write '1' to Enable interrupt for CH[3].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch3limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH3LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH4LIMITH: Write '1' to Enable interrupt for CH[4].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch4limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH4LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH4LIMITH: Write '1' to Enable interrupt for CH[4].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch4limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH4LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH4LIMITL: Write '1' to Enable interrupt for CH[4].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch4limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH4LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH4LIMITL: Write '1' to Enable interrupt for CH[4].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch4limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH4LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH5LIMITH: Write '1' to Enable interrupt for CH[5].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch5limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH5LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH5LIMITH: Write '1' to Enable interrupt for CH[5].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch5limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH5LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH5LIMITL: Write '1' to Enable interrupt for CH[5].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch5limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH5LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH5LIMITL: Write '1' to Enable interrupt for CH[5].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch5limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH5LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH6LIMITH: Write '1' to Enable interrupt for CH[6].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch6limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH6LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH6LIMITH: Write '1' to Enable interrupt for CH[6].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch6limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH6LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH6LIMITL: Write '1' to Enable interrupt for CH[6].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch6limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH6LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH6LIMITL: Write '1' to Enable interrupt for CH[6].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch6limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH6LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH7LIMITH: Write '1' to Enable interrupt for CH[7].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch7limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH7LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH7LIMITH: Write '1' to Enable interrupt for CH[7].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch7limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH7LIMITH reset value false")
    }
    #[doc = "SAADC INTENSET CH7LIMITL: Write '1' to Enable interrupt for CH[7].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenset_ch7limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENSET CH7LIMITL reset value false")
    }
    #[doc = "SAADC INTENSET CH7LIMITL: Write '1' to Enable interrupt for CH[7].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenset_ch7limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENSET CH7LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR STARTED: Write '1' to Disable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_started(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR STARTED reset value false")
    }
    #[doc = "SAADC INTENCLR STARTED: Write '1' to Disable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_started(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR STARTED reset value false")
    }
    #[doc = "SAADC INTENCLR END: Write '1' to Disable interrupt for END event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_end(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR END reset value false")
    }
    #[doc = "SAADC INTENCLR END: Write '1' to Disable interrupt for END event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_end(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR END reset value false")
    }
    #[doc = "SAADC INTENCLR DONE: Write '1' to Disable interrupt for DONE event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_done(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR DONE reset value false")
    }
    #[doc = "SAADC INTENCLR DONE: Write '1' to Disable interrupt for DONE event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_done(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR DONE reset value false")
    }
    #[doc = "SAADC INTENCLR RESULTDONE: Write '1' to Disable interrupt for RESULTDONE event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_resultdone(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR RESULTDONE reset value false")
    }
    #[doc = "SAADC INTENCLR RESULTDONE: Write '1' to Disable interrupt for RESULTDONE event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_resultdone(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR RESULTDONE reset value false")
    }
    #[doc = "SAADC INTENCLR CALIBRATEDONE: Write '1' to Disable interrupt for CALIBRATEDONE event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_calibratedone(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CALIBRATEDONE reset value false")
    }
    #[doc = "SAADC INTENCLR CALIBRATEDONE: Write '1' to Disable interrupt for CALIBRATEDONE event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_calibratedone(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CALIBRATEDONE reset value false")
    }
    #[doc = "SAADC INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_stopped(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR STOPPED reset value false")
    }
    #[doc = "SAADC INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR STOPPED reset value false")
    }
    #[doc = "SAADC INTENCLR CH0LIMITH: Write '1' to Disable interrupt for CH[0].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch0limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH0LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH0LIMITH: Write '1' to Disable interrupt for CH[0].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch0limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH0LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH0LIMITL: Write '1' to Disable interrupt for CH[0].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch0limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH0LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH0LIMITL: Write '1' to Disable interrupt for CH[0].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch0limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH0LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH1LIMITH: Write '1' to Disable interrupt for CH[1].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch1limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH1LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH1LIMITH: Write '1' to Disable interrupt for CH[1].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch1limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH1LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH1LIMITL: Write '1' to Disable interrupt for CH[1].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch1limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH1LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH1LIMITL: Write '1' to Disable interrupt for CH[1].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch1limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH1LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH2LIMITH: Write '1' to Disable interrupt for CH[2].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch2limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH2LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH2LIMITH: Write '1' to Disable interrupt for CH[2].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch2limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH2LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH2LIMITL: Write '1' to Disable interrupt for CH[2].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch2limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH2LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH2LIMITL: Write '1' to Disable interrupt for CH[2].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch2limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH2LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH3LIMITH: Write '1' to Disable interrupt for CH[3].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch3limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH3LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH3LIMITH: Write '1' to Disable interrupt for CH[3].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch3limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH3LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH3LIMITL: Write '1' to Disable interrupt for CH[3].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch3limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH3LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH3LIMITL: Write '1' to Disable interrupt for CH[3].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch3limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH3LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH4LIMITH: Write '1' to Disable interrupt for CH[4].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch4limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH4LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH4LIMITH: Write '1' to Disable interrupt for CH[4].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch4limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH4LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH4LIMITL: Write '1' to Disable interrupt for CH[4].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch4limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH4LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH4LIMITL: Write '1' to Disable interrupt for CH[4].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch4limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH4LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH5LIMITH: Write '1' to Disable interrupt for CH[5].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch5limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH5LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH5LIMITH: Write '1' to Disable interrupt for CH[5].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch5limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH5LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH5LIMITL: Write '1' to Disable interrupt for CH[5].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch5limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH5LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH5LIMITL: Write '1' to Disable interrupt for CH[5].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch5limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH5LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH6LIMITH: Write '1' to Disable interrupt for CH[6].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch6limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH6LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH6LIMITH: Write '1' to Disable interrupt for CH[6].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch6limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH6LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH6LIMITL: Write '1' to Disable interrupt for CH[6].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch6limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH6LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH6LIMITL: Write '1' to Disable interrupt for CH[6].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch6limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH6LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH7LIMITH: Write '1' to Disable interrupt for CH[7].LIMITH event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch7limith(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH7LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH7LIMITH: Write '1' to Disable interrupt for CH[7].LIMITH event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch7limith(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH7LIMITH reset value false")
    }
    #[doc = "SAADC INTENCLR CH7LIMITL: Write '1' to Disable interrupt for CH[7].LIMITL event"]
    #[inline]
    pub(crate) fn read_saadc_intenclr_ch7limitl(&self) -> MemResult<bool> {
        todo!("read SAADC INTENCLR CH7LIMITL reset value false")
    }
    #[doc = "SAADC INTENCLR CH7LIMITL: Write '1' to Disable interrupt for CH[7].LIMITL event"]
    #[inline]
    pub(crate) fn write_saadc_intenclr_ch7limitl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC INTENCLR CH7LIMITL reset value false")
    }
    #[doc = "SAADC STATUS STATUS: Status"]
    #[inline]
    pub(crate) fn read_saadc_status_status(&self) -> MemResult<bool> {
        todo!("read SAADC STATUS STATUS reset value false")
    }
    #[doc = "SAADC ENABLE ENABLE: Enable or disable ADC"]
    #[inline]
    pub(crate) fn read_saadc_enable_enable(&self) -> MemResult<bool> {
        todo!("read SAADC ENABLE ENABLE reset value false")
    }
    #[doc = "SAADC ENABLE ENABLE: Enable or disable ADC"]
    #[inline]
    pub(crate) fn write_saadc_enable_enable(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC ENABLE ENABLE reset value false")
    }
    #[doc = "SAADC PSELP PSELP: Analog positive input channel"]
    #[inline]
    pub(crate) fn read_saadc_chn_pselp_pselp(
        &self,
        _dim: usize,
    ) -> MemResult<u8> {
        todo!("read SAADC PSELP PSELP reset value 0x00 mask 0x1f")
    }
    #[doc = "SAADC PSELP PSELP: Analog positive input channel"]
    #[inline]
    pub(crate) fn write_saadc_chn_pselp_pselp(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write SAADC PSELP PSELP reset value 0x00 mask 0x1f")
    }
    #[doc = "SAADC PSELN PSELN: Analog negative input, enables differential channel"]
    #[inline]
    pub(crate) fn read_saadc_chn_pseln_pseln(
        &self,
        _dim: usize,
    ) -> MemResult<u8> {
        todo!("read SAADC PSELN PSELN reset value 0x00 mask 0x1f")
    }
    #[doc = "SAADC PSELN PSELN: Analog negative input, enables differential channel"]
    #[inline]
    pub(crate) fn write_saadc_chn_pseln_pseln(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write SAADC PSELN PSELN reset value 0x00 mask 0x1f")
    }
    #[doc = "SAADC CONFIG RESP: Positive channel resistor control"]
    #[inline]
    pub(crate) fn read_saadc_chn_config_resp(
        &self,
        _dim: usize,
    ) -> MemResult<u8> {
        todo!("read SAADC CONFIG RESP reset value 0x00 mask 0x03")
    }
    #[doc = "SAADC CONFIG RESP: Positive channel resistor control"]
    #[inline]
    pub(crate) fn write_saadc_chn_config_resp(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write SAADC CONFIG RESP reset value 0x00 mask 0x03")
    }
    #[doc = "SAADC CONFIG RESN: Negative channel resistor control"]
    #[inline]
    pub(crate) fn read_saadc_chn_config_resn(
        &self,
        _dim: usize,
    ) -> MemResult<u8> {
        todo!("read SAADC CONFIG RESN reset value 0x00 mask 0x03")
    }
    #[doc = "SAADC CONFIG RESN: Negative channel resistor control"]
    #[inline]
    pub(crate) fn write_saadc_chn_config_resn(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write SAADC CONFIG RESN reset value 0x00 mask 0x03")
    }
    #[doc = "SAADC CONFIG GAIN: Gain control"]
    #[inline]
    pub(crate) fn read_saadc_chn_config_gain(
        &self,
        _dim: usize,
    ) -> MemResult<u8> {
        todo!("read SAADC CONFIG GAIN reset value 0x00 mask 0x07")
    }
    #[doc = "SAADC CONFIG GAIN: Gain control"]
    #[inline]
    pub(crate) fn write_saadc_chn_config_gain(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write SAADC CONFIG GAIN reset value 0x00 mask 0x07")
    }
    #[doc = "SAADC CONFIG REFSEL: Reference control"]
    #[inline]
    pub(crate) fn read_saadc_chn_config_refsel(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read SAADC CONFIG REFSEL reset value false")
    }
    #[doc = "SAADC CONFIG REFSEL: Reference control"]
    #[inline]
    pub(crate) fn write_saadc_chn_config_refsel(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC CONFIG REFSEL reset value false")
    }
    #[doc = "SAADC CONFIG TACQ: Acquisition time, the time the ADC uses to sample the input voltage"]
    #[inline]
    pub(crate) fn read_saadc_chn_config_tacq(
        &self,
        _dim: usize,
    ) -> MemResult<u8> {
        todo!("read SAADC CONFIG TACQ reset value 0x02 mask 0x07")
    }
    #[doc = "SAADC CONFIG TACQ: Acquisition time, the time the ADC uses to sample the input voltage"]
    #[inline]
    pub(crate) fn write_saadc_chn_config_tacq(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write SAADC CONFIG TACQ reset value 0x02 mask 0x07")
    }
    #[doc = "SAADC CONFIG MODE: Enable differential mode"]
    #[inline]
    pub(crate) fn read_saadc_chn_config_mode(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read SAADC CONFIG MODE reset value false")
    }
    #[doc = "SAADC CONFIG MODE: Enable differential mode"]
    #[inline]
    pub(crate) fn write_saadc_chn_config_mode(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC CONFIG MODE reset value false")
    }
    #[doc = "SAADC CONFIG BURST: Enable burst mode"]
    #[inline]
    pub(crate) fn read_saadc_chn_config_burst(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read SAADC CONFIG BURST reset value false")
    }
    #[doc = "SAADC CONFIG BURST: Enable burst mode"]
    #[inline]
    pub(crate) fn write_saadc_chn_config_burst(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC CONFIG BURST reset value false")
    }
    #[doc = "SAADC LIMIT LOW: Low level limit"]
    #[inline]
    pub(crate) fn read_saadc_chn_limit_low(
        &self,
        _dim: usize,
    ) -> MemResult<u16> {
        todo!("read SAADC LIMIT LOW reset value 0x8000 mask 0xffff")
    }
    #[doc = "SAADC LIMIT LOW: Low level limit"]
    #[inline]
    pub(crate) fn write_saadc_chn_limit_low(
        &mut self,
        _dim: usize,
        _value: u16,
    ) -> MemResult<()> {
        todo!("write SAADC LIMIT LOW reset value 0x8000 mask 0xffff")
    }
    #[doc = "SAADC LIMIT HIGH: High level limit"]
    #[inline]
    pub(crate) fn read_saadc_chn_limit_high(
        &self,
        _dim: usize,
    ) -> MemResult<u16> {
        todo!("read SAADC LIMIT HIGH reset value 0x7fff mask 0xffff")
    }
    #[doc = "SAADC LIMIT HIGH: High level limit"]
    #[inline]
    pub(crate) fn write_saadc_chn_limit_high(
        &mut self,
        _dim: usize,
        _value: u16,
    ) -> MemResult<()> {
        todo!("write SAADC LIMIT HIGH reset value 0x7fff mask 0xffff")
    }
    #[doc = "SAADC RESOLUTION VAL: Set the resolution"]
    #[inline]
    pub(crate) fn read_saadc_resolution_val(&self) -> MemResult<u8> {
        todo!("read SAADC RESOLUTION VAL reset value 0x01 mask 0x07")
    }
    #[doc = "SAADC RESOLUTION VAL: Set the resolution"]
    #[inline]
    pub(crate) fn write_saadc_resolution_val(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write SAADC RESOLUTION VAL reset value 0x01 mask 0x07")
    }
    #[doc = "SAADC OVERSAMPLE OVERSAMPLE: Oversample control"]
    #[inline]
    pub(crate) fn read_saadc_oversample_oversample(&self) -> MemResult<u8> {
        todo!("read SAADC OVERSAMPLE OVERSAMPLE reset value 0x00 mask 0x0f")
    }
    #[doc = "SAADC OVERSAMPLE OVERSAMPLE: Oversample control"]
    #[inline]
    pub(crate) fn write_saadc_oversample_oversample(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write SAADC OVERSAMPLE OVERSAMPLE reset value 0x00 mask 0x0f")
    }
    #[doc = "SAADC SAMPLERATE CC: Capture and compare value. Sample rate is 16 MHz/CC"]
    #[inline]
    pub(crate) fn read_saadc_samplerate_cc(&self) -> MemResult<u16> {
        todo!("read SAADC SAMPLERATE CC reset value 0x00 mask 0x7ff")
    }
    #[doc = "SAADC SAMPLERATE CC: Capture and compare value. Sample rate is 16 MHz/CC"]
    #[inline]
    pub(crate) fn write_saadc_samplerate_cc(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo!("write SAADC SAMPLERATE CC reset value 0x00 mask 0x7ff")
    }
    #[doc = "SAADC SAMPLERATE MODE: Select mode for sample rate control"]
    #[inline]
    pub(crate) fn read_saadc_samplerate_mode(&self) -> MemResult<bool> {
        todo!("read SAADC SAMPLERATE MODE reset value false")
    }
    #[doc = "SAADC SAMPLERATE MODE: Select mode for sample rate control"]
    #[inline]
    pub(crate) fn write_saadc_samplerate_mode(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SAADC SAMPLERATE MODE reset value false")
    }
    #[doc = "SAADC PTR: Data pointer"]
    #[inline]
    pub(crate) fn read_saadc_result_ptr(&self) -> MemResult<u32> {
        todo!("read SAADC PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC PTR: Data pointer"]
    #[inline]
    pub(crate) fn write_saadc_result_ptr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write SAADC PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SAADC MAXCNT MAXCNT: Maximum number of buffer words to transfer"]
    #[inline]
    pub(crate) fn read_saadc_result_maxcnt_maxcnt(&self) -> MemResult<u16> {
        todo!("read SAADC MAXCNT MAXCNT reset value 0x00 mask 0x7fff")
    }
    #[doc = "SAADC MAXCNT MAXCNT: Maximum number of buffer words to transfer"]
    #[inline]
    pub(crate) fn write_saadc_result_maxcnt_maxcnt(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo!("write SAADC MAXCNT MAXCNT reset value 0x00 mask 0x7fff")
    }
    #[doc = "SAADC AMOUNT AMOUNT: Number of buffer words transferred since last START. This register can be read after an END or STOPPED event."]
    #[inline]
    pub(crate) fn read_saadc_result_amount_amount(&self) -> MemResult<u16> {
        todo!("read SAADC AMOUNT AMOUNT reset value 0x00 mask 0x7fff")
    }
    #[doc = "TIMER0 TASKS_START: Start Timer\n\nTIMER0 TASKS_START: Start Timer\n\nTIMER0 TASKS_START: Start Timer"]
    #[inline]
    pub(crate) fn write_timer0_tasks_start(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 TASKS_START, TIMER0 TASKS_START, TIMER0 TASKS_START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER0 TASKS_STOP: Stop Timer\n\nTIMER0 TASKS_STOP: Stop Timer\n\nTIMER0 TASKS_STOP: Stop Timer"]
    #[inline]
    pub(crate) fn write_timer0_tasks_stop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 TASKS_STOP, TIMER0 TASKS_STOP, TIMER0 TASKS_STOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER0 TASKS_COUNT: Increment Timer (Counter mode only)\n\nTIMER0 TASKS_COUNT: Increment Timer (Counter mode only)\n\nTIMER0 TASKS_COUNT: Increment Timer (Counter mode only)"]
    #[inline]
    pub(crate) fn write_timer0_tasks_count(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 TASKS_COUNT, TIMER0 TASKS_COUNT, TIMER0 TASKS_COUNT reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER0 TASKS_CLEAR: Clear time\n\nTIMER0 TASKS_CLEAR: Clear time\n\nTIMER0 TASKS_CLEAR: Clear time"]
    #[inline]
    pub(crate) fn write_timer0_tasks_clear(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 TASKS_CLEAR, TIMER0 TASKS_CLEAR, TIMER0 TASKS_CLEAR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER0 TASKS_SHUTDOWN: Deprecated register -  Shut down timer\n\nTIMER0 TASKS_SHUTDOWN: Deprecated register -  Shut down timer\n\nTIMER0 TASKS_SHUTDOWN: Deprecated register -  Shut down timer"]
    #[inline]
    pub(crate) fn write_timer0_tasks_shutdown(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 TASKS_SHUTDOWN, TIMER0 TASKS_SHUTDOWN, TIMER0 TASKS_SHUTDOWN reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER0 TASKS_CAPTURE[%s]: Description collection[0]:  Capture Timer value to CC[0] register\n\nTIMER0 TASKS_CAPTURE[%s]: Description collection[0]:  Capture Timer value to CC[0] register\n\nTIMER0 TASKS_CAPTURE[%s]: Description collection[0]:  Capture Timer value to CC[0] register"]
    #[inline]
    pub(crate) fn write_timer0_tasks_capturen(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 TASKS_CAPTURE[%s], TIMER0 TASKS_CAPTURE[%s], TIMER0 TASKS_CAPTURE[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER0 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match\n\nTIMER0 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match\n\nTIMER0 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match"]
    #[inline]
    pub(crate) fn read_timer0_events_comparen(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo ! ("read TIMER0 EVENTS_COMPARE[%s], TIMER0 EVENTS_COMPARE[%s], TIMER0 EVENTS_COMPARE[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER0 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match\n\nTIMER0 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match\n\nTIMER0 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match"]
    #[inline]
    pub(crate) fn write_timer0_events_comparen(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 EVENTS_COMPARE[%s], TIMER0 EVENTS_COMPARE[%s], TIMER0 EVENTS_COMPARE[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER0 SHORTS COMPARE0_CLEAR: Shortcut between COMPARE[0] event and CLEAR task\n\nTIMER0 SHORTS COMPARE0_CLEAR: Shortcut between COMPARE[0] event and CLEAR task\n\nTIMER0 SHORTS COMPARE0_CLEAR: Shortcut between COMPARE[0] event and CLEAR task"]
    #[inline]
    pub(crate) fn read_timer0_shorts_compare0_clear(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 SHORTS COMPARE0_CLEAR, TIMER0 SHORTS COMPARE0_CLEAR, TIMER0 SHORTS COMPARE0_CLEAR reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE0_CLEAR: Shortcut between COMPARE[0] event and CLEAR task\n\nTIMER0 SHORTS COMPARE0_CLEAR: Shortcut between COMPARE[0] event and CLEAR task\n\nTIMER0 SHORTS COMPARE0_CLEAR: Shortcut between COMPARE[0] event and CLEAR task"]
    #[inline]
    pub(crate) fn write_timer0_shorts_compare0_clear(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 SHORTS COMPARE0_CLEAR, TIMER0 SHORTS COMPARE0_CLEAR, TIMER0 SHORTS COMPARE0_CLEAR reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE1_CLEAR: Shortcut between COMPARE[1] event and CLEAR task\n\nTIMER0 SHORTS COMPARE1_CLEAR: Shortcut between COMPARE[1] event and CLEAR task\n\nTIMER0 SHORTS COMPARE1_CLEAR: Shortcut between COMPARE[1] event and CLEAR task"]
    #[inline]
    pub(crate) fn read_timer0_shorts_compare1_clear(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 SHORTS COMPARE1_CLEAR, TIMER0 SHORTS COMPARE1_CLEAR, TIMER0 SHORTS COMPARE1_CLEAR reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE1_CLEAR: Shortcut between COMPARE[1] event and CLEAR task\n\nTIMER0 SHORTS COMPARE1_CLEAR: Shortcut between COMPARE[1] event and CLEAR task\n\nTIMER0 SHORTS COMPARE1_CLEAR: Shortcut between COMPARE[1] event and CLEAR task"]
    #[inline]
    pub(crate) fn write_timer0_shorts_compare1_clear(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 SHORTS COMPARE1_CLEAR, TIMER0 SHORTS COMPARE1_CLEAR, TIMER0 SHORTS COMPARE1_CLEAR reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE2_CLEAR: Shortcut between COMPARE[2] event and CLEAR task\n\nTIMER0 SHORTS COMPARE2_CLEAR: Shortcut between COMPARE[2] event and CLEAR task\n\nTIMER0 SHORTS COMPARE2_CLEAR: Shortcut between COMPARE[2] event and CLEAR task"]
    #[inline]
    pub(crate) fn read_timer0_shorts_compare2_clear(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 SHORTS COMPARE2_CLEAR, TIMER0 SHORTS COMPARE2_CLEAR, TIMER0 SHORTS COMPARE2_CLEAR reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE2_CLEAR: Shortcut between COMPARE[2] event and CLEAR task\n\nTIMER0 SHORTS COMPARE2_CLEAR: Shortcut between COMPARE[2] event and CLEAR task\n\nTIMER0 SHORTS COMPARE2_CLEAR: Shortcut between COMPARE[2] event and CLEAR task"]
    #[inline]
    pub(crate) fn write_timer0_shorts_compare2_clear(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 SHORTS COMPARE2_CLEAR, TIMER0 SHORTS COMPARE2_CLEAR, TIMER0 SHORTS COMPARE2_CLEAR reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE3_CLEAR: Shortcut between COMPARE[3] event and CLEAR task\n\nTIMER0 SHORTS COMPARE3_CLEAR: Shortcut between COMPARE[3] event and CLEAR task\n\nTIMER0 SHORTS COMPARE3_CLEAR: Shortcut between COMPARE[3] event and CLEAR task"]
    #[inline]
    pub(crate) fn read_timer0_shorts_compare3_clear(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 SHORTS COMPARE3_CLEAR, TIMER0 SHORTS COMPARE3_CLEAR, TIMER0 SHORTS COMPARE3_CLEAR reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE3_CLEAR: Shortcut between COMPARE[3] event and CLEAR task\n\nTIMER0 SHORTS COMPARE3_CLEAR: Shortcut between COMPARE[3] event and CLEAR task\n\nTIMER0 SHORTS COMPARE3_CLEAR: Shortcut between COMPARE[3] event and CLEAR task"]
    #[inline]
    pub(crate) fn write_timer0_shorts_compare3_clear(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 SHORTS COMPARE3_CLEAR, TIMER0 SHORTS COMPARE3_CLEAR, TIMER0 SHORTS COMPARE3_CLEAR reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE0_STOP: Shortcut between COMPARE[0] event and STOP task\n\nTIMER0 SHORTS COMPARE0_STOP: Shortcut between COMPARE[0] event and STOP task\n\nTIMER0 SHORTS COMPARE0_STOP: Shortcut between COMPARE[0] event and STOP task"]
    #[inline]
    pub(crate) fn read_timer0_shorts_compare0_stop(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 SHORTS COMPARE0_STOP, TIMER0 SHORTS COMPARE0_STOP, TIMER0 SHORTS COMPARE0_STOP reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE0_STOP: Shortcut between COMPARE[0] event and STOP task\n\nTIMER0 SHORTS COMPARE0_STOP: Shortcut between COMPARE[0] event and STOP task\n\nTIMER0 SHORTS COMPARE0_STOP: Shortcut between COMPARE[0] event and STOP task"]
    #[inline]
    pub(crate) fn write_timer0_shorts_compare0_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 SHORTS COMPARE0_STOP, TIMER0 SHORTS COMPARE0_STOP, TIMER0 SHORTS COMPARE0_STOP reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE1_STOP: Shortcut between COMPARE[1] event and STOP task\n\nTIMER0 SHORTS COMPARE1_STOP: Shortcut between COMPARE[1] event and STOP task\n\nTIMER0 SHORTS COMPARE1_STOP: Shortcut between COMPARE[1] event and STOP task"]
    #[inline]
    pub(crate) fn read_timer0_shorts_compare1_stop(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 SHORTS COMPARE1_STOP, TIMER0 SHORTS COMPARE1_STOP, TIMER0 SHORTS COMPARE1_STOP reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE1_STOP: Shortcut between COMPARE[1] event and STOP task\n\nTIMER0 SHORTS COMPARE1_STOP: Shortcut between COMPARE[1] event and STOP task\n\nTIMER0 SHORTS COMPARE1_STOP: Shortcut between COMPARE[1] event and STOP task"]
    #[inline]
    pub(crate) fn write_timer0_shorts_compare1_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 SHORTS COMPARE1_STOP, TIMER0 SHORTS COMPARE1_STOP, TIMER0 SHORTS COMPARE1_STOP reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE2_STOP: Shortcut between COMPARE[2] event and STOP task\n\nTIMER0 SHORTS COMPARE2_STOP: Shortcut between COMPARE[2] event and STOP task\n\nTIMER0 SHORTS COMPARE2_STOP: Shortcut between COMPARE[2] event and STOP task"]
    #[inline]
    pub(crate) fn read_timer0_shorts_compare2_stop(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 SHORTS COMPARE2_STOP, TIMER0 SHORTS COMPARE2_STOP, TIMER0 SHORTS COMPARE2_STOP reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE2_STOP: Shortcut between COMPARE[2] event and STOP task\n\nTIMER0 SHORTS COMPARE2_STOP: Shortcut between COMPARE[2] event and STOP task\n\nTIMER0 SHORTS COMPARE2_STOP: Shortcut between COMPARE[2] event and STOP task"]
    #[inline]
    pub(crate) fn write_timer0_shorts_compare2_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 SHORTS COMPARE2_STOP, TIMER0 SHORTS COMPARE2_STOP, TIMER0 SHORTS COMPARE2_STOP reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE3_STOP: Shortcut between COMPARE[3] event and STOP task\n\nTIMER0 SHORTS COMPARE3_STOP: Shortcut between COMPARE[3] event and STOP task\n\nTIMER0 SHORTS COMPARE3_STOP: Shortcut between COMPARE[3] event and STOP task"]
    #[inline]
    pub(crate) fn read_timer0_shorts_compare3_stop(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 SHORTS COMPARE3_STOP, TIMER0 SHORTS COMPARE3_STOP, TIMER0 SHORTS COMPARE3_STOP reset value false")
    }
    #[doc = "TIMER0 SHORTS COMPARE3_STOP: Shortcut between COMPARE[3] event and STOP task\n\nTIMER0 SHORTS COMPARE3_STOP: Shortcut between COMPARE[3] event and STOP task\n\nTIMER0 SHORTS COMPARE3_STOP: Shortcut between COMPARE[3] event and STOP task"]
    #[inline]
    pub(crate) fn write_timer0_shorts_compare3_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 SHORTS COMPARE3_STOP, TIMER0 SHORTS COMPARE3_STOP, TIMER0 SHORTS COMPARE3_STOP reset value false")
    }
    #[doc = "TIMER0 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event\n\nTIMER0 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event\n\nTIMER0 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event"]
    #[inline]
    pub(crate) fn read_timer0_intenset_compare0(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 INTENSET COMPARE0, TIMER0 INTENSET COMPARE0, TIMER0 INTENSET COMPARE0 reset value false")
    }
    #[doc = "TIMER0 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event\n\nTIMER0 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event\n\nTIMER0 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event"]
    #[inline]
    pub(crate) fn write_timer0_intenset_compare0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 INTENSET COMPARE0, TIMER0 INTENSET COMPARE0, TIMER0 INTENSET COMPARE0 reset value false")
    }
    #[doc = "TIMER0 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event\n\nTIMER0 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event\n\nTIMER0 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event"]
    #[inline]
    pub(crate) fn read_timer0_intenset_compare1(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 INTENSET COMPARE1, TIMER0 INTENSET COMPARE1, TIMER0 INTENSET COMPARE1 reset value false")
    }
    #[doc = "TIMER0 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event\n\nTIMER0 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event\n\nTIMER0 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event"]
    #[inline]
    pub(crate) fn write_timer0_intenset_compare1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 INTENSET COMPARE1, TIMER0 INTENSET COMPARE1, TIMER0 INTENSET COMPARE1 reset value false")
    }
    #[doc = "TIMER0 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event\n\nTIMER0 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event\n\nTIMER0 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event"]
    #[inline]
    pub(crate) fn read_timer0_intenset_compare2(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 INTENSET COMPARE2, TIMER0 INTENSET COMPARE2, TIMER0 INTENSET COMPARE2 reset value false")
    }
    #[doc = "TIMER0 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event\n\nTIMER0 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event\n\nTIMER0 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event"]
    #[inline]
    pub(crate) fn write_timer0_intenset_compare2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 INTENSET COMPARE2, TIMER0 INTENSET COMPARE2, TIMER0 INTENSET COMPARE2 reset value false")
    }
    #[doc = "TIMER0 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event\n\nTIMER0 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event\n\nTIMER0 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event"]
    #[inline]
    pub(crate) fn read_timer0_intenset_compare3(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 INTENSET COMPARE3, TIMER0 INTENSET COMPARE3, TIMER0 INTENSET COMPARE3 reset value false")
    }
    #[doc = "TIMER0 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event\n\nTIMER0 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event\n\nTIMER0 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event"]
    #[inline]
    pub(crate) fn write_timer0_intenset_compare3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 INTENSET COMPARE3, TIMER0 INTENSET COMPARE3, TIMER0 INTENSET COMPARE3 reset value false")
    }
    #[doc = "TIMER0 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event\n\nTIMER0 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event\n\nTIMER0 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event"]
    #[inline]
    pub(crate) fn read_timer0_intenclr_compare0(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 INTENCLR COMPARE0, TIMER0 INTENCLR COMPARE0, TIMER0 INTENCLR COMPARE0 reset value false")
    }
    #[doc = "TIMER0 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event\n\nTIMER0 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event\n\nTIMER0 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event"]
    #[inline]
    pub(crate) fn write_timer0_intenclr_compare0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 INTENCLR COMPARE0, TIMER0 INTENCLR COMPARE0, TIMER0 INTENCLR COMPARE0 reset value false")
    }
    #[doc = "TIMER0 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event\n\nTIMER0 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event\n\nTIMER0 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event"]
    #[inline]
    pub(crate) fn read_timer0_intenclr_compare1(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 INTENCLR COMPARE1, TIMER0 INTENCLR COMPARE1, TIMER0 INTENCLR COMPARE1 reset value false")
    }
    #[doc = "TIMER0 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event\n\nTIMER0 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event\n\nTIMER0 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event"]
    #[inline]
    pub(crate) fn write_timer0_intenclr_compare1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 INTENCLR COMPARE1, TIMER0 INTENCLR COMPARE1, TIMER0 INTENCLR COMPARE1 reset value false")
    }
    #[doc = "TIMER0 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event\n\nTIMER0 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event\n\nTIMER0 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event"]
    #[inline]
    pub(crate) fn read_timer0_intenclr_compare2(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 INTENCLR COMPARE2, TIMER0 INTENCLR COMPARE2, TIMER0 INTENCLR COMPARE2 reset value false")
    }
    #[doc = "TIMER0 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event\n\nTIMER0 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event\n\nTIMER0 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event"]
    #[inline]
    pub(crate) fn write_timer0_intenclr_compare2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 INTENCLR COMPARE2, TIMER0 INTENCLR COMPARE2, TIMER0 INTENCLR COMPARE2 reset value false")
    }
    #[doc = "TIMER0 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event\n\nTIMER0 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event\n\nTIMER0 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event"]
    #[inline]
    pub(crate) fn read_timer0_intenclr_compare3(&self) -> MemResult<bool> {
        todo ! ("read TIMER0 INTENCLR COMPARE3, TIMER0 INTENCLR COMPARE3, TIMER0 INTENCLR COMPARE3 reset value false")
    }
    #[doc = "TIMER0 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event\n\nTIMER0 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event\n\nTIMER0 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event"]
    #[inline]
    pub(crate) fn write_timer0_intenclr_compare3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 INTENCLR COMPARE3, TIMER0 INTENCLR COMPARE3, TIMER0 INTENCLR COMPARE3 reset value false")
    }
    #[doc = "TIMER0 MODE MODE: Timer mode\n\nTIMER0 MODE MODE: Timer mode\n\nTIMER0 MODE MODE: Timer mode"]
    #[inline]
    pub(crate) fn read_timer0_mode_mode(&self) -> MemResult<u8> {
        todo ! ("read TIMER0 MODE MODE, TIMER0 MODE MODE, TIMER0 MODE MODE reset value 0x00 mask 0x03")
    }
    #[doc = "TIMER0 MODE MODE: Timer mode\n\nTIMER0 MODE MODE: Timer mode\n\nTIMER0 MODE MODE: Timer mode"]
    #[inline]
    pub(crate) fn write_timer0_mode_mode(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 MODE MODE, TIMER0 MODE MODE, TIMER0 MODE MODE reset value 0x00 mask 0x03")
    }
    #[doc = "TIMER0 BITMODE BITMODE: Timer bit width\n\nTIMER0 BITMODE BITMODE: Timer bit width\n\nTIMER0 BITMODE BITMODE: Timer bit width"]
    #[inline]
    pub(crate) fn read_timer0_bitmode_bitmode(&self) -> MemResult<u8> {
        todo ! ("read TIMER0 BITMODE BITMODE, TIMER0 BITMODE BITMODE, TIMER0 BITMODE BITMODE reset value 0x00 mask 0x03")
    }
    #[doc = "TIMER0 BITMODE BITMODE: Timer bit width\n\nTIMER0 BITMODE BITMODE: Timer bit width\n\nTIMER0 BITMODE BITMODE: Timer bit width"]
    #[inline]
    pub(crate) fn write_timer0_bitmode_bitmode(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 BITMODE BITMODE, TIMER0 BITMODE BITMODE, TIMER0 BITMODE BITMODE reset value 0x00 mask 0x03")
    }
    #[doc = "TIMER0 PRESCALER PRESCALER: Prescaler value\n\nTIMER0 PRESCALER PRESCALER: Prescaler value\n\nTIMER0 PRESCALER PRESCALER: Prescaler value"]
    #[inline]
    pub(crate) fn read_timer0_prescaler_prescaler(&self) -> MemResult<u8> {
        todo ! ("read TIMER0 PRESCALER PRESCALER, TIMER0 PRESCALER PRESCALER, TIMER0 PRESCALER PRESCALER reset value 0x04 mask 0x0f")
    }
    #[doc = "TIMER0 PRESCALER PRESCALER: Prescaler value\n\nTIMER0 PRESCALER PRESCALER: Prescaler value\n\nTIMER0 PRESCALER PRESCALER: Prescaler value"]
    #[inline]
    pub(crate) fn write_timer0_prescaler_prescaler(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 PRESCALER PRESCALER, TIMER0 PRESCALER PRESCALER, TIMER0 PRESCALER PRESCALER reset value 0x04 mask 0x0f")
    }
    #[doc = "TIMER0 CC[%s]: Description collection[0]:  Capture/Compare register 0\n\nTIMER0 CC[%s]: Description collection[0]:  Capture/Compare register 0\n\nTIMER0 CC[%s]: Description collection[0]:  Capture/Compare register 0"]
    #[inline]
    pub(crate) fn read_timer0_ccn(&self, _dim: usize) -> MemResult<u32> {
        todo ! ("read TIMER0 CC[%s], TIMER0 CC[%s], TIMER0 CC[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER0 CC[%s]: Description collection[0]:  Capture/Compare register 0\n\nTIMER0 CC[%s]: Description collection[0]:  Capture/Compare register 0\n\nTIMER0 CC[%s]: Description collection[0]:  Capture/Compare register 0"]
    #[inline]
    pub(crate) fn write_timer0_ccn(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER0 CC[%s], TIMER0 CC[%s], TIMER0 CC[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RTC0 TASKS_START: Start RTC COUNTER\n\nRTC0 TASKS_START: Start RTC COUNTER\n\nRTC0 TASKS_START: Start RTC COUNTER"]
    #[inline]
    pub(crate) fn write_rtc0_tasks_start(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RTC0 TASKS_START, RTC0 TASKS_START, RTC0 TASKS_START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RTC0 TASKS_STOP: Stop RTC COUNTER\n\nRTC0 TASKS_STOP: Stop RTC COUNTER\n\nRTC0 TASKS_STOP: Stop RTC COUNTER"]
    #[inline]
    pub(crate) fn write_rtc0_tasks_stop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RTC0 TASKS_STOP, RTC0 TASKS_STOP, RTC0 TASKS_STOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RTC0 TASKS_CLEAR: Clear RTC COUNTER\n\nRTC0 TASKS_CLEAR: Clear RTC COUNTER\n\nRTC0 TASKS_CLEAR: Clear RTC COUNTER"]
    #[inline]
    pub(crate) fn write_rtc0_tasks_clear(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RTC0 TASKS_CLEAR, RTC0 TASKS_CLEAR, RTC0 TASKS_CLEAR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RTC0 TASKS_TRIGOVRFLW: Set COUNTER to 0xFFFFF0\n\nRTC0 TASKS_TRIGOVRFLW: Set COUNTER to 0xFFFFF0\n\nRTC0 TASKS_TRIGOVRFLW: Set COUNTER to 0xFFFFF0"]
    #[inline]
    pub(crate) fn write_rtc0_tasks_trigovrflw(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RTC0 TASKS_TRIGOVRFLW, RTC0 TASKS_TRIGOVRFLW, RTC0 TASKS_TRIGOVRFLW reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RTC0 EVENTS_TICK: Event on COUNTER increment\n\nRTC0 EVENTS_TICK: Event on COUNTER increment\n\nRTC0 EVENTS_TICK: Event on COUNTER increment"]
    #[inline]
    pub(crate) fn read_rtc0_events_tick(&self) -> MemResult<u32> {
        todo ! ("read RTC0 EVENTS_TICK, RTC0 EVENTS_TICK, RTC0 EVENTS_TICK reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RTC0 EVENTS_TICK: Event on COUNTER increment\n\nRTC0 EVENTS_TICK: Event on COUNTER increment\n\nRTC0 EVENTS_TICK: Event on COUNTER increment"]
    #[inline]
    pub(crate) fn write_rtc0_events_tick(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVENTS_TICK, RTC0 EVENTS_TICK, RTC0 EVENTS_TICK reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RTC0 EVENTS_OVRFLW: Event on COUNTER overflow\n\nRTC0 EVENTS_OVRFLW: Event on COUNTER overflow\n\nRTC0 EVENTS_OVRFLW: Event on COUNTER overflow"]
    #[inline]
    pub(crate) fn read_rtc0_events_ovrflw(&self) -> MemResult<u32> {
        todo ! ("read RTC0 EVENTS_OVRFLW, RTC0 EVENTS_OVRFLW, RTC0 EVENTS_OVRFLW reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RTC0 EVENTS_OVRFLW: Event on COUNTER overflow\n\nRTC0 EVENTS_OVRFLW: Event on COUNTER overflow\n\nRTC0 EVENTS_OVRFLW: Event on COUNTER overflow"]
    #[inline]
    pub(crate) fn write_rtc0_events_ovrflw(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVENTS_OVRFLW, RTC0 EVENTS_OVRFLW, RTC0 EVENTS_OVRFLW reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RTC0 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match\n\nRTC0 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match\n\nRTC0 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match"]
    #[inline]
    pub(crate) fn read_rtc0_events_comparen(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo ! ("read RTC0 EVENTS_COMPARE[%s], RTC0 EVENTS_COMPARE[%s], RTC0 EVENTS_COMPARE[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RTC0 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match\n\nRTC0 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match\n\nRTC0 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match"]
    #[inline]
    pub(crate) fn write_rtc0_events_comparen(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVENTS_COMPARE[%s], RTC0 EVENTS_COMPARE[%s], RTC0 EVENTS_COMPARE[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RTC0 INTENSET TICK: Write '1' to Enable interrupt for TICK event\n\nRTC0 INTENSET TICK: Write '1' to Enable interrupt for TICK event\n\nRTC0 INTENSET TICK: Write '1' to Enable interrupt for TICK event"]
    #[inline]
    pub(crate) fn read_rtc0_intenset_tick(&self) -> MemResult<bool> {
        todo ! ("read RTC0 INTENSET TICK, RTC0 INTENSET TICK, RTC0 INTENSET TICK reset value false")
    }
    #[doc = "RTC0 INTENSET TICK: Write '1' to Enable interrupt for TICK event\n\nRTC0 INTENSET TICK: Write '1' to Enable interrupt for TICK event\n\nRTC0 INTENSET TICK: Write '1' to Enable interrupt for TICK event"]
    #[inline]
    pub(crate) fn write_rtc0_intenset_tick(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 INTENSET TICK, RTC0 INTENSET TICK, RTC0 INTENSET TICK reset value false")
    }
    #[doc = "RTC0 INTENSET OVRFLW: Write '1' to Enable interrupt for OVRFLW event\n\nRTC0 INTENSET OVRFLW: Write '1' to Enable interrupt for OVRFLW event\n\nRTC0 INTENSET OVRFLW: Write '1' to Enable interrupt for OVRFLW event"]
    #[inline]
    pub(crate) fn read_rtc0_intenset_ovrflw(&self) -> MemResult<bool> {
        todo ! ("read RTC0 INTENSET OVRFLW, RTC0 INTENSET OVRFLW, RTC0 INTENSET OVRFLW reset value false")
    }
    #[doc = "RTC0 INTENSET OVRFLW: Write '1' to Enable interrupt for OVRFLW event\n\nRTC0 INTENSET OVRFLW: Write '1' to Enable interrupt for OVRFLW event\n\nRTC0 INTENSET OVRFLW: Write '1' to Enable interrupt for OVRFLW event"]
    #[inline]
    pub(crate) fn write_rtc0_intenset_ovrflw(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 INTENSET OVRFLW, RTC0 INTENSET OVRFLW, RTC0 INTENSET OVRFLW reset value false")
    }
    #[doc = "RTC0 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event\n\nRTC0 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event\n\nRTC0 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event"]
    #[inline]
    pub(crate) fn read_rtc0_intenset_compare0(&self) -> MemResult<bool> {
        todo ! ("read RTC0 INTENSET COMPARE0, RTC0 INTENSET COMPARE0, RTC0 INTENSET COMPARE0 reset value false")
    }
    #[doc = "RTC0 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event\n\nRTC0 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event\n\nRTC0 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event"]
    #[inline]
    pub(crate) fn write_rtc0_intenset_compare0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 INTENSET COMPARE0, RTC0 INTENSET COMPARE0, RTC0 INTENSET COMPARE0 reset value false")
    }
    #[doc = "RTC0 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event\n\nRTC0 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event\n\nRTC0 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event"]
    #[inline]
    pub(crate) fn read_rtc0_intenset_compare1(&self) -> MemResult<bool> {
        todo ! ("read RTC0 INTENSET COMPARE1, RTC0 INTENSET COMPARE1, RTC0 INTENSET COMPARE1 reset value false")
    }
    #[doc = "RTC0 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event\n\nRTC0 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event\n\nRTC0 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event"]
    #[inline]
    pub(crate) fn write_rtc0_intenset_compare1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 INTENSET COMPARE1, RTC0 INTENSET COMPARE1, RTC0 INTENSET COMPARE1 reset value false")
    }
    #[doc = "RTC0 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event\n\nRTC0 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event\n\nRTC0 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event"]
    #[inline]
    pub(crate) fn read_rtc0_intenset_compare2(&self) -> MemResult<bool> {
        todo ! ("read RTC0 INTENSET COMPARE2, RTC0 INTENSET COMPARE2, RTC0 INTENSET COMPARE2 reset value false")
    }
    #[doc = "RTC0 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event\n\nRTC0 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event\n\nRTC0 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event"]
    #[inline]
    pub(crate) fn write_rtc0_intenset_compare2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 INTENSET COMPARE2, RTC0 INTENSET COMPARE2, RTC0 INTENSET COMPARE2 reset value false")
    }
    #[doc = "RTC0 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event\n\nRTC0 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event\n\nRTC0 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event"]
    #[inline]
    pub(crate) fn read_rtc0_intenset_compare3(&self) -> MemResult<bool> {
        todo ! ("read RTC0 INTENSET COMPARE3, RTC0 INTENSET COMPARE3, RTC0 INTENSET COMPARE3 reset value false")
    }
    #[doc = "RTC0 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event\n\nRTC0 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event\n\nRTC0 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event"]
    #[inline]
    pub(crate) fn write_rtc0_intenset_compare3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 INTENSET COMPARE3, RTC0 INTENSET COMPARE3, RTC0 INTENSET COMPARE3 reset value false")
    }
    #[doc = "RTC0 INTENCLR TICK: Write '1' to Disable interrupt for TICK event\n\nRTC0 INTENCLR TICK: Write '1' to Disable interrupt for TICK event\n\nRTC0 INTENCLR TICK: Write '1' to Disable interrupt for TICK event"]
    #[inline]
    pub(crate) fn read_rtc0_intenclr_tick(&self) -> MemResult<bool> {
        todo ! ("read RTC0 INTENCLR TICK, RTC0 INTENCLR TICK, RTC0 INTENCLR TICK reset value false")
    }
    #[doc = "RTC0 INTENCLR TICK: Write '1' to Disable interrupt for TICK event\n\nRTC0 INTENCLR TICK: Write '1' to Disable interrupt for TICK event\n\nRTC0 INTENCLR TICK: Write '1' to Disable interrupt for TICK event"]
    #[inline]
    pub(crate) fn write_rtc0_intenclr_tick(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 INTENCLR TICK, RTC0 INTENCLR TICK, RTC0 INTENCLR TICK reset value false")
    }
    #[doc = "RTC0 INTENCLR OVRFLW: Write '1' to Disable interrupt for OVRFLW event\n\nRTC0 INTENCLR OVRFLW: Write '1' to Disable interrupt for OVRFLW event\n\nRTC0 INTENCLR OVRFLW: Write '1' to Disable interrupt for OVRFLW event"]
    #[inline]
    pub(crate) fn read_rtc0_intenclr_ovrflw(&self) -> MemResult<bool> {
        todo ! ("read RTC0 INTENCLR OVRFLW, RTC0 INTENCLR OVRFLW, RTC0 INTENCLR OVRFLW reset value false")
    }
    #[doc = "RTC0 INTENCLR OVRFLW: Write '1' to Disable interrupt for OVRFLW event\n\nRTC0 INTENCLR OVRFLW: Write '1' to Disable interrupt for OVRFLW event\n\nRTC0 INTENCLR OVRFLW: Write '1' to Disable interrupt for OVRFLW event"]
    #[inline]
    pub(crate) fn write_rtc0_intenclr_ovrflw(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 INTENCLR OVRFLW, RTC0 INTENCLR OVRFLW, RTC0 INTENCLR OVRFLW reset value false")
    }
    #[doc = "RTC0 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event\n\nRTC0 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event\n\nRTC0 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event"]
    #[inline]
    pub(crate) fn read_rtc0_intenclr_compare0(&self) -> MemResult<bool> {
        todo ! ("read RTC0 INTENCLR COMPARE0, RTC0 INTENCLR COMPARE0, RTC0 INTENCLR COMPARE0 reset value false")
    }
    #[doc = "RTC0 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event\n\nRTC0 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event\n\nRTC0 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event"]
    #[inline]
    pub(crate) fn write_rtc0_intenclr_compare0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 INTENCLR COMPARE0, RTC0 INTENCLR COMPARE0, RTC0 INTENCLR COMPARE0 reset value false")
    }
    #[doc = "RTC0 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event\n\nRTC0 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event\n\nRTC0 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event"]
    #[inline]
    pub(crate) fn read_rtc0_intenclr_compare1(&self) -> MemResult<bool> {
        todo ! ("read RTC0 INTENCLR COMPARE1, RTC0 INTENCLR COMPARE1, RTC0 INTENCLR COMPARE1 reset value false")
    }
    #[doc = "RTC0 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event\n\nRTC0 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event\n\nRTC0 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event"]
    #[inline]
    pub(crate) fn write_rtc0_intenclr_compare1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 INTENCLR COMPARE1, RTC0 INTENCLR COMPARE1, RTC0 INTENCLR COMPARE1 reset value false")
    }
    #[doc = "RTC0 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event\n\nRTC0 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event\n\nRTC0 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event"]
    #[inline]
    pub(crate) fn read_rtc0_intenclr_compare2(&self) -> MemResult<bool> {
        todo ! ("read RTC0 INTENCLR COMPARE2, RTC0 INTENCLR COMPARE2, RTC0 INTENCLR COMPARE2 reset value false")
    }
    #[doc = "RTC0 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event\n\nRTC0 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event\n\nRTC0 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event"]
    #[inline]
    pub(crate) fn write_rtc0_intenclr_compare2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 INTENCLR COMPARE2, RTC0 INTENCLR COMPARE2, RTC0 INTENCLR COMPARE2 reset value false")
    }
    #[doc = "RTC0 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event\n\nRTC0 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event\n\nRTC0 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event"]
    #[inline]
    pub(crate) fn read_rtc0_intenclr_compare3(&self) -> MemResult<bool> {
        todo ! ("read RTC0 INTENCLR COMPARE3, RTC0 INTENCLR COMPARE3, RTC0 INTENCLR COMPARE3 reset value false")
    }
    #[doc = "RTC0 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event\n\nRTC0 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event\n\nRTC0 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event"]
    #[inline]
    pub(crate) fn write_rtc0_intenclr_compare3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 INTENCLR COMPARE3, RTC0 INTENCLR COMPARE3, RTC0 INTENCLR COMPARE3 reset value false")
    }
    #[doc = "RTC0 EVTEN TICK: Enable or disable event routing for TICK event\n\nRTC0 EVTEN TICK: Enable or disable event routing for TICK event\n\nRTC0 EVTEN TICK: Enable or disable event routing for TICK event"]
    #[inline]
    pub(crate) fn read_rtc0_evten_tick(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTEN TICK, RTC0 EVTEN TICK, RTC0 EVTEN TICK reset value false")
    }
    #[doc = "RTC0 EVTEN TICK: Enable or disable event routing for TICK event\n\nRTC0 EVTEN TICK: Enable or disable event routing for TICK event\n\nRTC0 EVTEN TICK: Enable or disable event routing for TICK event"]
    #[inline]
    pub(crate) fn write_rtc0_evten_tick(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTEN TICK, RTC0 EVTEN TICK, RTC0 EVTEN TICK reset value false")
    }
    #[doc = "RTC0 EVTEN OVRFLW: Enable or disable event routing for OVRFLW event\n\nRTC0 EVTEN OVRFLW: Enable or disable event routing for OVRFLW event\n\nRTC0 EVTEN OVRFLW: Enable or disable event routing for OVRFLW event"]
    #[inline]
    pub(crate) fn read_rtc0_evten_ovrflw(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTEN OVRFLW, RTC0 EVTEN OVRFLW, RTC0 EVTEN OVRFLW reset value false")
    }
    #[doc = "RTC0 EVTEN OVRFLW: Enable or disable event routing for OVRFLW event\n\nRTC0 EVTEN OVRFLW: Enable or disable event routing for OVRFLW event\n\nRTC0 EVTEN OVRFLW: Enable or disable event routing for OVRFLW event"]
    #[inline]
    pub(crate) fn write_rtc0_evten_ovrflw(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTEN OVRFLW, RTC0 EVTEN OVRFLW, RTC0 EVTEN OVRFLW reset value false")
    }
    #[doc = "RTC0 EVTEN COMPARE0: Enable or disable event routing for COMPARE[0] event\n\nRTC0 EVTEN COMPARE0: Enable or disable event routing for COMPARE[0] event\n\nRTC0 EVTEN COMPARE0: Enable or disable event routing for COMPARE[0] event"]
    #[inline]
    pub(crate) fn read_rtc0_evten_compare0(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTEN COMPARE0, RTC0 EVTEN COMPARE0, RTC0 EVTEN COMPARE0 reset value false")
    }
    #[doc = "RTC0 EVTEN COMPARE0: Enable or disable event routing for COMPARE[0] event\n\nRTC0 EVTEN COMPARE0: Enable or disable event routing for COMPARE[0] event\n\nRTC0 EVTEN COMPARE0: Enable or disable event routing for COMPARE[0] event"]
    #[inline]
    pub(crate) fn write_rtc0_evten_compare0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTEN COMPARE0, RTC0 EVTEN COMPARE0, RTC0 EVTEN COMPARE0 reset value false")
    }
    #[doc = "RTC0 EVTEN COMPARE1: Enable or disable event routing for COMPARE[1] event\n\nRTC0 EVTEN COMPARE1: Enable or disable event routing for COMPARE[1] event\n\nRTC0 EVTEN COMPARE1: Enable or disable event routing for COMPARE[1] event"]
    #[inline]
    pub(crate) fn read_rtc0_evten_compare1(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTEN COMPARE1, RTC0 EVTEN COMPARE1, RTC0 EVTEN COMPARE1 reset value false")
    }
    #[doc = "RTC0 EVTEN COMPARE1: Enable or disable event routing for COMPARE[1] event\n\nRTC0 EVTEN COMPARE1: Enable or disable event routing for COMPARE[1] event\n\nRTC0 EVTEN COMPARE1: Enable or disable event routing for COMPARE[1] event"]
    #[inline]
    pub(crate) fn write_rtc0_evten_compare1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTEN COMPARE1, RTC0 EVTEN COMPARE1, RTC0 EVTEN COMPARE1 reset value false")
    }
    #[doc = "RTC0 EVTEN COMPARE2: Enable or disable event routing for COMPARE[2] event\n\nRTC0 EVTEN COMPARE2: Enable or disable event routing for COMPARE[2] event\n\nRTC0 EVTEN COMPARE2: Enable or disable event routing for COMPARE[2] event"]
    #[inline]
    pub(crate) fn read_rtc0_evten_compare2(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTEN COMPARE2, RTC0 EVTEN COMPARE2, RTC0 EVTEN COMPARE2 reset value false")
    }
    #[doc = "RTC0 EVTEN COMPARE2: Enable or disable event routing for COMPARE[2] event\n\nRTC0 EVTEN COMPARE2: Enable or disable event routing for COMPARE[2] event\n\nRTC0 EVTEN COMPARE2: Enable or disable event routing for COMPARE[2] event"]
    #[inline]
    pub(crate) fn write_rtc0_evten_compare2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTEN COMPARE2, RTC0 EVTEN COMPARE2, RTC0 EVTEN COMPARE2 reset value false")
    }
    #[doc = "RTC0 EVTEN COMPARE3: Enable or disable event routing for COMPARE[3] event\n\nRTC0 EVTEN COMPARE3: Enable or disable event routing for COMPARE[3] event\n\nRTC0 EVTEN COMPARE3: Enable or disable event routing for COMPARE[3] event"]
    #[inline]
    pub(crate) fn read_rtc0_evten_compare3(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTEN COMPARE3, RTC0 EVTEN COMPARE3, RTC0 EVTEN COMPARE3 reset value false")
    }
    #[doc = "RTC0 EVTEN COMPARE3: Enable or disable event routing for COMPARE[3] event\n\nRTC0 EVTEN COMPARE3: Enable or disable event routing for COMPARE[3] event\n\nRTC0 EVTEN COMPARE3: Enable or disable event routing for COMPARE[3] event"]
    #[inline]
    pub(crate) fn write_rtc0_evten_compare3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTEN COMPARE3, RTC0 EVTEN COMPARE3, RTC0 EVTEN COMPARE3 reset value false")
    }
    #[doc = "RTC0 EVTENSET TICK: Write '1' to Enable event routing for TICK event\n\nRTC0 EVTENSET TICK: Write '1' to Enable event routing for TICK event\n\nRTC0 EVTENSET TICK: Write '1' to Enable event routing for TICK event"]
    #[inline]
    pub(crate) fn read_rtc0_evtenset_tick(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTENSET TICK, RTC0 EVTENSET TICK, RTC0 EVTENSET TICK reset value false")
    }
    #[doc = "RTC0 EVTENSET TICK: Write '1' to Enable event routing for TICK event\n\nRTC0 EVTENSET TICK: Write '1' to Enable event routing for TICK event\n\nRTC0 EVTENSET TICK: Write '1' to Enable event routing for TICK event"]
    #[inline]
    pub(crate) fn write_rtc0_evtenset_tick(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTENSET TICK, RTC0 EVTENSET TICK, RTC0 EVTENSET TICK reset value false")
    }
    #[doc = "RTC0 EVTENSET OVRFLW: Write '1' to Enable event routing for OVRFLW event\n\nRTC0 EVTENSET OVRFLW: Write '1' to Enable event routing for OVRFLW event\n\nRTC0 EVTENSET OVRFLW: Write '1' to Enable event routing for OVRFLW event"]
    #[inline]
    pub(crate) fn read_rtc0_evtenset_ovrflw(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTENSET OVRFLW, RTC0 EVTENSET OVRFLW, RTC0 EVTENSET OVRFLW reset value false")
    }
    #[doc = "RTC0 EVTENSET OVRFLW: Write '1' to Enable event routing for OVRFLW event\n\nRTC0 EVTENSET OVRFLW: Write '1' to Enable event routing for OVRFLW event\n\nRTC0 EVTENSET OVRFLW: Write '1' to Enable event routing for OVRFLW event"]
    #[inline]
    pub(crate) fn write_rtc0_evtenset_ovrflw(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTENSET OVRFLW, RTC0 EVTENSET OVRFLW, RTC0 EVTENSET OVRFLW reset value false")
    }
    #[doc = "RTC0 EVTENSET COMPARE0: Write '1' to Enable event routing for COMPARE[0] event\n\nRTC0 EVTENSET COMPARE0: Write '1' to Enable event routing for COMPARE[0] event\n\nRTC0 EVTENSET COMPARE0: Write '1' to Enable event routing for COMPARE[0] event"]
    #[inline]
    pub(crate) fn read_rtc0_evtenset_compare0(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTENSET COMPARE0, RTC0 EVTENSET COMPARE0, RTC0 EVTENSET COMPARE0 reset value false")
    }
    #[doc = "RTC0 EVTENSET COMPARE0: Write '1' to Enable event routing for COMPARE[0] event\n\nRTC0 EVTENSET COMPARE0: Write '1' to Enable event routing for COMPARE[0] event\n\nRTC0 EVTENSET COMPARE0: Write '1' to Enable event routing for COMPARE[0] event"]
    #[inline]
    pub(crate) fn write_rtc0_evtenset_compare0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTENSET COMPARE0, RTC0 EVTENSET COMPARE0, RTC0 EVTENSET COMPARE0 reset value false")
    }
    #[doc = "RTC0 EVTENSET COMPARE1: Write '1' to Enable event routing for COMPARE[1] event\n\nRTC0 EVTENSET COMPARE1: Write '1' to Enable event routing for COMPARE[1] event\n\nRTC0 EVTENSET COMPARE1: Write '1' to Enable event routing for COMPARE[1] event"]
    #[inline]
    pub(crate) fn read_rtc0_evtenset_compare1(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTENSET COMPARE1, RTC0 EVTENSET COMPARE1, RTC0 EVTENSET COMPARE1 reset value false")
    }
    #[doc = "RTC0 EVTENSET COMPARE1: Write '1' to Enable event routing for COMPARE[1] event\n\nRTC0 EVTENSET COMPARE1: Write '1' to Enable event routing for COMPARE[1] event\n\nRTC0 EVTENSET COMPARE1: Write '1' to Enable event routing for COMPARE[1] event"]
    #[inline]
    pub(crate) fn write_rtc0_evtenset_compare1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTENSET COMPARE1, RTC0 EVTENSET COMPARE1, RTC0 EVTENSET COMPARE1 reset value false")
    }
    #[doc = "RTC0 EVTENSET COMPARE2: Write '1' to Enable event routing for COMPARE[2] event\n\nRTC0 EVTENSET COMPARE2: Write '1' to Enable event routing for COMPARE[2] event\n\nRTC0 EVTENSET COMPARE2: Write '1' to Enable event routing for COMPARE[2] event"]
    #[inline]
    pub(crate) fn read_rtc0_evtenset_compare2(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTENSET COMPARE2, RTC0 EVTENSET COMPARE2, RTC0 EVTENSET COMPARE2 reset value false")
    }
    #[doc = "RTC0 EVTENSET COMPARE2: Write '1' to Enable event routing for COMPARE[2] event\n\nRTC0 EVTENSET COMPARE2: Write '1' to Enable event routing for COMPARE[2] event\n\nRTC0 EVTENSET COMPARE2: Write '1' to Enable event routing for COMPARE[2] event"]
    #[inline]
    pub(crate) fn write_rtc0_evtenset_compare2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTENSET COMPARE2, RTC0 EVTENSET COMPARE2, RTC0 EVTENSET COMPARE2 reset value false")
    }
    #[doc = "RTC0 EVTENSET COMPARE3: Write '1' to Enable event routing for COMPARE[3] event\n\nRTC0 EVTENSET COMPARE3: Write '1' to Enable event routing for COMPARE[3] event\n\nRTC0 EVTENSET COMPARE3: Write '1' to Enable event routing for COMPARE[3] event"]
    #[inline]
    pub(crate) fn read_rtc0_evtenset_compare3(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTENSET COMPARE3, RTC0 EVTENSET COMPARE3, RTC0 EVTENSET COMPARE3 reset value false")
    }
    #[doc = "RTC0 EVTENSET COMPARE3: Write '1' to Enable event routing for COMPARE[3] event\n\nRTC0 EVTENSET COMPARE3: Write '1' to Enable event routing for COMPARE[3] event\n\nRTC0 EVTENSET COMPARE3: Write '1' to Enable event routing for COMPARE[3] event"]
    #[inline]
    pub(crate) fn write_rtc0_evtenset_compare3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTENSET COMPARE3, RTC0 EVTENSET COMPARE3, RTC0 EVTENSET COMPARE3 reset value false")
    }
    #[doc = "RTC0 EVTENCLR TICK: Write '1' to Disable event routing for TICK event\n\nRTC0 EVTENCLR TICK: Write '1' to Disable event routing for TICK event\n\nRTC0 EVTENCLR TICK: Write '1' to Disable event routing for TICK event"]
    #[inline]
    pub(crate) fn read_rtc0_evtenclr_tick(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTENCLR TICK, RTC0 EVTENCLR TICK, RTC0 EVTENCLR TICK reset value false")
    }
    #[doc = "RTC0 EVTENCLR TICK: Write '1' to Disable event routing for TICK event\n\nRTC0 EVTENCLR TICK: Write '1' to Disable event routing for TICK event\n\nRTC0 EVTENCLR TICK: Write '1' to Disable event routing for TICK event"]
    #[inline]
    pub(crate) fn write_rtc0_evtenclr_tick(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTENCLR TICK, RTC0 EVTENCLR TICK, RTC0 EVTENCLR TICK reset value false")
    }
    #[doc = "RTC0 EVTENCLR OVRFLW: Write '1' to Disable event routing for OVRFLW event\n\nRTC0 EVTENCLR OVRFLW: Write '1' to Disable event routing for OVRFLW event\n\nRTC0 EVTENCLR OVRFLW: Write '1' to Disable event routing for OVRFLW event"]
    #[inline]
    pub(crate) fn read_rtc0_evtenclr_ovrflw(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTENCLR OVRFLW, RTC0 EVTENCLR OVRFLW, RTC0 EVTENCLR OVRFLW reset value false")
    }
    #[doc = "RTC0 EVTENCLR OVRFLW: Write '1' to Disable event routing for OVRFLW event\n\nRTC0 EVTENCLR OVRFLW: Write '1' to Disable event routing for OVRFLW event\n\nRTC0 EVTENCLR OVRFLW: Write '1' to Disable event routing for OVRFLW event"]
    #[inline]
    pub(crate) fn write_rtc0_evtenclr_ovrflw(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTENCLR OVRFLW, RTC0 EVTENCLR OVRFLW, RTC0 EVTENCLR OVRFLW reset value false")
    }
    #[doc = "RTC0 EVTENCLR COMPARE0: Write '1' to Disable event routing for COMPARE[0] event\n\nRTC0 EVTENCLR COMPARE0: Write '1' to Disable event routing for COMPARE[0] event\n\nRTC0 EVTENCLR COMPARE0: Write '1' to Disable event routing for COMPARE[0] event"]
    #[inline]
    pub(crate) fn read_rtc0_evtenclr_compare0(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTENCLR COMPARE0, RTC0 EVTENCLR COMPARE0, RTC0 EVTENCLR COMPARE0 reset value false")
    }
    #[doc = "RTC0 EVTENCLR COMPARE0: Write '1' to Disable event routing for COMPARE[0] event\n\nRTC0 EVTENCLR COMPARE0: Write '1' to Disable event routing for COMPARE[0] event\n\nRTC0 EVTENCLR COMPARE0: Write '1' to Disable event routing for COMPARE[0] event"]
    #[inline]
    pub(crate) fn write_rtc0_evtenclr_compare0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTENCLR COMPARE0, RTC0 EVTENCLR COMPARE0, RTC0 EVTENCLR COMPARE0 reset value false")
    }
    #[doc = "RTC0 EVTENCLR COMPARE1: Write '1' to Disable event routing for COMPARE[1] event\n\nRTC0 EVTENCLR COMPARE1: Write '1' to Disable event routing for COMPARE[1] event\n\nRTC0 EVTENCLR COMPARE1: Write '1' to Disable event routing for COMPARE[1] event"]
    #[inline]
    pub(crate) fn read_rtc0_evtenclr_compare1(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTENCLR COMPARE1, RTC0 EVTENCLR COMPARE1, RTC0 EVTENCLR COMPARE1 reset value false")
    }
    #[doc = "RTC0 EVTENCLR COMPARE1: Write '1' to Disable event routing for COMPARE[1] event\n\nRTC0 EVTENCLR COMPARE1: Write '1' to Disable event routing for COMPARE[1] event\n\nRTC0 EVTENCLR COMPARE1: Write '1' to Disable event routing for COMPARE[1] event"]
    #[inline]
    pub(crate) fn write_rtc0_evtenclr_compare1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTENCLR COMPARE1, RTC0 EVTENCLR COMPARE1, RTC0 EVTENCLR COMPARE1 reset value false")
    }
    #[doc = "RTC0 EVTENCLR COMPARE2: Write '1' to Disable event routing for COMPARE[2] event\n\nRTC0 EVTENCLR COMPARE2: Write '1' to Disable event routing for COMPARE[2] event\n\nRTC0 EVTENCLR COMPARE2: Write '1' to Disable event routing for COMPARE[2] event"]
    #[inline]
    pub(crate) fn read_rtc0_evtenclr_compare2(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTENCLR COMPARE2, RTC0 EVTENCLR COMPARE2, RTC0 EVTENCLR COMPARE2 reset value false")
    }
    #[doc = "RTC0 EVTENCLR COMPARE2: Write '1' to Disable event routing for COMPARE[2] event\n\nRTC0 EVTENCLR COMPARE2: Write '1' to Disable event routing for COMPARE[2] event\n\nRTC0 EVTENCLR COMPARE2: Write '1' to Disable event routing for COMPARE[2] event"]
    #[inline]
    pub(crate) fn write_rtc0_evtenclr_compare2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTENCLR COMPARE2, RTC0 EVTENCLR COMPARE2, RTC0 EVTENCLR COMPARE2 reset value false")
    }
    #[doc = "RTC0 EVTENCLR COMPARE3: Write '1' to Disable event routing for COMPARE[3] event\n\nRTC0 EVTENCLR COMPARE3: Write '1' to Disable event routing for COMPARE[3] event\n\nRTC0 EVTENCLR COMPARE3: Write '1' to Disable event routing for COMPARE[3] event"]
    #[inline]
    pub(crate) fn read_rtc0_evtenclr_compare3(&self) -> MemResult<bool> {
        todo ! ("read RTC0 EVTENCLR COMPARE3, RTC0 EVTENCLR COMPARE3, RTC0 EVTENCLR COMPARE3 reset value false")
    }
    #[doc = "RTC0 EVTENCLR COMPARE3: Write '1' to Disable event routing for COMPARE[3] event\n\nRTC0 EVTENCLR COMPARE3: Write '1' to Disable event routing for COMPARE[3] event\n\nRTC0 EVTENCLR COMPARE3: Write '1' to Disable event routing for COMPARE[3] event"]
    #[inline]
    pub(crate) fn write_rtc0_evtenclr_compare3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write RTC0 EVTENCLR COMPARE3, RTC0 EVTENCLR COMPARE3, RTC0 EVTENCLR COMPARE3 reset value false")
    }
    #[doc = "RTC0 COUNTER COUNTER: Counter value\n\nRTC0 COUNTER COUNTER: Counter value\n\nRTC0 COUNTER COUNTER: Counter value"]
    #[inline]
    pub(crate) fn read_rtc0_counter_counter(&self) -> MemResult<u32> {
        todo ! ("read RTC0 COUNTER COUNTER, RTC0 COUNTER COUNTER, RTC0 COUNTER COUNTER reset value 0x00 mask 0xffffff")
    }
    #[doc = "RTC0 PRESCALER PRESCALER: Prescaler value\n\nRTC0 PRESCALER PRESCALER: Prescaler value\n\nRTC0 PRESCALER PRESCALER: Prescaler value"]
    #[inline]
    pub(crate) fn read_rtc0_prescaler_prescaler(&self) -> MemResult<u16> {
        todo ! ("read RTC0 PRESCALER PRESCALER, RTC0 PRESCALER PRESCALER, RTC0 PRESCALER PRESCALER reset value 0x00 mask 0xfff")
    }
    #[doc = "RTC0 PRESCALER PRESCALER: Prescaler value\n\nRTC0 PRESCALER PRESCALER: Prescaler value\n\nRTC0 PRESCALER PRESCALER: Prescaler value"]
    #[inline]
    pub(crate) fn write_rtc0_prescaler_prescaler(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo ! ("write RTC0 PRESCALER PRESCALER, RTC0 PRESCALER PRESCALER, RTC0 PRESCALER PRESCALER reset value 0x00 mask 0xfff")
    }
    #[doc = "RTC0 CC[%s] COMPARE: Compare value\n\nRTC0 CC[%s] COMPARE: Compare value\n\nRTC0 CC[%s] COMPARE: Compare value"]
    #[inline]
    pub(crate) fn read_rtc0_ccn_compare(&self, _dim: usize) -> MemResult<u32> {
        todo ! ("read RTC0 CC[%s] COMPARE, RTC0 CC[%s] COMPARE, RTC0 CC[%s] COMPARE reset value 0x00 mask 0xffffff")
    }
    #[doc = "RTC0 CC[%s] COMPARE: Compare value\n\nRTC0 CC[%s] COMPARE: Compare value\n\nRTC0 CC[%s] COMPARE: Compare value"]
    #[inline]
    pub(crate) fn write_rtc0_ccn_compare(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write RTC0 CC[%s] COMPARE, RTC0 CC[%s] COMPARE, RTC0 CC[%s] COMPARE reset value 0x00 mask 0xffffff")
    }
    #[doc = "TEMP TASKS_START: Start temperature measurement"]
    #[inline]
    pub(crate) fn write_temp_tasks_start(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write TEMP TASKS_START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TEMP TASKS_STOP: Stop temperature measurement"]
    #[inline]
    pub(crate) fn write_temp_tasks_stop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write TEMP TASKS_STOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TEMP EVENTS_DATARDY: Temperature measurement complete, data ready"]
    #[inline]
    pub(crate) fn read_temp_events_datardy(&self) -> MemResult<u32> {
        todo!(
            "read TEMP EVENTS_DATARDY reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "TEMP EVENTS_DATARDY: Temperature measurement complete, data ready"]
    #[inline]
    pub(crate) fn write_temp_events_datardy(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TEMP EVENTS_DATARDY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TEMP INTENSET DATARDY: Write '1' to Enable interrupt for DATARDY event"]
    #[inline]
    pub(crate) fn read_temp_intenset_datardy(&self) -> MemResult<bool> {
        todo!("read TEMP INTENSET DATARDY reset value false")
    }
    #[doc = "TEMP INTENSET DATARDY: Write '1' to Enable interrupt for DATARDY event"]
    #[inline]
    pub(crate) fn write_temp_intenset_datardy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write TEMP INTENSET DATARDY reset value false")
    }
    #[doc = "TEMP INTENCLR DATARDY: Write '1' to Disable interrupt for DATARDY event"]
    #[inline]
    pub(crate) fn read_temp_intenclr_datardy(&self) -> MemResult<bool> {
        todo!("read TEMP INTENCLR DATARDY reset value false")
    }
    #[doc = "TEMP INTENCLR DATARDY: Write '1' to Disable interrupt for DATARDY event"]
    #[inline]
    pub(crate) fn write_temp_intenclr_datardy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write TEMP INTENCLR DATARDY reset value false")
    }
    #[doc = "TEMP TEMP: Temperature in degC (0.25deg steps)"]
    #[inline]
    pub(crate) fn read_temp_temp(&self) -> MemResult<u32> {
        todo!("read TEMP TEMP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TEMP A0 A0: Slope of 1st piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_a0_a0(&self) -> MemResult<u16> {
        todo!("read TEMP A0 A0 reset value 0x320 mask 0xfff")
    }
    #[doc = "TEMP A0 A0: Slope of 1st piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_a0_a0(&mut self, _value: u16) -> MemResult<()> {
        todo!("write TEMP A0 A0 reset value 0x320 mask 0xfff")
    }
    #[doc = "TEMP A1 A1: Slope of 2nd piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_a1_a1(&self) -> MemResult<u16> {
        todo!("read TEMP A1 A1 reset value 0x343 mask 0xfff")
    }
    #[doc = "TEMP A1 A1: Slope of 2nd piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_a1_a1(&mut self, _value: u16) -> MemResult<()> {
        todo!("write TEMP A1 A1 reset value 0x343 mask 0xfff")
    }
    #[doc = "TEMP A2 A2: Slope of 3rd piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_a2_a2(&self) -> MemResult<u16> {
        todo!("read TEMP A2 A2 reset value 0x35d mask 0xfff")
    }
    #[doc = "TEMP A2 A2: Slope of 3rd piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_a2_a2(&mut self, _value: u16) -> MemResult<()> {
        todo!("write TEMP A2 A2 reset value 0x35d mask 0xfff")
    }
    #[doc = "TEMP A3 A3: Slope of 4th piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_a3_a3(&self) -> MemResult<u16> {
        todo!("read TEMP A3 A3 reset value 0x400 mask 0xfff")
    }
    #[doc = "TEMP A3 A3: Slope of 4th piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_a3_a3(&mut self, _value: u16) -> MemResult<()> {
        todo!("write TEMP A3 A3 reset value 0x400 mask 0xfff")
    }
    #[doc = "TEMP A4 A4: Slope of 5th piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_a4_a4(&self) -> MemResult<u16> {
        todo!("read TEMP A4 A4 reset value 0x47f mask 0xfff")
    }
    #[doc = "TEMP A4 A4: Slope of 5th piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_a4_a4(&mut self, _value: u16) -> MemResult<()> {
        todo!("write TEMP A4 A4 reset value 0x47f mask 0xfff")
    }
    #[doc = "TEMP A5 A5: Slope of 6th piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_a5_a5(&self) -> MemResult<u16> {
        todo!("read TEMP A5 A5 reset value 0x37b mask 0xfff")
    }
    #[doc = "TEMP A5 A5: Slope of 6th piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_a5_a5(&mut self, _value: u16) -> MemResult<()> {
        todo!("write TEMP A5 A5 reset value 0x37b mask 0xfff")
    }
    #[doc = "TEMP B0 B0: y-intercept of 1st piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_b0_b0(&self) -> MemResult<u16> {
        todo!("read TEMP B0 B0 reset value 0x3fcc mask 0x3fff")
    }
    #[doc = "TEMP B0 B0: y-intercept of 1st piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_b0_b0(&mut self, _value: u16) -> MemResult<()> {
        todo!("write TEMP B0 B0 reset value 0x3fcc mask 0x3fff")
    }
    #[doc = "TEMP B1 B1: y-intercept of 2nd piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_b1_b1(&self) -> MemResult<u16> {
        todo!("read TEMP B1 B1 reset value 0x3f98 mask 0x3fff")
    }
    #[doc = "TEMP B1 B1: y-intercept of 2nd piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_b1_b1(&mut self, _value: u16) -> MemResult<()> {
        todo!("write TEMP B1 B1 reset value 0x3f98 mask 0x3fff")
    }
    #[doc = "TEMP B2 B2: y-intercept of 3rd piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_b2_b2(&self) -> MemResult<u16> {
        todo!("read TEMP B2 B2 reset value 0x3f98 mask 0x3fff")
    }
    #[doc = "TEMP B2 B2: y-intercept of 3rd piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_b2_b2(&mut self, _value: u16) -> MemResult<()> {
        todo!("write TEMP B2 B2 reset value 0x3f98 mask 0x3fff")
    }
    #[doc = "TEMP B3 B3: y-intercept of 4th piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_b3_b3(&self) -> MemResult<u16> {
        todo!("read TEMP B3 B3 reset value 0x12 mask 0x3fff")
    }
    #[doc = "TEMP B3 B3: y-intercept of 4th piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_b3_b3(&mut self, _value: u16) -> MemResult<()> {
        todo!("write TEMP B3 B3 reset value 0x12 mask 0x3fff")
    }
    #[doc = "TEMP B4 B4: y-intercept of 5th piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_b4_b4(&self) -> MemResult<u16> {
        todo!("read TEMP B4 B4 reset value 0x6a mask 0x3fff")
    }
    #[doc = "TEMP B4 B4: y-intercept of 5th piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_b4_b4(&mut self, _value: u16) -> MemResult<()> {
        todo!("write TEMP B4 B4 reset value 0x6a mask 0x3fff")
    }
    #[doc = "TEMP B5 B5: y-intercept of 6th piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_b5_b5(&self) -> MemResult<u16> {
        todo!("read TEMP B5 B5 reset value 0x3dd0 mask 0x3fff")
    }
    #[doc = "TEMP B5 B5: y-intercept of 6th piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_b5_b5(&mut self, _value: u16) -> MemResult<()> {
        todo!("write TEMP B5 B5 reset value 0x3dd0 mask 0x3fff")
    }
    #[doc = "TEMP T0 T0: End point of 1st piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_t0_t0(&self) -> MemResult<u8> {
        todo!("read TEMP T0 T0 reset value 0xe2 mask 0xff")
    }
    #[doc = "TEMP T0 T0: End point of 1st piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_t0_t0(&mut self, _value: u8) -> MemResult<()> {
        todo!("write TEMP T0 T0 reset value 0xe2 mask 0xff")
    }
    #[doc = "TEMP T1 T1: End point of 2nd piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_t1_t1(&self) -> MemResult<u8> {
        todo!("read TEMP T1 T1 reset value 0x00 mask 0xff")
    }
    #[doc = "TEMP T1 T1: End point of 2nd piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_t1_t1(&mut self, _value: u8) -> MemResult<()> {
        todo!("write TEMP T1 T1 reset value 0x00 mask 0xff")
    }
    #[doc = "TEMP T2 T2: End point of 3rd piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_t2_t2(&self) -> MemResult<u8> {
        todo!("read TEMP T2 T2 reset value 0x14 mask 0xff")
    }
    #[doc = "TEMP T2 T2: End point of 3rd piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_t2_t2(&mut self, _value: u8) -> MemResult<()> {
        todo!("write TEMP T2 T2 reset value 0x14 mask 0xff")
    }
    #[doc = "TEMP T3 T3: End point of 4th piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_t3_t3(&self) -> MemResult<u8> {
        todo!("read TEMP T3 T3 reset value 0x19 mask 0xff")
    }
    #[doc = "TEMP T3 T3: End point of 4th piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_t3_t3(&mut self, _value: u8) -> MemResult<()> {
        todo!("write TEMP T3 T3 reset value 0x19 mask 0xff")
    }
    #[doc = "TEMP T4 T4: End point of 5th piece wise linear function"]
    #[inline]
    pub(crate) fn read_temp_t4_t4(&self) -> MemResult<u8> {
        todo!("read TEMP T4 T4 reset value 0x50 mask 0xff")
    }
    #[doc = "TEMP T4 T4: End point of 5th piece wise linear function"]
    #[inline]
    pub(crate) fn write_temp_t4_t4(&mut self, _value: u8) -> MemResult<()> {
        todo!("write TEMP T4 T4 reset value 0x50 mask 0xff")
    }
    #[doc = "RNG TASKS_START: Task starting the random number generator"]
    #[inline]
    pub(crate) fn write_rng_tasks_start(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write RNG TASKS_START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RNG TASKS_STOP: Task stopping the random number generator"]
    #[inline]
    pub(crate) fn write_rng_tasks_stop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write RNG TASKS_STOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RNG EVENTS_VALRDY: Event being generated for every new random number written to the VALUE register"]
    #[inline]
    pub(crate) fn read_rng_events_valrdy(&self) -> MemResult<u32> {
        todo!("read RNG EVENTS_VALRDY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "RNG EVENTS_VALRDY: Event being generated for every new random number written to the VALUE register"]
    #[inline]
    pub(crate) fn write_rng_events_valrdy(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write RNG EVENTS_VALRDY reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "RNG SHORTS VALRDY_STOP: Shortcut between VALRDY event and STOP task"]
    #[inline]
    pub(crate) fn read_rng_shorts_valrdy_stop(&self) -> MemResult<bool> {
        todo!("read RNG SHORTS VALRDY_STOP reset value false")
    }
    #[doc = "RNG SHORTS VALRDY_STOP: Shortcut between VALRDY event and STOP task"]
    #[inline]
    pub(crate) fn write_rng_shorts_valrdy_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RNG SHORTS VALRDY_STOP reset value false")
    }
    #[doc = "RNG INTENSET VALRDY: Write '1' to Enable interrupt for VALRDY event"]
    #[inline]
    pub(crate) fn read_rng_intenset_valrdy(&self) -> MemResult<bool> {
        todo!("read RNG INTENSET VALRDY reset value false")
    }
    #[doc = "RNG INTENSET VALRDY: Write '1' to Enable interrupt for VALRDY event"]
    #[inline]
    pub(crate) fn write_rng_intenset_valrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RNG INTENSET VALRDY reset value false")
    }
    #[doc = "RNG INTENCLR VALRDY: Write '1' to Disable interrupt for VALRDY event"]
    #[inline]
    pub(crate) fn read_rng_intenclr_valrdy(&self) -> MemResult<bool> {
        todo!("read RNG INTENCLR VALRDY reset value false")
    }
    #[doc = "RNG INTENCLR VALRDY: Write '1' to Disable interrupt for VALRDY event"]
    #[inline]
    pub(crate) fn write_rng_intenclr_valrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RNG INTENCLR VALRDY reset value false")
    }
    #[doc = "RNG CONFIG DERCEN: Bias correction"]
    #[inline]
    pub(crate) fn read_rng_config_dercen(&self) -> MemResult<bool> {
        todo!("read RNG CONFIG DERCEN reset value false")
    }
    #[doc = "RNG CONFIG DERCEN: Bias correction"]
    #[inline]
    pub(crate) fn write_rng_config_dercen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write RNG CONFIG DERCEN reset value false")
    }
    #[doc = "RNG VALUE VALUE: Generated random number"]
    #[inline]
    pub(crate) fn read_rng_value_value(&self) -> MemResult<u8> {
        todo!("read RNG VALUE VALUE reset value 0x00 mask 0xff")
    }
    #[doc = "ECB TASKS_STARTECB: Start ECB block encrypt"]
    #[inline]
    pub(crate) fn write_ecb_tasks_startecb(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write ECB TASKS_STARTECB reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "ECB TASKS_STOPECB: Abort a possible executing ECB operation"]
    #[inline]
    pub(crate) fn write_ecb_tasks_stopecb(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write ECB TASKS_STOPECB reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "ECB EVENTS_ENDECB: ECB block encrypt complete"]
    #[inline]
    pub(crate) fn read_ecb_events_endecb(&self) -> MemResult<u32> {
        todo!("read ECB EVENTS_ENDECB reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "ECB EVENTS_ENDECB: ECB block encrypt complete"]
    #[inline]
    pub(crate) fn write_ecb_events_endecb(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write ECB EVENTS_ENDECB reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "ECB EVENTS_ERRORECB: ECB block encrypt aborted because of a STOPECB task or due to an error"]
    #[inline]
    pub(crate) fn read_ecb_events_errorecb(&self) -> MemResult<u32> {
        todo!(
            "read ECB EVENTS_ERRORECB reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "ECB EVENTS_ERRORECB: ECB block encrypt aborted because of a STOPECB task or due to an error"]
    #[inline]
    pub(crate) fn write_ecb_events_errorecb(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write ECB EVENTS_ERRORECB reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "ECB INTENSET ENDECB: Write '1' to Enable interrupt for ENDECB event"]
    #[inline]
    pub(crate) fn read_ecb_intenset_endecb(&self) -> MemResult<bool> {
        todo!("read ECB INTENSET ENDECB reset value false")
    }
    #[doc = "ECB INTENSET ENDECB: Write '1' to Enable interrupt for ENDECB event"]
    #[inline]
    pub(crate) fn write_ecb_intenset_endecb(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write ECB INTENSET ENDECB reset value false")
    }
    #[doc = "ECB INTENSET ERRORECB: Write '1' to Enable interrupt for ERRORECB event"]
    #[inline]
    pub(crate) fn read_ecb_intenset_errorecb(&self) -> MemResult<bool> {
        todo!("read ECB INTENSET ERRORECB reset value false")
    }
    #[doc = "ECB INTENSET ERRORECB: Write '1' to Enable interrupt for ERRORECB event"]
    #[inline]
    pub(crate) fn write_ecb_intenset_errorecb(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write ECB INTENSET ERRORECB reset value false")
    }
    #[doc = "ECB INTENCLR ENDECB: Write '1' to Disable interrupt for ENDECB event"]
    #[inline]
    pub(crate) fn read_ecb_intenclr_endecb(&self) -> MemResult<bool> {
        todo!("read ECB INTENCLR ENDECB reset value false")
    }
    #[doc = "ECB INTENCLR ENDECB: Write '1' to Disable interrupt for ENDECB event"]
    #[inline]
    pub(crate) fn write_ecb_intenclr_endecb(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write ECB INTENCLR ENDECB reset value false")
    }
    #[doc = "ECB INTENCLR ERRORECB: Write '1' to Disable interrupt for ERRORECB event"]
    #[inline]
    pub(crate) fn read_ecb_intenclr_errorecb(&self) -> MemResult<bool> {
        todo!("read ECB INTENCLR ERRORECB reset value false")
    }
    #[doc = "ECB INTENCLR ERRORECB: Write '1' to Disable interrupt for ERRORECB event"]
    #[inline]
    pub(crate) fn write_ecb_intenclr_errorecb(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write ECB INTENCLR ERRORECB reset value false")
    }
    #[doc = "ECB ECBDATAPTR: ECB block encrypt memory pointers"]
    #[inline]
    pub(crate) fn read_ecb_ecbdataptr(&self) -> MemResult<u32> {
        todo!("read ECB ECBDATAPTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "ECB ECBDATAPTR: ECB block encrypt memory pointers"]
    #[inline]
    pub(crate) fn write_ecb_ecbdataptr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write ECB ECBDATAPTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM TASKS_KSGEN: Start generation of key-stream. This operation will stop by itself when completed.\n\nAAR TASKS_START: Start resolving addresses based on IRKs specified in the IRK data structure"]
    #[inline]
    pub(crate) fn write_ccmaar_tasks_ksgen(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write CCM TASKS_KSGEN, AAR TASKS_START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM TASKS_CRYPT: Start encryption/decryption. This operation will stop by itself when completed."]
    #[inline]
    pub(crate) fn write_ccm_tasks_crypt(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write CCM TASKS_CRYPT reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM TASKS_STOP: Stop encryption/decryption\n\nAAR TASKS_STOP: Stop resolving addresses"]
    #[inline]
    pub(crate) fn write_ccmaar_tasks_stop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write CCM TASKS_STOP, AAR TASKS_STOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM EVENTS_ENDKSGEN: Key-stream generation complete\n\nAAR EVENTS_END: Address resolution procedure complete"]
    #[inline]
    pub(crate) fn read_ccmaar_events_endksgen(&self) -> MemResult<u32> {
        todo ! ("read CCM EVENTS_ENDKSGEN, AAR EVENTS_END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM EVENTS_ENDKSGEN: Key-stream generation complete\n\nAAR EVENTS_END: Address resolution procedure complete"]
    #[inline]
    pub(crate) fn write_ccmaar_events_endksgen(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write CCM EVENTS_ENDKSGEN, AAR EVENTS_END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM EVENTS_ENDCRYPT: Encrypt/decrypt complete\n\nAAR EVENTS_RESOLVED: Address resolved"]
    #[inline]
    pub(crate) fn read_ccmaar_events_endcrypt(&self) -> MemResult<u32> {
        todo ! ("read CCM EVENTS_ENDCRYPT, AAR EVENTS_RESOLVED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM EVENTS_ENDCRYPT: Encrypt/decrypt complete\n\nAAR EVENTS_RESOLVED: Address resolved"]
    #[inline]
    pub(crate) fn write_ccmaar_events_endcrypt(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write CCM EVENTS_ENDCRYPT, AAR EVENTS_RESOLVED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM EVENTS_ERROR: CCM error event\n\nAAR EVENTS_NOTRESOLVED: Address not resolved"]
    #[inline]
    pub(crate) fn read_ccmaar_events_error(&self) -> MemResult<u32> {
        todo ! ("read CCM EVENTS_ERROR, AAR EVENTS_NOTRESOLVED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM EVENTS_ERROR: CCM error event\n\nAAR EVENTS_NOTRESOLVED: Address not resolved"]
    #[inline]
    pub(crate) fn write_ccmaar_events_error(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write CCM EVENTS_ERROR, AAR EVENTS_NOTRESOLVED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM SHORTS ENDKSGEN_CRYPT: Shortcut between ENDKSGEN event and CRYPT task"]
    #[inline]
    pub(crate) fn read_ccm_shorts_endksgen_crypt(&self) -> MemResult<bool> {
        todo!("read CCM SHORTS ENDKSGEN_CRYPT reset value false")
    }
    #[doc = "CCM SHORTS ENDKSGEN_CRYPT: Shortcut between ENDKSGEN event and CRYPT task"]
    #[inline]
    pub(crate) fn write_ccm_shorts_endksgen_crypt(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write CCM SHORTS ENDKSGEN_CRYPT reset value false")
    }
    #[doc = "CCM INTENSET ENDKSGEN: Write '1' to Enable interrupt for ENDKSGEN event\n\nAAR INTENSET END: Write '1' to Enable interrupt for END event"]
    #[inline]
    pub(crate) fn read_ccmaar_intenset_endksgen(&self) -> MemResult<bool> {
        todo!("read CCM INTENSET ENDKSGEN, AAR INTENSET END reset value false")
    }
    #[doc = "CCM INTENSET ENDKSGEN: Write '1' to Enable interrupt for ENDKSGEN event\n\nAAR INTENSET END: Write '1' to Enable interrupt for END event"]
    #[inline]
    pub(crate) fn write_ccmaar_intenset_endksgen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write CCM INTENSET ENDKSGEN, AAR INTENSET END reset value false")
    }
    #[doc = "CCM INTENSET ENDCRYPT: Write '1' to Enable interrupt for ENDCRYPT event\n\nAAR INTENSET RESOLVED: Write '1' to Enable interrupt for RESOLVED event"]
    #[inline]
    pub(crate) fn read_ccmaar_intenset_endcrypt(&self) -> MemResult<bool> {
        todo ! ("read CCM INTENSET ENDCRYPT, AAR INTENSET RESOLVED reset value false")
    }
    #[doc = "CCM INTENSET ENDCRYPT: Write '1' to Enable interrupt for ENDCRYPT event\n\nAAR INTENSET RESOLVED: Write '1' to Enable interrupt for RESOLVED event"]
    #[inline]
    pub(crate) fn write_ccmaar_intenset_endcrypt(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write CCM INTENSET ENDCRYPT, AAR INTENSET RESOLVED reset value false")
    }
    #[doc = "CCM INTENSET ERROR: Write '1' to Enable interrupt for ERROR event\n\nAAR INTENSET NOTRESOLVED: Write '1' to Enable interrupt for NOTRESOLVED event"]
    #[inline]
    pub(crate) fn read_ccmaar_intenset_error(&self) -> MemResult<bool> {
        todo ! ("read CCM INTENSET ERROR, AAR INTENSET NOTRESOLVED reset value false")
    }
    #[doc = "CCM INTENSET ERROR: Write '1' to Enable interrupt for ERROR event\n\nAAR INTENSET NOTRESOLVED: Write '1' to Enable interrupt for NOTRESOLVED event"]
    #[inline]
    pub(crate) fn write_ccmaar_intenset_error(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write CCM INTENSET ERROR, AAR INTENSET NOTRESOLVED reset value false")
    }
    #[doc = "CCM INTENCLR ENDKSGEN: Write '1' to Disable interrupt for ENDKSGEN event\n\nAAR INTENCLR END: Write '1' to Disable interrupt for END event"]
    #[inline]
    pub(crate) fn read_ccmaar_intenclr_endksgen(&self) -> MemResult<bool> {
        todo!("read CCM INTENCLR ENDKSGEN, AAR INTENCLR END reset value false")
    }
    #[doc = "CCM INTENCLR ENDKSGEN: Write '1' to Disable interrupt for ENDKSGEN event\n\nAAR INTENCLR END: Write '1' to Disable interrupt for END event"]
    #[inline]
    pub(crate) fn write_ccmaar_intenclr_endksgen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write CCM INTENCLR ENDKSGEN, AAR INTENCLR END reset value false")
    }
    #[doc = "CCM INTENCLR ENDCRYPT: Write '1' to Disable interrupt for ENDCRYPT event\n\nAAR INTENCLR RESOLVED: Write '1' to Disable interrupt for RESOLVED event"]
    #[inline]
    pub(crate) fn read_ccmaar_intenclr_endcrypt(&self) -> MemResult<bool> {
        todo ! ("read CCM INTENCLR ENDCRYPT, AAR INTENCLR RESOLVED reset value false")
    }
    #[doc = "CCM INTENCLR ENDCRYPT: Write '1' to Disable interrupt for ENDCRYPT event\n\nAAR INTENCLR RESOLVED: Write '1' to Disable interrupt for RESOLVED event"]
    #[inline]
    pub(crate) fn write_ccmaar_intenclr_endcrypt(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write CCM INTENCLR ENDCRYPT, AAR INTENCLR RESOLVED reset value false")
    }
    #[doc = "CCM INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event\n\nAAR INTENCLR NOTRESOLVED: Write '1' to Disable interrupt for NOTRESOLVED event"]
    #[inline]
    pub(crate) fn read_ccmaar_intenclr_error(&self) -> MemResult<bool> {
        todo ! ("read CCM INTENCLR ERROR, AAR INTENCLR NOTRESOLVED reset value false")
    }
    #[doc = "CCM INTENCLR ERROR: Write '1' to Disable interrupt for ERROR event\n\nAAR INTENCLR NOTRESOLVED: Write '1' to Disable interrupt for NOTRESOLVED event"]
    #[inline]
    pub(crate) fn write_ccmaar_intenclr_error(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write CCM INTENCLR ERROR, AAR INTENCLR NOTRESOLVED reset value false")
    }
    #[doc = "CCM MICSTATUS MICSTATUS: The result of the MIC check performed during the previous decryption operation\n\nAAR STATUS STATUS: The IRK that was used last time an address was resolved"]
    #[inline]
    pub(crate) fn read_ccmaar_micstatus_micstatus(&self) -> MemResult<bool> {
        todo!(
            "read CCM MICSTATUS MICSTATUS, AAR STATUS STATUS reset value false"
        )
    }
    #[doc = "CCM ENABLE ENABLE: Enable or disable CCM\n\nAAR ENABLE ENABLE: Enable or disable AAR"]
    #[inline]
    pub(crate) fn read_ccmaar_enable_enable(&self) -> MemResult<u8> {
        todo ! ("read CCM ENABLE ENABLE, AAR ENABLE ENABLE reset value 0x00 mask 0x03")
    }
    #[doc = "CCM ENABLE ENABLE: Enable or disable CCM\n\nAAR ENABLE ENABLE: Enable or disable AAR"]
    #[inline]
    pub(crate) fn write_ccmaar_enable_enable(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write CCM ENABLE ENABLE, AAR ENABLE ENABLE reset value 0x00 mask 0x03")
    }
    #[doc = "CCM MODE MODE: The mode of operation to be used\n\nAAR NIRK NIRK: Number of Identity root keys available in the IRK data structure"]
    #[inline]
    pub(crate) fn read_ccmaar_mode_mode(&self) -> MemResult<bool> {
        todo!("read CCM MODE MODE, AAR NIRK NIRK reset value true")
    }
    #[doc = "CCM MODE MODE: The mode of operation to be used\n\nAAR NIRK NIRK: Number of Identity root keys available in the IRK data structure"]
    #[inline]
    pub(crate) fn write_ccmaar_mode_mode(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write CCM MODE MODE, AAR NIRK NIRK reset value true")
    }
    #[doc = "CCM MODE DATARATE: Data rate that the CCM shall run in synch with"]
    #[inline]
    pub(crate) fn read_ccmaar_mode_datarate(&self) -> MemResult<bool> {
        todo!("read CCM MODE DATARATE reset value false")
    }
    #[doc = "CCM MODE DATARATE: Data rate that the CCM shall run in synch with"]
    #[inline]
    pub(crate) fn write_ccmaar_mode_datarate(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write CCM MODE DATARATE reset value false")
    }
    #[doc = "CCM MODE LENGTH: Packet length configuration"]
    #[inline]
    pub(crate) fn read_ccmaar_mode_length(&self) -> MemResult<bool> {
        todo!("read CCM MODE LENGTH reset value false")
    }
    #[doc = "CCM MODE LENGTH: Packet length configuration"]
    #[inline]
    pub(crate) fn write_ccmaar_mode_length(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write CCM MODE LENGTH reset value false")
    }
    #[doc = "CCM CNFPTR: Pointer to data structure holding AES key and NONCE vector\n\nAAR IRKPTR: Pointer to IRK data structure"]
    #[inline]
    pub(crate) fn read_ccmaar_cnfptr(&self) -> MemResult<u32> {
        todo ! ("read CCM CNFPTR, AAR IRKPTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM CNFPTR: Pointer to data structure holding AES key and NONCE vector\n\nAAR IRKPTR: Pointer to IRK data structure"]
    #[inline]
    pub(crate) fn write_ccmaar_cnfptr(&mut self, _value: u32) -> MemResult<()> {
        todo ! ("write CCM CNFPTR, AAR IRKPTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM INPTR: Input pointer"]
    #[inline]
    pub(crate) fn read_ccm_inptr(&self) -> MemResult<u32> {
        todo!("read CCM INPTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM INPTR: Input pointer"]
    #[inline]
    pub(crate) fn write_ccm_inptr(&mut self, _value: u32) -> MemResult<()> {
        todo!("write CCM INPTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM OUTPTR: Output pointer\n\nAAR ADDRPTR: Pointer to the resolvable address"]
    #[inline]
    pub(crate) fn read_ccmaar_outptr(&self) -> MemResult<u32> {
        todo ! ("read CCM OUTPTR, AAR ADDRPTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM OUTPTR: Output pointer\n\nAAR ADDRPTR: Pointer to the resolvable address"]
    #[inline]
    pub(crate) fn write_ccmaar_outptr(&mut self, _value: u32) -> MemResult<()> {
        todo ! ("write CCM OUTPTR, AAR ADDRPTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM SCRATCHPTR: Pointer to data area used for temporary storage\n\nAAR SCRATCHPTR: Pointer to data area used for temporary storage"]
    #[inline]
    pub(crate) fn read_ccmaar_scratchptr(&self) -> MemResult<u32> {
        todo ! ("read CCM SCRATCHPTR, AAR SCRATCHPTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "CCM SCRATCHPTR: Pointer to data area used for temporary storage\n\nAAR SCRATCHPTR: Pointer to data area used for temporary storage"]
    #[inline]
    pub(crate) fn write_ccmaar_scratchptr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write CCM SCRATCHPTR, AAR SCRATCHPTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "WDT TASKS_START: Start the watchdog"]
    #[inline]
    pub(crate) fn write_wdt_tasks_start(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write WDT TASKS_START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "WDT EVENTS_TIMEOUT: Watchdog timeout"]
    #[inline]
    pub(crate) fn read_wdt_events_timeout(&self) -> MemResult<u32> {
        todo!(
            "read WDT EVENTS_TIMEOUT reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "WDT EVENTS_TIMEOUT: Watchdog timeout"]
    #[inline]
    pub(crate) fn write_wdt_events_timeout(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write WDT EVENTS_TIMEOUT reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "WDT INTENSET TIMEOUT: Write '1' to Enable interrupt for TIMEOUT event"]
    #[inline]
    pub(crate) fn read_wdt_intenset_timeout(&self) -> MemResult<bool> {
        todo!("read WDT INTENSET TIMEOUT reset value false")
    }
    #[doc = "WDT INTENSET TIMEOUT: Write '1' to Enable interrupt for TIMEOUT event"]
    #[inline]
    pub(crate) fn write_wdt_intenset_timeout(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write WDT INTENSET TIMEOUT reset value false")
    }
    #[doc = "WDT INTENCLR TIMEOUT: Write '1' to Disable interrupt for TIMEOUT event"]
    #[inline]
    pub(crate) fn read_wdt_intenclr_timeout(&self) -> MemResult<bool> {
        todo!("read WDT INTENCLR TIMEOUT reset value false")
    }
    #[doc = "WDT INTENCLR TIMEOUT: Write '1' to Disable interrupt for TIMEOUT event"]
    #[inline]
    pub(crate) fn write_wdt_intenclr_timeout(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write WDT INTENCLR TIMEOUT reset value false")
    }
    #[doc = "WDT RUNSTATUS RUNSTATUS: Indicates whether or not the watchdog is running"]
    #[inline]
    pub(crate) fn read_wdt_runstatus_runstatus(&self) -> MemResult<bool> {
        Ok(self.wdt.is_on())
    }
    #[doc = "WDT REQSTATUS RR0: Request status for RR[0] register"]
    #[inline]
    pub(crate) fn read_wdt_reqstatus_rr0(&self) -> MemResult<bool> {
        todo!("read WDT REQSTATUS RR0 reset value true")
    }
    #[doc = "WDT REQSTATUS RR1: Request status for RR[1] register"]
    #[inline]
    pub(crate) fn read_wdt_reqstatus_rr1(&self) -> MemResult<bool> {
        todo!("read WDT REQSTATUS RR1 reset value false")
    }
    #[doc = "WDT REQSTATUS RR2: Request status for RR[2] register"]
    #[inline]
    pub(crate) fn read_wdt_reqstatus_rr2(&self) -> MemResult<bool> {
        todo!("read WDT REQSTATUS RR2 reset value false")
    }
    #[doc = "WDT REQSTATUS RR3: Request status for RR[3] register"]
    #[inline]
    pub(crate) fn read_wdt_reqstatus_rr3(&self) -> MemResult<bool> {
        todo!("read WDT REQSTATUS RR3 reset value false")
    }
    #[doc = "WDT REQSTATUS RR4: Request status for RR[4] register"]
    #[inline]
    pub(crate) fn read_wdt_reqstatus_rr4(&self) -> MemResult<bool> {
        todo!("read WDT REQSTATUS RR4 reset value false")
    }
    #[doc = "WDT REQSTATUS RR5: Request status for RR[5] register"]
    #[inline]
    pub(crate) fn read_wdt_reqstatus_rr5(&self) -> MemResult<bool> {
        todo!("read WDT REQSTATUS RR5 reset value false")
    }
    #[doc = "WDT REQSTATUS RR6: Request status for RR[6] register"]
    #[inline]
    pub(crate) fn read_wdt_reqstatus_rr6(&self) -> MemResult<bool> {
        todo!("read WDT REQSTATUS RR6 reset value false")
    }
    #[doc = "WDT REQSTATUS RR7: Request status for RR[7] register"]
    #[inline]
    pub(crate) fn read_wdt_reqstatus_rr7(&self) -> MemResult<bool> {
        todo!("read WDT REQSTATUS RR7 reset value false")
    }
    #[doc = "WDT CRV: Counter reload value"]
    #[inline]
    pub(crate) fn read_wdt_crv(&self) -> MemResult<u32> {
        todo!("read WDT CRV reset value 0xffffffff mask 0xffffffffffffffff")
    }
    #[doc = "WDT CRV: Counter reload value"]
    #[inline]
    pub(crate) fn write_wdt_crv(&mut self, _value: u32) -> MemResult<()> {
        todo!("write WDT CRV reset value 0xffffffff mask 0xffffffffffffffff")
    }
    #[doc = "WDT RREN RR0: Enable or disable RR[0] register"]
    #[inline]
    pub(crate) fn read_wdt_rren_rr0(&self) -> MemResult<bool> {
        todo!("read WDT RREN RR0 reset value true")
    }
    #[doc = "WDT RREN RR0: Enable or disable RR[0] register"]
    #[inline]
    pub(crate) fn write_wdt_rren_rr0(&mut self, _value: bool) -> MemResult<()> {
        todo!("write WDT RREN RR0 reset value true")
    }
    #[doc = "WDT RREN RR1: Enable or disable RR[1] register"]
    #[inline]
    pub(crate) fn read_wdt_rren_rr1(&self) -> MemResult<bool> {
        todo!("read WDT RREN RR1 reset value false")
    }
    #[doc = "WDT RREN RR1: Enable or disable RR[1] register"]
    #[inline]
    pub(crate) fn write_wdt_rren_rr1(&mut self, _value: bool) -> MemResult<()> {
        todo!("write WDT RREN RR1 reset value false")
    }
    #[doc = "WDT RREN RR2: Enable or disable RR[2] register"]
    #[inline]
    pub(crate) fn read_wdt_rren_rr2(&self) -> MemResult<bool> {
        todo!("read WDT RREN RR2 reset value false")
    }
    #[doc = "WDT RREN RR2: Enable or disable RR[2] register"]
    #[inline]
    pub(crate) fn write_wdt_rren_rr2(&mut self, _value: bool) -> MemResult<()> {
        todo!("write WDT RREN RR2 reset value false")
    }
    #[doc = "WDT RREN RR3: Enable or disable RR[3] register"]
    #[inline]
    pub(crate) fn read_wdt_rren_rr3(&self) -> MemResult<bool> {
        todo!("read WDT RREN RR3 reset value false")
    }
    #[doc = "WDT RREN RR3: Enable or disable RR[3] register"]
    #[inline]
    pub(crate) fn write_wdt_rren_rr3(&mut self, _value: bool) -> MemResult<()> {
        todo!("write WDT RREN RR3 reset value false")
    }
    #[doc = "WDT RREN RR4: Enable or disable RR[4] register"]
    #[inline]
    pub(crate) fn read_wdt_rren_rr4(&self) -> MemResult<bool> {
        todo!("read WDT RREN RR4 reset value false")
    }
    #[doc = "WDT RREN RR4: Enable or disable RR[4] register"]
    #[inline]
    pub(crate) fn write_wdt_rren_rr4(&mut self, _value: bool) -> MemResult<()> {
        todo!("write WDT RREN RR4 reset value false")
    }
    #[doc = "WDT RREN RR5: Enable or disable RR[5] register"]
    #[inline]
    pub(crate) fn read_wdt_rren_rr5(&self) -> MemResult<bool> {
        todo!("read WDT RREN RR5 reset value false")
    }
    #[doc = "WDT RREN RR5: Enable or disable RR[5] register"]
    #[inline]
    pub(crate) fn write_wdt_rren_rr5(&mut self, _value: bool) -> MemResult<()> {
        todo!("write WDT RREN RR5 reset value false")
    }
    #[doc = "WDT RREN RR6: Enable or disable RR[6] register"]
    #[inline]
    pub(crate) fn read_wdt_rren_rr6(&self) -> MemResult<bool> {
        todo!("read WDT RREN RR6 reset value false")
    }
    #[doc = "WDT RREN RR6: Enable or disable RR[6] register"]
    #[inline]
    pub(crate) fn write_wdt_rren_rr6(&mut self, _value: bool) -> MemResult<()> {
        todo!("write WDT RREN RR6 reset value false")
    }
    #[doc = "WDT RREN RR7: Enable or disable RR[7] register"]
    #[inline]
    pub(crate) fn read_wdt_rren_rr7(&self) -> MemResult<bool> {
        todo!("read WDT RREN RR7 reset value false")
    }
    #[doc = "WDT RREN RR7: Enable or disable RR[7] register"]
    #[inline]
    pub(crate) fn write_wdt_rren_rr7(&mut self, _value: bool) -> MemResult<()> {
        todo!("write WDT RREN RR7 reset value false")
    }
    #[doc = "WDT CONFIG SLEEP: Configure the watchdog to either be paused, or kept running, while the CPU is sleeping"]
    #[inline]
    pub(crate) fn read_wdt_config_sleep(&self) -> MemResult<bool> {
        todo!("read WDT CONFIG SLEEP reset value true")
    }
    #[doc = "WDT CONFIG SLEEP: Configure the watchdog to either be paused, or kept running, while the CPU is sleeping"]
    #[inline]
    pub(crate) fn write_wdt_config_sleep(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write WDT CONFIG SLEEP reset value true")
    }
    #[doc = "WDT CONFIG HALT: Configure the watchdog to either be paused, or kept running, while the CPU is halted by the debugger"]
    #[inline]
    pub(crate) fn read_wdt_config_halt(&self) -> MemResult<bool> {
        todo!("read WDT CONFIG HALT reset value false")
    }
    #[doc = "WDT CONFIG HALT: Configure the watchdog to either be paused, or kept running, while the CPU is halted by the debugger"]
    #[inline]
    pub(crate) fn write_wdt_config_halt(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write WDT CONFIG HALT reset value false")
    }
    #[doc = "WDT RR[%s]: Description collection[0]:  Reload request 0"]
    #[inline]
    pub(crate) fn write_wdt_rrn(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write WDT RR[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC TASKS_START: Task starting the quadrature decoder"]
    #[inline]
    pub(crate) fn write_qdec_tasks_start(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write QDEC TASKS_START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC TASKS_STOP: Task stopping the quadrature decoder"]
    #[inline]
    pub(crate) fn write_qdec_tasks_stop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write QDEC TASKS_STOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC TASKS_READCLRACC: Read and clear ACC and ACCDBL"]
    #[inline]
    pub(crate) fn write_qdec_tasks_readclracc(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write QDEC TASKS_READCLRACC reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC TASKS_RDCLRACC: Read and clear ACC"]
    #[inline]
    pub(crate) fn write_qdec_tasks_rdclracc(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write QDEC TASKS_RDCLRACC reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC TASKS_RDCLRDBL: Read and clear ACCDBL"]
    #[inline]
    pub(crate) fn write_qdec_tasks_rdclrdbl(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write QDEC TASKS_RDCLRDBL reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC EVENTS_SAMPLERDY: Event being generated for every new sample value written to the SAMPLE register"]
    #[inline]
    pub(crate) fn read_qdec_events_samplerdy(&self) -> MemResult<u32> {
        todo ! ("read QDEC EVENTS_SAMPLERDY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC EVENTS_SAMPLERDY: Event being generated for every new sample value written to the SAMPLE register"]
    #[inline]
    pub(crate) fn write_qdec_events_samplerdy(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write QDEC EVENTS_SAMPLERDY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC EVENTS_REPORTRDY: Non-null report ready"]
    #[inline]
    pub(crate) fn read_qdec_events_reportrdy(&self) -> MemResult<u32> {
        todo ! ("read QDEC EVENTS_REPORTRDY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC EVENTS_REPORTRDY: Non-null report ready"]
    #[inline]
    pub(crate) fn write_qdec_events_reportrdy(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write QDEC EVENTS_REPORTRDY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC EVENTS_ACCOF: ACC or ACCDBL register overflow"]
    #[inline]
    pub(crate) fn read_qdec_events_accof(&self) -> MemResult<u32> {
        todo!("read QDEC EVENTS_ACCOF reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC EVENTS_ACCOF: ACC or ACCDBL register overflow"]
    #[inline]
    pub(crate) fn write_qdec_events_accof(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write QDEC EVENTS_ACCOF reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "QDEC EVENTS_DBLRDY: Double displacement(s) detected"]
    #[inline]
    pub(crate) fn read_qdec_events_dblrdy(&self) -> MemResult<u32> {
        todo!(
            "read QDEC EVENTS_DBLRDY reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "QDEC EVENTS_DBLRDY: Double displacement(s) detected"]
    #[inline]
    pub(crate) fn write_qdec_events_dblrdy(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write QDEC EVENTS_DBLRDY reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "QDEC EVENTS_STOPPED: QDEC has been stopped"]
    #[inline]
    pub(crate) fn read_qdec_events_stopped(&self) -> MemResult<u32> {
        todo!(
            "read QDEC EVENTS_STOPPED reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "QDEC EVENTS_STOPPED: QDEC has been stopped"]
    #[inline]
    pub(crate) fn write_qdec_events_stopped(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write QDEC EVENTS_STOPPED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC SHORTS REPORTRDY_READCLRACC: Shortcut between REPORTRDY event and READCLRACC task"]
    #[inline]
    pub(crate) fn read_qdec_shorts_reportrdy_readclracc(
        &self,
    ) -> MemResult<bool> {
        todo!("read QDEC SHORTS REPORTRDY_READCLRACC reset value false")
    }
    #[doc = "QDEC SHORTS REPORTRDY_READCLRACC: Shortcut between REPORTRDY event and READCLRACC task"]
    #[inline]
    pub(crate) fn write_qdec_shorts_reportrdy_readclracc(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC SHORTS REPORTRDY_READCLRACC reset value false")
    }
    #[doc = "QDEC SHORTS SAMPLERDY_STOP: Shortcut between SAMPLERDY event and STOP task"]
    #[inline]
    pub(crate) fn read_qdec_shorts_samplerdy_stop(&self) -> MemResult<bool> {
        todo!("read QDEC SHORTS SAMPLERDY_STOP reset value false")
    }
    #[doc = "QDEC SHORTS SAMPLERDY_STOP: Shortcut between SAMPLERDY event and STOP task"]
    #[inline]
    pub(crate) fn write_qdec_shorts_samplerdy_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC SHORTS SAMPLERDY_STOP reset value false")
    }
    #[doc = "QDEC SHORTS REPORTRDY_RDCLRACC: Shortcut between REPORTRDY event and RDCLRACC task"]
    #[inline]
    pub(crate) fn read_qdec_shorts_reportrdy_rdclracc(
        &self,
    ) -> MemResult<bool> {
        todo!("read QDEC SHORTS REPORTRDY_RDCLRACC reset value false")
    }
    #[doc = "QDEC SHORTS REPORTRDY_RDCLRACC: Shortcut between REPORTRDY event and RDCLRACC task"]
    #[inline]
    pub(crate) fn write_qdec_shorts_reportrdy_rdclracc(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC SHORTS REPORTRDY_RDCLRACC reset value false")
    }
    #[doc = "QDEC SHORTS REPORTRDY_STOP: Shortcut between REPORTRDY event and STOP task"]
    #[inline]
    pub(crate) fn read_qdec_shorts_reportrdy_stop(&self) -> MemResult<bool> {
        todo!("read QDEC SHORTS REPORTRDY_STOP reset value false")
    }
    #[doc = "QDEC SHORTS REPORTRDY_STOP: Shortcut between REPORTRDY event and STOP task"]
    #[inline]
    pub(crate) fn write_qdec_shorts_reportrdy_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC SHORTS REPORTRDY_STOP reset value false")
    }
    #[doc = "QDEC SHORTS DBLRDY_RDCLRDBL: Shortcut between DBLRDY event and RDCLRDBL task"]
    #[inline]
    pub(crate) fn read_qdec_shorts_dblrdy_rdclrdbl(&self) -> MemResult<bool> {
        todo!("read QDEC SHORTS DBLRDY_RDCLRDBL reset value false")
    }
    #[doc = "QDEC SHORTS DBLRDY_RDCLRDBL: Shortcut between DBLRDY event and RDCLRDBL task"]
    #[inline]
    pub(crate) fn write_qdec_shorts_dblrdy_rdclrdbl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC SHORTS DBLRDY_RDCLRDBL reset value false")
    }
    #[doc = "QDEC SHORTS DBLRDY_STOP: Shortcut between DBLRDY event and STOP task"]
    #[inline]
    pub(crate) fn read_qdec_shorts_dblrdy_stop(&self) -> MemResult<bool> {
        todo!("read QDEC SHORTS DBLRDY_STOP reset value false")
    }
    #[doc = "QDEC SHORTS DBLRDY_STOP: Shortcut between DBLRDY event and STOP task"]
    #[inline]
    pub(crate) fn write_qdec_shorts_dblrdy_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC SHORTS DBLRDY_STOP reset value false")
    }
    #[doc = "QDEC SHORTS SAMPLERDY_READCLRACC: Shortcut between SAMPLERDY event and READCLRACC task"]
    #[inline]
    pub(crate) fn read_qdec_shorts_samplerdy_readclracc(
        &self,
    ) -> MemResult<bool> {
        todo!("read QDEC SHORTS SAMPLERDY_READCLRACC reset value false")
    }
    #[doc = "QDEC SHORTS SAMPLERDY_READCLRACC: Shortcut between SAMPLERDY event and READCLRACC task"]
    #[inline]
    pub(crate) fn write_qdec_shorts_samplerdy_readclracc(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC SHORTS SAMPLERDY_READCLRACC reset value false")
    }
    #[doc = "QDEC INTENSET SAMPLERDY: Write '1' to Enable interrupt for SAMPLERDY event"]
    #[inline]
    pub(crate) fn read_qdec_intenset_samplerdy(&self) -> MemResult<bool> {
        todo!("read QDEC INTENSET SAMPLERDY reset value false")
    }
    #[doc = "QDEC INTENSET SAMPLERDY: Write '1' to Enable interrupt for SAMPLERDY event"]
    #[inline]
    pub(crate) fn write_qdec_intenset_samplerdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC INTENSET SAMPLERDY reset value false")
    }
    #[doc = "QDEC INTENSET REPORTRDY: Write '1' to Enable interrupt for REPORTRDY event"]
    #[inline]
    pub(crate) fn read_qdec_intenset_reportrdy(&self) -> MemResult<bool> {
        todo!("read QDEC INTENSET REPORTRDY reset value false")
    }
    #[doc = "QDEC INTENSET REPORTRDY: Write '1' to Enable interrupt for REPORTRDY event"]
    #[inline]
    pub(crate) fn write_qdec_intenset_reportrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC INTENSET REPORTRDY reset value false")
    }
    #[doc = "QDEC INTENSET ACCOF: Write '1' to Enable interrupt for ACCOF event"]
    #[inline]
    pub(crate) fn read_qdec_intenset_accof(&self) -> MemResult<bool> {
        todo!("read QDEC INTENSET ACCOF reset value false")
    }
    #[doc = "QDEC INTENSET ACCOF: Write '1' to Enable interrupt for ACCOF event"]
    #[inline]
    pub(crate) fn write_qdec_intenset_accof(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC INTENSET ACCOF reset value false")
    }
    #[doc = "QDEC INTENSET DBLRDY: Write '1' to Enable interrupt for DBLRDY event"]
    #[inline]
    pub(crate) fn read_qdec_intenset_dblrdy(&self) -> MemResult<bool> {
        todo!("read QDEC INTENSET DBLRDY reset value false")
    }
    #[doc = "QDEC INTENSET DBLRDY: Write '1' to Enable interrupt for DBLRDY event"]
    #[inline]
    pub(crate) fn write_qdec_intenset_dblrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC INTENSET DBLRDY reset value false")
    }
    #[doc = "QDEC INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_qdec_intenset_stopped(&self) -> MemResult<bool> {
        todo!("read QDEC INTENSET STOPPED reset value false")
    }
    #[doc = "QDEC INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_qdec_intenset_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC INTENSET STOPPED reset value false")
    }
    #[doc = "QDEC INTENCLR SAMPLERDY: Write '1' to Disable interrupt for SAMPLERDY event"]
    #[inline]
    pub(crate) fn read_qdec_intenclr_samplerdy(&self) -> MemResult<bool> {
        todo!("read QDEC INTENCLR SAMPLERDY reset value false")
    }
    #[doc = "QDEC INTENCLR SAMPLERDY: Write '1' to Disable interrupt for SAMPLERDY event"]
    #[inline]
    pub(crate) fn write_qdec_intenclr_samplerdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC INTENCLR SAMPLERDY reset value false")
    }
    #[doc = "QDEC INTENCLR REPORTRDY: Write '1' to Disable interrupt for REPORTRDY event"]
    #[inline]
    pub(crate) fn read_qdec_intenclr_reportrdy(&self) -> MemResult<bool> {
        todo!("read QDEC INTENCLR REPORTRDY reset value false")
    }
    #[doc = "QDEC INTENCLR REPORTRDY: Write '1' to Disable interrupt for REPORTRDY event"]
    #[inline]
    pub(crate) fn write_qdec_intenclr_reportrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC INTENCLR REPORTRDY reset value false")
    }
    #[doc = "QDEC INTENCLR ACCOF: Write '1' to Disable interrupt for ACCOF event"]
    #[inline]
    pub(crate) fn read_qdec_intenclr_accof(&self) -> MemResult<bool> {
        todo!("read QDEC INTENCLR ACCOF reset value false")
    }
    #[doc = "QDEC INTENCLR ACCOF: Write '1' to Disable interrupt for ACCOF event"]
    #[inline]
    pub(crate) fn write_qdec_intenclr_accof(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC INTENCLR ACCOF reset value false")
    }
    #[doc = "QDEC INTENCLR DBLRDY: Write '1' to Disable interrupt for DBLRDY event"]
    #[inline]
    pub(crate) fn read_qdec_intenclr_dblrdy(&self) -> MemResult<bool> {
        todo!("read QDEC INTENCLR DBLRDY reset value false")
    }
    #[doc = "QDEC INTENCLR DBLRDY: Write '1' to Disable interrupt for DBLRDY event"]
    #[inline]
    pub(crate) fn write_qdec_intenclr_dblrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC INTENCLR DBLRDY reset value false")
    }
    #[doc = "QDEC INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_qdec_intenclr_stopped(&self) -> MemResult<bool> {
        todo!("read QDEC INTENCLR STOPPED reset value false")
    }
    #[doc = "QDEC INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_qdec_intenclr_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC INTENCLR STOPPED reset value false")
    }
    #[doc = "QDEC ENABLE ENABLE: Enable or disable the quadrature decoder"]
    #[inline]
    pub(crate) fn read_qdec_enable_enable(&self) -> MemResult<bool> {
        todo!("read QDEC ENABLE ENABLE reset value false")
    }
    #[doc = "QDEC ENABLE ENABLE: Enable or disable the quadrature decoder"]
    #[inline]
    pub(crate) fn write_qdec_enable_enable(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC ENABLE ENABLE reset value false")
    }
    #[doc = "QDEC LEDPOL LEDPOL: LED output pin polarity"]
    #[inline]
    pub(crate) fn read_qdec_ledpol_ledpol(&self) -> MemResult<bool> {
        todo!("read QDEC LEDPOL LEDPOL reset value false")
    }
    #[doc = "QDEC LEDPOL LEDPOL: LED output pin polarity"]
    #[inline]
    pub(crate) fn write_qdec_ledpol_ledpol(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC LEDPOL LEDPOL reset value false")
    }
    #[doc = "QDEC SAMPLEPER SAMPLEPER: Sample period. The SAMPLE register will be updated for every new sample"]
    #[inline]
    pub(crate) fn read_qdec_sampleper_sampleper(&self) -> MemResult<u8> {
        todo!("read QDEC SAMPLEPER SAMPLEPER reset value 0x00 mask 0x0f")
    }
    #[doc = "QDEC SAMPLEPER SAMPLEPER: Sample period. The SAMPLE register will be updated for every new sample"]
    #[inline]
    pub(crate) fn write_qdec_sampleper_sampleper(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write QDEC SAMPLEPER SAMPLEPER reset value 0x00 mask 0x0f")
    }
    #[doc = "QDEC SAMPLE: Motion sample value"]
    #[inline]
    pub(crate) fn read_qdec_sample(&self) -> MemResult<u32> {
        todo!("read QDEC SAMPLE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC REPORTPER REPORTPER: Specifies the number of samples to be accumulated in the ACC register before the REPORTRDY and DBLRDY events can be generated"]
    #[inline]
    pub(crate) fn read_qdec_reportper_reportper(&self) -> MemResult<u8> {
        todo!("read QDEC REPORTPER REPORTPER reset value 0x00 mask 0x0f")
    }
    #[doc = "QDEC REPORTPER REPORTPER: Specifies the number of samples to be accumulated in the ACC register before the REPORTRDY and DBLRDY events can be generated"]
    #[inline]
    pub(crate) fn write_qdec_reportper_reportper(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write QDEC REPORTPER REPORTPER reset value 0x00 mask 0x0f")
    }
    #[doc = "QDEC ACC: Register accumulating the valid transitions"]
    #[inline]
    pub(crate) fn read_qdec_acc(&self) -> MemResult<u32> {
        todo!("read QDEC ACC reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC ACCREAD: Snapshot of the ACC register, updated by the READCLRACC or RDCLRACC task"]
    #[inline]
    pub(crate) fn read_qdec_accread(&self) -> MemResult<u32> {
        todo!("read QDEC ACCREAD reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "QDEC LED PIN: Pin number"]
    #[inline]
    pub(crate) fn read_qdec_psel_led_pin(&self) -> MemResult<u8> {
        todo!("read QDEC LED PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "QDEC LED PIN: Pin number"]
    #[inline]
    pub(crate) fn write_qdec_psel_led_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write QDEC LED PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "QDEC LED CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_qdec_psel_led_connect(&self) -> MemResult<bool> {
        todo!("read QDEC LED CONNECT reset value true")
    }
    #[doc = "QDEC LED CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_qdec_psel_led_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC LED CONNECT reset value true")
    }
    #[doc = "QDEC A PIN: Pin number"]
    #[inline]
    pub(crate) fn read_qdec_psel_a_pin(&self) -> MemResult<u8> {
        todo!("read QDEC A PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "QDEC A PIN: Pin number"]
    #[inline]
    pub(crate) fn write_qdec_psel_a_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write QDEC A PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "QDEC A CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_qdec_psel_a_connect(&self) -> MemResult<bool> {
        todo!("read QDEC A CONNECT reset value true")
    }
    #[doc = "QDEC A CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_qdec_psel_a_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC A CONNECT reset value true")
    }
    #[doc = "QDEC B PIN: Pin number"]
    #[inline]
    pub(crate) fn read_qdec_psel_b_pin(&self) -> MemResult<u8> {
        todo!("read QDEC B PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "QDEC B PIN: Pin number"]
    #[inline]
    pub(crate) fn write_qdec_psel_b_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write QDEC B PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "QDEC B CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_qdec_psel_b_connect(&self) -> MemResult<bool> {
        todo!("read QDEC B CONNECT reset value true")
    }
    #[doc = "QDEC B CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_qdec_psel_b_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC B CONNECT reset value true")
    }
    #[doc = "QDEC DBFEN DBFEN: Enable input debounce filters"]
    #[inline]
    pub(crate) fn read_qdec_dbfen_dbfen(&self) -> MemResult<bool> {
        todo!("read QDEC DBFEN DBFEN reset value false")
    }
    #[doc = "QDEC DBFEN DBFEN: Enable input debounce filters"]
    #[inline]
    pub(crate) fn write_qdec_dbfen_dbfen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write QDEC DBFEN DBFEN reset value false")
    }
    #[doc = "QDEC LEDPRE LEDPRE: Period in us the LED is switched on prior to sampling"]
    #[inline]
    pub(crate) fn read_qdec_ledpre_ledpre(&self) -> MemResult<u16> {
        todo!("read QDEC LEDPRE LEDPRE reset value 0x10 mask 0x1ff")
    }
    #[doc = "QDEC LEDPRE LEDPRE: Period in us the LED is switched on prior to sampling"]
    #[inline]
    pub(crate) fn write_qdec_ledpre_ledpre(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo!("write QDEC LEDPRE LEDPRE reset value 0x10 mask 0x1ff")
    }
    #[doc = "QDEC ACCDBL ACCDBL: Register accumulating the number of detected double or illegal transitions. ( SAMPLE = 2 )."]
    #[inline]
    pub(crate) fn read_qdec_accdbl_accdbl(&self) -> MemResult<u8> {
        todo!("read QDEC ACCDBL ACCDBL reset value 0x00 mask 0x0f")
    }
    #[doc = "QDEC ACCDBLREAD ACCDBLREAD: Snapshot of the ACCDBL register. This field is updated when the READCLRACC or RDCLRDBL task is triggered."]
    #[inline]
    pub(crate) fn read_qdec_accdblread_accdblread(&self) -> MemResult<u8> {
        todo!("read QDEC ACCDBLREAD ACCDBLREAD reset value 0x00 mask 0x0f")
    }
    #[doc = "COMP TASKS_START: Start comparator\n\nLPCOMP TASKS_START: Start comparator"]
    #[inline]
    pub(crate) fn write_complpcomp_tasks_start(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write COMP TASKS_START, LPCOMP TASKS_START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "COMP TASKS_STOP: Stop comparator\n\nLPCOMP TASKS_STOP: Stop comparator"]
    #[inline]
    pub(crate) fn write_complpcomp_tasks_stop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write COMP TASKS_STOP, LPCOMP TASKS_STOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "COMP TASKS_SAMPLE: Sample comparator value\n\nLPCOMP TASKS_SAMPLE: Sample comparator value"]
    #[inline]
    pub(crate) fn write_complpcomp_tasks_sample(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write COMP TASKS_SAMPLE, LPCOMP TASKS_SAMPLE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "COMP EVENTS_READY: COMP is ready and output is valid\n\nLPCOMP EVENTS_READY: LPCOMP is ready and output is valid"]
    #[inline]
    pub(crate) fn read_complpcomp_events_ready(&self) -> MemResult<u32> {
        todo ! ("read COMP EVENTS_READY, LPCOMP EVENTS_READY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "COMP EVENTS_READY: COMP is ready and output is valid\n\nLPCOMP EVENTS_READY: LPCOMP is ready and output is valid"]
    #[inline]
    pub(crate) fn write_complpcomp_events_ready(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write COMP EVENTS_READY, LPCOMP EVENTS_READY reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "COMP EVENTS_DOWN: Downward crossing\n\nLPCOMP EVENTS_DOWN: Downward crossing"]
    #[inline]
    pub(crate) fn read_complpcomp_events_down(&self) -> MemResult<u32> {
        todo ! ("read COMP EVENTS_DOWN, LPCOMP EVENTS_DOWN reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "COMP EVENTS_DOWN: Downward crossing\n\nLPCOMP EVENTS_DOWN: Downward crossing"]
    #[inline]
    pub(crate) fn write_complpcomp_events_down(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write COMP EVENTS_DOWN, LPCOMP EVENTS_DOWN reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "COMP EVENTS_UP: Upward crossing\n\nLPCOMP EVENTS_UP: Upward crossing"]
    #[inline]
    pub(crate) fn read_complpcomp_events_up(&self) -> MemResult<u32> {
        todo ! ("read COMP EVENTS_UP, LPCOMP EVENTS_UP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "COMP EVENTS_UP: Upward crossing\n\nLPCOMP EVENTS_UP: Upward crossing"]
    #[inline]
    pub(crate) fn write_complpcomp_events_up(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write COMP EVENTS_UP, LPCOMP EVENTS_UP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "COMP EVENTS_CROSS: Downward or upward crossing\n\nLPCOMP EVENTS_CROSS: Downward or upward crossing"]
    #[inline]
    pub(crate) fn read_complpcomp_events_cross(&self) -> MemResult<u32> {
        todo ! ("read COMP EVENTS_CROSS, LPCOMP EVENTS_CROSS reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "COMP EVENTS_CROSS: Downward or upward crossing\n\nLPCOMP EVENTS_CROSS: Downward or upward crossing"]
    #[inline]
    pub(crate) fn write_complpcomp_events_cross(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write COMP EVENTS_CROSS, LPCOMP EVENTS_CROSS reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "COMP SHORTS READY_SAMPLE: Shortcut between READY event and SAMPLE task\n\nLPCOMP SHORTS READY_SAMPLE: Shortcut between READY event and SAMPLE task"]
    #[inline]
    pub(crate) fn read_complpcomp_shorts_ready_sample(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read COMP SHORTS READY_SAMPLE, LPCOMP SHORTS READY_SAMPLE reset value false")
    }
    #[doc = "COMP SHORTS READY_SAMPLE: Shortcut between READY event and SAMPLE task\n\nLPCOMP SHORTS READY_SAMPLE: Shortcut between READY event and SAMPLE task"]
    #[inline]
    pub(crate) fn write_complpcomp_shorts_ready_sample(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write COMP SHORTS READY_SAMPLE, LPCOMP SHORTS READY_SAMPLE reset value false")
    }
    #[doc = "COMP SHORTS READY_STOP: Shortcut between READY event and STOP task\n\nLPCOMP SHORTS READY_STOP: Shortcut between READY event and STOP task"]
    #[inline]
    pub(crate) fn read_complpcomp_shorts_ready_stop(&self) -> MemResult<bool> {
        todo ! ("read COMP SHORTS READY_STOP, LPCOMP SHORTS READY_STOP reset value false")
    }
    #[doc = "COMP SHORTS READY_STOP: Shortcut between READY event and STOP task\n\nLPCOMP SHORTS READY_STOP: Shortcut between READY event and STOP task"]
    #[inline]
    pub(crate) fn write_complpcomp_shorts_ready_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write COMP SHORTS READY_STOP, LPCOMP SHORTS READY_STOP reset value false")
    }
    #[doc = "COMP SHORTS DOWN_STOP: Shortcut between DOWN event and STOP task\n\nLPCOMP SHORTS DOWN_STOP: Shortcut between DOWN event and STOP task"]
    #[inline]
    pub(crate) fn read_complpcomp_shorts_down_stop(&self) -> MemResult<bool> {
        todo ! ("read COMP SHORTS DOWN_STOP, LPCOMP SHORTS DOWN_STOP reset value false")
    }
    #[doc = "COMP SHORTS DOWN_STOP: Shortcut between DOWN event and STOP task\n\nLPCOMP SHORTS DOWN_STOP: Shortcut between DOWN event and STOP task"]
    #[inline]
    pub(crate) fn write_complpcomp_shorts_down_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write COMP SHORTS DOWN_STOP, LPCOMP SHORTS DOWN_STOP reset value false")
    }
    #[doc = "COMP SHORTS UP_STOP: Shortcut between UP event and STOP task\n\nLPCOMP SHORTS UP_STOP: Shortcut between UP event and STOP task"]
    #[inline]
    pub(crate) fn read_complpcomp_shorts_up_stop(&self) -> MemResult<bool> {
        todo!(
            "read COMP SHORTS UP_STOP, LPCOMP SHORTS UP_STOP reset value false"
        )
    }
    #[doc = "COMP SHORTS UP_STOP: Shortcut between UP event and STOP task\n\nLPCOMP SHORTS UP_STOP: Shortcut between UP event and STOP task"]
    #[inline]
    pub(crate) fn write_complpcomp_shorts_up_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write COMP SHORTS UP_STOP, LPCOMP SHORTS UP_STOP reset value false")
    }
    #[doc = "COMP SHORTS CROSS_STOP: Shortcut between CROSS event and STOP task\n\nLPCOMP SHORTS CROSS_STOP: Shortcut between CROSS event and STOP task"]
    #[inline]
    pub(crate) fn read_complpcomp_shorts_cross_stop(&self) -> MemResult<bool> {
        todo ! ("read COMP SHORTS CROSS_STOP, LPCOMP SHORTS CROSS_STOP reset value false")
    }
    #[doc = "COMP SHORTS CROSS_STOP: Shortcut between CROSS event and STOP task\n\nLPCOMP SHORTS CROSS_STOP: Shortcut between CROSS event and STOP task"]
    #[inline]
    pub(crate) fn write_complpcomp_shorts_cross_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write COMP SHORTS CROSS_STOP, LPCOMP SHORTS CROSS_STOP reset value false")
    }
    #[doc = "COMP INTEN READY: Enable or disable interrupt for READY event"]
    #[inline]
    pub(crate) fn read_comp_inten_ready(&self) -> MemResult<bool> {
        todo!("read COMP INTEN READY reset value false")
    }
    #[doc = "COMP INTEN READY: Enable or disable interrupt for READY event"]
    #[inline]
    pub(crate) fn write_comp_inten_ready(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write COMP INTEN READY reset value false")
    }
    #[doc = "COMP INTEN DOWN: Enable or disable interrupt for DOWN event"]
    #[inline]
    pub(crate) fn read_comp_inten_down(&self) -> MemResult<bool> {
        todo!("read COMP INTEN DOWN reset value false")
    }
    #[doc = "COMP INTEN DOWN: Enable or disable interrupt for DOWN event"]
    #[inline]
    pub(crate) fn write_comp_inten_down(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write COMP INTEN DOWN reset value false")
    }
    #[doc = "COMP INTEN UP: Enable or disable interrupt for UP event"]
    #[inline]
    pub(crate) fn read_comp_inten_up(&self) -> MemResult<bool> {
        todo!("read COMP INTEN UP reset value false")
    }
    #[doc = "COMP INTEN UP: Enable or disable interrupt for UP event"]
    #[inline]
    pub(crate) fn write_comp_inten_up(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write COMP INTEN UP reset value false")
    }
    #[doc = "COMP INTEN CROSS: Enable or disable interrupt for CROSS event"]
    #[inline]
    pub(crate) fn read_comp_inten_cross(&self) -> MemResult<bool> {
        todo!("read COMP INTEN CROSS reset value false")
    }
    #[doc = "COMP INTEN CROSS: Enable or disable interrupt for CROSS event"]
    #[inline]
    pub(crate) fn write_comp_inten_cross(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write COMP INTEN CROSS reset value false")
    }
    #[doc = "COMP INTENSET READY: Write '1' to Enable interrupt for READY event\n\nLPCOMP INTENSET READY: Write '1' to Enable interrupt for READY event"]
    #[inline]
    pub(crate) fn read_complpcomp_intenset_ready(&self) -> MemResult<bool> {
        todo!(
            "read COMP INTENSET READY, LPCOMP INTENSET READY reset value false"
        )
    }
    #[doc = "COMP INTENSET READY: Write '1' to Enable interrupt for READY event\n\nLPCOMP INTENSET READY: Write '1' to Enable interrupt for READY event"]
    #[inline]
    pub(crate) fn write_complpcomp_intenset_ready(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write COMP INTENSET READY, LPCOMP INTENSET READY reset value false")
    }
    #[doc = "COMP INTENSET DOWN: Write '1' to Enable interrupt for DOWN event\n\nLPCOMP INTENSET DOWN: Write '1' to Enable interrupt for DOWN event"]
    #[inline]
    pub(crate) fn read_complpcomp_intenset_down(&self) -> MemResult<bool> {
        todo!("read COMP INTENSET DOWN, LPCOMP INTENSET DOWN reset value false")
    }
    #[doc = "COMP INTENSET DOWN: Write '1' to Enable interrupt for DOWN event\n\nLPCOMP INTENSET DOWN: Write '1' to Enable interrupt for DOWN event"]
    #[inline]
    pub(crate) fn write_complpcomp_intenset_down(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!(
            "write COMP INTENSET DOWN, LPCOMP INTENSET DOWN reset value false"
        )
    }
    #[doc = "COMP INTENSET UP: Write '1' to Enable interrupt for UP event\n\nLPCOMP INTENSET UP: Write '1' to Enable interrupt for UP event"]
    #[inline]
    pub(crate) fn read_complpcomp_intenset_up(&self) -> MemResult<bool> {
        todo!("read COMP INTENSET UP, LPCOMP INTENSET UP reset value false")
    }
    #[doc = "COMP INTENSET UP: Write '1' to Enable interrupt for UP event\n\nLPCOMP INTENSET UP: Write '1' to Enable interrupt for UP event"]
    #[inline]
    pub(crate) fn write_complpcomp_intenset_up(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write COMP INTENSET UP, LPCOMP INTENSET UP reset value false")
    }
    #[doc = "COMP INTENSET CROSS: Write '1' to Enable interrupt for CROSS event\n\nLPCOMP INTENSET CROSS: Write '1' to Enable interrupt for CROSS event"]
    #[inline]
    pub(crate) fn read_complpcomp_intenset_cross(&self) -> MemResult<bool> {
        todo!(
            "read COMP INTENSET CROSS, LPCOMP INTENSET CROSS reset value false"
        )
    }
    #[doc = "COMP INTENSET CROSS: Write '1' to Enable interrupt for CROSS event\n\nLPCOMP INTENSET CROSS: Write '1' to Enable interrupt for CROSS event"]
    #[inline]
    pub(crate) fn write_complpcomp_intenset_cross(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write COMP INTENSET CROSS, LPCOMP INTENSET CROSS reset value false")
    }
    #[doc = "COMP INTENCLR READY: Write '1' to Disable interrupt for READY event\n\nLPCOMP INTENCLR READY: Write '1' to Disable interrupt for READY event"]
    #[inline]
    pub(crate) fn read_complpcomp_intenclr_ready(&self) -> MemResult<bool> {
        todo!(
            "read COMP INTENCLR READY, LPCOMP INTENCLR READY reset value false"
        )
    }
    #[doc = "COMP INTENCLR READY: Write '1' to Disable interrupt for READY event\n\nLPCOMP INTENCLR READY: Write '1' to Disable interrupt for READY event"]
    #[inline]
    pub(crate) fn write_complpcomp_intenclr_ready(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write COMP INTENCLR READY, LPCOMP INTENCLR READY reset value false")
    }
    #[doc = "COMP INTENCLR DOWN: Write '1' to Disable interrupt for DOWN event\n\nLPCOMP INTENCLR DOWN: Write '1' to Disable interrupt for DOWN event"]
    #[inline]
    pub(crate) fn read_complpcomp_intenclr_down(&self) -> MemResult<bool> {
        todo!("read COMP INTENCLR DOWN, LPCOMP INTENCLR DOWN reset value false")
    }
    #[doc = "COMP INTENCLR DOWN: Write '1' to Disable interrupt for DOWN event\n\nLPCOMP INTENCLR DOWN: Write '1' to Disable interrupt for DOWN event"]
    #[inline]
    pub(crate) fn write_complpcomp_intenclr_down(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!(
            "write COMP INTENCLR DOWN, LPCOMP INTENCLR DOWN reset value false"
        )
    }
    #[doc = "COMP INTENCLR UP: Write '1' to Disable interrupt for UP event\n\nLPCOMP INTENCLR UP: Write '1' to Disable interrupt for UP event"]
    #[inline]
    pub(crate) fn read_complpcomp_intenclr_up(&self) -> MemResult<bool> {
        todo!("read COMP INTENCLR UP, LPCOMP INTENCLR UP reset value false")
    }
    #[doc = "COMP INTENCLR UP: Write '1' to Disable interrupt for UP event\n\nLPCOMP INTENCLR UP: Write '1' to Disable interrupt for UP event"]
    #[inline]
    pub(crate) fn write_complpcomp_intenclr_up(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write COMP INTENCLR UP, LPCOMP INTENCLR UP reset value false")
    }
    #[doc = "COMP INTENCLR CROSS: Write '1' to Disable interrupt for CROSS event\n\nLPCOMP INTENCLR CROSS: Write '1' to Disable interrupt for CROSS event"]
    #[inline]
    pub(crate) fn read_complpcomp_intenclr_cross(&self) -> MemResult<bool> {
        todo!(
            "read COMP INTENCLR CROSS, LPCOMP INTENCLR CROSS reset value false"
        )
    }
    #[doc = "COMP INTENCLR CROSS: Write '1' to Disable interrupt for CROSS event\n\nLPCOMP INTENCLR CROSS: Write '1' to Disable interrupt for CROSS event"]
    #[inline]
    pub(crate) fn write_complpcomp_intenclr_cross(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write COMP INTENCLR CROSS, LPCOMP INTENCLR CROSS reset value false")
    }
    #[doc = "COMP RESULT RESULT: Result of last compare. Decision point SAMPLE task.\n\nLPCOMP RESULT RESULT: Result of last compare. Decision point SAMPLE task."]
    #[inline]
    pub(crate) fn read_complpcomp_result_result(&self) -> MemResult<bool> {
        todo!("read COMP RESULT RESULT, LPCOMP RESULT RESULT reset value false")
    }
    #[doc = "COMP ENABLE ENABLE: Enable or disable COMP\n\nLPCOMP ENABLE ENABLE: Enable or disable LPCOMP"]
    #[inline]
    pub(crate) fn read_complpcomp_enable_enable(&self) -> MemResult<u8> {
        todo ! ("read COMP ENABLE ENABLE, LPCOMP ENABLE ENABLE reset value 0x00 mask 0x03")
    }
    #[doc = "COMP ENABLE ENABLE: Enable or disable COMP\n\nLPCOMP ENABLE ENABLE: Enable or disable LPCOMP"]
    #[inline]
    pub(crate) fn write_complpcomp_enable_enable(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write COMP ENABLE ENABLE, LPCOMP ENABLE ENABLE reset value 0x00 mask 0x03")
    }
    #[doc = "COMP PSEL PSEL: Analog pin select\n\nLPCOMP PSEL PSEL: Analog pin select"]
    #[inline]
    pub(crate) fn read_complpcomp_psel_psel(&self) -> MemResult<u8> {
        todo!(
            "read COMP PSEL PSEL, LPCOMP PSEL PSEL reset value 0x00 mask 0x07"
        )
    }
    #[doc = "COMP PSEL PSEL: Analog pin select\n\nLPCOMP PSEL PSEL: Analog pin select"]
    #[inline]
    pub(crate) fn write_complpcomp_psel_psel(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!(
            "write COMP PSEL PSEL, LPCOMP PSEL PSEL reset value 0x00 mask 0x07"
        )
    }
    #[doc = "COMP REFSEL REFSEL: Reference select\n\nLPCOMP REFSEL REFSEL: Reference select"]
    #[inline]
    pub(crate) fn read_complpcomp_refsel_refsel(&self) -> MemResult<u8> {
        todo ! ("read COMP REFSEL REFSEL, LPCOMP REFSEL REFSEL reset value 0x04 mask 0x07")
    }
    #[doc = "COMP REFSEL REFSEL: Reference select\n\nLPCOMP REFSEL REFSEL: Reference select"]
    #[inline]
    pub(crate) fn write_complpcomp_refsel_refsel(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write COMP REFSEL REFSEL, LPCOMP REFSEL REFSEL reset value 0x04 mask 0x07")
    }
    #[doc = "COMP EXTREFSEL EXTREFSEL: External analog reference select\n\nLPCOMP EXTREFSEL EXTREFSEL: External analog reference select"]
    #[inline]
    pub(crate) fn read_complpcomp_extrefsel_extrefsel(&self) -> MemResult<u8> {
        todo ! ("read COMP EXTREFSEL EXTREFSEL, LPCOMP EXTREFSEL EXTREFSEL reset value 0x00 mask 0x07")
    }
    #[doc = "COMP EXTREFSEL EXTREFSEL: External analog reference select\n\nLPCOMP EXTREFSEL EXTREFSEL: External analog reference select"]
    #[inline]
    pub(crate) fn write_complpcomp_extrefsel_extrefsel(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write COMP EXTREFSEL EXTREFSEL, LPCOMP EXTREFSEL EXTREFSEL reset value 0x00 mask 0x07")
    }
    #[doc = "LPCOMP ANADETECT ANADETECT: Analog detect configuration"]
    #[inline]
    pub(crate) fn read_lpcomp_anadetect_anadetect(&self) -> MemResult<u8> {
        todo!("read LPCOMP ANADETECT ANADETECT reset value 0x00 mask 0x03")
    }
    #[doc = "LPCOMP ANADETECT ANADETECT: Analog detect configuration"]
    #[inline]
    pub(crate) fn write_lpcomp_anadetect_anadetect(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write LPCOMP ANADETECT ANADETECT reset value 0x00 mask 0x03")
    }
    #[doc = "COMP TH THDOWN: VDOWN = (THDOWN+1)/64*VREF"]
    #[inline]
    pub(crate) fn read_comp_th_thdown(&self) -> MemResult<u8> {
        todo!("read COMP TH THDOWN reset value 0x00 mask 0x3f")
    }
    #[doc = "COMP TH THDOWN: VDOWN = (THDOWN+1)/64*VREF"]
    #[inline]
    pub(crate) fn write_comp_th_thdown(&mut self, _value: u8) -> MemResult<()> {
        todo!("write COMP TH THDOWN reset value 0x00 mask 0x3f")
    }
    #[doc = "COMP TH THUP: VUP = (THUP+1)/64*VREF"]
    #[inline]
    pub(crate) fn read_comp_th_thup(&self) -> MemResult<u8> {
        todo!("read COMP TH THUP reset value 0x00 mask 0x3f")
    }
    #[doc = "COMP TH THUP: VUP = (THUP+1)/64*VREF"]
    #[inline]
    pub(crate) fn write_comp_th_thup(&mut self, _value: u8) -> MemResult<()> {
        todo!("write COMP TH THUP reset value 0x00 mask 0x3f")
    }
    #[doc = "COMP MODE SP: Speed and power modes"]
    #[inline]
    pub(crate) fn read_comp_mode_sp(&self) -> MemResult<u8> {
        todo!("read COMP MODE SP reset value 0x00 mask 0x03")
    }
    #[doc = "COMP MODE SP: Speed and power modes"]
    #[inline]
    pub(crate) fn write_comp_mode_sp(&mut self, _value: u8) -> MemResult<()> {
        todo!("write COMP MODE SP reset value 0x00 mask 0x03")
    }
    #[doc = "COMP MODE MAIN: Main operation modes"]
    #[inline]
    pub(crate) fn read_comp_mode_main(&self) -> MemResult<bool> {
        todo!("read COMP MODE MAIN reset value false")
    }
    #[doc = "COMP MODE MAIN: Main operation modes"]
    #[inline]
    pub(crate) fn write_comp_mode_main(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write COMP MODE MAIN reset value false")
    }
    #[doc = "COMP HYST HYST: Comparator hysteresis\n\nLPCOMP HYST HYST: Comparator hysteresis enable"]
    #[inline]
    pub(crate) fn read_complpcomp_hyst_hyst(&self) -> MemResult<bool> {
        todo!("read COMP HYST HYST, LPCOMP HYST HYST reset value false")
    }
    #[doc = "COMP HYST HYST: Comparator hysteresis\n\nLPCOMP HYST HYST: Comparator hysteresis enable"]
    #[inline]
    pub(crate) fn write_complpcomp_hyst_hyst(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write COMP HYST HYST, LPCOMP HYST HYST reset value false")
    }
    #[doc = "COMP ISOURCE ISOURCE: Comparator hysteresis"]
    #[inline]
    pub(crate) fn read_comp_isource_isource(&self) -> MemResult<u8> {
        todo!("read COMP ISOURCE ISOURCE reset value 0x00 mask 0x03")
    }
    #[doc = "COMP ISOURCE ISOURCE: Comparator hysteresis"]
    #[inline]
    pub(crate) fn write_comp_isource_isource(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write COMP ISOURCE ISOURCE reset value 0x00 mask 0x03")
    }
    #[doc = "SWI0 UNUSED: Unused.\n\nEGU0 TASKS_TRIGGER[%s]: Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event\n\nSWI0 UNUSED: Unused.\n\nEGU0 TASKS_TRIGGER[%s]: Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event\n\nSWI0 UNUSED: Unused.\n\nEGU0 TASKS_TRIGGER[%s]: Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event\n\nSWI0 UNUSED: Unused.\n\nEGU0 TASKS_TRIGGER[%s]: Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event\n\nSWI0 UNUSED: Unused.\n\nEGU0 TASKS_TRIGGER[%s]: Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event\n\nSWI0 UNUSED: Unused.\n\nEGU0 TASKS_TRIGGER[%s]: Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event"]
    #[inline]
    pub(crate) fn read_swi0egu0_unused(&self, _dim: usize) -> MemResult<u32> {
        todo ! ("read SWI0 UNUSED, EGU0 TASKS_TRIGGER[%s], SWI0 UNUSED, EGU0 TASKS_TRIGGER[%s], SWI0 UNUSED, EGU0 TASKS_TRIGGER[%s], SWI0 UNUSED, EGU0 TASKS_TRIGGER[%s], SWI0 UNUSED, EGU0 TASKS_TRIGGER[%s], SWI0 UNUSED, EGU0 TASKS_TRIGGER[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "SWI0 UNUSED: Unused.\n\nEGU0 TASKS_TRIGGER[%s]: Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event\n\nSWI0 UNUSED: Unused.\n\nEGU0 TASKS_TRIGGER[%s]: Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event\n\nSWI0 UNUSED: Unused.\n\nEGU0 TASKS_TRIGGER[%s]: Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event\n\nSWI0 UNUSED: Unused.\n\nEGU0 TASKS_TRIGGER[%s]: Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event\n\nSWI0 UNUSED: Unused.\n\nEGU0 TASKS_TRIGGER[%s]: Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event\n\nSWI0 UNUSED: Unused.\n\nEGU0 TASKS_TRIGGER[%s]: Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event"]
    #[inline]
    pub(crate) fn write_swi0egu0_unused(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write SWI0 UNUSED, EGU0 TASKS_TRIGGER[%s], SWI0 UNUSED, EGU0 TASKS_TRIGGER[%s], SWI0 UNUSED, EGU0 TASKS_TRIGGER[%s], SWI0 UNUSED, EGU0 TASKS_TRIGGER[%s], SWI0 UNUSED, EGU0 TASKS_TRIGGER[%s], SWI0 UNUSED, EGU0 TASKS_TRIGGER[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "EGU0 EVENTS_TRIGGERED[%s]: Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task\n\nEGU0 EVENTS_TRIGGERED[%s]: Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task\n\nEGU0 EVENTS_TRIGGERED[%s]: Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task\n\nEGU0 EVENTS_TRIGGERED[%s]: Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task\n\nEGU0 EVENTS_TRIGGERED[%s]: Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task\n\nEGU0 EVENTS_TRIGGERED[%s]: Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task"]
    #[inline]
    pub(crate) fn read_egu0_events_triggeredn(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo ! ("read EGU0 EVENTS_TRIGGERED[%s], EGU0 EVENTS_TRIGGERED[%s], EGU0 EVENTS_TRIGGERED[%s], EGU0 EVENTS_TRIGGERED[%s], EGU0 EVENTS_TRIGGERED[%s], EGU0 EVENTS_TRIGGERED[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "EGU0 EVENTS_TRIGGERED[%s]: Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task\n\nEGU0 EVENTS_TRIGGERED[%s]: Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task\n\nEGU0 EVENTS_TRIGGERED[%s]: Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task\n\nEGU0 EVENTS_TRIGGERED[%s]: Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task\n\nEGU0 EVENTS_TRIGGERED[%s]: Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task\n\nEGU0 EVENTS_TRIGGERED[%s]: Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task"]
    #[inline]
    pub(crate) fn write_egu0_events_triggeredn(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write EGU0 EVENTS_TRIGGERED[%s], EGU0 EVENTS_TRIGGERED[%s], EGU0 EVENTS_TRIGGERED[%s], EGU0 EVENTS_TRIGGERED[%s], EGU0 EVENTS_TRIGGERED[%s], EGU0 EVENTS_TRIGGERED[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "EGU0 INTEN TRIGGERED0: Enable or disable interrupt for TRIGGERED[0] event\n\nEGU0 INTEN TRIGGERED0: Enable or disable interrupt for TRIGGERED[0] event\n\nEGU0 INTEN TRIGGERED0: Enable or disable interrupt for TRIGGERED[0] event\n\nEGU0 INTEN TRIGGERED0: Enable or disable interrupt for TRIGGERED[0] event\n\nEGU0 INTEN TRIGGERED0: Enable or disable interrupt for TRIGGERED[0] event\n\nEGU0 INTEN TRIGGERED0: Enable or disable interrupt for TRIGGERED[0] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered0(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED0, EGU0 INTEN TRIGGERED0, EGU0 INTEN TRIGGERED0, EGU0 INTEN TRIGGERED0, EGU0 INTEN TRIGGERED0, EGU0 INTEN TRIGGERED0 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED0: Enable or disable interrupt for TRIGGERED[0] event\n\nEGU0 INTEN TRIGGERED0: Enable or disable interrupt for TRIGGERED[0] event\n\nEGU0 INTEN TRIGGERED0: Enable or disable interrupt for TRIGGERED[0] event\n\nEGU0 INTEN TRIGGERED0: Enable or disable interrupt for TRIGGERED[0] event\n\nEGU0 INTEN TRIGGERED0: Enable or disable interrupt for TRIGGERED[0] event\n\nEGU0 INTEN TRIGGERED0: Enable or disable interrupt for TRIGGERED[0] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED0, EGU0 INTEN TRIGGERED0, EGU0 INTEN TRIGGERED0, EGU0 INTEN TRIGGERED0, EGU0 INTEN TRIGGERED0, EGU0 INTEN TRIGGERED0 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED1: Enable or disable interrupt for TRIGGERED[1] event\n\nEGU0 INTEN TRIGGERED1: Enable or disable interrupt for TRIGGERED[1] event\n\nEGU0 INTEN TRIGGERED1: Enable or disable interrupt for TRIGGERED[1] event\n\nEGU0 INTEN TRIGGERED1: Enable or disable interrupt for TRIGGERED[1] event\n\nEGU0 INTEN TRIGGERED1: Enable or disable interrupt for TRIGGERED[1] event\n\nEGU0 INTEN TRIGGERED1: Enable or disable interrupt for TRIGGERED[1] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered1(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED1, EGU0 INTEN TRIGGERED1, EGU0 INTEN TRIGGERED1, EGU0 INTEN TRIGGERED1, EGU0 INTEN TRIGGERED1, EGU0 INTEN TRIGGERED1 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED1: Enable or disable interrupt for TRIGGERED[1] event\n\nEGU0 INTEN TRIGGERED1: Enable or disable interrupt for TRIGGERED[1] event\n\nEGU0 INTEN TRIGGERED1: Enable or disable interrupt for TRIGGERED[1] event\n\nEGU0 INTEN TRIGGERED1: Enable or disable interrupt for TRIGGERED[1] event\n\nEGU0 INTEN TRIGGERED1: Enable or disable interrupt for TRIGGERED[1] event\n\nEGU0 INTEN TRIGGERED1: Enable or disable interrupt for TRIGGERED[1] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED1, EGU0 INTEN TRIGGERED1, EGU0 INTEN TRIGGERED1, EGU0 INTEN TRIGGERED1, EGU0 INTEN TRIGGERED1, EGU0 INTEN TRIGGERED1 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED2: Enable or disable interrupt for TRIGGERED[2] event\n\nEGU0 INTEN TRIGGERED2: Enable or disable interrupt for TRIGGERED[2] event\n\nEGU0 INTEN TRIGGERED2: Enable or disable interrupt for TRIGGERED[2] event\n\nEGU0 INTEN TRIGGERED2: Enable or disable interrupt for TRIGGERED[2] event\n\nEGU0 INTEN TRIGGERED2: Enable or disable interrupt for TRIGGERED[2] event\n\nEGU0 INTEN TRIGGERED2: Enable or disable interrupt for TRIGGERED[2] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered2(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED2, EGU0 INTEN TRIGGERED2, EGU0 INTEN TRIGGERED2, EGU0 INTEN TRIGGERED2, EGU0 INTEN TRIGGERED2, EGU0 INTEN TRIGGERED2 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED2: Enable or disable interrupt for TRIGGERED[2] event\n\nEGU0 INTEN TRIGGERED2: Enable or disable interrupt for TRIGGERED[2] event\n\nEGU0 INTEN TRIGGERED2: Enable or disable interrupt for TRIGGERED[2] event\n\nEGU0 INTEN TRIGGERED2: Enable or disable interrupt for TRIGGERED[2] event\n\nEGU0 INTEN TRIGGERED2: Enable or disable interrupt for TRIGGERED[2] event\n\nEGU0 INTEN TRIGGERED2: Enable or disable interrupt for TRIGGERED[2] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED2, EGU0 INTEN TRIGGERED2, EGU0 INTEN TRIGGERED2, EGU0 INTEN TRIGGERED2, EGU0 INTEN TRIGGERED2, EGU0 INTEN TRIGGERED2 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED3: Enable or disable interrupt for TRIGGERED[3] event\n\nEGU0 INTEN TRIGGERED3: Enable or disable interrupt for TRIGGERED[3] event\n\nEGU0 INTEN TRIGGERED3: Enable or disable interrupt for TRIGGERED[3] event\n\nEGU0 INTEN TRIGGERED3: Enable or disable interrupt for TRIGGERED[3] event\n\nEGU0 INTEN TRIGGERED3: Enable or disable interrupt for TRIGGERED[3] event\n\nEGU0 INTEN TRIGGERED3: Enable or disable interrupt for TRIGGERED[3] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered3(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED3, EGU0 INTEN TRIGGERED3, EGU0 INTEN TRIGGERED3, EGU0 INTEN TRIGGERED3, EGU0 INTEN TRIGGERED3, EGU0 INTEN TRIGGERED3 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED3: Enable or disable interrupt for TRIGGERED[3] event\n\nEGU0 INTEN TRIGGERED3: Enable or disable interrupt for TRIGGERED[3] event\n\nEGU0 INTEN TRIGGERED3: Enable or disable interrupt for TRIGGERED[3] event\n\nEGU0 INTEN TRIGGERED3: Enable or disable interrupt for TRIGGERED[3] event\n\nEGU0 INTEN TRIGGERED3: Enable or disable interrupt for TRIGGERED[3] event\n\nEGU0 INTEN TRIGGERED3: Enable or disable interrupt for TRIGGERED[3] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED3, EGU0 INTEN TRIGGERED3, EGU0 INTEN TRIGGERED3, EGU0 INTEN TRIGGERED3, EGU0 INTEN TRIGGERED3, EGU0 INTEN TRIGGERED3 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED4: Enable or disable interrupt for TRIGGERED[4] event\n\nEGU0 INTEN TRIGGERED4: Enable or disable interrupt for TRIGGERED[4] event\n\nEGU0 INTEN TRIGGERED4: Enable or disable interrupt for TRIGGERED[4] event\n\nEGU0 INTEN TRIGGERED4: Enable or disable interrupt for TRIGGERED[4] event\n\nEGU0 INTEN TRIGGERED4: Enable or disable interrupt for TRIGGERED[4] event\n\nEGU0 INTEN TRIGGERED4: Enable or disable interrupt for TRIGGERED[4] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered4(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED4, EGU0 INTEN TRIGGERED4, EGU0 INTEN TRIGGERED4, EGU0 INTEN TRIGGERED4, EGU0 INTEN TRIGGERED4, EGU0 INTEN TRIGGERED4 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED4: Enable or disable interrupt for TRIGGERED[4] event\n\nEGU0 INTEN TRIGGERED4: Enable or disable interrupt for TRIGGERED[4] event\n\nEGU0 INTEN TRIGGERED4: Enable or disable interrupt for TRIGGERED[4] event\n\nEGU0 INTEN TRIGGERED4: Enable or disable interrupt for TRIGGERED[4] event\n\nEGU0 INTEN TRIGGERED4: Enable or disable interrupt for TRIGGERED[4] event\n\nEGU0 INTEN TRIGGERED4: Enable or disable interrupt for TRIGGERED[4] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered4(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED4, EGU0 INTEN TRIGGERED4, EGU0 INTEN TRIGGERED4, EGU0 INTEN TRIGGERED4, EGU0 INTEN TRIGGERED4, EGU0 INTEN TRIGGERED4 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED5: Enable or disable interrupt for TRIGGERED[5] event\n\nEGU0 INTEN TRIGGERED5: Enable or disable interrupt for TRIGGERED[5] event\n\nEGU0 INTEN TRIGGERED5: Enable or disable interrupt for TRIGGERED[5] event\n\nEGU0 INTEN TRIGGERED5: Enable or disable interrupt for TRIGGERED[5] event\n\nEGU0 INTEN TRIGGERED5: Enable or disable interrupt for TRIGGERED[5] event\n\nEGU0 INTEN TRIGGERED5: Enable or disable interrupt for TRIGGERED[5] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered5(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED5, EGU0 INTEN TRIGGERED5, EGU0 INTEN TRIGGERED5, EGU0 INTEN TRIGGERED5, EGU0 INTEN TRIGGERED5, EGU0 INTEN TRIGGERED5 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED5: Enable or disable interrupt for TRIGGERED[5] event\n\nEGU0 INTEN TRIGGERED5: Enable or disable interrupt for TRIGGERED[5] event\n\nEGU0 INTEN TRIGGERED5: Enable or disable interrupt for TRIGGERED[5] event\n\nEGU0 INTEN TRIGGERED5: Enable or disable interrupt for TRIGGERED[5] event\n\nEGU0 INTEN TRIGGERED5: Enable or disable interrupt for TRIGGERED[5] event\n\nEGU0 INTEN TRIGGERED5: Enable or disable interrupt for TRIGGERED[5] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED5, EGU0 INTEN TRIGGERED5, EGU0 INTEN TRIGGERED5, EGU0 INTEN TRIGGERED5, EGU0 INTEN TRIGGERED5, EGU0 INTEN TRIGGERED5 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED6: Enable or disable interrupt for TRIGGERED[6] event\n\nEGU0 INTEN TRIGGERED6: Enable or disable interrupt for TRIGGERED[6] event\n\nEGU0 INTEN TRIGGERED6: Enable or disable interrupt for TRIGGERED[6] event\n\nEGU0 INTEN TRIGGERED6: Enable or disable interrupt for TRIGGERED[6] event\n\nEGU0 INTEN TRIGGERED6: Enable or disable interrupt for TRIGGERED[6] event\n\nEGU0 INTEN TRIGGERED6: Enable or disable interrupt for TRIGGERED[6] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered6(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED6, EGU0 INTEN TRIGGERED6, EGU0 INTEN TRIGGERED6, EGU0 INTEN TRIGGERED6, EGU0 INTEN TRIGGERED6, EGU0 INTEN TRIGGERED6 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED6: Enable or disable interrupt for TRIGGERED[6] event\n\nEGU0 INTEN TRIGGERED6: Enable or disable interrupt for TRIGGERED[6] event\n\nEGU0 INTEN TRIGGERED6: Enable or disable interrupt for TRIGGERED[6] event\n\nEGU0 INTEN TRIGGERED6: Enable or disable interrupt for TRIGGERED[6] event\n\nEGU0 INTEN TRIGGERED6: Enable or disable interrupt for TRIGGERED[6] event\n\nEGU0 INTEN TRIGGERED6: Enable or disable interrupt for TRIGGERED[6] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered6(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED6, EGU0 INTEN TRIGGERED6, EGU0 INTEN TRIGGERED6, EGU0 INTEN TRIGGERED6, EGU0 INTEN TRIGGERED6, EGU0 INTEN TRIGGERED6 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED7: Enable or disable interrupt for TRIGGERED[7] event\n\nEGU0 INTEN TRIGGERED7: Enable or disable interrupt for TRIGGERED[7] event\n\nEGU0 INTEN TRIGGERED7: Enable or disable interrupt for TRIGGERED[7] event\n\nEGU0 INTEN TRIGGERED7: Enable or disable interrupt for TRIGGERED[7] event\n\nEGU0 INTEN TRIGGERED7: Enable or disable interrupt for TRIGGERED[7] event\n\nEGU0 INTEN TRIGGERED7: Enable or disable interrupt for TRIGGERED[7] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered7(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED7, EGU0 INTEN TRIGGERED7, EGU0 INTEN TRIGGERED7, EGU0 INTEN TRIGGERED7, EGU0 INTEN TRIGGERED7, EGU0 INTEN TRIGGERED7 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED7: Enable or disable interrupt for TRIGGERED[7] event\n\nEGU0 INTEN TRIGGERED7: Enable or disable interrupt for TRIGGERED[7] event\n\nEGU0 INTEN TRIGGERED7: Enable or disable interrupt for TRIGGERED[7] event\n\nEGU0 INTEN TRIGGERED7: Enable or disable interrupt for TRIGGERED[7] event\n\nEGU0 INTEN TRIGGERED7: Enable or disable interrupt for TRIGGERED[7] event\n\nEGU0 INTEN TRIGGERED7: Enable or disable interrupt for TRIGGERED[7] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered7(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED7, EGU0 INTEN TRIGGERED7, EGU0 INTEN TRIGGERED7, EGU0 INTEN TRIGGERED7, EGU0 INTEN TRIGGERED7, EGU0 INTEN TRIGGERED7 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED8: Enable or disable interrupt for TRIGGERED[8] event\n\nEGU0 INTEN TRIGGERED8: Enable or disable interrupt for TRIGGERED[8] event\n\nEGU0 INTEN TRIGGERED8: Enable or disable interrupt for TRIGGERED[8] event\n\nEGU0 INTEN TRIGGERED8: Enable or disable interrupt for TRIGGERED[8] event\n\nEGU0 INTEN TRIGGERED8: Enable or disable interrupt for TRIGGERED[8] event\n\nEGU0 INTEN TRIGGERED8: Enable or disable interrupt for TRIGGERED[8] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered8(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED8, EGU0 INTEN TRIGGERED8, EGU0 INTEN TRIGGERED8, EGU0 INTEN TRIGGERED8, EGU0 INTEN TRIGGERED8, EGU0 INTEN TRIGGERED8 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED8: Enable or disable interrupt for TRIGGERED[8] event\n\nEGU0 INTEN TRIGGERED8: Enable or disable interrupt for TRIGGERED[8] event\n\nEGU0 INTEN TRIGGERED8: Enable or disable interrupt for TRIGGERED[8] event\n\nEGU0 INTEN TRIGGERED8: Enable or disable interrupt for TRIGGERED[8] event\n\nEGU0 INTEN TRIGGERED8: Enable or disable interrupt for TRIGGERED[8] event\n\nEGU0 INTEN TRIGGERED8: Enable or disable interrupt for TRIGGERED[8] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered8(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED8, EGU0 INTEN TRIGGERED8, EGU0 INTEN TRIGGERED8, EGU0 INTEN TRIGGERED8, EGU0 INTEN TRIGGERED8, EGU0 INTEN TRIGGERED8 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED9: Enable or disable interrupt for TRIGGERED[9] event\n\nEGU0 INTEN TRIGGERED9: Enable or disable interrupt for TRIGGERED[9] event\n\nEGU0 INTEN TRIGGERED9: Enable or disable interrupt for TRIGGERED[9] event\n\nEGU0 INTEN TRIGGERED9: Enable or disable interrupt for TRIGGERED[9] event\n\nEGU0 INTEN TRIGGERED9: Enable or disable interrupt for TRIGGERED[9] event\n\nEGU0 INTEN TRIGGERED9: Enable or disable interrupt for TRIGGERED[9] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered9(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED9, EGU0 INTEN TRIGGERED9, EGU0 INTEN TRIGGERED9, EGU0 INTEN TRIGGERED9, EGU0 INTEN TRIGGERED9, EGU0 INTEN TRIGGERED9 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED9: Enable or disable interrupt for TRIGGERED[9] event\n\nEGU0 INTEN TRIGGERED9: Enable or disable interrupt for TRIGGERED[9] event\n\nEGU0 INTEN TRIGGERED9: Enable or disable interrupt for TRIGGERED[9] event\n\nEGU0 INTEN TRIGGERED9: Enable or disable interrupt for TRIGGERED[9] event\n\nEGU0 INTEN TRIGGERED9: Enable or disable interrupt for TRIGGERED[9] event\n\nEGU0 INTEN TRIGGERED9: Enable or disable interrupt for TRIGGERED[9] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered9(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED9, EGU0 INTEN TRIGGERED9, EGU0 INTEN TRIGGERED9, EGU0 INTEN TRIGGERED9, EGU0 INTEN TRIGGERED9, EGU0 INTEN TRIGGERED9 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED10: Enable or disable interrupt for TRIGGERED[10] event\n\nEGU0 INTEN TRIGGERED10: Enable or disable interrupt for TRIGGERED[10] event\n\nEGU0 INTEN TRIGGERED10: Enable or disable interrupt for TRIGGERED[10] event\n\nEGU0 INTEN TRIGGERED10: Enable or disable interrupt for TRIGGERED[10] event\n\nEGU0 INTEN TRIGGERED10: Enable or disable interrupt for TRIGGERED[10] event\n\nEGU0 INTEN TRIGGERED10: Enable or disable interrupt for TRIGGERED[10] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered10(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED10, EGU0 INTEN TRIGGERED10, EGU0 INTEN TRIGGERED10, EGU0 INTEN TRIGGERED10, EGU0 INTEN TRIGGERED10, EGU0 INTEN TRIGGERED10 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED10: Enable or disable interrupt for TRIGGERED[10] event\n\nEGU0 INTEN TRIGGERED10: Enable or disable interrupt for TRIGGERED[10] event\n\nEGU0 INTEN TRIGGERED10: Enable or disable interrupt for TRIGGERED[10] event\n\nEGU0 INTEN TRIGGERED10: Enable or disable interrupt for TRIGGERED[10] event\n\nEGU0 INTEN TRIGGERED10: Enable or disable interrupt for TRIGGERED[10] event\n\nEGU0 INTEN TRIGGERED10: Enable or disable interrupt for TRIGGERED[10] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered10(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED10, EGU0 INTEN TRIGGERED10, EGU0 INTEN TRIGGERED10, EGU0 INTEN TRIGGERED10, EGU0 INTEN TRIGGERED10, EGU0 INTEN TRIGGERED10 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED11: Enable or disable interrupt for TRIGGERED[11] event\n\nEGU0 INTEN TRIGGERED11: Enable or disable interrupt for TRIGGERED[11] event\n\nEGU0 INTEN TRIGGERED11: Enable or disable interrupt for TRIGGERED[11] event\n\nEGU0 INTEN TRIGGERED11: Enable or disable interrupt for TRIGGERED[11] event\n\nEGU0 INTEN TRIGGERED11: Enable or disable interrupt for TRIGGERED[11] event\n\nEGU0 INTEN TRIGGERED11: Enable or disable interrupt for TRIGGERED[11] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered11(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED11, EGU0 INTEN TRIGGERED11, EGU0 INTEN TRIGGERED11, EGU0 INTEN TRIGGERED11, EGU0 INTEN TRIGGERED11, EGU0 INTEN TRIGGERED11 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED11: Enable or disable interrupt for TRIGGERED[11] event\n\nEGU0 INTEN TRIGGERED11: Enable or disable interrupt for TRIGGERED[11] event\n\nEGU0 INTEN TRIGGERED11: Enable or disable interrupt for TRIGGERED[11] event\n\nEGU0 INTEN TRIGGERED11: Enable or disable interrupt for TRIGGERED[11] event\n\nEGU0 INTEN TRIGGERED11: Enable or disable interrupt for TRIGGERED[11] event\n\nEGU0 INTEN TRIGGERED11: Enable or disable interrupt for TRIGGERED[11] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered11(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED11, EGU0 INTEN TRIGGERED11, EGU0 INTEN TRIGGERED11, EGU0 INTEN TRIGGERED11, EGU0 INTEN TRIGGERED11, EGU0 INTEN TRIGGERED11 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED12: Enable or disable interrupt for TRIGGERED[12] event\n\nEGU0 INTEN TRIGGERED12: Enable or disable interrupt for TRIGGERED[12] event\n\nEGU0 INTEN TRIGGERED12: Enable or disable interrupt for TRIGGERED[12] event\n\nEGU0 INTEN TRIGGERED12: Enable or disable interrupt for TRIGGERED[12] event\n\nEGU0 INTEN TRIGGERED12: Enable or disable interrupt for TRIGGERED[12] event\n\nEGU0 INTEN TRIGGERED12: Enable or disable interrupt for TRIGGERED[12] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered12(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED12, EGU0 INTEN TRIGGERED12, EGU0 INTEN TRIGGERED12, EGU0 INTEN TRIGGERED12, EGU0 INTEN TRIGGERED12, EGU0 INTEN TRIGGERED12 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED12: Enable or disable interrupt for TRIGGERED[12] event\n\nEGU0 INTEN TRIGGERED12: Enable or disable interrupt for TRIGGERED[12] event\n\nEGU0 INTEN TRIGGERED12: Enable or disable interrupt for TRIGGERED[12] event\n\nEGU0 INTEN TRIGGERED12: Enable or disable interrupt for TRIGGERED[12] event\n\nEGU0 INTEN TRIGGERED12: Enable or disable interrupt for TRIGGERED[12] event\n\nEGU0 INTEN TRIGGERED12: Enable or disable interrupt for TRIGGERED[12] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered12(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED12, EGU0 INTEN TRIGGERED12, EGU0 INTEN TRIGGERED12, EGU0 INTEN TRIGGERED12, EGU0 INTEN TRIGGERED12, EGU0 INTEN TRIGGERED12 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED13: Enable or disable interrupt for TRIGGERED[13] event\n\nEGU0 INTEN TRIGGERED13: Enable or disable interrupt for TRIGGERED[13] event\n\nEGU0 INTEN TRIGGERED13: Enable or disable interrupt for TRIGGERED[13] event\n\nEGU0 INTEN TRIGGERED13: Enable or disable interrupt for TRIGGERED[13] event\n\nEGU0 INTEN TRIGGERED13: Enable or disable interrupt for TRIGGERED[13] event\n\nEGU0 INTEN TRIGGERED13: Enable or disable interrupt for TRIGGERED[13] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered13(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED13, EGU0 INTEN TRIGGERED13, EGU0 INTEN TRIGGERED13, EGU0 INTEN TRIGGERED13, EGU0 INTEN TRIGGERED13, EGU0 INTEN TRIGGERED13 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED13: Enable or disable interrupt for TRIGGERED[13] event\n\nEGU0 INTEN TRIGGERED13: Enable or disable interrupt for TRIGGERED[13] event\n\nEGU0 INTEN TRIGGERED13: Enable or disable interrupt for TRIGGERED[13] event\n\nEGU0 INTEN TRIGGERED13: Enable or disable interrupt for TRIGGERED[13] event\n\nEGU0 INTEN TRIGGERED13: Enable or disable interrupt for TRIGGERED[13] event\n\nEGU0 INTEN TRIGGERED13: Enable or disable interrupt for TRIGGERED[13] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered13(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED13, EGU0 INTEN TRIGGERED13, EGU0 INTEN TRIGGERED13, EGU0 INTEN TRIGGERED13, EGU0 INTEN TRIGGERED13, EGU0 INTEN TRIGGERED13 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED14: Enable or disable interrupt for TRIGGERED[14] event\n\nEGU0 INTEN TRIGGERED14: Enable or disable interrupt for TRIGGERED[14] event\n\nEGU0 INTEN TRIGGERED14: Enable or disable interrupt for TRIGGERED[14] event\n\nEGU0 INTEN TRIGGERED14: Enable or disable interrupt for TRIGGERED[14] event\n\nEGU0 INTEN TRIGGERED14: Enable or disable interrupt for TRIGGERED[14] event\n\nEGU0 INTEN TRIGGERED14: Enable or disable interrupt for TRIGGERED[14] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered14(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED14, EGU0 INTEN TRIGGERED14, EGU0 INTEN TRIGGERED14, EGU0 INTEN TRIGGERED14, EGU0 INTEN TRIGGERED14, EGU0 INTEN TRIGGERED14 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED14: Enable or disable interrupt for TRIGGERED[14] event\n\nEGU0 INTEN TRIGGERED14: Enable or disable interrupt for TRIGGERED[14] event\n\nEGU0 INTEN TRIGGERED14: Enable or disable interrupt for TRIGGERED[14] event\n\nEGU0 INTEN TRIGGERED14: Enable or disable interrupt for TRIGGERED[14] event\n\nEGU0 INTEN TRIGGERED14: Enable or disable interrupt for TRIGGERED[14] event\n\nEGU0 INTEN TRIGGERED14: Enable or disable interrupt for TRIGGERED[14] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered14(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED14, EGU0 INTEN TRIGGERED14, EGU0 INTEN TRIGGERED14, EGU0 INTEN TRIGGERED14, EGU0 INTEN TRIGGERED14, EGU0 INTEN TRIGGERED14 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED15: Enable or disable interrupt for TRIGGERED[15] event\n\nEGU0 INTEN TRIGGERED15: Enable or disable interrupt for TRIGGERED[15] event\n\nEGU0 INTEN TRIGGERED15: Enable or disable interrupt for TRIGGERED[15] event\n\nEGU0 INTEN TRIGGERED15: Enable or disable interrupt for TRIGGERED[15] event\n\nEGU0 INTEN TRIGGERED15: Enable or disable interrupt for TRIGGERED[15] event\n\nEGU0 INTEN TRIGGERED15: Enable or disable interrupt for TRIGGERED[15] event"]
    #[inline]
    pub(crate) fn read_egu0_inten_triggered15(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTEN TRIGGERED15, EGU0 INTEN TRIGGERED15, EGU0 INTEN TRIGGERED15, EGU0 INTEN TRIGGERED15, EGU0 INTEN TRIGGERED15, EGU0 INTEN TRIGGERED15 reset value false")
    }
    #[doc = "EGU0 INTEN TRIGGERED15: Enable or disable interrupt for TRIGGERED[15] event\n\nEGU0 INTEN TRIGGERED15: Enable or disable interrupt for TRIGGERED[15] event\n\nEGU0 INTEN TRIGGERED15: Enable or disable interrupt for TRIGGERED[15] event\n\nEGU0 INTEN TRIGGERED15: Enable or disable interrupt for TRIGGERED[15] event\n\nEGU0 INTEN TRIGGERED15: Enable or disable interrupt for TRIGGERED[15] event\n\nEGU0 INTEN TRIGGERED15: Enable or disable interrupt for TRIGGERED[15] event"]
    #[inline]
    pub(crate) fn write_egu0_inten_triggered15(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTEN TRIGGERED15, EGU0 INTEN TRIGGERED15, EGU0 INTEN TRIGGERED15, EGU0 INTEN TRIGGERED15, EGU0 INTEN TRIGGERED15, EGU0 INTEN TRIGGERED15 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED0: Write '1' to Enable interrupt for TRIGGERED[0] event\n\nEGU0 INTENSET TRIGGERED0: Write '1' to Enable interrupt for TRIGGERED[0] event\n\nEGU0 INTENSET TRIGGERED0: Write '1' to Enable interrupt for TRIGGERED[0] event\n\nEGU0 INTENSET TRIGGERED0: Write '1' to Enable interrupt for TRIGGERED[0] event\n\nEGU0 INTENSET TRIGGERED0: Write '1' to Enable interrupt for TRIGGERED[0] event\n\nEGU0 INTENSET TRIGGERED0: Write '1' to Enable interrupt for TRIGGERED[0] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered0(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED0, EGU0 INTENSET TRIGGERED0, EGU0 INTENSET TRIGGERED0, EGU0 INTENSET TRIGGERED0, EGU0 INTENSET TRIGGERED0, EGU0 INTENSET TRIGGERED0 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED0: Write '1' to Enable interrupt for TRIGGERED[0] event\n\nEGU0 INTENSET TRIGGERED0: Write '1' to Enable interrupt for TRIGGERED[0] event\n\nEGU0 INTENSET TRIGGERED0: Write '1' to Enable interrupt for TRIGGERED[0] event\n\nEGU0 INTENSET TRIGGERED0: Write '1' to Enable interrupt for TRIGGERED[0] event\n\nEGU0 INTENSET TRIGGERED0: Write '1' to Enable interrupt for TRIGGERED[0] event\n\nEGU0 INTENSET TRIGGERED0: Write '1' to Enable interrupt for TRIGGERED[0] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED0, EGU0 INTENSET TRIGGERED0, EGU0 INTENSET TRIGGERED0, EGU0 INTENSET TRIGGERED0, EGU0 INTENSET TRIGGERED0, EGU0 INTENSET TRIGGERED0 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED1: Write '1' to Enable interrupt for TRIGGERED[1] event\n\nEGU0 INTENSET TRIGGERED1: Write '1' to Enable interrupt for TRIGGERED[1] event\n\nEGU0 INTENSET TRIGGERED1: Write '1' to Enable interrupt for TRIGGERED[1] event\n\nEGU0 INTENSET TRIGGERED1: Write '1' to Enable interrupt for TRIGGERED[1] event\n\nEGU0 INTENSET TRIGGERED1: Write '1' to Enable interrupt for TRIGGERED[1] event\n\nEGU0 INTENSET TRIGGERED1: Write '1' to Enable interrupt for TRIGGERED[1] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered1(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED1, EGU0 INTENSET TRIGGERED1, EGU0 INTENSET TRIGGERED1, EGU0 INTENSET TRIGGERED1, EGU0 INTENSET TRIGGERED1, EGU0 INTENSET TRIGGERED1 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED1: Write '1' to Enable interrupt for TRIGGERED[1] event\n\nEGU0 INTENSET TRIGGERED1: Write '1' to Enable interrupt for TRIGGERED[1] event\n\nEGU0 INTENSET TRIGGERED1: Write '1' to Enable interrupt for TRIGGERED[1] event\n\nEGU0 INTENSET TRIGGERED1: Write '1' to Enable interrupt for TRIGGERED[1] event\n\nEGU0 INTENSET TRIGGERED1: Write '1' to Enable interrupt for TRIGGERED[1] event\n\nEGU0 INTENSET TRIGGERED1: Write '1' to Enable interrupt for TRIGGERED[1] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED1, EGU0 INTENSET TRIGGERED1, EGU0 INTENSET TRIGGERED1, EGU0 INTENSET TRIGGERED1, EGU0 INTENSET TRIGGERED1, EGU0 INTENSET TRIGGERED1 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED2: Write '1' to Enable interrupt for TRIGGERED[2] event\n\nEGU0 INTENSET TRIGGERED2: Write '1' to Enable interrupt for TRIGGERED[2] event\n\nEGU0 INTENSET TRIGGERED2: Write '1' to Enable interrupt for TRIGGERED[2] event\n\nEGU0 INTENSET TRIGGERED2: Write '1' to Enable interrupt for TRIGGERED[2] event\n\nEGU0 INTENSET TRIGGERED2: Write '1' to Enable interrupt for TRIGGERED[2] event\n\nEGU0 INTENSET TRIGGERED2: Write '1' to Enable interrupt for TRIGGERED[2] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered2(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED2, EGU0 INTENSET TRIGGERED2, EGU0 INTENSET TRIGGERED2, EGU0 INTENSET TRIGGERED2, EGU0 INTENSET TRIGGERED2, EGU0 INTENSET TRIGGERED2 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED2: Write '1' to Enable interrupt for TRIGGERED[2] event\n\nEGU0 INTENSET TRIGGERED2: Write '1' to Enable interrupt for TRIGGERED[2] event\n\nEGU0 INTENSET TRIGGERED2: Write '1' to Enable interrupt for TRIGGERED[2] event\n\nEGU0 INTENSET TRIGGERED2: Write '1' to Enable interrupt for TRIGGERED[2] event\n\nEGU0 INTENSET TRIGGERED2: Write '1' to Enable interrupt for TRIGGERED[2] event\n\nEGU0 INTENSET TRIGGERED2: Write '1' to Enable interrupt for TRIGGERED[2] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED2, EGU0 INTENSET TRIGGERED2, EGU0 INTENSET TRIGGERED2, EGU0 INTENSET TRIGGERED2, EGU0 INTENSET TRIGGERED2, EGU0 INTENSET TRIGGERED2 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED3: Write '1' to Enable interrupt for TRIGGERED[3] event\n\nEGU0 INTENSET TRIGGERED3: Write '1' to Enable interrupt for TRIGGERED[3] event\n\nEGU0 INTENSET TRIGGERED3: Write '1' to Enable interrupt for TRIGGERED[3] event\n\nEGU0 INTENSET TRIGGERED3: Write '1' to Enable interrupt for TRIGGERED[3] event\n\nEGU0 INTENSET TRIGGERED3: Write '1' to Enable interrupt for TRIGGERED[3] event\n\nEGU0 INTENSET TRIGGERED3: Write '1' to Enable interrupt for TRIGGERED[3] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered3(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED3, EGU0 INTENSET TRIGGERED3, EGU0 INTENSET TRIGGERED3, EGU0 INTENSET TRIGGERED3, EGU0 INTENSET TRIGGERED3, EGU0 INTENSET TRIGGERED3 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED3: Write '1' to Enable interrupt for TRIGGERED[3] event\n\nEGU0 INTENSET TRIGGERED3: Write '1' to Enable interrupt for TRIGGERED[3] event\n\nEGU0 INTENSET TRIGGERED3: Write '1' to Enable interrupt for TRIGGERED[3] event\n\nEGU0 INTENSET TRIGGERED3: Write '1' to Enable interrupt for TRIGGERED[3] event\n\nEGU0 INTENSET TRIGGERED3: Write '1' to Enable interrupt for TRIGGERED[3] event\n\nEGU0 INTENSET TRIGGERED3: Write '1' to Enable interrupt for TRIGGERED[3] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED3, EGU0 INTENSET TRIGGERED3, EGU0 INTENSET TRIGGERED3, EGU0 INTENSET TRIGGERED3, EGU0 INTENSET TRIGGERED3, EGU0 INTENSET TRIGGERED3 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED4: Write '1' to Enable interrupt for TRIGGERED[4] event\n\nEGU0 INTENSET TRIGGERED4: Write '1' to Enable interrupt for TRIGGERED[4] event\n\nEGU0 INTENSET TRIGGERED4: Write '1' to Enable interrupt for TRIGGERED[4] event\n\nEGU0 INTENSET TRIGGERED4: Write '1' to Enable interrupt for TRIGGERED[4] event\n\nEGU0 INTENSET TRIGGERED4: Write '1' to Enable interrupt for TRIGGERED[4] event\n\nEGU0 INTENSET TRIGGERED4: Write '1' to Enable interrupt for TRIGGERED[4] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered4(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED4, EGU0 INTENSET TRIGGERED4, EGU0 INTENSET TRIGGERED4, EGU0 INTENSET TRIGGERED4, EGU0 INTENSET TRIGGERED4, EGU0 INTENSET TRIGGERED4 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED4: Write '1' to Enable interrupt for TRIGGERED[4] event\n\nEGU0 INTENSET TRIGGERED4: Write '1' to Enable interrupt for TRIGGERED[4] event\n\nEGU0 INTENSET TRIGGERED4: Write '1' to Enable interrupt for TRIGGERED[4] event\n\nEGU0 INTENSET TRIGGERED4: Write '1' to Enable interrupt for TRIGGERED[4] event\n\nEGU0 INTENSET TRIGGERED4: Write '1' to Enable interrupt for TRIGGERED[4] event\n\nEGU0 INTENSET TRIGGERED4: Write '1' to Enable interrupt for TRIGGERED[4] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered4(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED4, EGU0 INTENSET TRIGGERED4, EGU0 INTENSET TRIGGERED4, EGU0 INTENSET TRIGGERED4, EGU0 INTENSET TRIGGERED4, EGU0 INTENSET TRIGGERED4 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED5: Write '1' to Enable interrupt for TRIGGERED[5] event\n\nEGU0 INTENSET TRIGGERED5: Write '1' to Enable interrupt for TRIGGERED[5] event\n\nEGU0 INTENSET TRIGGERED5: Write '1' to Enable interrupt for TRIGGERED[5] event\n\nEGU0 INTENSET TRIGGERED5: Write '1' to Enable interrupt for TRIGGERED[5] event\n\nEGU0 INTENSET TRIGGERED5: Write '1' to Enable interrupt for TRIGGERED[5] event\n\nEGU0 INTENSET TRIGGERED5: Write '1' to Enable interrupt for TRIGGERED[5] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered5(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED5, EGU0 INTENSET TRIGGERED5, EGU0 INTENSET TRIGGERED5, EGU0 INTENSET TRIGGERED5, EGU0 INTENSET TRIGGERED5, EGU0 INTENSET TRIGGERED5 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED5: Write '1' to Enable interrupt for TRIGGERED[5] event\n\nEGU0 INTENSET TRIGGERED5: Write '1' to Enable interrupt for TRIGGERED[5] event\n\nEGU0 INTENSET TRIGGERED5: Write '1' to Enable interrupt for TRIGGERED[5] event\n\nEGU0 INTENSET TRIGGERED5: Write '1' to Enable interrupt for TRIGGERED[5] event\n\nEGU0 INTENSET TRIGGERED5: Write '1' to Enable interrupt for TRIGGERED[5] event\n\nEGU0 INTENSET TRIGGERED5: Write '1' to Enable interrupt for TRIGGERED[5] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED5, EGU0 INTENSET TRIGGERED5, EGU0 INTENSET TRIGGERED5, EGU0 INTENSET TRIGGERED5, EGU0 INTENSET TRIGGERED5, EGU0 INTENSET TRIGGERED5 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED6: Write '1' to Enable interrupt for TRIGGERED[6] event\n\nEGU0 INTENSET TRIGGERED6: Write '1' to Enable interrupt for TRIGGERED[6] event\n\nEGU0 INTENSET TRIGGERED6: Write '1' to Enable interrupt for TRIGGERED[6] event\n\nEGU0 INTENSET TRIGGERED6: Write '1' to Enable interrupt for TRIGGERED[6] event\n\nEGU0 INTENSET TRIGGERED6: Write '1' to Enable interrupt for TRIGGERED[6] event\n\nEGU0 INTENSET TRIGGERED6: Write '1' to Enable interrupt for TRIGGERED[6] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered6(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED6, EGU0 INTENSET TRIGGERED6, EGU0 INTENSET TRIGGERED6, EGU0 INTENSET TRIGGERED6, EGU0 INTENSET TRIGGERED6, EGU0 INTENSET TRIGGERED6 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED6: Write '1' to Enable interrupt for TRIGGERED[6] event\n\nEGU0 INTENSET TRIGGERED6: Write '1' to Enable interrupt for TRIGGERED[6] event\n\nEGU0 INTENSET TRIGGERED6: Write '1' to Enable interrupt for TRIGGERED[6] event\n\nEGU0 INTENSET TRIGGERED6: Write '1' to Enable interrupt for TRIGGERED[6] event\n\nEGU0 INTENSET TRIGGERED6: Write '1' to Enable interrupt for TRIGGERED[6] event\n\nEGU0 INTENSET TRIGGERED6: Write '1' to Enable interrupt for TRIGGERED[6] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered6(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED6, EGU0 INTENSET TRIGGERED6, EGU0 INTENSET TRIGGERED6, EGU0 INTENSET TRIGGERED6, EGU0 INTENSET TRIGGERED6, EGU0 INTENSET TRIGGERED6 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED7: Write '1' to Enable interrupt for TRIGGERED[7] event\n\nEGU0 INTENSET TRIGGERED7: Write '1' to Enable interrupt for TRIGGERED[7] event\n\nEGU0 INTENSET TRIGGERED7: Write '1' to Enable interrupt for TRIGGERED[7] event\n\nEGU0 INTENSET TRIGGERED7: Write '1' to Enable interrupt for TRIGGERED[7] event\n\nEGU0 INTENSET TRIGGERED7: Write '1' to Enable interrupt for TRIGGERED[7] event\n\nEGU0 INTENSET TRIGGERED7: Write '1' to Enable interrupt for TRIGGERED[7] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered7(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED7, EGU0 INTENSET TRIGGERED7, EGU0 INTENSET TRIGGERED7, EGU0 INTENSET TRIGGERED7, EGU0 INTENSET TRIGGERED7, EGU0 INTENSET TRIGGERED7 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED7: Write '1' to Enable interrupt for TRIGGERED[7] event\n\nEGU0 INTENSET TRIGGERED7: Write '1' to Enable interrupt for TRIGGERED[7] event\n\nEGU0 INTENSET TRIGGERED7: Write '1' to Enable interrupt for TRIGGERED[7] event\n\nEGU0 INTENSET TRIGGERED7: Write '1' to Enable interrupt for TRIGGERED[7] event\n\nEGU0 INTENSET TRIGGERED7: Write '1' to Enable interrupt for TRIGGERED[7] event\n\nEGU0 INTENSET TRIGGERED7: Write '1' to Enable interrupt for TRIGGERED[7] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered7(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED7, EGU0 INTENSET TRIGGERED7, EGU0 INTENSET TRIGGERED7, EGU0 INTENSET TRIGGERED7, EGU0 INTENSET TRIGGERED7, EGU0 INTENSET TRIGGERED7 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED8: Write '1' to Enable interrupt for TRIGGERED[8] event\n\nEGU0 INTENSET TRIGGERED8: Write '1' to Enable interrupt for TRIGGERED[8] event\n\nEGU0 INTENSET TRIGGERED8: Write '1' to Enable interrupt for TRIGGERED[8] event\n\nEGU0 INTENSET TRIGGERED8: Write '1' to Enable interrupt for TRIGGERED[8] event\n\nEGU0 INTENSET TRIGGERED8: Write '1' to Enable interrupt for TRIGGERED[8] event\n\nEGU0 INTENSET TRIGGERED8: Write '1' to Enable interrupt for TRIGGERED[8] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered8(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED8, EGU0 INTENSET TRIGGERED8, EGU0 INTENSET TRIGGERED8, EGU0 INTENSET TRIGGERED8, EGU0 INTENSET TRIGGERED8, EGU0 INTENSET TRIGGERED8 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED8: Write '1' to Enable interrupt for TRIGGERED[8] event\n\nEGU0 INTENSET TRIGGERED8: Write '1' to Enable interrupt for TRIGGERED[8] event\n\nEGU0 INTENSET TRIGGERED8: Write '1' to Enable interrupt for TRIGGERED[8] event\n\nEGU0 INTENSET TRIGGERED8: Write '1' to Enable interrupt for TRIGGERED[8] event\n\nEGU0 INTENSET TRIGGERED8: Write '1' to Enable interrupt for TRIGGERED[8] event\n\nEGU0 INTENSET TRIGGERED8: Write '1' to Enable interrupt for TRIGGERED[8] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered8(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED8, EGU0 INTENSET TRIGGERED8, EGU0 INTENSET TRIGGERED8, EGU0 INTENSET TRIGGERED8, EGU0 INTENSET TRIGGERED8, EGU0 INTENSET TRIGGERED8 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED9: Write '1' to Enable interrupt for TRIGGERED[9] event\n\nEGU0 INTENSET TRIGGERED9: Write '1' to Enable interrupt for TRIGGERED[9] event\n\nEGU0 INTENSET TRIGGERED9: Write '1' to Enable interrupt for TRIGGERED[9] event\n\nEGU0 INTENSET TRIGGERED9: Write '1' to Enable interrupt for TRIGGERED[9] event\n\nEGU0 INTENSET TRIGGERED9: Write '1' to Enable interrupt for TRIGGERED[9] event\n\nEGU0 INTENSET TRIGGERED9: Write '1' to Enable interrupt for TRIGGERED[9] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered9(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED9, EGU0 INTENSET TRIGGERED9, EGU0 INTENSET TRIGGERED9, EGU0 INTENSET TRIGGERED9, EGU0 INTENSET TRIGGERED9, EGU0 INTENSET TRIGGERED9 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED9: Write '1' to Enable interrupt for TRIGGERED[9] event\n\nEGU0 INTENSET TRIGGERED9: Write '1' to Enable interrupt for TRIGGERED[9] event\n\nEGU0 INTENSET TRIGGERED9: Write '1' to Enable interrupt for TRIGGERED[9] event\n\nEGU0 INTENSET TRIGGERED9: Write '1' to Enable interrupt for TRIGGERED[9] event\n\nEGU0 INTENSET TRIGGERED9: Write '1' to Enable interrupt for TRIGGERED[9] event\n\nEGU0 INTENSET TRIGGERED9: Write '1' to Enable interrupt for TRIGGERED[9] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered9(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED9, EGU0 INTENSET TRIGGERED9, EGU0 INTENSET TRIGGERED9, EGU0 INTENSET TRIGGERED9, EGU0 INTENSET TRIGGERED9, EGU0 INTENSET TRIGGERED9 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED10: Write '1' to Enable interrupt for TRIGGERED[10] event\n\nEGU0 INTENSET TRIGGERED10: Write '1' to Enable interrupt for TRIGGERED[10] event\n\nEGU0 INTENSET TRIGGERED10: Write '1' to Enable interrupt for TRIGGERED[10] event\n\nEGU0 INTENSET TRIGGERED10: Write '1' to Enable interrupt for TRIGGERED[10] event\n\nEGU0 INTENSET TRIGGERED10: Write '1' to Enable interrupt for TRIGGERED[10] event\n\nEGU0 INTENSET TRIGGERED10: Write '1' to Enable interrupt for TRIGGERED[10] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered10(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED10, EGU0 INTENSET TRIGGERED10, EGU0 INTENSET TRIGGERED10, EGU0 INTENSET TRIGGERED10, EGU0 INTENSET TRIGGERED10, EGU0 INTENSET TRIGGERED10 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED10: Write '1' to Enable interrupt for TRIGGERED[10] event\n\nEGU0 INTENSET TRIGGERED10: Write '1' to Enable interrupt for TRIGGERED[10] event\n\nEGU0 INTENSET TRIGGERED10: Write '1' to Enable interrupt for TRIGGERED[10] event\n\nEGU0 INTENSET TRIGGERED10: Write '1' to Enable interrupt for TRIGGERED[10] event\n\nEGU0 INTENSET TRIGGERED10: Write '1' to Enable interrupt for TRIGGERED[10] event\n\nEGU0 INTENSET TRIGGERED10: Write '1' to Enable interrupt for TRIGGERED[10] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered10(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED10, EGU0 INTENSET TRIGGERED10, EGU0 INTENSET TRIGGERED10, EGU0 INTENSET TRIGGERED10, EGU0 INTENSET TRIGGERED10, EGU0 INTENSET TRIGGERED10 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED11: Write '1' to Enable interrupt for TRIGGERED[11] event\n\nEGU0 INTENSET TRIGGERED11: Write '1' to Enable interrupt for TRIGGERED[11] event\n\nEGU0 INTENSET TRIGGERED11: Write '1' to Enable interrupt for TRIGGERED[11] event\n\nEGU0 INTENSET TRIGGERED11: Write '1' to Enable interrupt for TRIGGERED[11] event\n\nEGU0 INTENSET TRIGGERED11: Write '1' to Enable interrupt for TRIGGERED[11] event\n\nEGU0 INTENSET TRIGGERED11: Write '1' to Enable interrupt for TRIGGERED[11] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered11(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED11, EGU0 INTENSET TRIGGERED11, EGU0 INTENSET TRIGGERED11, EGU0 INTENSET TRIGGERED11, EGU0 INTENSET TRIGGERED11, EGU0 INTENSET TRIGGERED11 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED11: Write '1' to Enable interrupt for TRIGGERED[11] event\n\nEGU0 INTENSET TRIGGERED11: Write '1' to Enable interrupt for TRIGGERED[11] event\n\nEGU0 INTENSET TRIGGERED11: Write '1' to Enable interrupt for TRIGGERED[11] event\n\nEGU0 INTENSET TRIGGERED11: Write '1' to Enable interrupt for TRIGGERED[11] event\n\nEGU0 INTENSET TRIGGERED11: Write '1' to Enable interrupt for TRIGGERED[11] event\n\nEGU0 INTENSET TRIGGERED11: Write '1' to Enable interrupt for TRIGGERED[11] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered11(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED11, EGU0 INTENSET TRIGGERED11, EGU0 INTENSET TRIGGERED11, EGU0 INTENSET TRIGGERED11, EGU0 INTENSET TRIGGERED11, EGU0 INTENSET TRIGGERED11 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED12: Write '1' to Enable interrupt for TRIGGERED[12] event\n\nEGU0 INTENSET TRIGGERED12: Write '1' to Enable interrupt for TRIGGERED[12] event\n\nEGU0 INTENSET TRIGGERED12: Write '1' to Enable interrupt for TRIGGERED[12] event\n\nEGU0 INTENSET TRIGGERED12: Write '1' to Enable interrupt for TRIGGERED[12] event\n\nEGU0 INTENSET TRIGGERED12: Write '1' to Enable interrupt for TRIGGERED[12] event\n\nEGU0 INTENSET TRIGGERED12: Write '1' to Enable interrupt for TRIGGERED[12] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered12(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED12, EGU0 INTENSET TRIGGERED12, EGU0 INTENSET TRIGGERED12, EGU0 INTENSET TRIGGERED12, EGU0 INTENSET TRIGGERED12, EGU0 INTENSET TRIGGERED12 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED12: Write '1' to Enable interrupt for TRIGGERED[12] event\n\nEGU0 INTENSET TRIGGERED12: Write '1' to Enable interrupt for TRIGGERED[12] event\n\nEGU0 INTENSET TRIGGERED12: Write '1' to Enable interrupt for TRIGGERED[12] event\n\nEGU0 INTENSET TRIGGERED12: Write '1' to Enable interrupt for TRIGGERED[12] event\n\nEGU0 INTENSET TRIGGERED12: Write '1' to Enable interrupt for TRIGGERED[12] event\n\nEGU0 INTENSET TRIGGERED12: Write '1' to Enable interrupt for TRIGGERED[12] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered12(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED12, EGU0 INTENSET TRIGGERED12, EGU0 INTENSET TRIGGERED12, EGU0 INTENSET TRIGGERED12, EGU0 INTENSET TRIGGERED12, EGU0 INTENSET TRIGGERED12 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED13: Write '1' to Enable interrupt for TRIGGERED[13] event\n\nEGU0 INTENSET TRIGGERED13: Write '1' to Enable interrupt for TRIGGERED[13] event\n\nEGU0 INTENSET TRIGGERED13: Write '1' to Enable interrupt for TRIGGERED[13] event\n\nEGU0 INTENSET TRIGGERED13: Write '1' to Enable interrupt for TRIGGERED[13] event\n\nEGU0 INTENSET TRIGGERED13: Write '1' to Enable interrupt for TRIGGERED[13] event\n\nEGU0 INTENSET TRIGGERED13: Write '1' to Enable interrupt for TRIGGERED[13] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered13(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED13, EGU0 INTENSET TRIGGERED13, EGU0 INTENSET TRIGGERED13, EGU0 INTENSET TRIGGERED13, EGU0 INTENSET TRIGGERED13, EGU0 INTENSET TRIGGERED13 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED13: Write '1' to Enable interrupt for TRIGGERED[13] event\n\nEGU0 INTENSET TRIGGERED13: Write '1' to Enable interrupt for TRIGGERED[13] event\n\nEGU0 INTENSET TRIGGERED13: Write '1' to Enable interrupt for TRIGGERED[13] event\n\nEGU0 INTENSET TRIGGERED13: Write '1' to Enable interrupt for TRIGGERED[13] event\n\nEGU0 INTENSET TRIGGERED13: Write '1' to Enable interrupt for TRIGGERED[13] event\n\nEGU0 INTENSET TRIGGERED13: Write '1' to Enable interrupt for TRIGGERED[13] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered13(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED13, EGU0 INTENSET TRIGGERED13, EGU0 INTENSET TRIGGERED13, EGU0 INTENSET TRIGGERED13, EGU0 INTENSET TRIGGERED13, EGU0 INTENSET TRIGGERED13 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED14: Write '1' to Enable interrupt for TRIGGERED[14] event\n\nEGU0 INTENSET TRIGGERED14: Write '1' to Enable interrupt for TRIGGERED[14] event\n\nEGU0 INTENSET TRIGGERED14: Write '1' to Enable interrupt for TRIGGERED[14] event\n\nEGU0 INTENSET TRIGGERED14: Write '1' to Enable interrupt for TRIGGERED[14] event\n\nEGU0 INTENSET TRIGGERED14: Write '1' to Enable interrupt for TRIGGERED[14] event\n\nEGU0 INTENSET TRIGGERED14: Write '1' to Enable interrupt for TRIGGERED[14] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered14(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED14, EGU0 INTENSET TRIGGERED14, EGU0 INTENSET TRIGGERED14, EGU0 INTENSET TRIGGERED14, EGU0 INTENSET TRIGGERED14, EGU0 INTENSET TRIGGERED14 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED14: Write '1' to Enable interrupt for TRIGGERED[14] event\n\nEGU0 INTENSET TRIGGERED14: Write '1' to Enable interrupt for TRIGGERED[14] event\n\nEGU0 INTENSET TRIGGERED14: Write '1' to Enable interrupt for TRIGGERED[14] event\n\nEGU0 INTENSET TRIGGERED14: Write '1' to Enable interrupt for TRIGGERED[14] event\n\nEGU0 INTENSET TRIGGERED14: Write '1' to Enable interrupt for TRIGGERED[14] event\n\nEGU0 INTENSET TRIGGERED14: Write '1' to Enable interrupt for TRIGGERED[14] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered14(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED14, EGU0 INTENSET TRIGGERED14, EGU0 INTENSET TRIGGERED14, EGU0 INTENSET TRIGGERED14, EGU0 INTENSET TRIGGERED14, EGU0 INTENSET TRIGGERED14 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED15: Write '1' to Enable interrupt for TRIGGERED[15] event\n\nEGU0 INTENSET TRIGGERED15: Write '1' to Enable interrupt for TRIGGERED[15] event\n\nEGU0 INTENSET TRIGGERED15: Write '1' to Enable interrupt for TRIGGERED[15] event\n\nEGU0 INTENSET TRIGGERED15: Write '1' to Enable interrupt for TRIGGERED[15] event\n\nEGU0 INTENSET TRIGGERED15: Write '1' to Enable interrupt for TRIGGERED[15] event\n\nEGU0 INTENSET TRIGGERED15: Write '1' to Enable interrupt for TRIGGERED[15] event"]
    #[inline]
    pub(crate) fn read_egu0_intenset_triggered15(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENSET TRIGGERED15, EGU0 INTENSET TRIGGERED15, EGU0 INTENSET TRIGGERED15, EGU0 INTENSET TRIGGERED15, EGU0 INTENSET TRIGGERED15, EGU0 INTENSET TRIGGERED15 reset value false")
    }
    #[doc = "EGU0 INTENSET TRIGGERED15: Write '1' to Enable interrupt for TRIGGERED[15] event\n\nEGU0 INTENSET TRIGGERED15: Write '1' to Enable interrupt for TRIGGERED[15] event\n\nEGU0 INTENSET TRIGGERED15: Write '1' to Enable interrupt for TRIGGERED[15] event\n\nEGU0 INTENSET TRIGGERED15: Write '1' to Enable interrupt for TRIGGERED[15] event\n\nEGU0 INTENSET TRIGGERED15: Write '1' to Enable interrupt for TRIGGERED[15] event\n\nEGU0 INTENSET TRIGGERED15: Write '1' to Enable interrupt for TRIGGERED[15] event"]
    #[inline]
    pub(crate) fn write_egu0_intenset_triggered15(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENSET TRIGGERED15, EGU0 INTENSET TRIGGERED15, EGU0 INTENSET TRIGGERED15, EGU0 INTENSET TRIGGERED15, EGU0 INTENSET TRIGGERED15, EGU0 INTENSET TRIGGERED15 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED0: Write '1' to Disable interrupt for TRIGGERED[0] event\n\nEGU0 INTENCLR TRIGGERED0: Write '1' to Disable interrupt for TRIGGERED[0] event\n\nEGU0 INTENCLR TRIGGERED0: Write '1' to Disable interrupt for TRIGGERED[0] event\n\nEGU0 INTENCLR TRIGGERED0: Write '1' to Disable interrupt for TRIGGERED[0] event\n\nEGU0 INTENCLR TRIGGERED0: Write '1' to Disable interrupt for TRIGGERED[0] event\n\nEGU0 INTENCLR TRIGGERED0: Write '1' to Disable interrupt for TRIGGERED[0] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered0(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED0, EGU0 INTENCLR TRIGGERED0, EGU0 INTENCLR TRIGGERED0, EGU0 INTENCLR TRIGGERED0, EGU0 INTENCLR TRIGGERED0, EGU0 INTENCLR TRIGGERED0 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED0: Write '1' to Disable interrupt for TRIGGERED[0] event\n\nEGU0 INTENCLR TRIGGERED0: Write '1' to Disable interrupt for TRIGGERED[0] event\n\nEGU0 INTENCLR TRIGGERED0: Write '1' to Disable interrupt for TRIGGERED[0] event\n\nEGU0 INTENCLR TRIGGERED0: Write '1' to Disable interrupt for TRIGGERED[0] event\n\nEGU0 INTENCLR TRIGGERED0: Write '1' to Disable interrupt for TRIGGERED[0] event\n\nEGU0 INTENCLR TRIGGERED0: Write '1' to Disable interrupt for TRIGGERED[0] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED0, EGU0 INTENCLR TRIGGERED0, EGU0 INTENCLR TRIGGERED0, EGU0 INTENCLR TRIGGERED0, EGU0 INTENCLR TRIGGERED0, EGU0 INTENCLR TRIGGERED0 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED1: Write '1' to Disable interrupt for TRIGGERED[1] event\n\nEGU0 INTENCLR TRIGGERED1: Write '1' to Disable interrupt for TRIGGERED[1] event\n\nEGU0 INTENCLR TRIGGERED1: Write '1' to Disable interrupt for TRIGGERED[1] event\n\nEGU0 INTENCLR TRIGGERED1: Write '1' to Disable interrupt for TRIGGERED[1] event\n\nEGU0 INTENCLR TRIGGERED1: Write '1' to Disable interrupt for TRIGGERED[1] event\n\nEGU0 INTENCLR TRIGGERED1: Write '1' to Disable interrupt for TRIGGERED[1] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered1(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED1, EGU0 INTENCLR TRIGGERED1, EGU0 INTENCLR TRIGGERED1, EGU0 INTENCLR TRIGGERED1, EGU0 INTENCLR TRIGGERED1, EGU0 INTENCLR TRIGGERED1 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED1: Write '1' to Disable interrupt for TRIGGERED[1] event\n\nEGU0 INTENCLR TRIGGERED1: Write '1' to Disable interrupt for TRIGGERED[1] event\n\nEGU0 INTENCLR TRIGGERED1: Write '1' to Disable interrupt for TRIGGERED[1] event\n\nEGU0 INTENCLR TRIGGERED1: Write '1' to Disable interrupt for TRIGGERED[1] event\n\nEGU0 INTENCLR TRIGGERED1: Write '1' to Disable interrupt for TRIGGERED[1] event\n\nEGU0 INTENCLR TRIGGERED1: Write '1' to Disable interrupt for TRIGGERED[1] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED1, EGU0 INTENCLR TRIGGERED1, EGU0 INTENCLR TRIGGERED1, EGU0 INTENCLR TRIGGERED1, EGU0 INTENCLR TRIGGERED1, EGU0 INTENCLR TRIGGERED1 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED2: Write '1' to Disable interrupt for TRIGGERED[2] event\n\nEGU0 INTENCLR TRIGGERED2: Write '1' to Disable interrupt for TRIGGERED[2] event\n\nEGU0 INTENCLR TRIGGERED2: Write '1' to Disable interrupt for TRIGGERED[2] event\n\nEGU0 INTENCLR TRIGGERED2: Write '1' to Disable interrupt for TRIGGERED[2] event\n\nEGU0 INTENCLR TRIGGERED2: Write '1' to Disable interrupt for TRIGGERED[2] event\n\nEGU0 INTENCLR TRIGGERED2: Write '1' to Disable interrupt for TRIGGERED[2] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered2(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED2, EGU0 INTENCLR TRIGGERED2, EGU0 INTENCLR TRIGGERED2, EGU0 INTENCLR TRIGGERED2, EGU0 INTENCLR TRIGGERED2, EGU0 INTENCLR TRIGGERED2 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED2: Write '1' to Disable interrupt for TRIGGERED[2] event\n\nEGU0 INTENCLR TRIGGERED2: Write '1' to Disable interrupt for TRIGGERED[2] event\n\nEGU0 INTENCLR TRIGGERED2: Write '1' to Disable interrupt for TRIGGERED[2] event\n\nEGU0 INTENCLR TRIGGERED2: Write '1' to Disable interrupt for TRIGGERED[2] event\n\nEGU0 INTENCLR TRIGGERED2: Write '1' to Disable interrupt for TRIGGERED[2] event\n\nEGU0 INTENCLR TRIGGERED2: Write '1' to Disable interrupt for TRIGGERED[2] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED2, EGU0 INTENCLR TRIGGERED2, EGU0 INTENCLR TRIGGERED2, EGU0 INTENCLR TRIGGERED2, EGU0 INTENCLR TRIGGERED2, EGU0 INTENCLR TRIGGERED2 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED3: Write '1' to Disable interrupt for TRIGGERED[3] event\n\nEGU0 INTENCLR TRIGGERED3: Write '1' to Disable interrupt for TRIGGERED[3] event\n\nEGU0 INTENCLR TRIGGERED3: Write '1' to Disable interrupt for TRIGGERED[3] event\n\nEGU0 INTENCLR TRIGGERED3: Write '1' to Disable interrupt for TRIGGERED[3] event\n\nEGU0 INTENCLR TRIGGERED3: Write '1' to Disable interrupt for TRIGGERED[3] event\n\nEGU0 INTENCLR TRIGGERED3: Write '1' to Disable interrupt for TRIGGERED[3] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered3(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED3, EGU0 INTENCLR TRIGGERED3, EGU0 INTENCLR TRIGGERED3, EGU0 INTENCLR TRIGGERED3, EGU0 INTENCLR TRIGGERED3, EGU0 INTENCLR TRIGGERED3 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED3: Write '1' to Disable interrupt for TRIGGERED[3] event\n\nEGU0 INTENCLR TRIGGERED3: Write '1' to Disable interrupt for TRIGGERED[3] event\n\nEGU0 INTENCLR TRIGGERED3: Write '1' to Disable interrupt for TRIGGERED[3] event\n\nEGU0 INTENCLR TRIGGERED3: Write '1' to Disable interrupt for TRIGGERED[3] event\n\nEGU0 INTENCLR TRIGGERED3: Write '1' to Disable interrupt for TRIGGERED[3] event\n\nEGU0 INTENCLR TRIGGERED3: Write '1' to Disable interrupt for TRIGGERED[3] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED3, EGU0 INTENCLR TRIGGERED3, EGU0 INTENCLR TRIGGERED3, EGU0 INTENCLR TRIGGERED3, EGU0 INTENCLR TRIGGERED3, EGU0 INTENCLR TRIGGERED3 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED4: Write '1' to Disable interrupt for TRIGGERED[4] event\n\nEGU0 INTENCLR TRIGGERED4: Write '1' to Disable interrupt for TRIGGERED[4] event\n\nEGU0 INTENCLR TRIGGERED4: Write '1' to Disable interrupt for TRIGGERED[4] event\n\nEGU0 INTENCLR TRIGGERED4: Write '1' to Disable interrupt for TRIGGERED[4] event\n\nEGU0 INTENCLR TRIGGERED4: Write '1' to Disable interrupt for TRIGGERED[4] event\n\nEGU0 INTENCLR TRIGGERED4: Write '1' to Disable interrupt for TRIGGERED[4] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered4(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED4, EGU0 INTENCLR TRIGGERED4, EGU0 INTENCLR TRIGGERED4, EGU0 INTENCLR TRIGGERED4, EGU0 INTENCLR TRIGGERED4, EGU0 INTENCLR TRIGGERED4 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED4: Write '1' to Disable interrupt for TRIGGERED[4] event\n\nEGU0 INTENCLR TRIGGERED4: Write '1' to Disable interrupt for TRIGGERED[4] event\n\nEGU0 INTENCLR TRIGGERED4: Write '1' to Disable interrupt for TRIGGERED[4] event\n\nEGU0 INTENCLR TRIGGERED4: Write '1' to Disable interrupt for TRIGGERED[4] event\n\nEGU0 INTENCLR TRIGGERED4: Write '1' to Disable interrupt for TRIGGERED[4] event\n\nEGU0 INTENCLR TRIGGERED4: Write '1' to Disable interrupt for TRIGGERED[4] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered4(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED4, EGU0 INTENCLR TRIGGERED4, EGU0 INTENCLR TRIGGERED4, EGU0 INTENCLR TRIGGERED4, EGU0 INTENCLR TRIGGERED4, EGU0 INTENCLR TRIGGERED4 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED5: Write '1' to Disable interrupt for TRIGGERED[5] event\n\nEGU0 INTENCLR TRIGGERED5: Write '1' to Disable interrupt for TRIGGERED[5] event\n\nEGU0 INTENCLR TRIGGERED5: Write '1' to Disable interrupt for TRIGGERED[5] event\n\nEGU0 INTENCLR TRIGGERED5: Write '1' to Disable interrupt for TRIGGERED[5] event\n\nEGU0 INTENCLR TRIGGERED5: Write '1' to Disable interrupt for TRIGGERED[5] event\n\nEGU0 INTENCLR TRIGGERED5: Write '1' to Disable interrupt for TRIGGERED[5] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered5(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED5, EGU0 INTENCLR TRIGGERED5, EGU0 INTENCLR TRIGGERED5, EGU0 INTENCLR TRIGGERED5, EGU0 INTENCLR TRIGGERED5, EGU0 INTENCLR TRIGGERED5 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED5: Write '1' to Disable interrupt for TRIGGERED[5] event\n\nEGU0 INTENCLR TRIGGERED5: Write '1' to Disable interrupt for TRIGGERED[5] event\n\nEGU0 INTENCLR TRIGGERED5: Write '1' to Disable interrupt for TRIGGERED[5] event\n\nEGU0 INTENCLR TRIGGERED5: Write '1' to Disable interrupt for TRIGGERED[5] event\n\nEGU0 INTENCLR TRIGGERED5: Write '1' to Disable interrupt for TRIGGERED[5] event\n\nEGU0 INTENCLR TRIGGERED5: Write '1' to Disable interrupt for TRIGGERED[5] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED5, EGU0 INTENCLR TRIGGERED5, EGU0 INTENCLR TRIGGERED5, EGU0 INTENCLR TRIGGERED5, EGU0 INTENCLR TRIGGERED5, EGU0 INTENCLR TRIGGERED5 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED6: Write '1' to Disable interrupt for TRIGGERED[6] event\n\nEGU0 INTENCLR TRIGGERED6: Write '1' to Disable interrupt for TRIGGERED[6] event\n\nEGU0 INTENCLR TRIGGERED6: Write '1' to Disable interrupt for TRIGGERED[6] event\n\nEGU0 INTENCLR TRIGGERED6: Write '1' to Disable interrupt for TRIGGERED[6] event\n\nEGU0 INTENCLR TRIGGERED6: Write '1' to Disable interrupt for TRIGGERED[6] event\n\nEGU0 INTENCLR TRIGGERED6: Write '1' to Disable interrupt for TRIGGERED[6] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered6(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED6, EGU0 INTENCLR TRIGGERED6, EGU0 INTENCLR TRIGGERED6, EGU0 INTENCLR TRIGGERED6, EGU0 INTENCLR TRIGGERED6, EGU0 INTENCLR TRIGGERED6 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED6: Write '1' to Disable interrupt for TRIGGERED[6] event\n\nEGU0 INTENCLR TRIGGERED6: Write '1' to Disable interrupt for TRIGGERED[6] event\n\nEGU0 INTENCLR TRIGGERED6: Write '1' to Disable interrupt for TRIGGERED[6] event\n\nEGU0 INTENCLR TRIGGERED6: Write '1' to Disable interrupt for TRIGGERED[6] event\n\nEGU0 INTENCLR TRIGGERED6: Write '1' to Disable interrupt for TRIGGERED[6] event\n\nEGU0 INTENCLR TRIGGERED6: Write '1' to Disable interrupt for TRIGGERED[6] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered6(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED6, EGU0 INTENCLR TRIGGERED6, EGU0 INTENCLR TRIGGERED6, EGU0 INTENCLR TRIGGERED6, EGU0 INTENCLR TRIGGERED6, EGU0 INTENCLR TRIGGERED6 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED7: Write '1' to Disable interrupt for TRIGGERED[7] event\n\nEGU0 INTENCLR TRIGGERED7: Write '1' to Disable interrupt for TRIGGERED[7] event\n\nEGU0 INTENCLR TRIGGERED7: Write '1' to Disable interrupt for TRIGGERED[7] event\n\nEGU0 INTENCLR TRIGGERED7: Write '1' to Disable interrupt for TRIGGERED[7] event\n\nEGU0 INTENCLR TRIGGERED7: Write '1' to Disable interrupt for TRIGGERED[7] event\n\nEGU0 INTENCLR TRIGGERED7: Write '1' to Disable interrupt for TRIGGERED[7] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered7(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED7, EGU0 INTENCLR TRIGGERED7, EGU0 INTENCLR TRIGGERED7, EGU0 INTENCLR TRIGGERED7, EGU0 INTENCLR TRIGGERED7, EGU0 INTENCLR TRIGGERED7 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED7: Write '1' to Disable interrupt for TRIGGERED[7] event\n\nEGU0 INTENCLR TRIGGERED7: Write '1' to Disable interrupt for TRIGGERED[7] event\n\nEGU0 INTENCLR TRIGGERED7: Write '1' to Disable interrupt for TRIGGERED[7] event\n\nEGU0 INTENCLR TRIGGERED7: Write '1' to Disable interrupt for TRIGGERED[7] event\n\nEGU0 INTENCLR TRIGGERED7: Write '1' to Disable interrupt for TRIGGERED[7] event\n\nEGU0 INTENCLR TRIGGERED7: Write '1' to Disable interrupt for TRIGGERED[7] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered7(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED7, EGU0 INTENCLR TRIGGERED7, EGU0 INTENCLR TRIGGERED7, EGU0 INTENCLR TRIGGERED7, EGU0 INTENCLR TRIGGERED7, EGU0 INTENCLR TRIGGERED7 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED8: Write '1' to Disable interrupt for TRIGGERED[8] event\n\nEGU0 INTENCLR TRIGGERED8: Write '1' to Disable interrupt for TRIGGERED[8] event\n\nEGU0 INTENCLR TRIGGERED8: Write '1' to Disable interrupt for TRIGGERED[8] event\n\nEGU0 INTENCLR TRIGGERED8: Write '1' to Disable interrupt for TRIGGERED[8] event\n\nEGU0 INTENCLR TRIGGERED8: Write '1' to Disable interrupt for TRIGGERED[8] event\n\nEGU0 INTENCLR TRIGGERED8: Write '1' to Disable interrupt for TRIGGERED[8] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered8(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED8, EGU0 INTENCLR TRIGGERED8, EGU0 INTENCLR TRIGGERED8, EGU0 INTENCLR TRIGGERED8, EGU0 INTENCLR TRIGGERED8, EGU0 INTENCLR TRIGGERED8 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED8: Write '1' to Disable interrupt for TRIGGERED[8] event\n\nEGU0 INTENCLR TRIGGERED8: Write '1' to Disable interrupt for TRIGGERED[8] event\n\nEGU0 INTENCLR TRIGGERED8: Write '1' to Disable interrupt for TRIGGERED[8] event\n\nEGU0 INTENCLR TRIGGERED8: Write '1' to Disable interrupt for TRIGGERED[8] event\n\nEGU0 INTENCLR TRIGGERED8: Write '1' to Disable interrupt for TRIGGERED[8] event\n\nEGU0 INTENCLR TRIGGERED8: Write '1' to Disable interrupt for TRIGGERED[8] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered8(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED8, EGU0 INTENCLR TRIGGERED8, EGU0 INTENCLR TRIGGERED8, EGU0 INTENCLR TRIGGERED8, EGU0 INTENCLR TRIGGERED8, EGU0 INTENCLR TRIGGERED8 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED9: Write '1' to Disable interrupt for TRIGGERED[9] event\n\nEGU0 INTENCLR TRIGGERED9: Write '1' to Disable interrupt for TRIGGERED[9] event\n\nEGU0 INTENCLR TRIGGERED9: Write '1' to Disable interrupt for TRIGGERED[9] event\n\nEGU0 INTENCLR TRIGGERED9: Write '1' to Disable interrupt for TRIGGERED[9] event\n\nEGU0 INTENCLR TRIGGERED9: Write '1' to Disable interrupt for TRIGGERED[9] event\n\nEGU0 INTENCLR TRIGGERED9: Write '1' to Disable interrupt for TRIGGERED[9] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered9(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED9, EGU0 INTENCLR TRIGGERED9, EGU0 INTENCLR TRIGGERED9, EGU0 INTENCLR TRIGGERED9, EGU0 INTENCLR TRIGGERED9, EGU0 INTENCLR TRIGGERED9 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED9: Write '1' to Disable interrupt for TRIGGERED[9] event\n\nEGU0 INTENCLR TRIGGERED9: Write '1' to Disable interrupt for TRIGGERED[9] event\n\nEGU0 INTENCLR TRIGGERED9: Write '1' to Disable interrupt for TRIGGERED[9] event\n\nEGU0 INTENCLR TRIGGERED9: Write '1' to Disable interrupt for TRIGGERED[9] event\n\nEGU0 INTENCLR TRIGGERED9: Write '1' to Disable interrupt for TRIGGERED[9] event\n\nEGU0 INTENCLR TRIGGERED9: Write '1' to Disable interrupt for TRIGGERED[9] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered9(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED9, EGU0 INTENCLR TRIGGERED9, EGU0 INTENCLR TRIGGERED9, EGU0 INTENCLR TRIGGERED9, EGU0 INTENCLR TRIGGERED9, EGU0 INTENCLR TRIGGERED9 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED10: Write '1' to Disable interrupt for TRIGGERED[10] event\n\nEGU0 INTENCLR TRIGGERED10: Write '1' to Disable interrupt for TRIGGERED[10] event\n\nEGU0 INTENCLR TRIGGERED10: Write '1' to Disable interrupt for TRIGGERED[10] event\n\nEGU0 INTENCLR TRIGGERED10: Write '1' to Disable interrupt for TRIGGERED[10] event\n\nEGU0 INTENCLR TRIGGERED10: Write '1' to Disable interrupt for TRIGGERED[10] event\n\nEGU0 INTENCLR TRIGGERED10: Write '1' to Disable interrupt for TRIGGERED[10] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered10(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED10, EGU0 INTENCLR TRIGGERED10, EGU0 INTENCLR TRIGGERED10, EGU0 INTENCLR TRIGGERED10, EGU0 INTENCLR TRIGGERED10, EGU0 INTENCLR TRIGGERED10 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED10: Write '1' to Disable interrupt for TRIGGERED[10] event\n\nEGU0 INTENCLR TRIGGERED10: Write '1' to Disable interrupt for TRIGGERED[10] event\n\nEGU0 INTENCLR TRIGGERED10: Write '1' to Disable interrupt for TRIGGERED[10] event\n\nEGU0 INTENCLR TRIGGERED10: Write '1' to Disable interrupt for TRIGGERED[10] event\n\nEGU0 INTENCLR TRIGGERED10: Write '1' to Disable interrupt for TRIGGERED[10] event\n\nEGU0 INTENCLR TRIGGERED10: Write '1' to Disable interrupt for TRIGGERED[10] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered10(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED10, EGU0 INTENCLR TRIGGERED10, EGU0 INTENCLR TRIGGERED10, EGU0 INTENCLR TRIGGERED10, EGU0 INTENCLR TRIGGERED10, EGU0 INTENCLR TRIGGERED10 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED11: Write '1' to Disable interrupt for TRIGGERED[11] event\n\nEGU0 INTENCLR TRIGGERED11: Write '1' to Disable interrupt for TRIGGERED[11] event\n\nEGU0 INTENCLR TRIGGERED11: Write '1' to Disable interrupt for TRIGGERED[11] event\n\nEGU0 INTENCLR TRIGGERED11: Write '1' to Disable interrupt for TRIGGERED[11] event\n\nEGU0 INTENCLR TRIGGERED11: Write '1' to Disable interrupt for TRIGGERED[11] event\n\nEGU0 INTENCLR TRIGGERED11: Write '1' to Disable interrupt for TRIGGERED[11] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered11(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED11, EGU0 INTENCLR TRIGGERED11, EGU0 INTENCLR TRIGGERED11, EGU0 INTENCLR TRIGGERED11, EGU0 INTENCLR TRIGGERED11, EGU0 INTENCLR TRIGGERED11 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED11: Write '1' to Disable interrupt for TRIGGERED[11] event\n\nEGU0 INTENCLR TRIGGERED11: Write '1' to Disable interrupt for TRIGGERED[11] event\n\nEGU0 INTENCLR TRIGGERED11: Write '1' to Disable interrupt for TRIGGERED[11] event\n\nEGU0 INTENCLR TRIGGERED11: Write '1' to Disable interrupt for TRIGGERED[11] event\n\nEGU0 INTENCLR TRIGGERED11: Write '1' to Disable interrupt for TRIGGERED[11] event\n\nEGU0 INTENCLR TRIGGERED11: Write '1' to Disable interrupt for TRIGGERED[11] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered11(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED11, EGU0 INTENCLR TRIGGERED11, EGU0 INTENCLR TRIGGERED11, EGU0 INTENCLR TRIGGERED11, EGU0 INTENCLR TRIGGERED11, EGU0 INTENCLR TRIGGERED11 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED12: Write '1' to Disable interrupt for TRIGGERED[12] event\n\nEGU0 INTENCLR TRIGGERED12: Write '1' to Disable interrupt for TRIGGERED[12] event\n\nEGU0 INTENCLR TRIGGERED12: Write '1' to Disable interrupt for TRIGGERED[12] event\n\nEGU0 INTENCLR TRIGGERED12: Write '1' to Disable interrupt for TRIGGERED[12] event\n\nEGU0 INTENCLR TRIGGERED12: Write '1' to Disable interrupt for TRIGGERED[12] event\n\nEGU0 INTENCLR TRIGGERED12: Write '1' to Disable interrupt for TRIGGERED[12] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered12(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED12, EGU0 INTENCLR TRIGGERED12, EGU0 INTENCLR TRIGGERED12, EGU0 INTENCLR TRIGGERED12, EGU0 INTENCLR TRIGGERED12, EGU0 INTENCLR TRIGGERED12 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED12: Write '1' to Disable interrupt for TRIGGERED[12] event\n\nEGU0 INTENCLR TRIGGERED12: Write '1' to Disable interrupt for TRIGGERED[12] event\n\nEGU0 INTENCLR TRIGGERED12: Write '1' to Disable interrupt for TRIGGERED[12] event\n\nEGU0 INTENCLR TRIGGERED12: Write '1' to Disable interrupt for TRIGGERED[12] event\n\nEGU0 INTENCLR TRIGGERED12: Write '1' to Disable interrupt for TRIGGERED[12] event\n\nEGU0 INTENCLR TRIGGERED12: Write '1' to Disable interrupt for TRIGGERED[12] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered12(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED12, EGU0 INTENCLR TRIGGERED12, EGU0 INTENCLR TRIGGERED12, EGU0 INTENCLR TRIGGERED12, EGU0 INTENCLR TRIGGERED12, EGU0 INTENCLR TRIGGERED12 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED13: Write '1' to Disable interrupt for TRIGGERED[13] event\n\nEGU0 INTENCLR TRIGGERED13: Write '1' to Disable interrupt for TRIGGERED[13] event\n\nEGU0 INTENCLR TRIGGERED13: Write '1' to Disable interrupt for TRIGGERED[13] event\n\nEGU0 INTENCLR TRIGGERED13: Write '1' to Disable interrupt for TRIGGERED[13] event\n\nEGU0 INTENCLR TRIGGERED13: Write '1' to Disable interrupt for TRIGGERED[13] event\n\nEGU0 INTENCLR TRIGGERED13: Write '1' to Disable interrupt for TRIGGERED[13] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered13(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED13, EGU0 INTENCLR TRIGGERED13, EGU0 INTENCLR TRIGGERED13, EGU0 INTENCLR TRIGGERED13, EGU0 INTENCLR TRIGGERED13, EGU0 INTENCLR TRIGGERED13 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED13: Write '1' to Disable interrupt for TRIGGERED[13] event\n\nEGU0 INTENCLR TRIGGERED13: Write '1' to Disable interrupt for TRIGGERED[13] event\n\nEGU0 INTENCLR TRIGGERED13: Write '1' to Disable interrupt for TRIGGERED[13] event\n\nEGU0 INTENCLR TRIGGERED13: Write '1' to Disable interrupt for TRIGGERED[13] event\n\nEGU0 INTENCLR TRIGGERED13: Write '1' to Disable interrupt for TRIGGERED[13] event\n\nEGU0 INTENCLR TRIGGERED13: Write '1' to Disable interrupt for TRIGGERED[13] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered13(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED13, EGU0 INTENCLR TRIGGERED13, EGU0 INTENCLR TRIGGERED13, EGU0 INTENCLR TRIGGERED13, EGU0 INTENCLR TRIGGERED13, EGU0 INTENCLR TRIGGERED13 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED14: Write '1' to Disable interrupt for TRIGGERED[14] event\n\nEGU0 INTENCLR TRIGGERED14: Write '1' to Disable interrupt for TRIGGERED[14] event\n\nEGU0 INTENCLR TRIGGERED14: Write '1' to Disable interrupt for TRIGGERED[14] event\n\nEGU0 INTENCLR TRIGGERED14: Write '1' to Disable interrupt for TRIGGERED[14] event\n\nEGU0 INTENCLR TRIGGERED14: Write '1' to Disable interrupt for TRIGGERED[14] event\n\nEGU0 INTENCLR TRIGGERED14: Write '1' to Disable interrupt for TRIGGERED[14] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered14(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED14, EGU0 INTENCLR TRIGGERED14, EGU0 INTENCLR TRIGGERED14, EGU0 INTENCLR TRIGGERED14, EGU0 INTENCLR TRIGGERED14, EGU0 INTENCLR TRIGGERED14 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED14: Write '1' to Disable interrupt for TRIGGERED[14] event\n\nEGU0 INTENCLR TRIGGERED14: Write '1' to Disable interrupt for TRIGGERED[14] event\n\nEGU0 INTENCLR TRIGGERED14: Write '1' to Disable interrupt for TRIGGERED[14] event\n\nEGU0 INTENCLR TRIGGERED14: Write '1' to Disable interrupt for TRIGGERED[14] event\n\nEGU0 INTENCLR TRIGGERED14: Write '1' to Disable interrupt for TRIGGERED[14] event\n\nEGU0 INTENCLR TRIGGERED14: Write '1' to Disable interrupt for TRIGGERED[14] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered14(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED14, EGU0 INTENCLR TRIGGERED14, EGU0 INTENCLR TRIGGERED14, EGU0 INTENCLR TRIGGERED14, EGU0 INTENCLR TRIGGERED14, EGU0 INTENCLR TRIGGERED14 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED15: Write '1' to Disable interrupt for TRIGGERED[15] event\n\nEGU0 INTENCLR TRIGGERED15: Write '1' to Disable interrupt for TRIGGERED[15] event\n\nEGU0 INTENCLR TRIGGERED15: Write '1' to Disable interrupt for TRIGGERED[15] event\n\nEGU0 INTENCLR TRIGGERED15: Write '1' to Disable interrupt for TRIGGERED[15] event\n\nEGU0 INTENCLR TRIGGERED15: Write '1' to Disable interrupt for TRIGGERED[15] event\n\nEGU0 INTENCLR TRIGGERED15: Write '1' to Disable interrupt for TRIGGERED[15] event"]
    #[inline]
    pub(crate) fn read_egu0_intenclr_triggered15(&self) -> MemResult<bool> {
        todo ! ("read EGU0 INTENCLR TRIGGERED15, EGU0 INTENCLR TRIGGERED15, EGU0 INTENCLR TRIGGERED15, EGU0 INTENCLR TRIGGERED15, EGU0 INTENCLR TRIGGERED15, EGU0 INTENCLR TRIGGERED15 reset value false")
    }
    #[doc = "EGU0 INTENCLR TRIGGERED15: Write '1' to Disable interrupt for TRIGGERED[15] event\n\nEGU0 INTENCLR TRIGGERED15: Write '1' to Disable interrupt for TRIGGERED[15] event\n\nEGU0 INTENCLR TRIGGERED15: Write '1' to Disable interrupt for TRIGGERED[15] event\n\nEGU0 INTENCLR TRIGGERED15: Write '1' to Disable interrupt for TRIGGERED[15] event\n\nEGU0 INTENCLR TRIGGERED15: Write '1' to Disable interrupt for TRIGGERED[15] event\n\nEGU0 INTENCLR TRIGGERED15: Write '1' to Disable interrupt for TRIGGERED[15] event"]
    #[inline]
    pub(crate) fn write_egu0_intenclr_triggered15(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write EGU0 INTENCLR TRIGGERED15, EGU0 INTENCLR TRIGGERED15, EGU0 INTENCLR TRIGGERED15, EGU0 INTENCLR TRIGGERED15, EGU0 INTENCLR TRIGGERED15, EGU0 INTENCLR TRIGGERED15 reset value false")
    }
    #[doc = "TIMER3 TASKS_START: Start Timer\n\nTIMER3 TASKS_START: Start Timer"]
    #[inline]
    pub(crate) fn write_timer3_tasks_start(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 TASKS_START, TIMER3 TASKS_START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER3 TASKS_STOP: Stop Timer\n\nTIMER3 TASKS_STOP: Stop Timer"]
    #[inline]
    pub(crate) fn write_timer3_tasks_stop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 TASKS_STOP, TIMER3 TASKS_STOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER3 TASKS_COUNT: Increment Timer (Counter mode only)\n\nTIMER3 TASKS_COUNT: Increment Timer (Counter mode only)"]
    #[inline]
    pub(crate) fn write_timer3_tasks_count(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 TASKS_COUNT, TIMER3 TASKS_COUNT reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER3 TASKS_CLEAR: Clear time\n\nTIMER3 TASKS_CLEAR: Clear time"]
    #[inline]
    pub(crate) fn write_timer3_tasks_clear(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 TASKS_CLEAR, TIMER3 TASKS_CLEAR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER3 TASKS_SHUTDOWN: Deprecated register -  Shut down timer\n\nTIMER3 TASKS_SHUTDOWN: Deprecated register -  Shut down timer"]
    #[inline]
    pub(crate) fn write_timer3_tasks_shutdown(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 TASKS_SHUTDOWN, TIMER3 TASKS_SHUTDOWN reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER3 TASKS_CAPTURE[%s]: Description collection[0]:  Capture Timer value to CC[0] register\n\nTIMER3 TASKS_CAPTURE[%s]: Description collection[0]:  Capture Timer value to CC[0] register"]
    #[inline]
    pub(crate) fn write_timer3_tasks_capturen(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 TASKS_CAPTURE[%s], TIMER3 TASKS_CAPTURE[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER3 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match\n\nTIMER3 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match"]
    #[inline]
    pub(crate) fn read_timer3_events_comparen(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo ! ("read TIMER3 EVENTS_COMPARE[%s], TIMER3 EVENTS_COMPARE[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER3 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match\n\nTIMER3 EVENTS_COMPARE[%s]: Description collection[0]:  Compare event on CC[0] match"]
    #[inline]
    pub(crate) fn write_timer3_events_comparen(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 EVENTS_COMPARE[%s], TIMER3 EVENTS_COMPARE[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER3 SHORTS COMPARE0_CLEAR: Shortcut between COMPARE[0] event and CLEAR task\n\nTIMER3 SHORTS COMPARE0_CLEAR: Shortcut between COMPARE[0] event and CLEAR task"]
    #[inline]
    pub(crate) fn read_timer3_shorts_compare0_clear(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 SHORTS COMPARE0_CLEAR, TIMER3 SHORTS COMPARE0_CLEAR reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE0_CLEAR: Shortcut between COMPARE[0] event and CLEAR task\n\nTIMER3 SHORTS COMPARE0_CLEAR: Shortcut between COMPARE[0] event and CLEAR task"]
    #[inline]
    pub(crate) fn write_timer3_shorts_compare0_clear(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 SHORTS COMPARE0_CLEAR, TIMER3 SHORTS COMPARE0_CLEAR reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE1_CLEAR: Shortcut between COMPARE[1] event and CLEAR task\n\nTIMER3 SHORTS COMPARE1_CLEAR: Shortcut between COMPARE[1] event and CLEAR task"]
    #[inline]
    pub(crate) fn read_timer3_shorts_compare1_clear(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 SHORTS COMPARE1_CLEAR, TIMER3 SHORTS COMPARE1_CLEAR reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE1_CLEAR: Shortcut between COMPARE[1] event and CLEAR task\n\nTIMER3 SHORTS COMPARE1_CLEAR: Shortcut between COMPARE[1] event and CLEAR task"]
    #[inline]
    pub(crate) fn write_timer3_shorts_compare1_clear(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 SHORTS COMPARE1_CLEAR, TIMER3 SHORTS COMPARE1_CLEAR reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE2_CLEAR: Shortcut between COMPARE[2] event and CLEAR task\n\nTIMER3 SHORTS COMPARE2_CLEAR: Shortcut between COMPARE[2] event and CLEAR task"]
    #[inline]
    pub(crate) fn read_timer3_shorts_compare2_clear(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 SHORTS COMPARE2_CLEAR, TIMER3 SHORTS COMPARE2_CLEAR reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE2_CLEAR: Shortcut between COMPARE[2] event and CLEAR task\n\nTIMER3 SHORTS COMPARE2_CLEAR: Shortcut between COMPARE[2] event and CLEAR task"]
    #[inline]
    pub(crate) fn write_timer3_shorts_compare2_clear(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 SHORTS COMPARE2_CLEAR, TIMER3 SHORTS COMPARE2_CLEAR reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE3_CLEAR: Shortcut between COMPARE[3] event and CLEAR task\n\nTIMER3 SHORTS COMPARE3_CLEAR: Shortcut between COMPARE[3] event and CLEAR task"]
    #[inline]
    pub(crate) fn read_timer3_shorts_compare3_clear(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 SHORTS COMPARE3_CLEAR, TIMER3 SHORTS COMPARE3_CLEAR reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE3_CLEAR: Shortcut between COMPARE[3] event and CLEAR task\n\nTIMER3 SHORTS COMPARE3_CLEAR: Shortcut between COMPARE[3] event and CLEAR task"]
    #[inline]
    pub(crate) fn write_timer3_shorts_compare3_clear(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 SHORTS COMPARE3_CLEAR, TIMER3 SHORTS COMPARE3_CLEAR reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE4_CLEAR: Shortcut between COMPARE[4] event and CLEAR task\n\nTIMER3 SHORTS COMPARE4_CLEAR: Shortcut between COMPARE[4] event and CLEAR task"]
    #[inline]
    pub(crate) fn read_timer3_shorts_compare4_clear(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 SHORTS COMPARE4_CLEAR, TIMER3 SHORTS COMPARE4_CLEAR reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE4_CLEAR: Shortcut between COMPARE[4] event and CLEAR task\n\nTIMER3 SHORTS COMPARE4_CLEAR: Shortcut between COMPARE[4] event and CLEAR task"]
    #[inline]
    pub(crate) fn write_timer3_shorts_compare4_clear(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 SHORTS COMPARE4_CLEAR, TIMER3 SHORTS COMPARE4_CLEAR reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE5_CLEAR: Shortcut between COMPARE[5] event and CLEAR task\n\nTIMER3 SHORTS COMPARE5_CLEAR: Shortcut between COMPARE[5] event and CLEAR task"]
    #[inline]
    pub(crate) fn read_timer3_shorts_compare5_clear(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 SHORTS COMPARE5_CLEAR, TIMER3 SHORTS COMPARE5_CLEAR reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE5_CLEAR: Shortcut between COMPARE[5] event and CLEAR task\n\nTIMER3 SHORTS COMPARE5_CLEAR: Shortcut between COMPARE[5] event and CLEAR task"]
    #[inline]
    pub(crate) fn write_timer3_shorts_compare5_clear(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 SHORTS COMPARE5_CLEAR, TIMER3 SHORTS COMPARE5_CLEAR reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE0_STOP: Shortcut between COMPARE[0] event and STOP task\n\nTIMER3 SHORTS COMPARE0_STOP: Shortcut between COMPARE[0] event and STOP task"]
    #[inline]
    pub(crate) fn read_timer3_shorts_compare0_stop(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 SHORTS COMPARE0_STOP, TIMER3 SHORTS COMPARE0_STOP reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE0_STOP: Shortcut between COMPARE[0] event and STOP task\n\nTIMER3 SHORTS COMPARE0_STOP: Shortcut between COMPARE[0] event and STOP task"]
    #[inline]
    pub(crate) fn write_timer3_shorts_compare0_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 SHORTS COMPARE0_STOP, TIMER3 SHORTS COMPARE0_STOP reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE1_STOP: Shortcut between COMPARE[1] event and STOP task\n\nTIMER3 SHORTS COMPARE1_STOP: Shortcut between COMPARE[1] event and STOP task"]
    #[inline]
    pub(crate) fn read_timer3_shorts_compare1_stop(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 SHORTS COMPARE1_STOP, TIMER3 SHORTS COMPARE1_STOP reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE1_STOP: Shortcut between COMPARE[1] event and STOP task\n\nTIMER3 SHORTS COMPARE1_STOP: Shortcut between COMPARE[1] event and STOP task"]
    #[inline]
    pub(crate) fn write_timer3_shorts_compare1_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 SHORTS COMPARE1_STOP, TIMER3 SHORTS COMPARE1_STOP reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE2_STOP: Shortcut between COMPARE[2] event and STOP task\n\nTIMER3 SHORTS COMPARE2_STOP: Shortcut between COMPARE[2] event and STOP task"]
    #[inline]
    pub(crate) fn read_timer3_shorts_compare2_stop(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 SHORTS COMPARE2_STOP, TIMER3 SHORTS COMPARE2_STOP reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE2_STOP: Shortcut between COMPARE[2] event and STOP task\n\nTIMER3 SHORTS COMPARE2_STOP: Shortcut between COMPARE[2] event and STOP task"]
    #[inline]
    pub(crate) fn write_timer3_shorts_compare2_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 SHORTS COMPARE2_STOP, TIMER3 SHORTS COMPARE2_STOP reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE3_STOP: Shortcut between COMPARE[3] event and STOP task\n\nTIMER3 SHORTS COMPARE3_STOP: Shortcut between COMPARE[3] event and STOP task"]
    #[inline]
    pub(crate) fn read_timer3_shorts_compare3_stop(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 SHORTS COMPARE3_STOP, TIMER3 SHORTS COMPARE3_STOP reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE3_STOP: Shortcut between COMPARE[3] event and STOP task\n\nTIMER3 SHORTS COMPARE3_STOP: Shortcut between COMPARE[3] event and STOP task"]
    #[inline]
    pub(crate) fn write_timer3_shorts_compare3_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 SHORTS COMPARE3_STOP, TIMER3 SHORTS COMPARE3_STOP reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE4_STOP: Shortcut between COMPARE[4] event and STOP task\n\nTIMER3 SHORTS COMPARE4_STOP: Shortcut between COMPARE[4] event and STOP task"]
    #[inline]
    pub(crate) fn read_timer3_shorts_compare4_stop(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 SHORTS COMPARE4_STOP, TIMER3 SHORTS COMPARE4_STOP reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE4_STOP: Shortcut between COMPARE[4] event and STOP task\n\nTIMER3 SHORTS COMPARE4_STOP: Shortcut between COMPARE[4] event and STOP task"]
    #[inline]
    pub(crate) fn write_timer3_shorts_compare4_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 SHORTS COMPARE4_STOP, TIMER3 SHORTS COMPARE4_STOP reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE5_STOP: Shortcut between COMPARE[5] event and STOP task\n\nTIMER3 SHORTS COMPARE5_STOP: Shortcut between COMPARE[5] event and STOP task"]
    #[inline]
    pub(crate) fn read_timer3_shorts_compare5_stop(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 SHORTS COMPARE5_STOP, TIMER3 SHORTS COMPARE5_STOP reset value false")
    }
    #[doc = "TIMER3 SHORTS COMPARE5_STOP: Shortcut between COMPARE[5] event and STOP task\n\nTIMER3 SHORTS COMPARE5_STOP: Shortcut between COMPARE[5] event and STOP task"]
    #[inline]
    pub(crate) fn write_timer3_shorts_compare5_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 SHORTS COMPARE5_STOP, TIMER3 SHORTS COMPARE5_STOP reset value false")
    }
    #[doc = "TIMER3 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event\n\nTIMER3 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event"]
    #[inline]
    pub(crate) fn read_timer3_intenset_compare0(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 INTENSET COMPARE0, TIMER3 INTENSET COMPARE0 reset value false")
    }
    #[doc = "TIMER3 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event\n\nTIMER3 INTENSET COMPARE0: Write '1' to Enable interrupt for COMPARE[0] event"]
    #[inline]
    pub(crate) fn write_timer3_intenset_compare0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 INTENSET COMPARE0, TIMER3 INTENSET COMPARE0 reset value false")
    }
    #[doc = "TIMER3 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event\n\nTIMER3 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event"]
    #[inline]
    pub(crate) fn read_timer3_intenset_compare1(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 INTENSET COMPARE1, TIMER3 INTENSET COMPARE1 reset value false")
    }
    #[doc = "TIMER3 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event\n\nTIMER3 INTENSET COMPARE1: Write '1' to Enable interrupt for COMPARE[1] event"]
    #[inline]
    pub(crate) fn write_timer3_intenset_compare1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 INTENSET COMPARE1, TIMER3 INTENSET COMPARE1 reset value false")
    }
    #[doc = "TIMER3 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event\n\nTIMER3 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event"]
    #[inline]
    pub(crate) fn read_timer3_intenset_compare2(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 INTENSET COMPARE2, TIMER3 INTENSET COMPARE2 reset value false")
    }
    #[doc = "TIMER3 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event\n\nTIMER3 INTENSET COMPARE2: Write '1' to Enable interrupt for COMPARE[2] event"]
    #[inline]
    pub(crate) fn write_timer3_intenset_compare2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 INTENSET COMPARE2, TIMER3 INTENSET COMPARE2 reset value false")
    }
    #[doc = "TIMER3 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event\n\nTIMER3 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event"]
    #[inline]
    pub(crate) fn read_timer3_intenset_compare3(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 INTENSET COMPARE3, TIMER3 INTENSET COMPARE3 reset value false")
    }
    #[doc = "TIMER3 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event\n\nTIMER3 INTENSET COMPARE3: Write '1' to Enable interrupt for COMPARE[3] event"]
    #[inline]
    pub(crate) fn write_timer3_intenset_compare3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 INTENSET COMPARE3, TIMER3 INTENSET COMPARE3 reset value false")
    }
    #[doc = "TIMER3 INTENSET COMPARE4: Write '1' to Enable interrupt for COMPARE[4] event\n\nTIMER3 INTENSET COMPARE4: Write '1' to Enable interrupt for COMPARE[4] event"]
    #[inline]
    pub(crate) fn read_timer3_intenset_compare4(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 INTENSET COMPARE4, TIMER3 INTENSET COMPARE4 reset value false")
    }
    #[doc = "TIMER3 INTENSET COMPARE4: Write '1' to Enable interrupt for COMPARE[4] event\n\nTIMER3 INTENSET COMPARE4: Write '1' to Enable interrupt for COMPARE[4] event"]
    #[inline]
    pub(crate) fn write_timer3_intenset_compare4(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 INTENSET COMPARE4, TIMER3 INTENSET COMPARE4 reset value false")
    }
    #[doc = "TIMER3 INTENSET COMPARE5: Write '1' to Enable interrupt for COMPARE[5] event\n\nTIMER3 INTENSET COMPARE5: Write '1' to Enable interrupt for COMPARE[5] event"]
    #[inline]
    pub(crate) fn read_timer3_intenset_compare5(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 INTENSET COMPARE5, TIMER3 INTENSET COMPARE5 reset value false")
    }
    #[doc = "TIMER3 INTENSET COMPARE5: Write '1' to Enable interrupt for COMPARE[5] event\n\nTIMER3 INTENSET COMPARE5: Write '1' to Enable interrupt for COMPARE[5] event"]
    #[inline]
    pub(crate) fn write_timer3_intenset_compare5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 INTENSET COMPARE5, TIMER3 INTENSET COMPARE5 reset value false")
    }
    #[doc = "TIMER3 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event\n\nTIMER3 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event"]
    #[inline]
    pub(crate) fn read_timer3_intenclr_compare0(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 INTENCLR COMPARE0, TIMER3 INTENCLR COMPARE0 reset value false")
    }
    #[doc = "TIMER3 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event\n\nTIMER3 INTENCLR COMPARE0: Write '1' to Disable interrupt for COMPARE[0] event"]
    #[inline]
    pub(crate) fn write_timer3_intenclr_compare0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 INTENCLR COMPARE0, TIMER3 INTENCLR COMPARE0 reset value false")
    }
    #[doc = "TIMER3 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event\n\nTIMER3 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event"]
    #[inline]
    pub(crate) fn read_timer3_intenclr_compare1(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 INTENCLR COMPARE1, TIMER3 INTENCLR COMPARE1 reset value false")
    }
    #[doc = "TIMER3 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event\n\nTIMER3 INTENCLR COMPARE1: Write '1' to Disable interrupt for COMPARE[1] event"]
    #[inline]
    pub(crate) fn write_timer3_intenclr_compare1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 INTENCLR COMPARE1, TIMER3 INTENCLR COMPARE1 reset value false")
    }
    #[doc = "TIMER3 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event\n\nTIMER3 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event"]
    #[inline]
    pub(crate) fn read_timer3_intenclr_compare2(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 INTENCLR COMPARE2, TIMER3 INTENCLR COMPARE2 reset value false")
    }
    #[doc = "TIMER3 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event\n\nTIMER3 INTENCLR COMPARE2: Write '1' to Disable interrupt for COMPARE[2] event"]
    #[inline]
    pub(crate) fn write_timer3_intenclr_compare2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 INTENCLR COMPARE2, TIMER3 INTENCLR COMPARE2 reset value false")
    }
    #[doc = "TIMER3 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event\n\nTIMER3 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event"]
    #[inline]
    pub(crate) fn read_timer3_intenclr_compare3(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 INTENCLR COMPARE3, TIMER3 INTENCLR COMPARE3 reset value false")
    }
    #[doc = "TIMER3 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event\n\nTIMER3 INTENCLR COMPARE3: Write '1' to Disable interrupt for COMPARE[3] event"]
    #[inline]
    pub(crate) fn write_timer3_intenclr_compare3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 INTENCLR COMPARE3, TIMER3 INTENCLR COMPARE3 reset value false")
    }
    #[doc = "TIMER3 INTENCLR COMPARE4: Write '1' to Disable interrupt for COMPARE[4] event\n\nTIMER3 INTENCLR COMPARE4: Write '1' to Disable interrupt for COMPARE[4] event"]
    #[inline]
    pub(crate) fn read_timer3_intenclr_compare4(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 INTENCLR COMPARE4, TIMER3 INTENCLR COMPARE4 reset value false")
    }
    #[doc = "TIMER3 INTENCLR COMPARE4: Write '1' to Disable interrupt for COMPARE[4] event\n\nTIMER3 INTENCLR COMPARE4: Write '1' to Disable interrupt for COMPARE[4] event"]
    #[inline]
    pub(crate) fn write_timer3_intenclr_compare4(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 INTENCLR COMPARE4, TIMER3 INTENCLR COMPARE4 reset value false")
    }
    #[doc = "TIMER3 INTENCLR COMPARE5: Write '1' to Disable interrupt for COMPARE[5] event\n\nTIMER3 INTENCLR COMPARE5: Write '1' to Disable interrupt for COMPARE[5] event"]
    #[inline]
    pub(crate) fn read_timer3_intenclr_compare5(&self) -> MemResult<bool> {
        todo ! ("read TIMER3 INTENCLR COMPARE5, TIMER3 INTENCLR COMPARE5 reset value false")
    }
    #[doc = "TIMER3 INTENCLR COMPARE5: Write '1' to Disable interrupt for COMPARE[5] event\n\nTIMER3 INTENCLR COMPARE5: Write '1' to Disable interrupt for COMPARE[5] event"]
    #[inline]
    pub(crate) fn write_timer3_intenclr_compare5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 INTENCLR COMPARE5, TIMER3 INTENCLR COMPARE5 reset value false")
    }
    #[doc = "TIMER3 MODE MODE: Timer mode\n\nTIMER3 MODE MODE: Timer mode"]
    #[inline]
    pub(crate) fn read_timer3_mode_mode(&self) -> MemResult<u8> {
        todo ! ("read TIMER3 MODE MODE, TIMER3 MODE MODE reset value 0x00 mask 0x03")
    }
    #[doc = "TIMER3 MODE MODE: Timer mode\n\nTIMER3 MODE MODE: Timer mode"]
    #[inline]
    pub(crate) fn write_timer3_mode_mode(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 MODE MODE, TIMER3 MODE MODE reset value 0x00 mask 0x03")
    }
    #[doc = "TIMER3 BITMODE BITMODE: Timer bit width\n\nTIMER3 BITMODE BITMODE: Timer bit width"]
    #[inline]
    pub(crate) fn read_timer3_bitmode_bitmode(&self) -> MemResult<u8> {
        todo ! ("read TIMER3 BITMODE BITMODE, TIMER3 BITMODE BITMODE reset value 0x00 mask 0x03")
    }
    #[doc = "TIMER3 BITMODE BITMODE: Timer bit width\n\nTIMER3 BITMODE BITMODE: Timer bit width"]
    #[inline]
    pub(crate) fn write_timer3_bitmode_bitmode(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 BITMODE BITMODE, TIMER3 BITMODE BITMODE reset value 0x00 mask 0x03")
    }
    #[doc = "TIMER3 PRESCALER PRESCALER: Prescaler value\n\nTIMER3 PRESCALER PRESCALER: Prescaler value"]
    #[inline]
    pub(crate) fn read_timer3_prescaler_prescaler(&self) -> MemResult<u8> {
        todo ! ("read TIMER3 PRESCALER PRESCALER, TIMER3 PRESCALER PRESCALER reset value 0x04 mask 0x0f")
    }
    #[doc = "TIMER3 PRESCALER PRESCALER: Prescaler value\n\nTIMER3 PRESCALER PRESCALER: Prescaler value"]
    #[inline]
    pub(crate) fn write_timer3_prescaler_prescaler(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 PRESCALER PRESCALER, TIMER3 PRESCALER PRESCALER reset value 0x04 mask 0x0f")
    }
    #[doc = "TIMER3 CC[%s]: Description collection[0]:  Capture/Compare register 0\n\nTIMER3 CC[%s]: Description collection[0]:  Capture/Compare register 0"]
    #[inline]
    pub(crate) fn read_timer3_ccn(&self, _dim: usize) -> MemResult<u32> {
        todo ! ("read TIMER3 CC[%s], TIMER3 CC[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "TIMER3 CC[%s]: Description collection[0]:  Capture/Compare register 0\n\nTIMER3 CC[%s]: Description collection[0]:  Capture/Compare register 0"]
    #[inline]
    pub(crate) fn write_timer3_ccn(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write TIMER3 CC[%s], TIMER3 CC[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 TASKS_STOP: Stops PWM pulse generation on all channels at the end of current PWM period, and stops sequence playback\n\nPWM0 TASKS_STOP: Stops PWM pulse generation on all channels at the end of current PWM period, and stops sequence playback\n\nPWM0 TASKS_STOP: Stops PWM pulse generation on all channels at the end of current PWM period, and stops sequence playback"]
    #[inline]
    pub(crate) fn write_pwm0_tasks_stop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write PWM0 TASKS_STOP, PWM0 TASKS_STOP, PWM0 TASKS_STOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 TASKS_SEQSTART[%s]: Description collection[0]:  Loads the first PWM value on all enabled channels from sequence 0, and starts playing that sequence at the rate defined in SEQ[0]REFRESH and/or DECODER.MODE. Causes PWM generation to start it was not running.\n\nPWM0 TASKS_SEQSTART[%s]: Description collection[0]:  Loads the first PWM value on all enabled channels from sequence 0, and starts playing that sequence at the rate defined in SEQ[0]REFRESH and/or DECODER.MODE. Causes PWM generation to start it was not running.\n\nPWM0 TASKS_SEQSTART[%s]: Description collection[0]:  Loads the first PWM value on all enabled channels from sequence 0, and starts playing that sequence at the rate defined in SEQ[0]REFRESH and/or DECODER.MODE. Causes PWM generation to start it was not running."]
    #[inline]
    pub(crate) fn write_pwm0_tasks_seqstartn(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write PWM0 TASKS_SEQSTART[%s], PWM0 TASKS_SEQSTART[%s], PWM0 TASKS_SEQSTART[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 TASKS_NEXTSTEP: Steps by one value in the current sequence on all enabled channels if DECODER.MODE=NextStep. Does not cause PWM generation to start it was not running.\n\nPWM0 TASKS_NEXTSTEP: Steps by one value in the current sequence on all enabled channels if DECODER.MODE=NextStep. Does not cause PWM generation to start it was not running.\n\nPWM0 TASKS_NEXTSTEP: Steps by one value in the current sequence on all enabled channels if DECODER.MODE=NextStep. Does not cause PWM generation to start it was not running."]
    #[inline]
    pub(crate) fn write_pwm0_tasks_nextstep(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write PWM0 TASKS_NEXTSTEP, PWM0 TASKS_NEXTSTEP, PWM0 TASKS_NEXTSTEP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 EVENTS_STOPPED: Response to STOP task, emitted when PWM pulses are no longer generated\n\nPWM0 EVENTS_STOPPED: Response to STOP task, emitted when PWM pulses are no longer generated\n\nPWM0 EVENTS_STOPPED: Response to STOP task, emitted when PWM pulses are no longer generated"]
    #[inline]
    pub(crate) fn read_pwm0_events_stopped(&self) -> MemResult<u32> {
        todo ! ("read PWM0 EVENTS_STOPPED, PWM0 EVENTS_STOPPED, PWM0 EVENTS_STOPPED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 EVENTS_STOPPED: Response to STOP task, emitted when PWM pulses are no longer generated\n\nPWM0 EVENTS_STOPPED: Response to STOP task, emitted when PWM pulses are no longer generated\n\nPWM0 EVENTS_STOPPED: Response to STOP task, emitted when PWM pulses are no longer generated"]
    #[inline]
    pub(crate) fn write_pwm0_events_stopped(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write PWM0 EVENTS_STOPPED, PWM0 EVENTS_STOPPED, PWM0 EVENTS_STOPPED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 EVENTS_SEQSTARTED[%s]: Description collection[0]:  First PWM period started on sequence 0\n\nPWM0 EVENTS_SEQSTARTED[%s]: Description collection[0]:  First PWM period started on sequence 0\n\nPWM0 EVENTS_SEQSTARTED[%s]: Description collection[0]:  First PWM period started on sequence 0"]
    #[inline]
    pub(crate) fn read_pwm0_events_seqstartedn(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo ! ("read PWM0 EVENTS_SEQSTARTED[%s], PWM0 EVENTS_SEQSTARTED[%s], PWM0 EVENTS_SEQSTARTED[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 EVENTS_SEQSTARTED[%s]: Description collection[0]:  First PWM period started on sequence 0\n\nPWM0 EVENTS_SEQSTARTED[%s]: Description collection[0]:  First PWM period started on sequence 0\n\nPWM0 EVENTS_SEQSTARTED[%s]: Description collection[0]:  First PWM period started on sequence 0"]
    #[inline]
    pub(crate) fn write_pwm0_events_seqstartedn(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write PWM0 EVENTS_SEQSTARTED[%s], PWM0 EVENTS_SEQSTARTED[%s], PWM0 EVENTS_SEQSTARTED[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 EVENTS_SEQEND[%s]: Description collection[0]:  Emitted at end of every sequence 0, when last value from RAM has been applied to wave counter\n\nPWM0 EVENTS_SEQEND[%s]: Description collection[0]:  Emitted at end of every sequence 0, when last value from RAM has been applied to wave counter\n\nPWM0 EVENTS_SEQEND[%s]: Description collection[0]:  Emitted at end of every sequence 0, when last value from RAM has been applied to wave counter"]
    #[inline]
    pub(crate) fn read_pwm0_events_seqendn(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo ! ("read PWM0 EVENTS_SEQEND[%s], PWM0 EVENTS_SEQEND[%s], PWM0 EVENTS_SEQEND[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 EVENTS_SEQEND[%s]: Description collection[0]:  Emitted at end of every sequence 0, when last value from RAM has been applied to wave counter\n\nPWM0 EVENTS_SEQEND[%s]: Description collection[0]:  Emitted at end of every sequence 0, when last value from RAM has been applied to wave counter\n\nPWM0 EVENTS_SEQEND[%s]: Description collection[0]:  Emitted at end of every sequence 0, when last value from RAM has been applied to wave counter"]
    #[inline]
    pub(crate) fn write_pwm0_events_seqendn(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write PWM0 EVENTS_SEQEND[%s], PWM0 EVENTS_SEQEND[%s], PWM0 EVENTS_SEQEND[%s] reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 EVENTS_PWMPERIODEND: Emitted at the end of each PWM period\n\nPWM0 EVENTS_PWMPERIODEND: Emitted at the end of each PWM period\n\nPWM0 EVENTS_PWMPERIODEND: Emitted at the end of each PWM period"]
    #[inline]
    pub(crate) fn read_pwm0_events_pwmperiodend(&self) -> MemResult<u32> {
        todo ! ("read PWM0 EVENTS_PWMPERIODEND, PWM0 EVENTS_PWMPERIODEND, PWM0 EVENTS_PWMPERIODEND reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 EVENTS_PWMPERIODEND: Emitted at the end of each PWM period\n\nPWM0 EVENTS_PWMPERIODEND: Emitted at the end of each PWM period\n\nPWM0 EVENTS_PWMPERIODEND: Emitted at the end of each PWM period"]
    #[inline]
    pub(crate) fn write_pwm0_events_pwmperiodend(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write PWM0 EVENTS_PWMPERIODEND, PWM0 EVENTS_PWMPERIODEND, PWM0 EVENTS_PWMPERIODEND reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 EVENTS_LOOPSDONE: Concatenated sequences have been played the amount of times defined in LOOP.CNT\n\nPWM0 EVENTS_LOOPSDONE: Concatenated sequences have been played the amount of times defined in LOOP.CNT\n\nPWM0 EVENTS_LOOPSDONE: Concatenated sequences have been played the amount of times defined in LOOP.CNT"]
    #[inline]
    pub(crate) fn read_pwm0_events_loopsdone(&self) -> MemResult<u32> {
        todo ! ("read PWM0 EVENTS_LOOPSDONE, PWM0 EVENTS_LOOPSDONE, PWM0 EVENTS_LOOPSDONE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 EVENTS_LOOPSDONE: Concatenated sequences have been played the amount of times defined in LOOP.CNT\n\nPWM0 EVENTS_LOOPSDONE: Concatenated sequences have been played the amount of times defined in LOOP.CNT\n\nPWM0 EVENTS_LOOPSDONE: Concatenated sequences have been played the amount of times defined in LOOP.CNT"]
    #[inline]
    pub(crate) fn write_pwm0_events_loopsdone(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write PWM0 EVENTS_LOOPSDONE, PWM0 EVENTS_LOOPSDONE, PWM0 EVENTS_LOOPSDONE reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 SHORTS SEQEND0_STOP: Shortcut between SEQEND[0] event and STOP task\n\nPWM0 SHORTS SEQEND0_STOP: Shortcut between SEQEND[0] event and STOP task\n\nPWM0 SHORTS SEQEND0_STOP: Shortcut between SEQEND[0] event and STOP task"]
    #[inline]
    pub(crate) fn read_pwm0_shorts_seqend0_stop(&self) -> MemResult<bool> {
        todo ! ("read PWM0 SHORTS SEQEND0_STOP, PWM0 SHORTS SEQEND0_STOP, PWM0 SHORTS SEQEND0_STOP reset value false")
    }
    #[doc = "PWM0 SHORTS SEQEND0_STOP: Shortcut between SEQEND[0] event and STOP task\n\nPWM0 SHORTS SEQEND0_STOP: Shortcut between SEQEND[0] event and STOP task\n\nPWM0 SHORTS SEQEND0_STOP: Shortcut between SEQEND[0] event and STOP task"]
    #[inline]
    pub(crate) fn write_pwm0_shorts_seqend0_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 SHORTS SEQEND0_STOP, PWM0 SHORTS SEQEND0_STOP, PWM0 SHORTS SEQEND0_STOP reset value false")
    }
    #[doc = "PWM0 SHORTS SEQEND1_STOP: Shortcut between SEQEND[1] event and STOP task\n\nPWM0 SHORTS SEQEND1_STOP: Shortcut between SEQEND[1] event and STOP task\n\nPWM0 SHORTS SEQEND1_STOP: Shortcut between SEQEND[1] event and STOP task"]
    #[inline]
    pub(crate) fn read_pwm0_shorts_seqend1_stop(&self) -> MemResult<bool> {
        todo ! ("read PWM0 SHORTS SEQEND1_STOP, PWM0 SHORTS SEQEND1_STOP, PWM0 SHORTS SEQEND1_STOP reset value false")
    }
    #[doc = "PWM0 SHORTS SEQEND1_STOP: Shortcut between SEQEND[1] event and STOP task\n\nPWM0 SHORTS SEQEND1_STOP: Shortcut between SEQEND[1] event and STOP task\n\nPWM0 SHORTS SEQEND1_STOP: Shortcut between SEQEND[1] event and STOP task"]
    #[inline]
    pub(crate) fn write_pwm0_shorts_seqend1_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 SHORTS SEQEND1_STOP, PWM0 SHORTS SEQEND1_STOP, PWM0 SHORTS SEQEND1_STOP reset value false")
    }
    #[doc = "PWM0 SHORTS LOOPSDONE_SEQSTART0: Shortcut between LOOPSDONE event and SEQSTART[0] task\n\nPWM0 SHORTS LOOPSDONE_SEQSTART0: Shortcut between LOOPSDONE event and SEQSTART[0] task\n\nPWM0 SHORTS LOOPSDONE_SEQSTART0: Shortcut between LOOPSDONE event and SEQSTART[0] task"]
    #[inline]
    pub(crate) fn read_pwm0_shorts_loopsdone_seqstart0(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read PWM0 SHORTS LOOPSDONE_SEQSTART0, PWM0 SHORTS LOOPSDONE_SEQSTART0, PWM0 SHORTS LOOPSDONE_SEQSTART0 reset value false")
    }
    #[doc = "PWM0 SHORTS LOOPSDONE_SEQSTART0: Shortcut between LOOPSDONE event and SEQSTART[0] task\n\nPWM0 SHORTS LOOPSDONE_SEQSTART0: Shortcut between LOOPSDONE event and SEQSTART[0] task\n\nPWM0 SHORTS LOOPSDONE_SEQSTART0: Shortcut between LOOPSDONE event and SEQSTART[0] task"]
    #[inline]
    pub(crate) fn write_pwm0_shorts_loopsdone_seqstart0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 SHORTS LOOPSDONE_SEQSTART0, PWM0 SHORTS LOOPSDONE_SEQSTART0, PWM0 SHORTS LOOPSDONE_SEQSTART0 reset value false")
    }
    #[doc = "PWM0 SHORTS LOOPSDONE_SEQSTART1: Shortcut between LOOPSDONE event and SEQSTART[1] task\n\nPWM0 SHORTS LOOPSDONE_SEQSTART1: Shortcut between LOOPSDONE event and SEQSTART[1] task\n\nPWM0 SHORTS LOOPSDONE_SEQSTART1: Shortcut between LOOPSDONE event and SEQSTART[1] task"]
    #[inline]
    pub(crate) fn read_pwm0_shorts_loopsdone_seqstart1(
        &self,
    ) -> MemResult<bool> {
        todo ! ("read PWM0 SHORTS LOOPSDONE_SEQSTART1, PWM0 SHORTS LOOPSDONE_SEQSTART1, PWM0 SHORTS LOOPSDONE_SEQSTART1 reset value false")
    }
    #[doc = "PWM0 SHORTS LOOPSDONE_SEQSTART1: Shortcut between LOOPSDONE event and SEQSTART[1] task\n\nPWM0 SHORTS LOOPSDONE_SEQSTART1: Shortcut between LOOPSDONE event and SEQSTART[1] task\n\nPWM0 SHORTS LOOPSDONE_SEQSTART1: Shortcut between LOOPSDONE event and SEQSTART[1] task"]
    #[inline]
    pub(crate) fn write_pwm0_shorts_loopsdone_seqstart1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 SHORTS LOOPSDONE_SEQSTART1, PWM0 SHORTS LOOPSDONE_SEQSTART1, PWM0 SHORTS LOOPSDONE_SEQSTART1 reset value false")
    }
    #[doc = "PWM0 SHORTS LOOPSDONE_STOP: Shortcut between LOOPSDONE event and STOP task\n\nPWM0 SHORTS LOOPSDONE_STOP: Shortcut between LOOPSDONE event and STOP task\n\nPWM0 SHORTS LOOPSDONE_STOP: Shortcut between LOOPSDONE event and STOP task"]
    #[inline]
    pub(crate) fn read_pwm0_shorts_loopsdone_stop(&self) -> MemResult<bool> {
        todo ! ("read PWM0 SHORTS LOOPSDONE_STOP, PWM0 SHORTS LOOPSDONE_STOP, PWM0 SHORTS LOOPSDONE_STOP reset value false")
    }
    #[doc = "PWM0 SHORTS LOOPSDONE_STOP: Shortcut between LOOPSDONE event and STOP task\n\nPWM0 SHORTS LOOPSDONE_STOP: Shortcut between LOOPSDONE event and STOP task\n\nPWM0 SHORTS LOOPSDONE_STOP: Shortcut between LOOPSDONE event and STOP task"]
    #[inline]
    pub(crate) fn write_pwm0_shorts_loopsdone_stop(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 SHORTS LOOPSDONE_STOP, PWM0 SHORTS LOOPSDONE_STOP, PWM0 SHORTS LOOPSDONE_STOP reset value false")
    }
    #[doc = "PWM0 INTEN STOPPED: Enable or disable interrupt for STOPPED event\n\nPWM0 INTEN STOPPED: Enable or disable interrupt for STOPPED event\n\nPWM0 INTEN STOPPED: Enable or disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_pwm0_inten_stopped(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTEN STOPPED, PWM0 INTEN STOPPED, PWM0 INTEN STOPPED reset value false")
    }
    #[doc = "PWM0 INTEN STOPPED: Enable or disable interrupt for STOPPED event\n\nPWM0 INTEN STOPPED: Enable or disable interrupt for STOPPED event\n\nPWM0 INTEN STOPPED: Enable or disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_pwm0_inten_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTEN STOPPED, PWM0 INTEN STOPPED, PWM0 INTEN STOPPED reset value false")
    }
    #[doc = "PWM0 INTEN SEQSTARTED0: Enable or disable interrupt for SEQSTARTED[0] event\n\nPWM0 INTEN SEQSTARTED0: Enable or disable interrupt for SEQSTARTED[0] event\n\nPWM0 INTEN SEQSTARTED0: Enable or disable interrupt for SEQSTARTED[0] event"]
    #[inline]
    pub(crate) fn read_pwm0_inten_seqstarted0(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTEN SEQSTARTED0, PWM0 INTEN SEQSTARTED0, PWM0 INTEN SEQSTARTED0 reset value false")
    }
    #[doc = "PWM0 INTEN SEQSTARTED0: Enable or disable interrupt for SEQSTARTED[0] event\n\nPWM0 INTEN SEQSTARTED0: Enable or disable interrupt for SEQSTARTED[0] event\n\nPWM0 INTEN SEQSTARTED0: Enable or disable interrupt for SEQSTARTED[0] event"]
    #[inline]
    pub(crate) fn write_pwm0_inten_seqstarted0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTEN SEQSTARTED0, PWM0 INTEN SEQSTARTED0, PWM0 INTEN SEQSTARTED0 reset value false")
    }
    #[doc = "PWM0 INTEN SEQSTARTED1: Enable or disable interrupt for SEQSTARTED[1] event\n\nPWM0 INTEN SEQSTARTED1: Enable or disable interrupt for SEQSTARTED[1] event\n\nPWM0 INTEN SEQSTARTED1: Enable or disable interrupt for SEQSTARTED[1] event"]
    #[inline]
    pub(crate) fn read_pwm0_inten_seqstarted1(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTEN SEQSTARTED1, PWM0 INTEN SEQSTARTED1, PWM0 INTEN SEQSTARTED1 reset value false")
    }
    #[doc = "PWM0 INTEN SEQSTARTED1: Enable or disable interrupt for SEQSTARTED[1] event\n\nPWM0 INTEN SEQSTARTED1: Enable or disable interrupt for SEQSTARTED[1] event\n\nPWM0 INTEN SEQSTARTED1: Enable or disable interrupt for SEQSTARTED[1] event"]
    #[inline]
    pub(crate) fn write_pwm0_inten_seqstarted1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTEN SEQSTARTED1, PWM0 INTEN SEQSTARTED1, PWM0 INTEN SEQSTARTED1 reset value false")
    }
    #[doc = "PWM0 INTEN SEQEND0: Enable or disable interrupt for SEQEND[0] event\n\nPWM0 INTEN SEQEND0: Enable or disable interrupt for SEQEND[0] event\n\nPWM0 INTEN SEQEND0: Enable or disable interrupt for SEQEND[0] event"]
    #[inline]
    pub(crate) fn read_pwm0_inten_seqend0(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTEN SEQEND0, PWM0 INTEN SEQEND0, PWM0 INTEN SEQEND0 reset value false")
    }
    #[doc = "PWM0 INTEN SEQEND0: Enable or disable interrupt for SEQEND[0] event\n\nPWM0 INTEN SEQEND0: Enable or disable interrupt for SEQEND[0] event\n\nPWM0 INTEN SEQEND0: Enable or disable interrupt for SEQEND[0] event"]
    #[inline]
    pub(crate) fn write_pwm0_inten_seqend0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTEN SEQEND0, PWM0 INTEN SEQEND0, PWM0 INTEN SEQEND0 reset value false")
    }
    #[doc = "PWM0 INTEN SEQEND1: Enable or disable interrupt for SEQEND[1] event\n\nPWM0 INTEN SEQEND1: Enable or disable interrupt for SEQEND[1] event\n\nPWM0 INTEN SEQEND1: Enable or disable interrupt for SEQEND[1] event"]
    #[inline]
    pub(crate) fn read_pwm0_inten_seqend1(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTEN SEQEND1, PWM0 INTEN SEQEND1, PWM0 INTEN SEQEND1 reset value false")
    }
    #[doc = "PWM0 INTEN SEQEND1: Enable or disable interrupt for SEQEND[1] event\n\nPWM0 INTEN SEQEND1: Enable or disable interrupt for SEQEND[1] event\n\nPWM0 INTEN SEQEND1: Enable or disable interrupt for SEQEND[1] event"]
    #[inline]
    pub(crate) fn write_pwm0_inten_seqend1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTEN SEQEND1, PWM0 INTEN SEQEND1, PWM0 INTEN SEQEND1 reset value false")
    }
    #[doc = "PWM0 INTEN PWMPERIODEND: Enable or disable interrupt for PWMPERIODEND event\n\nPWM0 INTEN PWMPERIODEND: Enable or disable interrupt for PWMPERIODEND event\n\nPWM0 INTEN PWMPERIODEND: Enable or disable interrupt for PWMPERIODEND event"]
    #[inline]
    pub(crate) fn read_pwm0_inten_pwmperiodend(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTEN PWMPERIODEND, PWM0 INTEN PWMPERIODEND, PWM0 INTEN PWMPERIODEND reset value false")
    }
    #[doc = "PWM0 INTEN PWMPERIODEND: Enable or disable interrupt for PWMPERIODEND event\n\nPWM0 INTEN PWMPERIODEND: Enable or disable interrupt for PWMPERIODEND event\n\nPWM0 INTEN PWMPERIODEND: Enable or disable interrupt for PWMPERIODEND event"]
    #[inline]
    pub(crate) fn write_pwm0_inten_pwmperiodend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTEN PWMPERIODEND, PWM0 INTEN PWMPERIODEND, PWM0 INTEN PWMPERIODEND reset value false")
    }
    #[doc = "PWM0 INTEN LOOPSDONE: Enable or disable interrupt for LOOPSDONE event\n\nPWM0 INTEN LOOPSDONE: Enable or disable interrupt for LOOPSDONE event\n\nPWM0 INTEN LOOPSDONE: Enable or disable interrupt for LOOPSDONE event"]
    #[inline]
    pub(crate) fn read_pwm0_inten_loopsdone(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTEN LOOPSDONE, PWM0 INTEN LOOPSDONE, PWM0 INTEN LOOPSDONE reset value false")
    }
    #[doc = "PWM0 INTEN LOOPSDONE: Enable or disable interrupt for LOOPSDONE event\n\nPWM0 INTEN LOOPSDONE: Enable or disable interrupt for LOOPSDONE event\n\nPWM0 INTEN LOOPSDONE: Enable or disable interrupt for LOOPSDONE event"]
    #[inline]
    pub(crate) fn write_pwm0_inten_loopsdone(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTEN LOOPSDONE, PWM0 INTEN LOOPSDONE, PWM0 INTEN LOOPSDONE reset value false")
    }
    #[doc = "PWM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nPWM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nPWM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_pwm0_intenset_stopped(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTENSET STOPPED, PWM0 INTENSET STOPPED, PWM0 INTENSET STOPPED reset value false")
    }
    #[doc = "PWM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nPWM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event\n\nPWM0 INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_pwm0_intenset_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTENSET STOPPED, PWM0 INTENSET STOPPED, PWM0 INTENSET STOPPED reset value false")
    }
    #[doc = "PWM0 INTENSET SEQSTARTED0: Write '1' to Enable interrupt for SEQSTARTED[0] event\n\nPWM0 INTENSET SEQSTARTED0: Write '1' to Enable interrupt for SEQSTARTED[0] event\n\nPWM0 INTENSET SEQSTARTED0: Write '1' to Enable interrupt for SEQSTARTED[0] event"]
    #[inline]
    pub(crate) fn read_pwm0_intenset_seqstarted0(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTENSET SEQSTARTED0, PWM0 INTENSET SEQSTARTED0, PWM0 INTENSET SEQSTARTED0 reset value false")
    }
    #[doc = "PWM0 INTENSET SEQSTARTED0: Write '1' to Enable interrupt for SEQSTARTED[0] event\n\nPWM0 INTENSET SEQSTARTED0: Write '1' to Enable interrupt for SEQSTARTED[0] event\n\nPWM0 INTENSET SEQSTARTED0: Write '1' to Enable interrupt for SEQSTARTED[0] event"]
    #[inline]
    pub(crate) fn write_pwm0_intenset_seqstarted0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTENSET SEQSTARTED0, PWM0 INTENSET SEQSTARTED0, PWM0 INTENSET SEQSTARTED0 reset value false")
    }
    #[doc = "PWM0 INTENSET SEQSTARTED1: Write '1' to Enable interrupt for SEQSTARTED[1] event\n\nPWM0 INTENSET SEQSTARTED1: Write '1' to Enable interrupt for SEQSTARTED[1] event\n\nPWM0 INTENSET SEQSTARTED1: Write '1' to Enable interrupt for SEQSTARTED[1] event"]
    #[inline]
    pub(crate) fn read_pwm0_intenset_seqstarted1(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTENSET SEQSTARTED1, PWM0 INTENSET SEQSTARTED1, PWM0 INTENSET SEQSTARTED1 reset value false")
    }
    #[doc = "PWM0 INTENSET SEQSTARTED1: Write '1' to Enable interrupt for SEQSTARTED[1] event\n\nPWM0 INTENSET SEQSTARTED1: Write '1' to Enable interrupt for SEQSTARTED[1] event\n\nPWM0 INTENSET SEQSTARTED1: Write '1' to Enable interrupt for SEQSTARTED[1] event"]
    #[inline]
    pub(crate) fn write_pwm0_intenset_seqstarted1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTENSET SEQSTARTED1, PWM0 INTENSET SEQSTARTED1, PWM0 INTENSET SEQSTARTED1 reset value false")
    }
    #[doc = "PWM0 INTENSET SEQEND0: Write '1' to Enable interrupt for SEQEND[0] event\n\nPWM0 INTENSET SEQEND0: Write '1' to Enable interrupt for SEQEND[0] event\n\nPWM0 INTENSET SEQEND0: Write '1' to Enable interrupt for SEQEND[0] event"]
    #[inline]
    pub(crate) fn read_pwm0_intenset_seqend0(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTENSET SEQEND0, PWM0 INTENSET SEQEND0, PWM0 INTENSET SEQEND0 reset value false")
    }
    #[doc = "PWM0 INTENSET SEQEND0: Write '1' to Enable interrupt for SEQEND[0] event\n\nPWM0 INTENSET SEQEND0: Write '1' to Enable interrupt for SEQEND[0] event\n\nPWM0 INTENSET SEQEND0: Write '1' to Enable interrupt for SEQEND[0] event"]
    #[inline]
    pub(crate) fn write_pwm0_intenset_seqend0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTENSET SEQEND0, PWM0 INTENSET SEQEND0, PWM0 INTENSET SEQEND0 reset value false")
    }
    #[doc = "PWM0 INTENSET SEQEND1: Write '1' to Enable interrupt for SEQEND[1] event\n\nPWM0 INTENSET SEQEND1: Write '1' to Enable interrupt for SEQEND[1] event\n\nPWM0 INTENSET SEQEND1: Write '1' to Enable interrupt for SEQEND[1] event"]
    #[inline]
    pub(crate) fn read_pwm0_intenset_seqend1(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTENSET SEQEND1, PWM0 INTENSET SEQEND1, PWM0 INTENSET SEQEND1 reset value false")
    }
    #[doc = "PWM0 INTENSET SEQEND1: Write '1' to Enable interrupt for SEQEND[1] event\n\nPWM0 INTENSET SEQEND1: Write '1' to Enable interrupt for SEQEND[1] event\n\nPWM0 INTENSET SEQEND1: Write '1' to Enable interrupt for SEQEND[1] event"]
    #[inline]
    pub(crate) fn write_pwm0_intenset_seqend1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTENSET SEQEND1, PWM0 INTENSET SEQEND1, PWM0 INTENSET SEQEND1 reset value false")
    }
    #[doc = "PWM0 INTENSET PWMPERIODEND: Write '1' to Enable interrupt for PWMPERIODEND event\n\nPWM0 INTENSET PWMPERIODEND: Write '1' to Enable interrupt for PWMPERIODEND event\n\nPWM0 INTENSET PWMPERIODEND: Write '1' to Enable interrupt for PWMPERIODEND event"]
    #[inline]
    pub(crate) fn read_pwm0_intenset_pwmperiodend(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTENSET PWMPERIODEND, PWM0 INTENSET PWMPERIODEND, PWM0 INTENSET PWMPERIODEND reset value false")
    }
    #[doc = "PWM0 INTENSET PWMPERIODEND: Write '1' to Enable interrupt for PWMPERIODEND event\n\nPWM0 INTENSET PWMPERIODEND: Write '1' to Enable interrupt for PWMPERIODEND event\n\nPWM0 INTENSET PWMPERIODEND: Write '1' to Enable interrupt for PWMPERIODEND event"]
    #[inline]
    pub(crate) fn write_pwm0_intenset_pwmperiodend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTENSET PWMPERIODEND, PWM0 INTENSET PWMPERIODEND, PWM0 INTENSET PWMPERIODEND reset value false")
    }
    #[doc = "PWM0 INTENSET LOOPSDONE: Write '1' to Enable interrupt for LOOPSDONE event\n\nPWM0 INTENSET LOOPSDONE: Write '1' to Enable interrupt for LOOPSDONE event\n\nPWM0 INTENSET LOOPSDONE: Write '1' to Enable interrupt for LOOPSDONE event"]
    #[inline]
    pub(crate) fn read_pwm0_intenset_loopsdone(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTENSET LOOPSDONE, PWM0 INTENSET LOOPSDONE, PWM0 INTENSET LOOPSDONE reset value false")
    }
    #[doc = "PWM0 INTENSET LOOPSDONE: Write '1' to Enable interrupt for LOOPSDONE event\n\nPWM0 INTENSET LOOPSDONE: Write '1' to Enable interrupt for LOOPSDONE event\n\nPWM0 INTENSET LOOPSDONE: Write '1' to Enable interrupt for LOOPSDONE event"]
    #[inline]
    pub(crate) fn write_pwm0_intenset_loopsdone(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTENSET LOOPSDONE, PWM0 INTENSET LOOPSDONE, PWM0 INTENSET LOOPSDONE reset value false")
    }
    #[doc = "PWM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nPWM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nPWM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_pwm0_intenclr_stopped(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTENCLR STOPPED, PWM0 INTENCLR STOPPED, PWM0 INTENCLR STOPPED reset value false")
    }
    #[doc = "PWM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nPWM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event\n\nPWM0 INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_pwm0_intenclr_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTENCLR STOPPED, PWM0 INTENCLR STOPPED, PWM0 INTENCLR STOPPED reset value false")
    }
    #[doc = "PWM0 INTENCLR SEQSTARTED0: Write '1' to Disable interrupt for SEQSTARTED[0] event\n\nPWM0 INTENCLR SEQSTARTED0: Write '1' to Disable interrupt for SEQSTARTED[0] event\n\nPWM0 INTENCLR SEQSTARTED0: Write '1' to Disable interrupt for SEQSTARTED[0] event"]
    #[inline]
    pub(crate) fn read_pwm0_intenclr_seqstarted0(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTENCLR SEQSTARTED0, PWM0 INTENCLR SEQSTARTED0, PWM0 INTENCLR SEQSTARTED0 reset value false")
    }
    #[doc = "PWM0 INTENCLR SEQSTARTED0: Write '1' to Disable interrupt for SEQSTARTED[0] event\n\nPWM0 INTENCLR SEQSTARTED0: Write '1' to Disable interrupt for SEQSTARTED[0] event\n\nPWM0 INTENCLR SEQSTARTED0: Write '1' to Disable interrupt for SEQSTARTED[0] event"]
    #[inline]
    pub(crate) fn write_pwm0_intenclr_seqstarted0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTENCLR SEQSTARTED0, PWM0 INTENCLR SEQSTARTED0, PWM0 INTENCLR SEQSTARTED0 reset value false")
    }
    #[doc = "PWM0 INTENCLR SEQSTARTED1: Write '1' to Disable interrupt for SEQSTARTED[1] event\n\nPWM0 INTENCLR SEQSTARTED1: Write '1' to Disable interrupt for SEQSTARTED[1] event\n\nPWM0 INTENCLR SEQSTARTED1: Write '1' to Disable interrupt for SEQSTARTED[1] event"]
    #[inline]
    pub(crate) fn read_pwm0_intenclr_seqstarted1(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTENCLR SEQSTARTED1, PWM0 INTENCLR SEQSTARTED1, PWM0 INTENCLR SEQSTARTED1 reset value false")
    }
    #[doc = "PWM0 INTENCLR SEQSTARTED1: Write '1' to Disable interrupt for SEQSTARTED[1] event\n\nPWM0 INTENCLR SEQSTARTED1: Write '1' to Disable interrupt for SEQSTARTED[1] event\n\nPWM0 INTENCLR SEQSTARTED1: Write '1' to Disable interrupt for SEQSTARTED[1] event"]
    #[inline]
    pub(crate) fn write_pwm0_intenclr_seqstarted1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTENCLR SEQSTARTED1, PWM0 INTENCLR SEQSTARTED1, PWM0 INTENCLR SEQSTARTED1 reset value false")
    }
    #[doc = "PWM0 INTENCLR SEQEND0: Write '1' to Disable interrupt for SEQEND[0] event\n\nPWM0 INTENCLR SEQEND0: Write '1' to Disable interrupt for SEQEND[0] event\n\nPWM0 INTENCLR SEQEND0: Write '1' to Disable interrupt for SEQEND[0] event"]
    #[inline]
    pub(crate) fn read_pwm0_intenclr_seqend0(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTENCLR SEQEND0, PWM0 INTENCLR SEQEND0, PWM0 INTENCLR SEQEND0 reset value false")
    }
    #[doc = "PWM0 INTENCLR SEQEND0: Write '1' to Disable interrupt for SEQEND[0] event\n\nPWM0 INTENCLR SEQEND0: Write '1' to Disable interrupt for SEQEND[0] event\n\nPWM0 INTENCLR SEQEND0: Write '1' to Disable interrupt for SEQEND[0] event"]
    #[inline]
    pub(crate) fn write_pwm0_intenclr_seqend0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTENCLR SEQEND0, PWM0 INTENCLR SEQEND0, PWM0 INTENCLR SEQEND0 reset value false")
    }
    #[doc = "PWM0 INTENCLR SEQEND1: Write '1' to Disable interrupt for SEQEND[1] event\n\nPWM0 INTENCLR SEQEND1: Write '1' to Disable interrupt for SEQEND[1] event\n\nPWM0 INTENCLR SEQEND1: Write '1' to Disable interrupt for SEQEND[1] event"]
    #[inline]
    pub(crate) fn read_pwm0_intenclr_seqend1(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTENCLR SEQEND1, PWM0 INTENCLR SEQEND1, PWM0 INTENCLR SEQEND1 reset value false")
    }
    #[doc = "PWM0 INTENCLR SEQEND1: Write '1' to Disable interrupt for SEQEND[1] event\n\nPWM0 INTENCLR SEQEND1: Write '1' to Disable interrupt for SEQEND[1] event\n\nPWM0 INTENCLR SEQEND1: Write '1' to Disable interrupt for SEQEND[1] event"]
    #[inline]
    pub(crate) fn write_pwm0_intenclr_seqend1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTENCLR SEQEND1, PWM0 INTENCLR SEQEND1, PWM0 INTENCLR SEQEND1 reset value false")
    }
    #[doc = "PWM0 INTENCLR PWMPERIODEND: Write '1' to Disable interrupt for PWMPERIODEND event\n\nPWM0 INTENCLR PWMPERIODEND: Write '1' to Disable interrupt for PWMPERIODEND event\n\nPWM0 INTENCLR PWMPERIODEND: Write '1' to Disable interrupt for PWMPERIODEND event"]
    #[inline]
    pub(crate) fn read_pwm0_intenclr_pwmperiodend(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTENCLR PWMPERIODEND, PWM0 INTENCLR PWMPERIODEND, PWM0 INTENCLR PWMPERIODEND reset value false")
    }
    #[doc = "PWM0 INTENCLR PWMPERIODEND: Write '1' to Disable interrupt for PWMPERIODEND event\n\nPWM0 INTENCLR PWMPERIODEND: Write '1' to Disable interrupt for PWMPERIODEND event\n\nPWM0 INTENCLR PWMPERIODEND: Write '1' to Disable interrupt for PWMPERIODEND event"]
    #[inline]
    pub(crate) fn write_pwm0_intenclr_pwmperiodend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTENCLR PWMPERIODEND, PWM0 INTENCLR PWMPERIODEND, PWM0 INTENCLR PWMPERIODEND reset value false")
    }
    #[doc = "PWM0 INTENCLR LOOPSDONE: Write '1' to Disable interrupt for LOOPSDONE event\n\nPWM0 INTENCLR LOOPSDONE: Write '1' to Disable interrupt for LOOPSDONE event\n\nPWM0 INTENCLR LOOPSDONE: Write '1' to Disable interrupt for LOOPSDONE event"]
    #[inline]
    pub(crate) fn read_pwm0_intenclr_loopsdone(&self) -> MemResult<bool> {
        todo ! ("read PWM0 INTENCLR LOOPSDONE, PWM0 INTENCLR LOOPSDONE, PWM0 INTENCLR LOOPSDONE reset value false")
    }
    #[doc = "PWM0 INTENCLR LOOPSDONE: Write '1' to Disable interrupt for LOOPSDONE event\n\nPWM0 INTENCLR LOOPSDONE: Write '1' to Disable interrupt for LOOPSDONE event\n\nPWM0 INTENCLR LOOPSDONE: Write '1' to Disable interrupt for LOOPSDONE event"]
    #[inline]
    pub(crate) fn write_pwm0_intenclr_loopsdone(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 INTENCLR LOOPSDONE, PWM0 INTENCLR LOOPSDONE, PWM0 INTENCLR LOOPSDONE reset value false")
    }
    #[doc = "PWM0 ENABLE ENABLE: Enable or disable PWM module\n\nPWM0 ENABLE ENABLE: Enable or disable PWM module\n\nPWM0 ENABLE ENABLE: Enable or disable PWM module"]
    #[inline]
    pub(crate) fn read_pwm0_enable_enable(&self) -> MemResult<bool> {
        todo ! ("read PWM0 ENABLE ENABLE, PWM0 ENABLE ENABLE, PWM0 ENABLE ENABLE reset value false")
    }
    #[doc = "PWM0 ENABLE ENABLE: Enable or disable PWM module\n\nPWM0 ENABLE ENABLE: Enable or disable PWM module\n\nPWM0 ENABLE ENABLE: Enable or disable PWM module"]
    #[inline]
    pub(crate) fn write_pwm0_enable_enable(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 ENABLE ENABLE, PWM0 ENABLE ENABLE, PWM0 ENABLE ENABLE reset value false")
    }
    #[doc = "PWM0 MODE UPDOWN: Selects up or up and down as wave counter mode\n\nPWM0 MODE UPDOWN: Selects up or up and down as wave counter mode\n\nPWM0 MODE UPDOWN: Selects up or up and down as wave counter mode"]
    #[inline]
    pub(crate) fn read_pwm0_mode_updown(&self) -> MemResult<bool> {
        todo ! ("read PWM0 MODE UPDOWN, PWM0 MODE UPDOWN, PWM0 MODE UPDOWN reset value false")
    }
    #[doc = "PWM0 MODE UPDOWN: Selects up or up and down as wave counter mode\n\nPWM0 MODE UPDOWN: Selects up or up and down as wave counter mode\n\nPWM0 MODE UPDOWN: Selects up or up and down as wave counter mode"]
    #[inline]
    pub(crate) fn write_pwm0_mode_updown(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 MODE UPDOWN, PWM0 MODE UPDOWN, PWM0 MODE UPDOWN reset value false")
    }
    #[doc = "PWM0 COUNTERTOP COUNTERTOP: Value up to which the pulse generator counter counts. This register is ignored when DECODER.MODE=WaveForm and only values from RAM will be used.\n\nPWM0 COUNTERTOP COUNTERTOP: Value up to which the pulse generator counter counts. This register is ignored when DECODER.MODE=WaveForm and only values from RAM will be used.\n\nPWM0 COUNTERTOP COUNTERTOP: Value up to which the pulse generator counter counts. This register is ignored when DECODER.MODE=WaveForm and only values from RAM will be used."]
    #[inline]
    pub(crate) fn read_pwm0_countertop_countertop(&self) -> MemResult<u16> {
        todo ! ("read PWM0 COUNTERTOP COUNTERTOP, PWM0 COUNTERTOP COUNTERTOP, PWM0 COUNTERTOP COUNTERTOP reset value 0x3ff mask 0x7fff")
    }
    #[doc = "PWM0 COUNTERTOP COUNTERTOP: Value up to which the pulse generator counter counts. This register is ignored when DECODER.MODE=WaveForm and only values from RAM will be used.\n\nPWM0 COUNTERTOP COUNTERTOP: Value up to which the pulse generator counter counts. This register is ignored when DECODER.MODE=WaveForm and only values from RAM will be used.\n\nPWM0 COUNTERTOP COUNTERTOP: Value up to which the pulse generator counter counts. This register is ignored when DECODER.MODE=WaveForm and only values from RAM will be used."]
    #[inline]
    pub(crate) fn write_pwm0_countertop_countertop(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo ! ("write PWM0 COUNTERTOP COUNTERTOP, PWM0 COUNTERTOP COUNTERTOP, PWM0 COUNTERTOP COUNTERTOP reset value 0x3ff mask 0x7fff")
    }
    #[doc = "PWM0 PRESCALER PRESCALER: Pre-scaler of PWM_CLK\n\nPWM0 PRESCALER PRESCALER: Pre-scaler of PWM_CLK\n\nPWM0 PRESCALER PRESCALER: Pre-scaler of PWM_CLK"]
    #[inline]
    pub(crate) fn read_pwm0_prescaler_prescaler(&self) -> MemResult<u8> {
        todo ! ("read PWM0 PRESCALER PRESCALER, PWM0 PRESCALER PRESCALER, PWM0 PRESCALER PRESCALER reset value 0x00 mask 0x07")
    }
    #[doc = "PWM0 PRESCALER PRESCALER: Pre-scaler of PWM_CLK\n\nPWM0 PRESCALER PRESCALER: Pre-scaler of PWM_CLK\n\nPWM0 PRESCALER PRESCALER: Pre-scaler of PWM_CLK"]
    #[inline]
    pub(crate) fn write_pwm0_prescaler_prescaler(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write PWM0 PRESCALER PRESCALER, PWM0 PRESCALER PRESCALER, PWM0 PRESCALER PRESCALER reset value 0x00 mask 0x07")
    }
    #[doc = "PWM0 DECODER LOAD: How a sequence is read from RAM and spread to the compare register\n\nPWM0 DECODER LOAD: How a sequence is read from RAM and spread to the compare register\n\nPWM0 DECODER LOAD: How a sequence is read from RAM and spread to the compare register"]
    #[inline]
    pub(crate) fn read_pwm0_decoder_load(&self) -> MemResult<u8> {
        todo ! ("read PWM0 DECODER LOAD, PWM0 DECODER LOAD, PWM0 DECODER LOAD reset value 0x00 mask 0x03")
    }
    #[doc = "PWM0 DECODER LOAD: How a sequence is read from RAM and spread to the compare register\n\nPWM0 DECODER LOAD: How a sequence is read from RAM and spread to the compare register\n\nPWM0 DECODER LOAD: How a sequence is read from RAM and spread to the compare register"]
    #[inline]
    pub(crate) fn write_pwm0_decoder_load(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write PWM0 DECODER LOAD, PWM0 DECODER LOAD, PWM0 DECODER LOAD reset value 0x00 mask 0x03")
    }
    #[doc = "PWM0 DECODER MODE: Selects source for advancing the active sequence\n\nPWM0 DECODER MODE: Selects source for advancing the active sequence\n\nPWM0 DECODER MODE: Selects source for advancing the active sequence"]
    #[inline]
    pub(crate) fn read_pwm0_decoder_mode(&self) -> MemResult<bool> {
        todo ! ("read PWM0 DECODER MODE, PWM0 DECODER MODE, PWM0 DECODER MODE reset value false")
    }
    #[doc = "PWM0 DECODER MODE: Selects source for advancing the active sequence\n\nPWM0 DECODER MODE: Selects source for advancing the active sequence\n\nPWM0 DECODER MODE: Selects source for advancing the active sequence"]
    #[inline]
    pub(crate) fn write_pwm0_decoder_mode(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 DECODER MODE, PWM0 DECODER MODE, PWM0 DECODER MODE reset value false")
    }
    #[doc = "PWM0 LOOP CNT: Amount of playback of pattern cycles\n\nPWM0 LOOP CNT: Amount of playback of pattern cycles\n\nPWM0 LOOP CNT: Amount of playback of pattern cycles"]
    #[inline]
    pub(crate) fn read_pwm0_loop_cnt(&self) -> MemResult<u16> {
        todo ! ("read PWM0 LOOP CNT, PWM0 LOOP CNT, PWM0 LOOP CNT reset value 0x00 mask 0xffff")
    }
    #[doc = "PWM0 LOOP CNT: Amount of playback of pattern cycles\n\nPWM0 LOOP CNT: Amount of playback of pattern cycles\n\nPWM0 LOOP CNT: Amount of playback of pattern cycles"]
    #[inline]
    pub(crate) fn write_pwm0_loop_cnt(&mut self, _value: u16) -> MemResult<()> {
        todo ! ("write PWM0 LOOP CNT, PWM0 LOOP CNT, PWM0 LOOP CNT reset value 0x00 mask 0xffff")
    }
    #[doc = "PWM0 PTR: Description cluster[0]:  Beginning address in Data RAM of this sequence\n\nPWM0 PTR: Description cluster[0]:  Beginning address in Data RAM of this sequence\n\nPWM0 PTR: Description cluster[0]:  Beginning address in Data RAM of this sequence"]
    #[inline]
    pub(crate) fn read_pwm0_seqn_ptr(&self, _dim: usize) -> MemResult<u32> {
        todo ! ("read PWM0 PTR, PWM0 PTR, PWM0 PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 PTR: Description cluster[0]:  Beginning address in Data RAM of this sequence\n\nPWM0 PTR: Description cluster[0]:  Beginning address in Data RAM of this sequence\n\nPWM0 PTR: Description cluster[0]:  Beginning address in Data RAM of this sequence"]
    #[inline]
    pub(crate) fn write_pwm0_seqn_ptr(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write PWM0 PTR, PWM0 PTR, PWM0 PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PWM0 CNT CNT: Amount of values (duty cycles) in this sequence\n\nPWM0 CNT CNT: Amount of values (duty cycles) in this sequence\n\nPWM0 CNT CNT: Amount of values (duty cycles) in this sequence"]
    #[inline]
    pub(crate) fn read_pwm0_seqn_cnt_cnt(&self, _dim: usize) -> MemResult<u16> {
        todo ! ("read PWM0 CNT CNT, PWM0 CNT CNT, PWM0 CNT CNT reset value 0x00 mask 0x7fff")
    }
    #[doc = "PWM0 CNT CNT: Amount of values (duty cycles) in this sequence\n\nPWM0 CNT CNT: Amount of values (duty cycles) in this sequence\n\nPWM0 CNT CNT: Amount of values (duty cycles) in this sequence"]
    #[inline]
    pub(crate) fn write_pwm0_seqn_cnt_cnt(
        &mut self,
        _dim: usize,
        _value: u16,
    ) -> MemResult<()> {
        todo ! ("write PWM0 CNT CNT, PWM0 CNT CNT, PWM0 CNT CNT reset value 0x00 mask 0x7fff")
    }
    #[doc = "PWM0 REFRESH CNT: Amount of additional PWM periods between samples loaded into compare register (load every REFRESH.CNT+1 PWM periods)\n\nPWM0 REFRESH CNT: Amount of additional PWM periods between samples loaded into compare register (load every REFRESH.CNT+1 PWM periods)\n\nPWM0 REFRESH CNT: Amount of additional PWM periods between samples loaded into compare register (load every REFRESH.CNT+1 PWM periods)"]
    #[inline]
    pub(crate) fn read_pwm0_seqn_refresh_cnt(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo ! ("read PWM0 REFRESH CNT, PWM0 REFRESH CNT, PWM0 REFRESH CNT reset value 0x01 mask 0xffffff")
    }
    #[doc = "PWM0 REFRESH CNT: Amount of additional PWM periods between samples loaded into compare register (load every REFRESH.CNT+1 PWM periods)\n\nPWM0 REFRESH CNT: Amount of additional PWM periods between samples loaded into compare register (load every REFRESH.CNT+1 PWM periods)\n\nPWM0 REFRESH CNT: Amount of additional PWM periods between samples loaded into compare register (load every REFRESH.CNT+1 PWM periods)"]
    #[inline]
    pub(crate) fn write_pwm0_seqn_refresh_cnt(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write PWM0 REFRESH CNT, PWM0 REFRESH CNT, PWM0 REFRESH CNT reset value 0x01 mask 0xffffff")
    }
    #[doc = "PWM0 ENDDELAY CNT: Time added after the sequence in PWM periods\n\nPWM0 ENDDELAY CNT: Time added after the sequence in PWM periods\n\nPWM0 ENDDELAY CNT: Time added after the sequence in PWM periods"]
    #[inline]
    pub(crate) fn read_pwm0_seqn_enddelay_cnt(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo ! ("read PWM0 ENDDELAY CNT, PWM0 ENDDELAY CNT, PWM0 ENDDELAY CNT reset value 0x00 mask 0xffffff")
    }
    #[doc = "PWM0 ENDDELAY CNT: Time added after the sequence in PWM periods\n\nPWM0 ENDDELAY CNT: Time added after the sequence in PWM periods\n\nPWM0 ENDDELAY CNT: Time added after the sequence in PWM periods"]
    #[inline]
    pub(crate) fn write_pwm0_seqn_enddelay_cnt(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write PWM0 ENDDELAY CNT, PWM0 ENDDELAY CNT, PWM0 ENDDELAY CNT reset value 0x00 mask 0xffffff")
    }
    #[doc = "PWM0 OUT[%s] PIN: Pin number\n\nPWM0 OUT[%s] PIN: Pin number\n\nPWM0 OUT[%s] PIN: Pin number"]
    #[inline]
    pub(crate) fn read_pwm0_psel_outn_pin(&self, _dim: usize) -> MemResult<u8> {
        todo ! ("read PWM0 OUT[%s] PIN, PWM0 OUT[%s] PIN, PWM0 OUT[%s] PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "PWM0 OUT[%s] PIN: Pin number\n\nPWM0 OUT[%s] PIN: Pin number\n\nPWM0 OUT[%s] PIN: Pin number"]
    #[inline]
    pub(crate) fn write_pwm0_psel_outn_pin(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        todo ! ("write PWM0 OUT[%s] PIN, PWM0 OUT[%s] PIN, PWM0 OUT[%s] PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "PWM0 OUT[%s] CONNECT: Connection\n\nPWM0 OUT[%s] CONNECT: Connection\n\nPWM0 OUT[%s] CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_pwm0_psel_outn_connect(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo ! ("read PWM0 OUT[%s] CONNECT, PWM0 OUT[%s] CONNECT, PWM0 OUT[%s] CONNECT reset value true")
    }
    #[doc = "PWM0 OUT[%s] CONNECT: Connection\n\nPWM0 OUT[%s] CONNECT: Connection\n\nPWM0 OUT[%s] CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_pwm0_psel_outn_connect(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo ! ("write PWM0 OUT[%s] CONNECT, PWM0 OUT[%s] CONNECT, PWM0 OUT[%s] CONNECT reset value true")
    }
    #[doc = "PDM TASKS_START: Starts continuous PDM transfer"]
    #[inline]
    pub(crate) fn write_pdm_tasks_start(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write PDM TASKS_START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PDM TASKS_STOP: Stops PDM transfer"]
    #[inline]
    pub(crate) fn write_pdm_tasks_stop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write PDM TASKS_STOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PDM EVENTS_STARTED: PDM transfer has started"]
    #[inline]
    pub(crate) fn read_pdm_events_started(&self) -> MemResult<u32> {
        todo!(
            "read PDM EVENTS_STARTED reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "PDM EVENTS_STARTED: PDM transfer has started"]
    #[inline]
    pub(crate) fn write_pdm_events_started(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write PDM EVENTS_STARTED reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "PDM EVENTS_STOPPED: PDM transfer has finished"]
    #[inline]
    pub(crate) fn read_pdm_events_stopped(&self) -> MemResult<u32> {
        todo!(
            "read PDM EVENTS_STOPPED reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "PDM EVENTS_STOPPED: PDM transfer has finished"]
    #[inline]
    pub(crate) fn write_pdm_events_stopped(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write PDM EVENTS_STOPPED reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "PDM EVENTS_END: The PDM has written the last sample specified by SAMPLE.MAXCNT (or the last sample after a STOP task has been received) to Data RAM"]
    #[inline]
    pub(crate) fn read_pdm_events_end(&self) -> MemResult<u32> {
        todo!("read PDM EVENTS_END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PDM EVENTS_END: The PDM has written the last sample specified by SAMPLE.MAXCNT (or the last sample after a STOP task has been received) to Data RAM"]
    #[inline]
    pub(crate) fn write_pdm_events_end(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write PDM EVENTS_END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PDM INTEN STARTED: Enable or disable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn read_pdm_inten_started(&self) -> MemResult<bool> {
        todo!("read PDM INTEN STARTED reset value false")
    }
    #[doc = "PDM INTEN STARTED: Enable or disable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn write_pdm_inten_started(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write PDM INTEN STARTED reset value false")
    }
    #[doc = "PDM INTEN STOPPED: Enable or disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_pdm_inten_stopped(&self) -> MemResult<bool> {
        todo!("read PDM INTEN STOPPED reset value false")
    }
    #[doc = "PDM INTEN STOPPED: Enable or disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_pdm_inten_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write PDM INTEN STOPPED reset value false")
    }
    #[doc = "PDM INTEN END: Enable or disable interrupt for END event"]
    #[inline]
    pub(crate) fn read_pdm_inten_end(&self) -> MemResult<bool> {
        todo!("read PDM INTEN END reset value false")
    }
    #[doc = "PDM INTEN END: Enable or disable interrupt for END event"]
    #[inline]
    pub(crate) fn write_pdm_inten_end(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write PDM INTEN END reset value false")
    }
    #[doc = "PDM INTENSET STARTED: Write '1' to Enable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn read_pdm_intenset_started(&self) -> MemResult<bool> {
        todo!("read PDM INTENSET STARTED reset value false")
    }
    #[doc = "PDM INTENSET STARTED: Write '1' to Enable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn write_pdm_intenset_started(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write PDM INTENSET STARTED reset value false")
    }
    #[doc = "PDM INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_pdm_intenset_stopped(&self) -> MemResult<bool> {
        todo!("read PDM INTENSET STOPPED reset value false")
    }
    #[doc = "PDM INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_pdm_intenset_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write PDM INTENSET STOPPED reset value false")
    }
    #[doc = "PDM INTENSET END: Write '1' to Enable interrupt for END event"]
    #[inline]
    pub(crate) fn read_pdm_intenset_end(&self) -> MemResult<bool> {
        todo!("read PDM INTENSET END reset value false")
    }
    #[doc = "PDM INTENSET END: Write '1' to Enable interrupt for END event"]
    #[inline]
    pub(crate) fn write_pdm_intenset_end(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write PDM INTENSET END reset value false")
    }
    #[doc = "PDM INTENCLR STARTED: Write '1' to Disable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn read_pdm_intenclr_started(&self) -> MemResult<bool> {
        todo!("read PDM INTENCLR STARTED reset value false")
    }
    #[doc = "PDM INTENCLR STARTED: Write '1' to Disable interrupt for STARTED event"]
    #[inline]
    pub(crate) fn write_pdm_intenclr_started(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write PDM INTENCLR STARTED reset value false")
    }
    #[doc = "PDM INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_pdm_intenclr_stopped(&self) -> MemResult<bool> {
        todo!("read PDM INTENCLR STOPPED reset value false")
    }
    #[doc = "PDM INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_pdm_intenclr_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write PDM INTENCLR STOPPED reset value false")
    }
    #[doc = "PDM INTENCLR END: Write '1' to Disable interrupt for END event"]
    #[inline]
    pub(crate) fn read_pdm_intenclr_end(&self) -> MemResult<bool> {
        todo!("read PDM INTENCLR END reset value false")
    }
    #[doc = "PDM INTENCLR END: Write '1' to Disable interrupt for END event"]
    #[inline]
    pub(crate) fn write_pdm_intenclr_end(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write PDM INTENCLR END reset value false")
    }
    #[doc = "PDM ENABLE ENABLE: Enable or disable PDM module"]
    #[inline]
    pub(crate) fn read_pdm_enable_enable(&self) -> MemResult<bool> {
        todo!("read PDM ENABLE ENABLE reset value false")
    }
    #[doc = "PDM ENABLE ENABLE: Enable or disable PDM module"]
    #[inline]
    pub(crate) fn write_pdm_enable_enable(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write PDM ENABLE ENABLE reset value false")
    }
    #[doc = "PDM PDMCLKCTRL: PDM clock generator control"]
    #[inline]
    pub(crate) fn read_pdm_pdmclkctrl(&self) -> MemResult<u32> {
        todo!(
            "read PDM PDMCLKCTRL reset value 0x8400000 mask 0xffffffffffffffff"
        )
    }
    #[doc = "PDM PDMCLKCTRL: PDM clock generator control"]
    #[inline]
    pub(crate) fn write_pdm_pdmclkctrl(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write PDM PDMCLKCTRL reset value 0x8400000 mask 0xffffffffffffffff")
    }
    #[doc = "PDM MODE OPERATION: Mono or stereo operation"]
    #[inline]
    pub(crate) fn read_pdm_mode_operation(&self) -> MemResult<bool> {
        todo!("read PDM MODE OPERATION reset value false")
    }
    #[doc = "PDM MODE OPERATION: Mono or stereo operation"]
    #[inline]
    pub(crate) fn write_pdm_mode_operation(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write PDM MODE OPERATION reset value false")
    }
    #[doc = "PDM MODE EDGE: Defines on which PDM_CLK edge Left (or mono) is sampled"]
    #[inline]
    pub(crate) fn read_pdm_mode_edge(&self) -> MemResult<bool> {
        todo!("read PDM MODE EDGE reset value false")
    }
    #[doc = "PDM MODE EDGE: Defines on which PDM_CLK edge Left (or mono) is sampled"]
    #[inline]
    pub(crate) fn write_pdm_mode_edge(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write PDM MODE EDGE reset value false")
    }
    #[doc = "PDM GAINL GAINL: Left output gain adjustment, in 0.5 dB steps, around the default module gain (see electrical parameters) 0x00    -20 dB gain adjust 0x01  -19.5 dB gain adjust (...) 0x27   -0.5 dB gain adjust 0x28      0 dB gain adjust 0x29   +0.5 dB gain adjust (...) 0x4F  +19.5 dB gain adjust 0x50    +20 dB gain adjust"]
    #[inline]
    pub(crate) fn read_pdm_gainl_gainl(&self) -> MemResult<u8> {
        todo!("read PDM GAINL GAINL reset value 0x28 mask 0x7f")
    }
    #[doc = "PDM GAINL GAINL: Left output gain adjustment, in 0.5 dB steps, around the default module gain (see electrical parameters) 0x00    -20 dB gain adjust 0x01  -19.5 dB gain adjust (...) 0x27   -0.5 dB gain adjust 0x28      0 dB gain adjust 0x29   +0.5 dB gain adjust (...) 0x4F  +19.5 dB gain adjust 0x50    +20 dB gain adjust"]
    #[inline]
    pub(crate) fn write_pdm_gainl_gainl(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write PDM GAINL GAINL reset value 0x28 mask 0x7f")
    }
    #[doc = "PDM GAINR GAINR: Right output gain adjustment, in 0.5 dB steps, around the default module gain (see electrical parameters)"]
    #[inline]
    pub(crate) fn read_pdm_gainr_gainr(&self) -> MemResult<u8> {
        todo!("read PDM GAINR GAINR reset value 0x28 mask 0xff")
    }
    #[doc = "PDM GAINR GAINR: Right output gain adjustment, in 0.5 dB steps, around the default module gain (see electrical parameters)"]
    #[inline]
    pub(crate) fn write_pdm_gainr_gainr(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write PDM GAINR GAINR reset value 0x28 mask 0xff")
    }
    #[doc = "PDM CLK PIN: Pin number"]
    #[inline]
    pub(crate) fn read_pdm_psel_clk_pin(&self) -> MemResult<u8> {
        todo!("read PDM CLK PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "PDM CLK PIN: Pin number"]
    #[inline]
    pub(crate) fn write_pdm_psel_clk_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write PDM CLK PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "PDM CLK CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_pdm_psel_clk_connect(&self) -> MemResult<bool> {
        todo!("read PDM CLK CONNECT reset value true")
    }
    #[doc = "PDM CLK CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_pdm_psel_clk_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write PDM CLK CONNECT reset value true")
    }
    #[doc = "PDM DIN PIN: Pin number"]
    #[inline]
    pub(crate) fn read_pdm_psel_din_pin(&self) -> MemResult<u8> {
        todo!("read PDM DIN PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "PDM DIN PIN: Pin number"]
    #[inline]
    pub(crate) fn write_pdm_psel_din_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write PDM DIN PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "PDM DIN CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_pdm_psel_din_connect(&self) -> MemResult<bool> {
        todo!("read PDM DIN CONNECT reset value true")
    }
    #[doc = "PDM DIN CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_pdm_psel_din_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write PDM DIN CONNECT reset value true")
    }
    #[doc = "PDM PTR: RAM address pointer to write samples to with EasyDMA"]
    #[inline]
    pub(crate) fn read_pdm_sample_ptr(&self) -> MemResult<u32> {
        todo!("read PDM PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PDM PTR: RAM address pointer to write samples to with EasyDMA"]
    #[inline]
    pub(crate) fn write_pdm_sample_ptr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write PDM PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PDM MAXCNT BUFFSIZE: Length of DMA RAM allocation in number of samples"]
    #[inline]
    pub(crate) fn read_pdm_sample_maxcnt_buffsize(&self) -> MemResult<u16> {
        todo!("read PDM MAXCNT BUFFSIZE reset value 0x00 mask 0x7fff")
    }
    #[doc = "PDM MAXCNT BUFFSIZE: Length of DMA RAM allocation in number of samples"]
    #[inline]
    pub(crate) fn write_pdm_sample_maxcnt_buffsize(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo!("write PDM MAXCNT BUFFSIZE reset value 0x00 mask 0x7fff")
    }
    #[doc = "NVMC READY READY: NVMC is ready or busy"]
    #[inline]
    pub(crate) fn read_nvmc_ready_ready(&self) -> MemResult<bool> {
        todo!("read NVMC READY READY reset value false")
    }
    #[doc = "NVMC CONFIG WEN: Program memory access mode. It is strongly recommended to only activate erase and write modes when they are actively used. Enabling write or erase will invalidate the cache and keep it invalidated."]
    #[inline]
    pub(crate) fn read_nvmc_config_wen(&self) -> MemResult<u8> {
        todo!("read NVMC CONFIG WEN reset value 0x00 mask 0x03")
    }
    #[doc = "NVMC CONFIG WEN: Program memory access mode. It is strongly recommended to only activate erase and write modes when they are actively used. Enabling write or erase will invalidate the cache and keep it invalidated."]
    #[inline]
    pub(crate) fn write_nvmc_config_wen(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write NVMC CONFIG WEN reset value 0x00 mask 0x03")
    }
    #[doc = "NVMC ERASEPAGE: Register for erasing a page in Code area\n\nNVMC ERASEPCR1: Deprecated register -  Register for erasing a page in Code area. Equivalent to ERASEPAGE."]
    #[inline]
    pub(crate) fn read_nvmc_erasepage(&self) -> MemResult<u32> {
        todo ! ("read NVMC ERASEPAGE, NVMC ERASEPCR1 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVMC ERASEPAGE: Register for erasing a page in Code area\n\nNVMC ERASEPCR1: Deprecated register -  Register for erasing a page in Code area. Equivalent to ERASEPAGE."]
    #[inline]
    pub(crate) fn write_nvmc_erasepage(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write NVMC ERASEPAGE, NVMC ERASEPCR1 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVMC ERASEALL ERASEALL: Erase all non-volatile memory including UICR registers. Note that code erase has to be enabled by CONFIG.EEN before the UICR can be erased."]
    #[inline]
    pub(crate) fn read_nvmc_eraseall_eraseall(&self) -> MemResult<bool> {
        todo!("read NVMC ERASEALL ERASEALL reset value false")
    }
    #[doc = "NVMC ERASEALL ERASEALL: Erase all non-volatile memory including UICR registers. Note that code erase has to be enabled by CONFIG.EEN before the UICR can be erased."]
    #[inline]
    pub(crate) fn write_nvmc_eraseall_eraseall(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NVMC ERASEALL ERASEALL reset value false")
    }
    #[doc = "NVMC ERASEPCR0: Deprecated register -  Register for erasing a page in Code area. Equivalent to ERASEPAGE."]
    #[inline]
    pub(crate) fn read_nvmc_erasepcr0(&self) -> MemResult<u32> {
        todo!("read NVMC ERASEPCR0 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVMC ERASEPCR0: Deprecated register -  Register for erasing a page in Code area. Equivalent to ERASEPAGE."]
    #[inline]
    pub(crate) fn write_nvmc_erasepcr0(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write NVMC ERASEPCR0 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVMC ERASEUICR ERASEUICR: Register starting erase of all User Information Configuration Registers. Note that code erase has to be enabled by CONFIG.EEN before the UICR can be erased."]
    #[inline]
    pub(crate) fn read_nvmc_eraseuicr_eraseuicr(&self) -> MemResult<bool> {
        todo!("read NVMC ERASEUICR ERASEUICR reset value false")
    }
    #[doc = "NVMC ERASEUICR ERASEUICR: Register starting erase of all User Information Configuration Registers. Note that code erase has to be enabled by CONFIG.EEN before the UICR can be erased."]
    #[inline]
    pub(crate) fn write_nvmc_eraseuicr_eraseuicr(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NVMC ERASEUICR ERASEUICR reset value false")
    }
    #[doc = "NVMC ICACHECNF CACHEEN: Cache enable"]
    #[inline]
    pub(crate) fn read_nvmc_icachecnf_cacheen(&self) -> MemResult<bool> {
        todo!("read NVMC ICACHECNF CACHEEN reset value false")
    }
    #[doc = "NVMC ICACHECNF CACHEEN: Cache enable"]
    #[inline]
    pub(crate) fn write_nvmc_icachecnf_cacheen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NVMC ICACHECNF CACHEEN reset value false")
    }
    #[doc = "NVMC ICACHECNF CACHEPROFEN: Cache profiling enable"]
    #[inline]
    pub(crate) fn read_nvmc_icachecnf_cacheprofen(&self) -> MemResult<bool> {
        todo!("read NVMC ICACHECNF CACHEPROFEN reset value false")
    }
    #[doc = "NVMC ICACHECNF CACHEPROFEN: Cache profiling enable"]
    #[inline]
    pub(crate) fn write_nvmc_icachecnf_cacheprofen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write NVMC ICACHECNF CACHEPROFEN reset value false")
    }
    #[doc = "NVMC IHIT: I-Code cache hit counter."]
    #[inline]
    pub(crate) fn read_nvmc_ihit(&self) -> MemResult<u32> {
        todo!("read NVMC IHIT reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVMC IHIT: I-Code cache hit counter."]
    #[inline]
    pub(crate) fn write_nvmc_ihit(&mut self, _value: u32) -> MemResult<()> {
        todo!("write NVMC IHIT reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVMC IMISS: I-Code cache miss counter."]
    #[inline]
    pub(crate) fn read_nvmc_imiss(&self) -> MemResult<u32> {
        todo!("read NVMC IMISS reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVMC IMISS: I-Code cache miss counter."]
    #[inline]
    pub(crate) fn write_nvmc_imiss(&mut self, _value: u32) -> MemResult<()> {
        todo!("write NVMC IMISS reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PPI EN: Description cluster[0]:  Enable channel group 0"]
    #[inline]
    pub(crate) fn write_ppi_tasks_chgn_en(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.ppi.set_group_on(_dim, true))
    }
    #[doc = "PPI DIS: Description cluster[0]:  Disable channel group 0"]
    #[inline]
    pub(crate) fn write_ppi_tasks_chgn_dis(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.ppi.set_group_on(_dim, false))
    }
    #[doc = "PPI CHEN CH0: Enable PPI channel 0."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch0(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(0))
    }
    #[doc = "PPI CHEN CH0: Enable PPI channel 0."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch0(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.ppi.set_on(0, _value))
    }
    #[doc = "PPI CHEN CH1: Enable PPI channel 1."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch1(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(1))
    }
    #[doc = "PPI CHEN CH1: Enable PPI channel 1."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch1(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.ppi.set_on(1, _value))
    }
    #[doc = "PPI CHEN CH2: Enable PPI channel 2."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch2(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(2))
    }
    #[doc = "PPI CHEN CH2: Enable PPI channel 2."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch2(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.ppi.set_on(2, _value))
    }
    #[doc = "PPI CHEN CH3: Enable PPI channel 3."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch3(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(3))
    }
    #[doc = "PPI CHEN CH3: Enable PPI channel 3."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch3(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.ppi.set_on(3, _value))
    }
    #[doc = "PPI CHEN CH4: Enable PPI channel 4."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch4(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(4))
    }
    #[doc = "PPI CHEN CH4: Enable PPI channel 4."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch4(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.ppi.set_on(4, _value))
    }
    #[doc = "PPI CHEN CH5: Enable PPI channel 5."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch5(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(5))
    }
    #[doc = "PPI CHEN CH5: Enable PPI channel 5."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch5(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.ppi.set_on(5, _value))
    }
    #[doc = "PPI CHEN CH6: Enable PPI channel 6."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch6(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(6))
    }
    #[doc = "PPI CHEN CH6: Enable PPI channel 6."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch6(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.ppi.set_on(6, _value))
    }
    #[doc = "PPI CHEN CH7: Enable PPI channel 7."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch7(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(7))
    }
    #[doc = "PPI CHEN CH7: Enable PPI channel 7."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch7(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.ppi.set_on(7, _value))
    }
    #[doc = "PPI CHEN CH8: Enable PPI channel 8."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch8(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(8))
    }
    #[doc = "PPI CHEN CH8: Enable PPI channel 8."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch8(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.ppi.set_on(8, _value))
    }
    #[doc = "PPI CHEN CH9: Enable PPI channel 9."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch9(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(9))
    }
    #[doc = "PPI CHEN CH9: Enable PPI channel 9."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch9(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.ppi.set_on(9, _value))
    }
    #[doc = "PPI CHEN CH10: Enable PPI channel 10."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch10(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(10))
    }
    #[doc = "PPI CHEN CH10: Enable PPI channel 10."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch10(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(10, _value))
    }
    #[doc = "PPI CHEN CH11: Enable PPI channel 11."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch11(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(11))
    }
    #[doc = "PPI CHEN CH11: Enable PPI channel 11."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch11(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(11, _value))
    }
    #[doc = "PPI CHEN CH12: Enable PPI channel 12."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch12(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(12))
    }
    #[doc = "PPI CHEN CH12: Enable PPI channel 12."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch12(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(12, _value))
    }
    #[doc = "PPI CHEN CH13: Enable PPI channel 13."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch13(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(13))
    }
    #[doc = "PPI CHEN CH13: Enable PPI channel 13."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch13(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(13, _value))
    }
    #[doc = "PPI CHEN CH14: Enable PPI channel 14."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch14(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(14))
    }
    #[doc = "PPI CHEN CH14: Enable PPI channel 14."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch14(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(14, _value))
    }
    #[doc = "PPI CHEN CH15: Enable PPI channel 15."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch15(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(15))
    }
    #[doc = "PPI CHEN CH15: Enable PPI channel 15."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch15(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(15, _value))
    }
    #[doc = "PPI CHEN CH16: Enable PPI channel 15."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch16(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(16))
    }
    #[doc = "PPI CHEN CH16: Enable PPI channel 15."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch16(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(16, _value))
    }
    #[doc = "PPI CHEN CH17: Enable PPI channel 17."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch17(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(17))
    }
    #[doc = "PPI CHEN CH17: Enable PPI channel 17."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch17(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(17, _value))
    }
    #[doc = "PPI CHEN CH18: Enable PPI channel 18."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch18(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(18))
    }
    #[doc = "PPI CHEN CH18: Enable PPI channel 18."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch18(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(18, _value))
    }
    #[doc = "PPI CHEN CH19: Enable PPI channel 19."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch19(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(19))
    }
    #[doc = "PPI CHEN CH19: Enable PPI channel 19."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch19(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(19, _value))
    }
    #[doc = "PPI CHEN CH20: Enable PPI channel 20."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch20(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(20))
    }
    #[doc = "PPI CHEN CH20: Enable PPI channel 20."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch20(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(20, _value))
    }
    #[doc = "PPI CHEN CH21: Enable PPI channel 21."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch21(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(21))
    }
    #[doc = "PPI CHEN CH21: Enable PPI channel 21."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch21(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(21, _value))
    }
    #[doc = "PPI CHEN CH22: Enable PPI channel 22."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch22(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(22))
    }
    #[doc = "PPI CHEN CH22: Enable PPI channel 22."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch22(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(22, _value))
    }
    #[doc = "PPI CHEN CH23: Enable PPI channel 23."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch23(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(23))
    }
    #[doc = "PPI CHEN CH23: Enable PPI channel 23."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch23(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(23, _value))
    }
    #[doc = "PPI CHEN CH24: Enable PPI channel 24."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch24(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(24))
    }
    #[doc = "PPI CHEN CH24: Enable PPI channel 24."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch24(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(24, _value))
    }
    #[doc = "PPI CHEN CH25: Enable PPI channel 25."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch25(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(25))
    }
    #[doc = "PPI CHEN CH25: Enable PPI channel 25."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch25(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(25, _value))
    }
    #[doc = "PPI CHEN CH26: Enable PPI channel 26."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch26(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(26))
    }
    #[doc = "PPI CHEN CH26: Enable PPI channel 26."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch26(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(26, _value))
    }
    #[doc = "PPI CHEN CH27: Enable PPI channel 27."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch27(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(27))
    }
    #[doc = "PPI CHEN CH27: Enable PPI channel 27."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch27(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(27, _value))
    }
    #[doc = "PPI CHEN CH28: Enable PPI channel 28."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch28(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(28))
    }
    #[doc = "PPI CHEN CH28: Enable PPI channel 28."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch28(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(28, _value))
    }
    #[doc = "PPI CHEN CH29: Enable PPI channel 29."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch29(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(29))
    }
    #[doc = "PPI CHEN CH29: Enable PPI channel 29."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch29(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(29, _value))
    }
    #[doc = "PPI CHEN CH30: Enable PPI channel 30."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch30(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(30))
    }
    #[doc = "PPI CHEN CH30: Enable PPI channel 30."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch30(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(30, _value))
    }
    #[doc = "PPI CHEN CH31: Enable PPI channel 31."]
    #[inline]
    pub(crate) fn read_ppi_chen_ch31(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(31))
    }
    #[doc = "PPI CHEN CH31: Enable PPI channel 31."]
    #[inline]
    pub(crate) fn write_ppi_chen_ch31(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_on(31, _value))
    }
    #[doc = "PPI CHENSET CH0: Enable PPI channel 0."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch0(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(0))
    }
    #[doc = "PPI CHENSET CH0: Enable PPI channel 0."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(0, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH1: Enable PPI channel 1."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch1(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(1))
    }
    #[doc = "PPI CHENSET CH1: Enable PPI channel 1."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(1, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH2: Enable PPI channel 2."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch2(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(2))
    }
    #[doc = "PPI CHENSET CH2: Enable PPI channel 2."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(2, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH3: Enable PPI channel 3."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch3(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(3))
    }
    #[doc = "PPI CHENSET CH3: Enable PPI channel 3."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(3, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH4: Enable PPI channel 4."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch4(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(4))
    }
    #[doc = "PPI CHENSET CH4: Enable PPI channel 4."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch4(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(4, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH5: Enable PPI channel 5."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch5(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(5))
    }
    #[doc = "PPI CHENSET CH5: Enable PPI channel 5."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(5, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH6: Enable PPI channel 6."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch6(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(6))
    }
    #[doc = "PPI CHENSET CH6: Enable PPI channel 6."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch6(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(6, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH7: Enable PPI channel 7."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch7(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(7))
    }
    #[doc = "PPI CHENSET CH7: Enable PPI channel 7."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch7(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(7, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH8: Enable PPI channel 8."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch8(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(8))
    }
    #[doc = "PPI CHENSET CH8: Enable PPI channel 8."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch8(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(8, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH9: Enable PPI channel 9."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch9(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(9))
    }
    #[doc = "PPI CHENSET CH9: Enable PPI channel 9."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch9(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(9, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH10: Enable PPI channel 10."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch10(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(10))
    }
    #[doc = "PPI CHENSET CH10: Enable PPI channel 10."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch10(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(10, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH11: Enable PPI channel 11."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch11(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(11))
    }
    #[doc = "PPI CHENSET CH11: Enable PPI channel 11."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch11(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(11, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH12: Enable PPI channel 12."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch12(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(12))
    }
    #[doc = "PPI CHENSET CH12: Enable PPI channel 12."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch12(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(12, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH13: Enable PPI channel 13."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch13(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(13))
    }
    #[doc = "PPI CHENSET CH13: Enable PPI channel 13."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch13(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(13, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH14: Enable PPI channel 14."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch14(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(14))
    }
    #[doc = "PPI CHENSET CH14: Enable PPI channel 14."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch14(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(14, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH15: Enable PPI channel 15."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch15(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(15))
    }
    #[doc = "PPI CHENSET CH15: Enable PPI channel 15."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch15(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(15, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH16: Enable PPI channel 16."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch16(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(16))
    }
    #[doc = "PPI CHENSET CH16: Enable PPI channel 16."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch16(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(16, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH17: Enable PPI channel 17."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch17(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(17))
    }
    #[doc = "PPI CHENSET CH17: Enable PPI channel 17."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch17(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(17, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH18: Enable PPI channel 18."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch18(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(18))
    }
    #[doc = "PPI CHENSET CH18: Enable PPI channel 18."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch18(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(18, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH19: Enable PPI channel 19."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch19(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(19))
    }
    #[doc = "PPI CHENSET CH19: Enable PPI channel 19."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch19(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(19, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH20: Enable PPI channel 20."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch20(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(20))
    }
    #[doc = "PPI CHENSET CH20: Enable PPI channel 20."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch20(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(20, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH21: Enable PPI channel 21."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch21(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(21))
    }
    #[doc = "PPI CHENSET CH21: Enable PPI channel 21."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch21(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(21, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH22: Enable PPI channel 22."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch22(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(22))
    }
    #[doc = "PPI CHENSET CH22: Enable PPI channel 22."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch22(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(22, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH23: Enable PPI channel 23."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch23(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(23))
    }
    #[doc = "PPI CHENSET CH23: Enable PPI channel 23."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch23(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(23, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH24: Enable PPI channel 24."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch24(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(24))
    }
    #[doc = "PPI CHENSET CH24: Enable PPI channel 24."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch24(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(24, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH25: Enable PPI channel 25."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch25(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(25))
    }
    #[doc = "PPI CHENSET CH25: Enable PPI channel 25."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch25(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(25, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH26: Enable PPI channel 26."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch26(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(26))
    }
    #[doc = "PPI CHENSET CH26: Enable PPI channel 26."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch26(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(26, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH27: Enable PPI channel 27."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch27(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(27))
    }
    #[doc = "PPI CHENSET CH27: Enable PPI channel 27."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch27(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(27, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH28: Enable PPI channel 28."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch28(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(28))
    }
    #[doc = "PPI CHENSET CH28: Enable PPI channel 28."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch28(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(28, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH29: Enable PPI channel 29."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch29(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(29))
    }
    #[doc = "PPI CHENSET CH29: Enable PPI channel 29."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch29(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(29, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH30: Enable PPI channel 30."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch30(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(30))
    }
    #[doc = "PPI CHENSET CH30: Enable PPI channel 30."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch30(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(30, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENSET CH31: Enable PPI channel 31."]
    #[inline]
    pub(crate) fn read_ppi_chenset_ch31(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(31))
    }
    #[doc = "PPI CHENSET CH31: Enable PPI channel 31."]
    #[inline]
    pub(crate) fn write_ppi_chenset_ch31(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(31, true);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH0: Disable PPI channel 0."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch0(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(0))
    }
    #[doc = "PPI CHENCLR CH0: Disable PPI channel 0."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(0, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH1: Disable PPI channel 1."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch1(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(1))
    }
    #[doc = "PPI CHENCLR CH1: Disable PPI channel 1."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(1, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH2: Disable PPI channel 2."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch2(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(2))
    }
    #[doc = "PPI CHENCLR CH2: Disable PPI channel 2."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(2, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH3: Disable PPI channel 3."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch3(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(3))
    }
    #[doc = "PPI CHENCLR CH3: Disable PPI channel 3."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(3, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH4: Disable PPI channel 4."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch4(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(4))
    }
    #[doc = "PPI CHENCLR CH4: Disable PPI channel 4."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch4(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(4, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH5: Disable PPI channel 5."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch5(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(5))
    }
    #[doc = "PPI CHENCLR CH5: Disable PPI channel 5."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(5, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH6: Disable PPI channel 6."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch6(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(6))
    }
    #[doc = "PPI CHENCLR CH6: Disable PPI channel 6."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch6(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(6, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH7: Disable PPI channel 7."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch7(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(7))
    }
    #[doc = "PPI CHENCLR CH7: Disable PPI channel 7."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch7(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(7, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH8: Disable PPI channel 8."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch8(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(8))
    }
    #[doc = "PPI CHENCLR CH8: Disable PPI channel 8."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch8(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(8, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH9: Disable PPI channel 9."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch9(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(9))
    }
    #[doc = "PPI CHENCLR CH9: Disable PPI channel 9."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch9(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(9, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH10: Disable PPI channel 10."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch10(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(10))
    }
    #[doc = "PPI CHENCLR CH10: Disable PPI channel 10."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch10(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(10, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH11: Disable PPI channel 11."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch11(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(11))
    }
    #[doc = "PPI CHENCLR CH11: Disable PPI channel 11."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch11(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(11, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH12: Disable PPI channel 12."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch12(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(12))
    }
    #[doc = "PPI CHENCLR CH12: Disable PPI channel 12."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch12(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(12, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH13: Disable PPI channel 13."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch13(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(13))
    }
    #[doc = "PPI CHENCLR CH13: Disable PPI channel 13."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch13(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(13, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH14: Disable PPI channel 14."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch14(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(14))
    }
    #[doc = "PPI CHENCLR CH14: Disable PPI channel 14."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch14(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(14, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH15: Disable PPI channel 15."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch15(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(15))
    }
    #[doc = "PPI CHENCLR CH15: Disable PPI channel 15."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch15(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(15, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH16: Disable PPI channel 16."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch16(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(16))
    }
    #[doc = "PPI CHENCLR CH16: Disable PPI channel 16."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch16(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(16, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH17: Disable PPI channel 17."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch17(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(17))
    }
    #[doc = "PPI CHENCLR CH17: Disable PPI channel 17."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch17(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(17, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH18: Disable PPI channel 18."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch18(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(18))
    }
    #[doc = "PPI CHENCLR CH18: Disable PPI channel 18."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch18(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(18, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH19: Disable PPI channel 19."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch19(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(19))
    }
    #[doc = "PPI CHENCLR CH19: Disable PPI channel 19."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch19(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(19, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH20: Disable PPI channel 20."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch20(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(20))
    }
    #[doc = "PPI CHENCLR CH20: Disable PPI channel 20."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch20(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(20, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH21: Disable PPI channel 21."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch21(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(21))
    }
    #[doc = "PPI CHENCLR CH21: Disable PPI channel 21."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch21(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(21, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH22: Disable PPI channel 22."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch22(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(22))
    }
    #[doc = "PPI CHENCLR CH22: Disable PPI channel 22."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch22(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(22, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH23: Disable PPI channel 23."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch23(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(23))
    }
    #[doc = "PPI CHENCLR CH23: Disable PPI channel 23."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch23(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(23, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH24: Disable PPI channel 24."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch24(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(24))
    }
    #[doc = "PPI CHENCLR CH24: Disable PPI channel 24."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch24(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(24, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH25: Disable PPI channel 25."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch25(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(25))
    }
    #[doc = "PPI CHENCLR CH25: Disable PPI channel 25."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch25(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(25, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH26: Disable PPI channel 26."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch26(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(26))
    }
    #[doc = "PPI CHENCLR CH26: Disable PPI channel 26."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch26(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(26, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH27: Disable PPI channel 27."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch27(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(27))
    }
    #[doc = "PPI CHENCLR CH27: Disable PPI channel 27."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch27(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(27, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH28: Disable PPI channel 28."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch28(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(28))
    }
    #[doc = "PPI CHENCLR CH28: Disable PPI channel 28."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch28(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(28, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH29: Disable PPI channel 29."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch29(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(29))
    }
    #[doc = "PPI CHENCLR CH29: Disable PPI channel 29."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch29(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(29, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH30: Disable PPI channel 30."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch30(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(30))
    }
    #[doc = "PPI CHENCLR CH30: Disable PPI channel 30."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch30(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(30, false);
        }
        Ok(())
    }
    #[doc = "PPI CHENCLR CH31: Disable PPI channel 31."]
    #[inline]
    pub(crate) fn read_ppi_chenclr_ch31(&self) -> MemResult<bool> {
        Ok(self.ppi.is_on(31))
    }
    #[doc = "PPI CHENCLR CH31: Disable PPI channel 31."]
    #[inline]
    pub(crate) fn write_ppi_chenclr_ch31(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        if _value {
            self.ppi.set_on(31, false);
        }
        Ok(())
    }
    #[doc = "PPI EEP: Description cluster[0]:  Channel 0 event end-point"]
    #[inline]
    pub(crate) fn read_ppi_chn_eep(&self, _dim: usize) -> MemResult<u32> {
        Ok(self.ppi.event(_dim))
    }
    #[doc = "PPI EEP: Description cluster[0]:  Channel 0 event end-point"]
    #[inline]
    pub(crate) fn write_ppi_chn_eep(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.ppi.set_event(_dim, _value))
    }
    #[doc = "PPI TEP: Description cluster[0]:  Channel 0 task end-point"]
    #[inline]
    pub(crate) fn read_ppi_chn_tep(&self, _dim: usize) -> MemResult<u32> {
        Ok(self.ppi.task(_dim))
    }
    #[doc = "PPI TEP: Description cluster[0]:  Channel 0 task end-point"]
    #[inline]
    pub(crate) fn write_ppi_chn_tep(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.ppi.set_task(_dim, _value))
    }
    #[doc = "PPI CHG[%s] CH0: Include CH0 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch0(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 0))
    }
    #[doc = "PPI CHG[%s] CH0: Include CH0 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch0(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 0, _value))
    }
    #[doc = "PPI CHG[%s] CH1: Include CH1 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch1(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 1))
    }
    #[doc = "PPI CHG[%s] CH1: Include CH1 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch1(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 1, _value))
    }
    #[doc = "PPI CHG[%s] CH2: Include CH2 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch2(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 2))
    }
    #[doc = "PPI CHG[%s] CH2: Include CH2 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch2(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 2, _value))
    }
    #[doc = "PPI CHG[%s] CH3: Include CH3 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch3(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 3))
    }
    #[doc = "PPI CHG[%s] CH3: Include CH3 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch3(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 3, _value))
    }
    #[doc = "PPI CHG[%s] CH4: Include CH4 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch4(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 4))
    }
    #[doc = "PPI CHG[%s] CH4: Include CH4 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch4(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 4, _value))
    }
    #[doc = "PPI CHG[%s] CH5: Include CH5 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch5(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 5))
    }
    #[doc = "PPI CHG[%s] CH5: Include CH5 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch5(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 5, _value))
    }
    #[doc = "PPI CHG[%s] CH6: Include CH6 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch6(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 6))
    }
    #[doc = "PPI CHG[%s] CH6: Include CH6 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch6(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 6, _value))
    }
    #[doc = "PPI CHG[%s] CH7: Include CH7 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch7(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 7))
    }
    #[doc = "PPI CHG[%s] CH7: Include CH7 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch7(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 7, _value))
    }
    #[doc = "PPI CHG[%s] CH8: Include CH8 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch8(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 8))
    }
    #[doc = "PPI CHG[%s] CH8: Include CH8 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch8(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 8, _value))
    }
    #[doc = "PPI CHG[%s] CH9: Include CH9 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch9(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 9))
    }
    #[doc = "PPI CHG[%s] CH9: Include CH9 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch9(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 9, _value))
    }
    #[doc = "PPI CHG[%s] CH10: Include CH10 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch10(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 10))
    }
    #[doc = "PPI CHG[%s] CH10: Include CH10 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch10(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 10, _value))
    }
    #[doc = "PPI CHG[%s] CH11: Include CH11 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch11(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 11))
    }
    #[doc = "PPI CHG[%s] CH11: Include CH11 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch11(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 11, _value))
    }
    #[doc = "PPI CHG[%s] CH12: Include CH12 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch12(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 12))
    }
    #[doc = "PPI CHG[%s] CH12: Include CH12 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch12(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 12, _value))
    }
    #[doc = "PPI CHG[%s] CH13: Include CH13 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch13(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 13))
    }
    #[doc = "PPI CHG[%s] CH13: Include CH13 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch13(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 13, _value))
    }
    #[doc = "PPI CHG[%s] CH14: Include CH14 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch14(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 14))
    }
    #[doc = "PPI CHG[%s] CH14: Include CH14 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch14(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 14, _value))
    }
    #[doc = "PPI CHG[%s] CH15: Include CH15 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch15(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 15))
    }
    #[doc = "PPI CHG[%s] CH15: Include CH15 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch15(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 15, _value))
    }
    #[doc = "PPI CHG[%s] CH16: Include CH16 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch16(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 16))
    }
    #[doc = "PPI CHG[%s] CH16: Include CH16 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch16(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 16, _value))
    }
    #[doc = "PPI CHG[%s] CH16: Include CH16 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch17(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 17))
    }
    #[doc = "PPI CHG[%s] CH17: Include CH17 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch17(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 17, _value))
    }
    #[doc = "PPI CHG[%s] CH18: Include CH18 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch18(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 18))
    }
    #[doc = "PPI CHG[%s] CH18: Include CH18 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch18(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 18, _value))
    }
    #[doc = "PPI CHG[%s] CH19: Include CH19 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch19(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 19))
    }
    #[doc = "PPI CHG[%s] CH19: Include CH18 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch19(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 19, _value))
    }
    #[doc = "PPI CHG[%s] CH20: Include CH20 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch20(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 20))
    }
    #[doc = "PPI CHG[%s] CH20: Include CH20 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch20(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 20, _value))
    }
    #[doc = "PPI CHG[%s] CH21: Include CH21 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch21(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 21))
    }
    #[doc = "PPI CHG[%s] CH21: Include CH21 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch21(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 21, _value))
    }
    #[doc = "PPI CHG[%s] CH22: Include CH22 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch22(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 22))
    }
    #[doc = "PPI CHG[%s] CH22: Include CH22 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch22(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 22, _value))
    }
    #[doc = "PPI CHG[%s] CH23: Include CH23 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch23(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 23))
    }
    #[doc = "PPI CHG[%s] CH23: Include CH23 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch23(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 23, _value))
    }
    #[doc = "PPI CHG[%s] CH24: Include CH24 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch24(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 24))
    }
    #[doc = "PPI CHG[%s] CH24: Include CH24 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch24(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 24, _value))
    }
    #[doc = "PPI CHG[%s] CH25: Include CH25 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch25(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 25))
    }
    #[doc = "PPI CHG[%s] CH25: Include CH25 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch25(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 25, _value))
    }
    #[doc = "PPI CHG[%s] CH26: Include CH26 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch26(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 26))
    }
    #[doc = "PPI CHG[%s] CH26: Include CH26 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch26(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 26, _value))
    }
    #[doc = "PPI CHG[%s] CH27: Include CH27 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch27(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 27))
    }
    #[doc = "PPI CHG[%s] CH27: Include CH27 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch27(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 27, _value))
    }
    #[doc = "PPI CHG[%s] CH28: Include CH28 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch28(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 28))
    }
    #[doc = "PPI CHG[%s] CH28: Include CH28 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch28(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 28, _value))
    }
    #[doc = "PPI CHG[%s] CH29: Include CH29 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch29(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 29))
    }
    #[doc = "PPI CHG[%s] CH29: Include CH29 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch29(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 29, _value))
    }
    #[doc = "PPI CHG[%s] CH30: Include CH30 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch30(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 30))
    }
    #[doc = "PPI CHG[%s] CH30: Include CH30 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch30(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 30, _value))
    }
    #[doc = "PPI CHG[%s] CH31: Include CH31 in channel group."]
    #[inline]
    pub(crate) fn read_ppi_chgn_ch31(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.ppi.is_included(_dim, 31))
    }
    #[doc = "PPI CHG[%s] CH31: Include CH31 in channel group."]
    #[inline]
    pub(crate) fn write_ppi_chgn_ch31(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.ppi.set_included(_dim, 31, _value))
    }
    #[doc = "PPI TEP: Description cluster[0]:  Channel 0 task end-point"]
    #[inline]
    pub(crate) fn read_ppi_forkn_tep(&self, _dim: usize) -> MemResult<u32> {
        todo!("read PPI TEP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "PPI TEP: Description cluster[0]:  Channel 0 task end-point"]
    #[inline]
    pub(crate) fn write_ppi_forkn_tep(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write PPI TEP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU WA: Description cluster[0]:  Write access to region 0 detected"]
    #[inline]
    pub(crate) fn read_mwu_events_regionn_wa(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo!("read MWU WA reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU WA: Description cluster[0]:  Write access to region 0 detected"]
    #[inline]
    pub(crate) fn write_mwu_events_regionn_wa(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write MWU WA reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU RA: Description cluster[0]:  Read access to region 0 detected"]
    #[inline]
    pub(crate) fn read_mwu_events_regionn_ra(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo!("read MWU RA reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU RA: Description cluster[0]:  Read access to region 0 detected"]
    #[inline]
    pub(crate) fn write_mwu_events_regionn_ra(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write MWU RA reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU WA: Description cluster[0]:  Write access to peripheral region 0 detected"]
    #[inline]
    pub(crate) fn read_mwu_events_pregionn_wa(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo!("read MWU WA reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU WA: Description cluster[0]:  Write access to peripheral region 0 detected"]
    #[inline]
    pub(crate) fn write_mwu_events_pregionn_wa(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write MWU WA reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU RA: Description cluster[0]:  Read access to peripheral region 0 detected"]
    #[inline]
    pub(crate) fn read_mwu_events_pregionn_ra(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo!("read MWU RA reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU RA: Description cluster[0]:  Read access to peripheral region 0 detected"]
    #[inline]
    pub(crate) fn write_mwu_events_pregionn_ra(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write MWU RA reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU INTEN REGION0WA: Enable or disable interrupt for REGION[0].WA event"]
    #[inline]
    pub(crate) fn read_mwu_inten_region0wa(&self) -> MemResult<bool> {
        todo!("read MWU INTEN REGION0WA reset value false")
    }
    #[doc = "MWU INTEN REGION0WA: Enable or disable interrupt for REGION[0].WA event"]
    #[inline]
    pub(crate) fn write_mwu_inten_region0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTEN REGION0WA reset value false")
    }
    #[doc = "MWU INTEN REGION0RA: Enable or disable interrupt for REGION[0].RA event"]
    #[inline]
    pub(crate) fn read_mwu_inten_region0ra(&self) -> MemResult<bool> {
        todo!("read MWU INTEN REGION0RA reset value false")
    }
    #[doc = "MWU INTEN REGION0RA: Enable or disable interrupt for REGION[0].RA event"]
    #[inline]
    pub(crate) fn write_mwu_inten_region0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTEN REGION0RA reset value false")
    }
    #[doc = "MWU INTEN REGION1WA: Enable or disable interrupt for REGION[1].WA event"]
    #[inline]
    pub(crate) fn read_mwu_inten_region1wa(&self) -> MemResult<bool> {
        todo!("read MWU INTEN REGION1WA reset value false")
    }
    #[doc = "MWU INTEN REGION1WA: Enable or disable interrupt for REGION[1].WA event"]
    #[inline]
    pub(crate) fn write_mwu_inten_region1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTEN REGION1WA reset value false")
    }
    #[doc = "MWU INTEN REGION1RA: Enable or disable interrupt for REGION[1].RA event"]
    #[inline]
    pub(crate) fn read_mwu_inten_region1ra(&self) -> MemResult<bool> {
        todo!("read MWU INTEN REGION1RA reset value false")
    }
    #[doc = "MWU INTEN REGION1RA: Enable or disable interrupt for REGION[1].RA event"]
    #[inline]
    pub(crate) fn write_mwu_inten_region1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTEN REGION1RA reset value false")
    }
    #[doc = "MWU INTEN REGION2WA: Enable or disable interrupt for REGION[2].WA event"]
    #[inline]
    pub(crate) fn read_mwu_inten_region2wa(&self) -> MemResult<bool> {
        todo!("read MWU INTEN REGION2WA reset value false")
    }
    #[doc = "MWU INTEN REGION2WA: Enable or disable interrupt for REGION[2].WA event"]
    #[inline]
    pub(crate) fn write_mwu_inten_region2wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTEN REGION2WA reset value false")
    }
    #[doc = "MWU INTEN REGION2RA: Enable or disable interrupt for REGION[2].RA event"]
    #[inline]
    pub(crate) fn read_mwu_inten_region2ra(&self) -> MemResult<bool> {
        todo!("read MWU INTEN REGION2RA reset value false")
    }
    #[doc = "MWU INTEN REGION2RA: Enable or disable interrupt for REGION[2].RA event"]
    #[inline]
    pub(crate) fn write_mwu_inten_region2ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTEN REGION2RA reset value false")
    }
    #[doc = "MWU INTEN REGION3WA: Enable or disable interrupt for REGION[3].WA event"]
    #[inline]
    pub(crate) fn read_mwu_inten_region3wa(&self) -> MemResult<bool> {
        todo!("read MWU INTEN REGION3WA reset value false")
    }
    #[doc = "MWU INTEN REGION3WA: Enable or disable interrupt for REGION[3].WA event"]
    #[inline]
    pub(crate) fn write_mwu_inten_region3wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTEN REGION3WA reset value false")
    }
    #[doc = "MWU INTEN REGION3RA: Enable or disable interrupt for REGION[3].RA event"]
    #[inline]
    pub(crate) fn read_mwu_inten_region3ra(&self) -> MemResult<bool> {
        todo!("read MWU INTEN REGION3RA reset value false")
    }
    #[doc = "MWU INTEN REGION3RA: Enable or disable interrupt for REGION[3].RA event"]
    #[inline]
    pub(crate) fn write_mwu_inten_region3ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTEN REGION3RA reset value false")
    }
    #[doc = "MWU INTEN PREGION0WA: Enable or disable interrupt for PREGION[0].WA event"]
    #[inline]
    pub(crate) fn read_mwu_inten_pregion0wa(&self) -> MemResult<bool> {
        todo!("read MWU INTEN PREGION0WA reset value false")
    }
    #[doc = "MWU INTEN PREGION0WA: Enable or disable interrupt for PREGION[0].WA event"]
    #[inline]
    pub(crate) fn write_mwu_inten_pregion0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTEN PREGION0WA reset value false")
    }
    #[doc = "MWU INTEN PREGION0RA: Enable or disable interrupt for PREGION[0].RA event"]
    #[inline]
    pub(crate) fn read_mwu_inten_pregion0ra(&self) -> MemResult<bool> {
        todo!("read MWU INTEN PREGION0RA reset value false")
    }
    #[doc = "MWU INTEN PREGION0RA: Enable or disable interrupt for PREGION[0].RA event"]
    #[inline]
    pub(crate) fn write_mwu_inten_pregion0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTEN PREGION0RA reset value false")
    }
    #[doc = "MWU INTEN PREGION1WA: Enable or disable interrupt for PREGION[1].WA event"]
    #[inline]
    pub(crate) fn read_mwu_inten_pregion1wa(&self) -> MemResult<bool> {
        todo!("read MWU INTEN PREGION1WA reset value false")
    }
    #[doc = "MWU INTEN PREGION1WA: Enable or disable interrupt for PREGION[1].WA event"]
    #[inline]
    pub(crate) fn write_mwu_inten_pregion1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTEN PREGION1WA reset value false")
    }
    #[doc = "MWU INTEN PREGION1RA: Enable or disable interrupt for PREGION[1].RA event"]
    #[inline]
    pub(crate) fn read_mwu_inten_pregion1ra(&self) -> MemResult<bool> {
        todo!("read MWU INTEN PREGION1RA reset value false")
    }
    #[doc = "MWU INTEN PREGION1RA: Enable or disable interrupt for PREGION[1].RA event"]
    #[inline]
    pub(crate) fn write_mwu_inten_pregion1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTEN PREGION1RA reset value false")
    }
    #[doc = "MWU INTENSET REGION0WA: Write '1' to Enable interrupt for REGION[0].WA event"]
    #[inline]
    pub(crate) fn read_mwu_intenset_region0wa(&self) -> MemResult<bool> {
        todo!("read MWU INTENSET REGION0WA reset value false")
    }
    #[doc = "MWU INTENSET REGION0WA: Write '1' to Enable interrupt for REGION[0].WA event"]
    #[inline]
    pub(crate) fn write_mwu_intenset_region0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENSET REGION0WA reset value false")
    }
    #[doc = "MWU INTENSET REGION0RA: Write '1' to Enable interrupt for REGION[0].RA event"]
    #[inline]
    pub(crate) fn read_mwu_intenset_region0ra(&self) -> MemResult<bool> {
        todo!("read MWU INTENSET REGION0RA reset value false")
    }
    #[doc = "MWU INTENSET REGION0RA: Write '1' to Enable interrupt for REGION[0].RA event"]
    #[inline]
    pub(crate) fn write_mwu_intenset_region0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENSET REGION0RA reset value false")
    }
    #[doc = "MWU INTENSET REGION1WA: Write '1' to Enable interrupt for REGION[1].WA event"]
    #[inline]
    pub(crate) fn read_mwu_intenset_region1wa(&self) -> MemResult<bool> {
        todo!("read MWU INTENSET REGION1WA reset value false")
    }
    #[doc = "MWU INTENSET REGION1WA: Write '1' to Enable interrupt for REGION[1].WA event"]
    #[inline]
    pub(crate) fn write_mwu_intenset_region1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENSET REGION1WA reset value false")
    }
    #[doc = "MWU INTENSET REGION1RA: Write '1' to Enable interrupt for REGION[1].RA event"]
    #[inline]
    pub(crate) fn read_mwu_intenset_region1ra(&self) -> MemResult<bool> {
        todo!("read MWU INTENSET REGION1RA reset value false")
    }
    #[doc = "MWU INTENSET REGION1RA: Write '1' to Enable interrupt for REGION[1].RA event"]
    #[inline]
    pub(crate) fn write_mwu_intenset_region1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENSET REGION1RA reset value false")
    }
    #[doc = "MWU INTENSET REGION2WA: Write '1' to Enable interrupt for REGION[2].WA event"]
    #[inline]
    pub(crate) fn read_mwu_intenset_region2wa(&self) -> MemResult<bool> {
        todo!("read MWU INTENSET REGION2WA reset value false")
    }
    #[doc = "MWU INTENSET REGION2WA: Write '1' to Enable interrupt for REGION[2].WA event"]
    #[inline]
    pub(crate) fn write_mwu_intenset_region2wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENSET REGION2WA reset value false")
    }
    #[doc = "MWU INTENSET REGION2RA: Write '1' to Enable interrupt for REGION[2].RA event"]
    #[inline]
    pub(crate) fn read_mwu_intenset_region2ra(&self) -> MemResult<bool> {
        todo!("read MWU INTENSET REGION2RA reset value false")
    }
    #[doc = "MWU INTENSET REGION2RA: Write '1' to Enable interrupt for REGION[2].RA event"]
    #[inline]
    pub(crate) fn write_mwu_intenset_region2ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENSET REGION2RA reset value false")
    }
    #[doc = "MWU INTENSET REGION3WA: Write '1' to Enable interrupt for REGION[3].WA event"]
    #[inline]
    pub(crate) fn read_mwu_intenset_region3wa(&self) -> MemResult<bool> {
        todo!("read MWU INTENSET REGION3WA reset value false")
    }
    #[doc = "MWU INTENSET REGION3WA: Write '1' to Enable interrupt for REGION[3].WA event"]
    #[inline]
    pub(crate) fn write_mwu_intenset_region3wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENSET REGION3WA reset value false")
    }
    #[doc = "MWU INTENSET REGION3RA: Write '1' to Enable interrupt for REGION[3].RA event"]
    #[inline]
    pub(crate) fn read_mwu_intenset_region3ra(&self) -> MemResult<bool> {
        todo!("read MWU INTENSET REGION3RA reset value false")
    }
    #[doc = "MWU INTENSET REGION3RA: Write '1' to Enable interrupt for REGION[3].RA event"]
    #[inline]
    pub(crate) fn write_mwu_intenset_region3ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENSET REGION3RA reset value false")
    }
    #[doc = "MWU INTENSET PREGION0WA: Write '1' to Enable interrupt for PREGION[0].WA event"]
    #[inline]
    pub(crate) fn read_mwu_intenset_pregion0wa(&self) -> MemResult<bool> {
        todo!("read MWU INTENSET PREGION0WA reset value false")
    }
    #[doc = "MWU INTENSET PREGION0WA: Write '1' to Enable interrupt for PREGION[0].WA event"]
    #[inline]
    pub(crate) fn write_mwu_intenset_pregion0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENSET PREGION0WA reset value false")
    }
    #[doc = "MWU INTENSET PREGION0RA: Write '1' to Enable interrupt for PREGION[0].RA event"]
    #[inline]
    pub(crate) fn read_mwu_intenset_pregion0ra(&self) -> MemResult<bool> {
        todo!("read MWU INTENSET PREGION0RA reset value false")
    }
    #[doc = "MWU INTENSET PREGION0RA: Write '1' to Enable interrupt for PREGION[0].RA event"]
    #[inline]
    pub(crate) fn write_mwu_intenset_pregion0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENSET PREGION0RA reset value false")
    }
    #[doc = "MWU INTENSET PREGION1WA: Write '1' to Enable interrupt for PREGION[1].WA event"]
    #[inline]
    pub(crate) fn read_mwu_intenset_pregion1wa(&self) -> MemResult<bool> {
        todo!("read MWU INTENSET PREGION1WA reset value false")
    }
    #[doc = "MWU INTENSET PREGION1WA: Write '1' to Enable interrupt for PREGION[1].WA event"]
    #[inline]
    pub(crate) fn write_mwu_intenset_pregion1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENSET PREGION1WA reset value false")
    }
    #[doc = "MWU INTENSET PREGION1RA: Write '1' to Enable interrupt for PREGION[1].RA event"]
    #[inline]
    pub(crate) fn read_mwu_intenset_pregion1ra(&self) -> MemResult<bool> {
        todo!("read MWU INTENSET PREGION1RA reset value false")
    }
    #[doc = "MWU INTENSET PREGION1RA: Write '1' to Enable interrupt for PREGION[1].RA event"]
    #[inline]
    pub(crate) fn write_mwu_intenset_pregion1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENSET PREGION1RA reset value false")
    }
    #[doc = "MWU INTENCLR REGION0WA: Write '1' to Disable interrupt for REGION[0].WA event"]
    #[inline]
    pub(crate) fn read_mwu_intenclr_region0wa(&self) -> MemResult<bool> {
        todo!("read MWU INTENCLR REGION0WA reset value false")
    }
    #[doc = "MWU INTENCLR REGION0WA: Write '1' to Disable interrupt for REGION[0].WA event"]
    #[inline]
    pub(crate) fn write_mwu_intenclr_region0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENCLR REGION0WA reset value false")
    }
    #[doc = "MWU INTENCLR REGION0RA: Write '1' to Disable interrupt for REGION[0].RA event"]
    #[inline]
    pub(crate) fn read_mwu_intenclr_region0ra(&self) -> MemResult<bool> {
        todo!("read MWU INTENCLR REGION0RA reset value false")
    }
    #[doc = "MWU INTENCLR REGION0RA: Write '1' to Disable interrupt for REGION[0].RA event"]
    #[inline]
    pub(crate) fn write_mwu_intenclr_region0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENCLR REGION0RA reset value false")
    }
    #[doc = "MWU INTENCLR REGION1WA: Write '1' to Disable interrupt for REGION[1].WA event"]
    #[inline]
    pub(crate) fn read_mwu_intenclr_region1wa(&self) -> MemResult<bool> {
        todo!("read MWU INTENCLR REGION1WA reset value false")
    }
    #[doc = "MWU INTENCLR REGION1WA: Write '1' to Disable interrupt for REGION[1].WA event"]
    #[inline]
    pub(crate) fn write_mwu_intenclr_region1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENCLR REGION1WA reset value false")
    }
    #[doc = "MWU INTENCLR REGION1RA: Write '1' to Disable interrupt for REGION[1].RA event"]
    #[inline]
    pub(crate) fn read_mwu_intenclr_region1ra(&self) -> MemResult<bool> {
        todo!("read MWU INTENCLR REGION1RA reset value false")
    }
    #[doc = "MWU INTENCLR REGION1RA: Write '1' to Disable interrupt for REGION[1].RA event"]
    #[inline]
    pub(crate) fn write_mwu_intenclr_region1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENCLR REGION1RA reset value false")
    }
    #[doc = "MWU INTENCLR REGION2WA: Write '1' to Disable interrupt for REGION[2].WA event"]
    #[inline]
    pub(crate) fn read_mwu_intenclr_region2wa(&self) -> MemResult<bool> {
        todo!("read MWU INTENCLR REGION2WA reset value false")
    }
    #[doc = "MWU INTENCLR REGION2WA: Write '1' to Disable interrupt for REGION[2].WA event"]
    #[inline]
    pub(crate) fn write_mwu_intenclr_region2wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENCLR REGION2WA reset value false")
    }
    #[doc = "MWU INTENCLR REGION2RA: Write '1' to Disable interrupt for REGION[2].RA event"]
    #[inline]
    pub(crate) fn read_mwu_intenclr_region2ra(&self) -> MemResult<bool> {
        todo!("read MWU INTENCLR REGION2RA reset value false")
    }
    #[doc = "MWU INTENCLR REGION2RA: Write '1' to Disable interrupt for REGION[2].RA event"]
    #[inline]
    pub(crate) fn write_mwu_intenclr_region2ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENCLR REGION2RA reset value false")
    }
    #[doc = "MWU INTENCLR REGION3WA: Write '1' to Disable interrupt for REGION[3].WA event"]
    #[inline]
    pub(crate) fn read_mwu_intenclr_region3wa(&self) -> MemResult<bool> {
        todo!("read MWU INTENCLR REGION3WA reset value false")
    }
    #[doc = "MWU INTENCLR REGION3WA: Write '1' to Disable interrupt for REGION[3].WA event"]
    #[inline]
    pub(crate) fn write_mwu_intenclr_region3wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENCLR REGION3WA reset value false")
    }
    #[doc = "MWU INTENCLR REGION3RA: Write '1' to Disable interrupt for REGION[3].RA event"]
    #[inline]
    pub(crate) fn read_mwu_intenclr_region3ra(&self) -> MemResult<bool> {
        todo!("read MWU INTENCLR REGION3RA reset value false")
    }
    #[doc = "MWU INTENCLR REGION3RA: Write '1' to Disable interrupt for REGION[3].RA event"]
    #[inline]
    pub(crate) fn write_mwu_intenclr_region3ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENCLR REGION3RA reset value false")
    }
    #[doc = "MWU INTENCLR PREGION0WA: Write '1' to Disable interrupt for PREGION[0].WA event"]
    #[inline]
    pub(crate) fn read_mwu_intenclr_pregion0wa(&self) -> MemResult<bool> {
        todo!("read MWU INTENCLR PREGION0WA reset value false")
    }
    #[doc = "MWU INTENCLR PREGION0WA: Write '1' to Disable interrupt for PREGION[0].WA event"]
    #[inline]
    pub(crate) fn write_mwu_intenclr_pregion0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENCLR PREGION0WA reset value false")
    }
    #[doc = "MWU INTENCLR PREGION0RA: Write '1' to Disable interrupt for PREGION[0].RA event"]
    #[inline]
    pub(crate) fn read_mwu_intenclr_pregion0ra(&self) -> MemResult<bool> {
        todo!("read MWU INTENCLR PREGION0RA reset value false")
    }
    #[doc = "MWU INTENCLR PREGION0RA: Write '1' to Disable interrupt for PREGION[0].RA event"]
    #[inline]
    pub(crate) fn write_mwu_intenclr_pregion0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENCLR PREGION0RA reset value false")
    }
    #[doc = "MWU INTENCLR PREGION1WA: Write '1' to Disable interrupt for PREGION[1].WA event"]
    #[inline]
    pub(crate) fn read_mwu_intenclr_pregion1wa(&self) -> MemResult<bool> {
        todo!("read MWU INTENCLR PREGION1WA reset value false")
    }
    #[doc = "MWU INTENCLR PREGION1WA: Write '1' to Disable interrupt for PREGION[1].WA event"]
    #[inline]
    pub(crate) fn write_mwu_intenclr_pregion1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENCLR PREGION1WA reset value false")
    }
    #[doc = "MWU INTENCLR PREGION1RA: Write '1' to Disable interrupt for PREGION[1].RA event"]
    #[inline]
    pub(crate) fn read_mwu_intenclr_pregion1ra(&self) -> MemResult<bool> {
        todo!("read MWU INTENCLR PREGION1RA reset value false")
    }
    #[doc = "MWU INTENCLR PREGION1RA: Write '1' to Disable interrupt for PREGION[1].RA event"]
    #[inline]
    pub(crate) fn write_mwu_intenclr_pregion1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU INTENCLR PREGION1RA reset value false")
    }
    #[doc = "MWU NMIEN REGION0WA: Enable or disable non-maskable interrupt for REGION[0].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmien_region0wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIEN REGION0WA reset value false")
    }
    #[doc = "MWU NMIEN REGION0WA: Enable or disable non-maskable interrupt for REGION[0].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmien_region0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIEN REGION0WA reset value false")
    }
    #[doc = "MWU NMIEN REGION0RA: Enable or disable non-maskable interrupt for REGION[0].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmien_region0ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIEN REGION0RA reset value false")
    }
    #[doc = "MWU NMIEN REGION0RA: Enable or disable non-maskable interrupt for REGION[0].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmien_region0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIEN REGION0RA reset value false")
    }
    #[doc = "MWU NMIEN REGION1WA: Enable or disable non-maskable interrupt for REGION[1].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmien_region1wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIEN REGION1WA reset value false")
    }
    #[doc = "MWU NMIEN REGION1WA: Enable or disable non-maskable interrupt for REGION[1].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmien_region1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIEN REGION1WA reset value false")
    }
    #[doc = "MWU NMIEN REGION1RA: Enable or disable non-maskable interrupt for REGION[1].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmien_region1ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIEN REGION1RA reset value false")
    }
    #[doc = "MWU NMIEN REGION1RA: Enable or disable non-maskable interrupt for REGION[1].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmien_region1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIEN REGION1RA reset value false")
    }
    #[doc = "MWU NMIEN REGION2WA: Enable or disable non-maskable interrupt for REGION[2].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmien_region2wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIEN REGION2WA reset value false")
    }
    #[doc = "MWU NMIEN REGION2WA: Enable or disable non-maskable interrupt for REGION[2].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmien_region2wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIEN REGION2WA reset value false")
    }
    #[doc = "MWU NMIEN REGION2RA: Enable or disable non-maskable interrupt for REGION[2].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmien_region2ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIEN REGION2RA reset value false")
    }
    #[doc = "MWU NMIEN REGION2RA: Enable or disable non-maskable interrupt for REGION[2].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmien_region2ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIEN REGION2RA reset value false")
    }
    #[doc = "MWU NMIEN REGION3WA: Enable or disable non-maskable interrupt for REGION[3].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmien_region3wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIEN REGION3WA reset value false")
    }
    #[doc = "MWU NMIEN REGION3WA: Enable or disable non-maskable interrupt for REGION[3].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmien_region3wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIEN REGION3WA reset value false")
    }
    #[doc = "MWU NMIEN REGION3RA: Enable or disable non-maskable interrupt for REGION[3].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmien_region3ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIEN REGION3RA reset value false")
    }
    #[doc = "MWU NMIEN REGION3RA: Enable or disable non-maskable interrupt for REGION[3].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmien_region3ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIEN REGION3RA reset value false")
    }
    #[doc = "MWU NMIEN PREGION0WA: Enable or disable non-maskable interrupt for PREGION[0].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmien_pregion0wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIEN PREGION0WA reset value false")
    }
    #[doc = "MWU NMIEN PREGION0WA: Enable or disable non-maskable interrupt for PREGION[0].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmien_pregion0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIEN PREGION0WA reset value false")
    }
    #[doc = "MWU NMIEN PREGION0RA: Enable or disable non-maskable interrupt for PREGION[0].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmien_pregion0ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIEN PREGION0RA reset value false")
    }
    #[doc = "MWU NMIEN PREGION0RA: Enable or disable non-maskable interrupt for PREGION[0].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmien_pregion0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIEN PREGION0RA reset value false")
    }
    #[doc = "MWU NMIEN PREGION1WA: Enable or disable non-maskable interrupt for PREGION[1].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmien_pregion1wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIEN PREGION1WA reset value false")
    }
    #[doc = "MWU NMIEN PREGION1WA: Enable or disable non-maskable interrupt for PREGION[1].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmien_pregion1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIEN PREGION1WA reset value false")
    }
    #[doc = "MWU NMIEN PREGION1RA: Enable or disable non-maskable interrupt for PREGION[1].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmien_pregion1ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIEN PREGION1RA reset value false")
    }
    #[doc = "MWU NMIEN PREGION1RA: Enable or disable non-maskable interrupt for PREGION[1].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmien_pregion1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIEN PREGION1RA reset value false")
    }
    #[doc = "MWU NMIENSET REGION0WA: Write '1' to Enable non-maskable interrupt for REGION[0].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienset_region0wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIENSET REGION0WA reset value false")
    }
    #[doc = "MWU NMIENSET REGION0WA: Write '1' to Enable non-maskable interrupt for REGION[0].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienset_region0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENSET REGION0WA reset value false")
    }
    #[doc = "MWU NMIENSET REGION0RA: Write '1' to Enable non-maskable interrupt for REGION[0].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienset_region0ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIENSET REGION0RA reset value false")
    }
    #[doc = "MWU NMIENSET REGION0RA: Write '1' to Enable non-maskable interrupt for REGION[0].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienset_region0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENSET REGION0RA reset value false")
    }
    #[doc = "MWU NMIENSET REGION1WA: Write '1' to Enable non-maskable interrupt for REGION[1].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienset_region1wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIENSET REGION1WA reset value false")
    }
    #[doc = "MWU NMIENSET REGION1WA: Write '1' to Enable non-maskable interrupt for REGION[1].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienset_region1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENSET REGION1WA reset value false")
    }
    #[doc = "MWU NMIENSET REGION1RA: Write '1' to Enable non-maskable interrupt for REGION[1].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienset_region1ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIENSET REGION1RA reset value false")
    }
    #[doc = "MWU NMIENSET REGION1RA: Write '1' to Enable non-maskable interrupt for REGION[1].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienset_region1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENSET REGION1RA reset value false")
    }
    #[doc = "MWU NMIENSET REGION2WA: Write '1' to Enable non-maskable interrupt for REGION[2].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienset_region2wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIENSET REGION2WA reset value false")
    }
    #[doc = "MWU NMIENSET REGION2WA: Write '1' to Enable non-maskable interrupt for REGION[2].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienset_region2wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENSET REGION2WA reset value false")
    }
    #[doc = "MWU NMIENSET REGION2RA: Write '1' to Enable non-maskable interrupt for REGION[2].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienset_region2ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIENSET REGION2RA reset value false")
    }
    #[doc = "MWU NMIENSET REGION2RA: Write '1' to Enable non-maskable interrupt for REGION[2].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienset_region2ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENSET REGION2RA reset value false")
    }
    #[doc = "MWU NMIENSET REGION3WA: Write '1' to Enable non-maskable interrupt for REGION[3].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienset_region3wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIENSET REGION3WA reset value false")
    }
    #[doc = "MWU NMIENSET REGION3WA: Write '1' to Enable non-maskable interrupt for REGION[3].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienset_region3wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENSET REGION3WA reset value false")
    }
    #[doc = "MWU NMIENSET REGION3RA: Write '1' to Enable non-maskable interrupt for REGION[3].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienset_region3ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIENSET REGION3RA reset value false")
    }
    #[doc = "MWU NMIENSET REGION3RA: Write '1' to Enable non-maskable interrupt for REGION[3].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienset_region3ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENSET REGION3RA reset value false")
    }
    #[doc = "MWU NMIENSET PREGION0WA: Write '1' to Enable non-maskable interrupt for PREGION[0].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienset_pregion0wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIENSET PREGION0WA reset value false")
    }
    #[doc = "MWU NMIENSET PREGION0WA: Write '1' to Enable non-maskable interrupt for PREGION[0].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienset_pregion0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENSET PREGION0WA reset value false")
    }
    #[doc = "MWU NMIENSET PREGION0RA: Write '1' to Enable non-maskable interrupt for PREGION[0].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienset_pregion0ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIENSET PREGION0RA reset value false")
    }
    #[doc = "MWU NMIENSET PREGION0RA: Write '1' to Enable non-maskable interrupt for PREGION[0].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienset_pregion0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENSET PREGION0RA reset value false")
    }
    #[doc = "MWU NMIENSET PREGION1WA: Write '1' to Enable non-maskable interrupt for PREGION[1].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienset_pregion1wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIENSET PREGION1WA reset value false")
    }
    #[doc = "MWU NMIENSET PREGION1WA: Write '1' to Enable non-maskable interrupt for PREGION[1].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienset_pregion1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENSET PREGION1WA reset value false")
    }
    #[doc = "MWU NMIENSET PREGION1RA: Write '1' to Enable non-maskable interrupt for PREGION[1].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienset_pregion1ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIENSET PREGION1RA reset value false")
    }
    #[doc = "MWU NMIENSET PREGION1RA: Write '1' to Enable non-maskable interrupt for PREGION[1].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienset_pregion1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENSET PREGION1RA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION0WA: Write '1' to Disable non-maskable interrupt for REGION[0].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienclr_region0wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIENCLR REGION0WA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION0WA: Write '1' to Disable non-maskable interrupt for REGION[0].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienclr_region0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENCLR REGION0WA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION0RA: Write '1' to Disable non-maskable interrupt for REGION[0].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienclr_region0ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIENCLR REGION0RA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION0RA: Write '1' to Disable non-maskable interrupt for REGION[0].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienclr_region0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENCLR REGION0RA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION1WA: Write '1' to Disable non-maskable interrupt for REGION[1].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienclr_region1wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIENCLR REGION1WA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION1WA: Write '1' to Disable non-maskable interrupt for REGION[1].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienclr_region1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENCLR REGION1WA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION1RA: Write '1' to Disable non-maskable interrupt for REGION[1].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienclr_region1ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIENCLR REGION1RA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION1RA: Write '1' to Disable non-maskable interrupt for REGION[1].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienclr_region1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENCLR REGION1RA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION2WA: Write '1' to Disable non-maskable interrupt for REGION[2].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienclr_region2wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIENCLR REGION2WA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION2WA: Write '1' to Disable non-maskable interrupt for REGION[2].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienclr_region2wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENCLR REGION2WA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION2RA: Write '1' to Disable non-maskable interrupt for REGION[2].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienclr_region2ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIENCLR REGION2RA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION2RA: Write '1' to Disable non-maskable interrupt for REGION[2].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienclr_region2ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENCLR REGION2RA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION3WA: Write '1' to Disable non-maskable interrupt for REGION[3].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienclr_region3wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIENCLR REGION3WA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION3WA: Write '1' to Disable non-maskable interrupt for REGION[3].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienclr_region3wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENCLR REGION3WA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION3RA: Write '1' to Disable non-maskable interrupt for REGION[3].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienclr_region3ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIENCLR REGION3RA reset value false")
    }
    #[doc = "MWU NMIENCLR REGION3RA: Write '1' to Disable non-maskable interrupt for REGION[3].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienclr_region3ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENCLR REGION3RA reset value false")
    }
    #[doc = "MWU NMIENCLR PREGION0WA: Write '1' to Disable non-maskable interrupt for PREGION[0].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienclr_pregion0wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIENCLR PREGION0WA reset value false")
    }
    #[doc = "MWU NMIENCLR PREGION0WA: Write '1' to Disable non-maskable interrupt for PREGION[0].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienclr_pregion0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENCLR PREGION0WA reset value false")
    }
    #[doc = "MWU NMIENCLR PREGION0RA: Write '1' to Disable non-maskable interrupt for PREGION[0].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienclr_pregion0ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIENCLR PREGION0RA reset value false")
    }
    #[doc = "MWU NMIENCLR PREGION0RA: Write '1' to Disable non-maskable interrupt for PREGION[0].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienclr_pregion0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENCLR PREGION0RA reset value false")
    }
    #[doc = "MWU NMIENCLR PREGION1WA: Write '1' to Disable non-maskable interrupt for PREGION[1].WA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienclr_pregion1wa(&self) -> MemResult<bool> {
        todo!("read MWU NMIENCLR PREGION1WA reset value false")
    }
    #[doc = "MWU NMIENCLR PREGION1WA: Write '1' to Disable non-maskable interrupt for PREGION[1].WA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienclr_pregion1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENCLR PREGION1WA reset value false")
    }
    #[doc = "MWU NMIENCLR PREGION1RA: Write '1' to Disable non-maskable interrupt for PREGION[1].RA event"]
    #[inline]
    pub(crate) fn read_mwu_nmienclr_pregion1ra(&self) -> MemResult<bool> {
        todo!("read MWU NMIENCLR PREGION1RA reset value false")
    }
    #[doc = "MWU NMIENCLR PREGION1RA: Write '1' to Disable non-maskable interrupt for PREGION[1].RA event"]
    #[inline]
    pub(crate) fn write_mwu_nmienclr_pregion1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU NMIENCLR PREGION1RA reset value false")
    }
    #[doc = "MWU SUBSTATWA SR0: Subregion 0 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr0(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR0 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR0: Subregion 0 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr0(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR0 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR1: Subregion 1 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr1(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR1 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR1: Subregion 1 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr1(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR1 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR2: Subregion 2 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr2(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR2 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR2: Subregion 2 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr2(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR2 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR3: Subregion 3 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr3(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR3 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR3: Subregion 3 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr3(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR3 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR4: Subregion 4 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr4(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR4 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR4: Subregion 4 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr4(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR4 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR5: Subregion 5 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr5(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR5 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR5: Subregion 5 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr5(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR5 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR6: Subregion 6 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr6(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR6 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR6: Subregion 6 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr6(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR6 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR7: Subregion 7 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr7(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR7 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR7: Subregion 7 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr7(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR7 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR8: Subregion 8 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr8(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR8 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR8: Subregion 8 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr8(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR8 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR9: Subregion 9 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr9(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR9 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR9: Subregion 9 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr9(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR9 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR10: Subregion 10 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr10(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR10 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR10: Subregion 10 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr10(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR10 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR11: Subregion 11 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr11(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR11 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR11: Subregion 11 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr11(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR11 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR12: Subregion 12 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr12(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR12 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR12: Subregion 12 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr12(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR12 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR13: Subregion 13 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr13(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR13 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR13: Subregion 13 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr13(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR13 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR14: Subregion 14 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr14(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR14 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR14: Subregion 14 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr14(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR14 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR15: Subregion 15 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr15(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR15 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR15: Subregion 15 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr15(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR15 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR16: Subregion 16 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr16(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR16 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR16: Subregion 16 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr16(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR16 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR17: Subregion 17 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr17(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR17 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR17: Subregion 17 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr17(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR17 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR18: Subregion 18 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr18(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR18 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR18: Subregion 18 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr18(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR18 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR19: Subregion 19 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr19(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR19 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR19: Subregion 19 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr19(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR19 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR20: Subregion 20 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr20(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR20 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR20: Subregion 20 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr20(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR20 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR21: Subregion 21 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr21(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR21 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR21: Subregion 21 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr21(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR21 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR22: Subregion 22 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr22(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR22 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR22: Subregion 22 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr22(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR22 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR23: Subregion 23 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr23(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR23 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR23: Subregion 23 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr23(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR23 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR24: Subregion 24 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr24(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR24 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR24: Subregion 24 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr24(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR24 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR25: Subregion 25 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr25(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR25 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR25: Subregion 25 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr25(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR25 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR26: Subregion 26 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr26(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR26 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR26: Subregion 26 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr26(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR26 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR27: Subregion 27 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr27(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR27 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR27: Subregion 27 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr27(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR27 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR28: Subregion 28 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr28(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR28 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR28: Subregion 28 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr28(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR28 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR29: Subregion 29 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr29(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR29 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR29: Subregion 29 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr29(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR29 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR30: Subregion 30 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr30(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR30 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR30: Subregion 30 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr30(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR30 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR31: Subregion 31 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatwa_sr31(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATWA SR31 reset value false")
    }
    #[doc = "MWU SUBSTATWA SR31: Subregion 31 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatwa_sr31(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATWA SR31 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR0: Subregion 0 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr0(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR0 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR0: Subregion 0 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr0(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR0 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR1: Subregion 1 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr1(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR1 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR1: Subregion 1 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr1(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR1 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR2: Subregion 2 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr2(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR2 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR2: Subregion 2 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr2(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR2 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR3: Subregion 3 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr3(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR3 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR3: Subregion 3 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr3(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR3 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR4: Subregion 4 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr4(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR4 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR4: Subregion 4 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr4(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR4 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR5: Subregion 5 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr5(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR5 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR5: Subregion 5 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr5(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR5 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR6: Subregion 6 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr6(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR6 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR6: Subregion 6 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr6(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR6 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR7: Subregion 7 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr7(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR7 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR7: Subregion 7 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr7(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR7 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR8: Subregion 8 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr8(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR8 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR8: Subregion 8 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr8(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR8 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR9: Subregion 9 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr9(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR9 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR9: Subregion 9 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr9(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR9 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR10: Subregion 10 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr10(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR10 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR10: Subregion 10 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr10(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR10 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR11: Subregion 11 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr11(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR11 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR11: Subregion 11 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr11(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR11 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR12: Subregion 12 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr12(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR12 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR12: Subregion 12 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr12(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR12 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR13: Subregion 13 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr13(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR13 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR13: Subregion 13 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr13(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR13 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR14: Subregion 14 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr14(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR14 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR14: Subregion 14 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr14(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR14 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR15: Subregion 15 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr15(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR15 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR15: Subregion 15 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr15(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR15 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR16: Subregion 16 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr16(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR16 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR16: Subregion 16 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr16(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR16 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR17: Subregion 17 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr17(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR17 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR17: Subregion 17 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr17(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR17 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR18: Subregion 18 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr18(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR18 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR18: Subregion 18 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr18(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR18 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR19: Subregion 19 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr19(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR19 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR19: Subregion 19 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr19(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR19 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR20: Subregion 20 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr20(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR20 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR20: Subregion 20 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr20(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR20 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR21: Subregion 21 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr21(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR21 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR21: Subregion 21 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr21(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR21 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR22: Subregion 22 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr22(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR22 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR22: Subregion 22 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr22(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR22 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR23: Subregion 23 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr23(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR23 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR23: Subregion 23 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr23(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR23 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR24: Subregion 24 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr24(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR24 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR24: Subregion 24 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr24(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR24 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR25: Subregion 25 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr25(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR25 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR25: Subregion 25 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr25(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR25 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR26: Subregion 26 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr26(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR26 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR26: Subregion 26 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr26(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR26 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR27: Subregion 27 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr27(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR27 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR27: Subregion 27 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr27(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR27 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR28: Subregion 28 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr28(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR28 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR28: Subregion 28 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr28(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR28 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR29: Subregion 29 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr29(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR29 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR29: Subregion 29 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr29(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR29 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR30: Subregion 30 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr30(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR30 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR30: Subregion 30 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr30(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR30 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR31: Subregion 31 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn read_mwu_perregionn_substatra_sr31(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBSTATRA SR31 reset value false")
    }
    #[doc = "MWU SUBSTATRA SR31: Subregion 31 in region 0 (write '1' to clear)"]
    #[inline]
    pub(crate) fn write_mwu_perregionn_substatra_sr31(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBSTATRA SR31 reset value false")
    }
    #[doc = "MWU REGIONEN RGN0WA: Enable/disable write access watch in region[0]"]
    #[inline]
    pub(crate) fn read_mwu_regionen_rgn0wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONEN RGN0WA reset value false")
    }
    #[doc = "MWU REGIONEN RGN0WA: Enable/disable write access watch in region[0]"]
    #[inline]
    pub(crate) fn write_mwu_regionen_rgn0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONEN RGN0WA reset value false")
    }
    #[doc = "MWU REGIONEN RGN0RA: Enable/disable read access watch in region[0]"]
    #[inline]
    pub(crate) fn read_mwu_regionen_rgn0ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONEN RGN0RA reset value false")
    }
    #[doc = "MWU REGIONEN RGN0RA: Enable/disable read access watch in region[0]"]
    #[inline]
    pub(crate) fn write_mwu_regionen_rgn0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONEN RGN0RA reset value false")
    }
    #[doc = "MWU REGIONEN RGN1WA: Enable/disable write access watch in region[1]"]
    #[inline]
    pub(crate) fn read_mwu_regionen_rgn1wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONEN RGN1WA reset value false")
    }
    #[doc = "MWU REGIONEN RGN1WA: Enable/disable write access watch in region[1]"]
    #[inline]
    pub(crate) fn write_mwu_regionen_rgn1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONEN RGN1WA reset value false")
    }
    #[doc = "MWU REGIONEN RGN1RA: Enable/disable read access watch in region[1]"]
    #[inline]
    pub(crate) fn read_mwu_regionen_rgn1ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONEN RGN1RA reset value false")
    }
    #[doc = "MWU REGIONEN RGN1RA: Enable/disable read access watch in region[1]"]
    #[inline]
    pub(crate) fn write_mwu_regionen_rgn1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONEN RGN1RA reset value false")
    }
    #[doc = "MWU REGIONEN RGN2WA: Enable/disable write access watch in region[2]"]
    #[inline]
    pub(crate) fn read_mwu_regionen_rgn2wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONEN RGN2WA reset value false")
    }
    #[doc = "MWU REGIONEN RGN2WA: Enable/disable write access watch in region[2]"]
    #[inline]
    pub(crate) fn write_mwu_regionen_rgn2wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONEN RGN2WA reset value false")
    }
    #[doc = "MWU REGIONEN RGN2RA: Enable/disable read access watch in region[2]"]
    #[inline]
    pub(crate) fn read_mwu_regionen_rgn2ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONEN RGN2RA reset value false")
    }
    #[doc = "MWU REGIONEN RGN2RA: Enable/disable read access watch in region[2]"]
    #[inline]
    pub(crate) fn write_mwu_regionen_rgn2ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONEN RGN2RA reset value false")
    }
    #[doc = "MWU REGIONEN RGN3WA: Enable/disable write access watch in region[3]"]
    #[inline]
    pub(crate) fn read_mwu_regionen_rgn3wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONEN RGN3WA reset value false")
    }
    #[doc = "MWU REGIONEN RGN3WA: Enable/disable write access watch in region[3]"]
    #[inline]
    pub(crate) fn write_mwu_regionen_rgn3wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONEN RGN3WA reset value false")
    }
    #[doc = "MWU REGIONEN RGN3RA: Enable/disable read access watch in region[3]"]
    #[inline]
    pub(crate) fn read_mwu_regionen_rgn3ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONEN RGN3RA reset value false")
    }
    #[doc = "MWU REGIONEN RGN3RA: Enable/disable read access watch in region[3]"]
    #[inline]
    pub(crate) fn write_mwu_regionen_rgn3ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONEN RGN3RA reset value false")
    }
    #[doc = "MWU REGIONEN PRGN0WA: Enable/disable write access watch in PREGION[0]"]
    #[inline]
    pub(crate) fn read_mwu_regionen_prgn0wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONEN PRGN0WA reset value false")
    }
    #[doc = "MWU REGIONEN PRGN0WA: Enable/disable write access watch in PREGION[0]"]
    #[inline]
    pub(crate) fn write_mwu_regionen_prgn0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONEN PRGN0WA reset value false")
    }
    #[doc = "MWU REGIONEN PRGN0RA: Enable/disable read access watch in PREGION[0]"]
    #[inline]
    pub(crate) fn read_mwu_regionen_prgn0ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONEN PRGN0RA reset value false")
    }
    #[doc = "MWU REGIONEN PRGN0RA: Enable/disable read access watch in PREGION[0]"]
    #[inline]
    pub(crate) fn write_mwu_regionen_prgn0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONEN PRGN0RA reset value false")
    }
    #[doc = "MWU REGIONEN PRGN1WA: Enable/disable write access watch in PREGION[1]"]
    #[inline]
    pub(crate) fn read_mwu_regionen_prgn1wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONEN PRGN1WA reset value false")
    }
    #[doc = "MWU REGIONEN PRGN1WA: Enable/disable write access watch in PREGION[1]"]
    #[inline]
    pub(crate) fn write_mwu_regionen_prgn1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONEN PRGN1WA reset value false")
    }
    #[doc = "MWU REGIONEN PRGN1RA: Enable/disable read access watch in PREGION[1]"]
    #[inline]
    pub(crate) fn read_mwu_regionen_prgn1ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONEN PRGN1RA reset value false")
    }
    #[doc = "MWU REGIONEN PRGN1RA: Enable/disable read access watch in PREGION[1]"]
    #[inline]
    pub(crate) fn write_mwu_regionen_prgn1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONEN PRGN1RA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN0WA: Enable write access watch in region[0]"]
    #[inline]
    pub(crate) fn read_mwu_regionenset_rgn0wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENSET RGN0WA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN0WA: Enable write access watch in region[0]"]
    #[inline]
    pub(crate) fn write_mwu_regionenset_rgn0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENSET RGN0WA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN0RA: Enable read access watch in region[0]"]
    #[inline]
    pub(crate) fn read_mwu_regionenset_rgn0ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENSET RGN0RA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN0RA: Enable read access watch in region[0]"]
    #[inline]
    pub(crate) fn write_mwu_regionenset_rgn0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENSET RGN0RA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN1WA: Enable write access watch in region[1]"]
    #[inline]
    pub(crate) fn read_mwu_regionenset_rgn1wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENSET RGN1WA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN1WA: Enable write access watch in region[1]"]
    #[inline]
    pub(crate) fn write_mwu_regionenset_rgn1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENSET RGN1WA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN1RA: Enable read access watch in region[1]"]
    #[inline]
    pub(crate) fn read_mwu_regionenset_rgn1ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENSET RGN1RA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN1RA: Enable read access watch in region[1]"]
    #[inline]
    pub(crate) fn write_mwu_regionenset_rgn1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENSET RGN1RA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN2WA: Enable write access watch in region[2]"]
    #[inline]
    pub(crate) fn read_mwu_regionenset_rgn2wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENSET RGN2WA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN2WA: Enable write access watch in region[2]"]
    #[inline]
    pub(crate) fn write_mwu_regionenset_rgn2wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENSET RGN2WA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN2RA: Enable read access watch in region[2]"]
    #[inline]
    pub(crate) fn read_mwu_regionenset_rgn2ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENSET RGN2RA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN2RA: Enable read access watch in region[2]"]
    #[inline]
    pub(crate) fn write_mwu_regionenset_rgn2ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENSET RGN2RA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN3WA: Enable write access watch in region[3]"]
    #[inline]
    pub(crate) fn read_mwu_regionenset_rgn3wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENSET RGN3WA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN3WA: Enable write access watch in region[3]"]
    #[inline]
    pub(crate) fn write_mwu_regionenset_rgn3wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENSET RGN3WA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN3RA: Enable read access watch in region[3]"]
    #[inline]
    pub(crate) fn read_mwu_regionenset_rgn3ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENSET RGN3RA reset value false")
    }
    #[doc = "MWU REGIONENSET RGN3RA: Enable read access watch in region[3]"]
    #[inline]
    pub(crate) fn write_mwu_regionenset_rgn3ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENSET RGN3RA reset value false")
    }
    #[doc = "MWU REGIONENSET PRGN0WA: Enable write access watch in PREGION[0]"]
    #[inline]
    pub(crate) fn read_mwu_regionenset_prgn0wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENSET PRGN0WA reset value false")
    }
    #[doc = "MWU REGIONENSET PRGN0WA: Enable write access watch in PREGION[0]"]
    #[inline]
    pub(crate) fn write_mwu_regionenset_prgn0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENSET PRGN0WA reset value false")
    }
    #[doc = "MWU REGIONENSET PRGN0RA: Enable read access watch in PREGION[0]"]
    #[inline]
    pub(crate) fn read_mwu_regionenset_prgn0ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENSET PRGN0RA reset value false")
    }
    #[doc = "MWU REGIONENSET PRGN0RA: Enable read access watch in PREGION[0]"]
    #[inline]
    pub(crate) fn write_mwu_regionenset_prgn0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENSET PRGN0RA reset value false")
    }
    #[doc = "MWU REGIONENSET PRGN1WA: Enable write access watch in PREGION[1]"]
    #[inline]
    pub(crate) fn read_mwu_regionenset_prgn1wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENSET PRGN1WA reset value false")
    }
    #[doc = "MWU REGIONENSET PRGN1WA: Enable write access watch in PREGION[1]"]
    #[inline]
    pub(crate) fn write_mwu_regionenset_prgn1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENSET PRGN1WA reset value false")
    }
    #[doc = "MWU REGIONENSET PRGN1RA: Enable read access watch in PREGION[1]"]
    #[inline]
    pub(crate) fn read_mwu_regionenset_prgn1ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENSET PRGN1RA reset value false")
    }
    #[doc = "MWU REGIONENSET PRGN1RA: Enable read access watch in PREGION[1]"]
    #[inline]
    pub(crate) fn write_mwu_regionenset_prgn1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENSET PRGN1RA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN0WA: Disable write access watch in region[0]"]
    #[inline]
    pub(crate) fn read_mwu_regionenclr_rgn0wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENCLR RGN0WA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN0WA: Disable write access watch in region[0]"]
    #[inline]
    pub(crate) fn write_mwu_regionenclr_rgn0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENCLR RGN0WA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN0RA: Disable read access watch in region[0]"]
    #[inline]
    pub(crate) fn read_mwu_regionenclr_rgn0ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENCLR RGN0RA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN0RA: Disable read access watch in region[0]"]
    #[inline]
    pub(crate) fn write_mwu_regionenclr_rgn0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENCLR RGN0RA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN1WA: Disable write access watch in region[1]"]
    #[inline]
    pub(crate) fn read_mwu_regionenclr_rgn1wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENCLR RGN1WA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN1WA: Disable write access watch in region[1]"]
    #[inline]
    pub(crate) fn write_mwu_regionenclr_rgn1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENCLR RGN1WA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN1RA: Disable read access watch in region[1]"]
    #[inline]
    pub(crate) fn read_mwu_regionenclr_rgn1ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENCLR RGN1RA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN1RA: Disable read access watch in region[1]"]
    #[inline]
    pub(crate) fn write_mwu_regionenclr_rgn1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENCLR RGN1RA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN2WA: Disable write access watch in region[2]"]
    #[inline]
    pub(crate) fn read_mwu_regionenclr_rgn2wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENCLR RGN2WA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN2WA: Disable write access watch in region[2]"]
    #[inline]
    pub(crate) fn write_mwu_regionenclr_rgn2wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENCLR RGN2WA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN2RA: Disable read access watch in region[2]"]
    #[inline]
    pub(crate) fn read_mwu_regionenclr_rgn2ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENCLR RGN2RA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN2RA: Disable read access watch in region[2]"]
    #[inline]
    pub(crate) fn write_mwu_regionenclr_rgn2ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENCLR RGN2RA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN3WA: Disable write access watch in region[3]"]
    #[inline]
    pub(crate) fn read_mwu_regionenclr_rgn3wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENCLR RGN3WA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN3WA: Disable write access watch in region[3]"]
    #[inline]
    pub(crate) fn write_mwu_regionenclr_rgn3wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENCLR RGN3WA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN3RA: Disable read access watch in region[3]"]
    #[inline]
    pub(crate) fn read_mwu_regionenclr_rgn3ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENCLR RGN3RA reset value false")
    }
    #[doc = "MWU REGIONENCLR RGN3RA: Disable read access watch in region[3]"]
    #[inline]
    pub(crate) fn write_mwu_regionenclr_rgn3ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENCLR RGN3RA reset value false")
    }
    #[doc = "MWU REGIONENCLR PRGN0WA: Disable write access watch in PREGION[0]"]
    #[inline]
    pub(crate) fn read_mwu_regionenclr_prgn0wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENCLR PRGN0WA reset value false")
    }
    #[doc = "MWU REGIONENCLR PRGN0WA: Disable write access watch in PREGION[0]"]
    #[inline]
    pub(crate) fn write_mwu_regionenclr_prgn0wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENCLR PRGN0WA reset value false")
    }
    #[doc = "MWU REGIONENCLR PRGN0RA: Disable read access watch in PREGION[0]"]
    #[inline]
    pub(crate) fn read_mwu_regionenclr_prgn0ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENCLR PRGN0RA reset value false")
    }
    #[doc = "MWU REGIONENCLR PRGN0RA: Disable read access watch in PREGION[0]"]
    #[inline]
    pub(crate) fn write_mwu_regionenclr_prgn0ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENCLR PRGN0RA reset value false")
    }
    #[doc = "MWU REGIONENCLR PRGN1WA: Disable write access watch in PREGION[1]"]
    #[inline]
    pub(crate) fn read_mwu_regionenclr_prgn1wa(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENCLR PRGN1WA reset value false")
    }
    #[doc = "MWU REGIONENCLR PRGN1WA: Disable write access watch in PREGION[1]"]
    #[inline]
    pub(crate) fn write_mwu_regionenclr_prgn1wa(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENCLR PRGN1WA reset value false")
    }
    #[doc = "MWU REGIONENCLR PRGN1RA: Disable read access watch in PREGION[1]"]
    #[inline]
    pub(crate) fn read_mwu_regionenclr_prgn1ra(&self) -> MemResult<bool> {
        todo!("read MWU REGIONENCLR PRGN1RA reset value false")
    }
    #[doc = "MWU REGIONENCLR PRGN1RA: Disable read access watch in PREGION[1]"]
    #[inline]
    pub(crate) fn write_mwu_regionenclr_prgn1ra(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU REGIONENCLR PRGN1RA reset value false")
    }
    #[doc = "MWU START: Description cluster[0]:  Start address for region 0"]
    #[inline]
    pub(crate) fn read_mwu_regionn_start(&self, _dim: usize) -> MemResult<u32> {
        todo!("read MWU START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU START: Description cluster[0]:  Start address for region 0"]
    #[inline]
    pub(crate) fn write_mwu_regionn_start(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write MWU START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU END: Description cluster[0]:  End address of region 0"]
    #[inline]
    pub(crate) fn read_mwu_regionn_end(&self, _dim: usize) -> MemResult<u32> {
        todo!("read MWU END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU END: Description cluster[0]:  End address of region 0"]
    #[inline]
    pub(crate) fn write_mwu_regionn_end(
        &mut self,
        _dim: usize,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write MWU END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU START: Description cluster[0]:  Reserved for future use"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_start(
        &self,
        _dim: usize,
    ) -> MemResult<u32> {
        todo!("read MWU START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU END: Description cluster[0]:  Reserved for future use"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_end(&self, _dim: usize) -> MemResult<u32> {
        todo!("read MWU END reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "MWU SUBS SR0: Include or exclude subregion 0 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr0(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR0 reset value false")
    }
    #[doc = "MWU SUBS SR0: Include or exclude subregion 0 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr0(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR0 reset value false")
    }
    #[doc = "MWU SUBS SR1: Include or exclude subregion 1 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr1(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR1 reset value false")
    }
    #[doc = "MWU SUBS SR1: Include or exclude subregion 1 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr1(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR1 reset value false")
    }
    #[doc = "MWU SUBS SR2: Include or exclude subregion 2 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr2(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR2 reset value false")
    }
    #[doc = "MWU SUBS SR2: Include or exclude subregion 2 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr2(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR2 reset value false")
    }
    #[doc = "MWU SUBS SR3: Include or exclude subregion 3 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr3(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR3 reset value false")
    }
    #[doc = "MWU SUBS SR3: Include or exclude subregion 3 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr3(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR3 reset value false")
    }
    #[doc = "MWU SUBS SR4: Include or exclude subregion 4 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr4(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR4 reset value false")
    }
    #[doc = "MWU SUBS SR4: Include or exclude subregion 4 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr4(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR4 reset value false")
    }
    #[doc = "MWU SUBS SR5: Include or exclude subregion 5 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr5(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR5 reset value false")
    }
    #[doc = "MWU SUBS SR5: Include or exclude subregion 5 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr5(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR5 reset value false")
    }
    #[doc = "MWU SUBS SR6: Include or exclude subregion 6 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr6(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR6 reset value false")
    }
    #[doc = "MWU SUBS SR6: Include or exclude subregion 6 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr6(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR6 reset value false")
    }
    #[doc = "MWU SUBS SR7: Include or exclude subregion 7 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr7(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR7 reset value false")
    }
    #[doc = "MWU SUBS SR7: Include or exclude subregion 7 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr7(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR7 reset value false")
    }
    #[doc = "MWU SUBS SR8: Include or exclude subregion 8 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr8(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR8 reset value false")
    }
    #[doc = "MWU SUBS SR8: Include or exclude subregion 8 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr8(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR8 reset value false")
    }
    #[doc = "MWU SUBS SR9: Include or exclude subregion 9 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr9(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR9 reset value false")
    }
    #[doc = "MWU SUBS SR9: Include or exclude subregion 9 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr9(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR9 reset value false")
    }
    #[doc = "MWU SUBS SR10: Include or exclude subregion 10 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr10(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR10 reset value false")
    }
    #[doc = "MWU SUBS SR10: Include or exclude subregion 10 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr10(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR10 reset value false")
    }
    #[doc = "MWU SUBS SR11: Include or exclude subregion 11 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr11(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR11 reset value false")
    }
    #[doc = "MWU SUBS SR11: Include or exclude subregion 11 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr11(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR11 reset value false")
    }
    #[doc = "MWU SUBS SR12: Include or exclude subregion 12 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr12(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR12 reset value false")
    }
    #[doc = "MWU SUBS SR12: Include or exclude subregion 12 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr12(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR12 reset value false")
    }
    #[doc = "MWU SUBS SR13: Include or exclude subregion 13 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr13(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR13 reset value false")
    }
    #[doc = "MWU SUBS SR13: Include or exclude subregion 13 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr13(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR13 reset value false")
    }
    #[doc = "MWU SUBS SR14: Include or exclude subregion 14 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr14(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR14 reset value false")
    }
    #[doc = "MWU SUBS SR14: Include or exclude subregion 14 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr14(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR14 reset value false")
    }
    #[doc = "MWU SUBS SR15: Include or exclude subregion 15 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr15(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR15 reset value false")
    }
    #[doc = "MWU SUBS SR15: Include or exclude subregion 15 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr15(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR15 reset value false")
    }
    #[doc = "MWU SUBS SR16: Include or exclude subregion 16 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr16(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR16 reset value false")
    }
    #[doc = "MWU SUBS SR16: Include or exclude subregion 16 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr16(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR16 reset value false")
    }
    #[doc = "MWU SUBS SR17: Include or exclude subregion 17 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr17(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR17 reset value false")
    }
    #[doc = "MWU SUBS SR17: Include or exclude subregion 17 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr17(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR17 reset value false")
    }
    #[doc = "MWU SUBS SR18: Include or exclude subregion 18 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr18(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR18 reset value false")
    }
    #[doc = "MWU SUBS SR18: Include or exclude subregion 18 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr18(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR18 reset value false")
    }
    #[doc = "MWU SUBS SR19: Include or exclude subregion 19 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr19(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR19 reset value false")
    }
    #[doc = "MWU SUBS SR19: Include or exclude subregion 19 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr19(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR19 reset value false")
    }
    #[doc = "MWU SUBS SR20: Include or exclude subregion 20 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr20(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR20 reset value false")
    }
    #[doc = "MWU SUBS SR20: Include or exclude subregion 20 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr20(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR20 reset value false")
    }
    #[doc = "MWU SUBS SR21: Include or exclude subregion 21 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr21(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR21 reset value false")
    }
    #[doc = "MWU SUBS SR21: Include or exclude subregion 21 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr21(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR21 reset value false")
    }
    #[doc = "MWU SUBS SR22: Include or exclude subregion 22 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr22(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR22 reset value false")
    }
    #[doc = "MWU SUBS SR22: Include or exclude subregion 22 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr22(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR22 reset value false")
    }
    #[doc = "MWU SUBS SR23: Include or exclude subregion 23 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr23(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR23 reset value false")
    }
    #[doc = "MWU SUBS SR23: Include or exclude subregion 23 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr23(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR23 reset value false")
    }
    #[doc = "MWU SUBS SR24: Include or exclude subregion 24 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr24(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR24 reset value false")
    }
    #[doc = "MWU SUBS SR24: Include or exclude subregion 24 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr24(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR24 reset value false")
    }
    #[doc = "MWU SUBS SR25: Include or exclude subregion 25 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr25(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR25 reset value false")
    }
    #[doc = "MWU SUBS SR25: Include or exclude subregion 25 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr25(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR25 reset value false")
    }
    #[doc = "MWU SUBS SR26: Include or exclude subregion 26 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr26(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR26 reset value false")
    }
    #[doc = "MWU SUBS SR26: Include or exclude subregion 26 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr26(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR26 reset value false")
    }
    #[doc = "MWU SUBS SR27: Include or exclude subregion 27 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr27(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR27 reset value false")
    }
    #[doc = "MWU SUBS SR27: Include or exclude subregion 27 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr27(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR27 reset value false")
    }
    #[doc = "MWU SUBS SR28: Include or exclude subregion 28 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr28(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR28 reset value false")
    }
    #[doc = "MWU SUBS SR28: Include or exclude subregion 28 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr28(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR28 reset value false")
    }
    #[doc = "MWU SUBS SR29: Include or exclude subregion 29 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr29(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR29 reset value false")
    }
    #[doc = "MWU SUBS SR29: Include or exclude subregion 29 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr29(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR29 reset value false")
    }
    #[doc = "MWU SUBS SR30: Include or exclude subregion 30 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr30(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR30 reset value false")
    }
    #[doc = "MWU SUBS SR30: Include or exclude subregion 30 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr30(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR30 reset value false")
    }
    #[doc = "MWU SUBS SR31: Include or exclude subregion 31 in region"]
    #[inline]
    pub(crate) fn read_mwu_pregionn_subs_sr31(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        todo!("read MWU SUBS SR31 reset value false")
    }
    #[doc = "MWU SUBS SR31: Include or exclude subregion 31 in region"]
    #[inline]
    pub(crate) fn write_mwu_pregionn_subs_sr31(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MWU SUBS SR31 reset value false")
    }
    #[doc = "I2S TASKS_START: Starts continuous I2S transfer. Also starts MCK generator when this is enabled."]
    #[inline]
    pub(crate) fn write_i2s_tasks_start(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write I2S TASKS_START reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "I2S TASKS_STOP: Stops I2S transfer. Also stops MCK generator. Triggering this task will cause the {event:STOPPED} event to be generated."]
    #[inline]
    pub(crate) fn write_i2s_tasks_stop(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write I2S TASKS_STOP reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "I2S EVENTS_RXPTRUPD: The RXD.PTR register has been copied to internal double-buffers. When the I2S module is started and RX is enabled, this event will be generated for every RXTXD.MAXCNT words that are received on the SDIN pin."]
    #[inline]
    pub(crate) fn read_i2s_events_rxptrupd(&self) -> MemResult<u32> {
        todo!(
            "read I2S EVENTS_RXPTRUPD reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "I2S EVENTS_RXPTRUPD: The RXD.PTR register has been copied to internal double-buffers. When the I2S module is started and RX is enabled, this event will be generated for every RXTXD.MAXCNT words that are received on the SDIN pin."]
    #[inline]
    pub(crate) fn write_i2s_events_rxptrupd(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write I2S EVENTS_RXPTRUPD reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "I2S EVENTS_STOPPED: I2S transfer stopped."]
    #[inline]
    pub(crate) fn read_i2s_events_stopped(&self) -> MemResult<u32> {
        todo!(
            "read I2S EVENTS_STOPPED reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "I2S EVENTS_STOPPED: I2S transfer stopped."]
    #[inline]
    pub(crate) fn write_i2s_events_stopped(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write I2S EVENTS_STOPPED reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "I2S EVENTS_TXPTRUPD: The TDX.PTR register has been copied to internal double-buffers. When the I2S module is started and TX is enabled, this event will be generated for every RXTXD.MAXCNT words that are sent on the SDOUT pin."]
    #[inline]
    pub(crate) fn read_i2s_events_txptrupd(&self) -> MemResult<u32> {
        todo!(
            "read I2S EVENTS_TXPTRUPD reset value 0x00 mask 0xffffffffffffffff"
        )
    }
    #[doc = "I2S EVENTS_TXPTRUPD: The TDX.PTR register has been copied to internal double-buffers. When the I2S module is started and TX is enabled, this event will be generated for every RXTXD.MAXCNT words that are sent on the SDOUT pin."]
    #[inline]
    pub(crate) fn write_i2s_events_txptrupd(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo ! ("write I2S EVENTS_TXPTRUPD reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "I2S INTEN RXPTRUPD: Enable or disable interrupt for RXPTRUPD event"]
    #[inline]
    pub(crate) fn read_i2s_inten_rxptrupd(&self) -> MemResult<bool> {
        todo!("read I2S INTEN RXPTRUPD reset value false")
    }
    #[doc = "I2S INTEN RXPTRUPD: Enable or disable interrupt for RXPTRUPD event"]
    #[inline]
    pub(crate) fn write_i2s_inten_rxptrupd(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S INTEN RXPTRUPD reset value false")
    }
    #[doc = "I2S INTEN STOPPED: Enable or disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_i2s_inten_stopped(&self) -> MemResult<bool> {
        todo!("read I2S INTEN STOPPED reset value false")
    }
    #[doc = "I2S INTEN STOPPED: Enable or disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_i2s_inten_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S INTEN STOPPED reset value false")
    }
    #[doc = "I2S INTEN TXPTRUPD: Enable or disable interrupt for TXPTRUPD event"]
    #[inline]
    pub(crate) fn read_i2s_inten_txptrupd(&self) -> MemResult<bool> {
        todo!("read I2S INTEN TXPTRUPD reset value false")
    }
    #[doc = "I2S INTEN TXPTRUPD: Enable or disable interrupt for TXPTRUPD event"]
    #[inline]
    pub(crate) fn write_i2s_inten_txptrupd(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S INTEN TXPTRUPD reset value false")
    }
    #[doc = "I2S INTENSET RXPTRUPD: Write '1' to Enable interrupt for RXPTRUPD event"]
    #[inline]
    pub(crate) fn read_i2s_intenset_rxptrupd(&self) -> MemResult<bool> {
        todo!("read I2S INTENSET RXPTRUPD reset value false")
    }
    #[doc = "I2S INTENSET RXPTRUPD: Write '1' to Enable interrupt for RXPTRUPD event"]
    #[inline]
    pub(crate) fn write_i2s_intenset_rxptrupd(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S INTENSET RXPTRUPD reset value false")
    }
    #[doc = "I2S INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_i2s_intenset_stopped(&self) -> MemResult<bool> {
        todo!("read I2S INTENSET STOPPED reset value false")
    }
    #[doc = "I2S INTENSET STOPPED: Write '1' to Enable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_i2s_intenset_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S INTENSET STOPPED reset value false")
    }
    #[doc = "I2S INTENSET TXPTRUPD: Write '1' to Enable interrupt for TXPTRUPD event"]
    #[inline]
    pub(crate) fn read_i2s_intenset_txptrupd(&self) -> MemResult<bool> {
        todo!("read I2S INTENSET TXPTRUPD reset value false")
    }
    #[doc = "I2S INTENSET TXPTRUPD: Write '1' to Enable interrupt for TXPTRUPD event"]
    #[inline]
    pub(crate) fn write_i2s_intenset_txptrupd(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S INTENSET TXPTRUPD reset value false")
    }
    #[doc = "I2S INTENCLR RXPTRUPD: Write '1' to Disable interrupt for RXPTRUPD event"]
    #[inline]
    pub(crate) fn read_i2s_intenclr_rxptrupd(&self) -> MemResult<bool> {
        todo!("read I2S INTENCLR RXPTRUPD reset value false")
    }
    #[doc = "I2S INTENCLR RXPTRUPD: Write '1' to Disable interrupt for RXPTRUPD event"]
    #[inline]
    pub(crate) fn write_i2s_intenclr_rxptrupd(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S INTENCLR RXPTRUPD reset value false")
    }
    #[doc = "I2S INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn read_i2s_intenclr_stopped(&self) -> MemResult<bool> {
        todo!("read I2S INTENCLR STOPPED reset value false")
    }
    #[doc = "I2S INTENCLR STOPPED: Write '1' to Disable interrupt for STOPPED event"]
    #[inline]
    pub(crate) fn write_i2s_intenclr_stopped(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S INTENCLR STOPPED reset value false")
    }
    #[doc = "I2S INTENCLR TXPTRUPD: Write '1' to Disable interrupt for TXPTRUPD event"]
    #[inline]
    pub(crate) fn read_i2s_intenclr_txptrupd(&self) -> MemResult<bool> {
        todo!("read I2S INTENCLR TXPTRUPD reset value false")
    }
    #[doc = "I2S INTENCLR TXPTRUPD: Write '1' to Disable interrupt for TXPTRUPD event"]
    #[inline]
    pub(crate) fn write_i2s_intenclr_txptrupd(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S INTENCLR TXPTRUPD reset value false")
    }
    #[doc = "I2S ENABLE ENABLE: Enable I2S module."]
    #[inline]
    pub(crate) fn read_i2s_enable_enable(&self) -> MemResult<bool> {
        todo!("read I2S ENABLE ENABLE reset value false")
    }
    #[doc = "I2S ENABLE ENABLE: Enable I2S module."]
    #[inline]
    pub(crate) fn write_i2s_enable_enable(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S ENABLE ENABLE reset value false")
    }
    #[doc = "I2S MODE MODE: I2S mode."]
    #[inline]
    pub(crate) fn read_i2s_config_mode_mode(&self) -> MemResult<bool> {
        todo!("read I2S MODE MODE reset value false")
    }
    #[doc = "I2S MODE MODE: I2S mode."]
    #[inline]
    pub(crate) fn write_i2s_config_mode_mode(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S MODE MODE reset value false")
    }
    #[doc = "I2S RXEN RXEN: Reception (RX) enable."]
    #[inline]
    pub(crate) fn read_i2s_config_rxen_rxen(&self) -> MemResult<bool> {
        todo!("read I2S RXEN RXEN reset value false")
    }
    #[doc = "I2S RXEN RXEN: Reception (RX) enable."]
    #[inline]
    pub(crate) fn write_i2s_config_rxen_rxen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S RXEN RXEN reset value false")
    }
    #[doc = "I2S TXEN TXEN: Transmission (TX) enable."]
    #[inline]
    pub(crate) fn read_i2s_config_txen_txen(&self) -> MemResult<bool> {
        todo!("read I2S TXEN TXEN reset value true")
    }
    #[doc = "I2S TXEN TXEN: Transmission (TX) enable."]
    #[inline]
    pub(crate) fn write_i2s_config_txen_txen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S TXEN TXEN reset value true")
    }
    #[doc = "I2S MCKEN MCKEN: Master clock generator enable."]
    #[inline]
    pub(crate) fn read_i2s_config_mcken_mcken(&self) -> MemResult<bool> {
        todo!("read I2S MCKEN MCKEN reset value true")
    }
    #[doc = "I2S MCKEN MCKEN: Master clock generator enable."]
    #[inline]
    pub(crate) fn write_i2s_config_mcken_mcken(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S MCKEN MCKEN reset value true")
    }
    #[doc = "I2S MCKFREQ: Master clock generator frequency."]
    #[inline]
    pub(crate) fn read_i2s_config_mckfreq(&self) -> MemResult<u32> {
        todo!("read I2S MCKFREQ reset value 0x20000000 mask 0xffffffffffffffff")
    }
    #[doc = "I2S MCKFREQ: Master clock generator frequency."]
    #[inline]
    pub(crate) fn write_i2s_config_mckfreq(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!(
            "write I2S MCKFREQ reset value 0x20000000 mask 0xffffffffffffffff"
        )
    }
    #[doc = "I2S RATIO RATIO: MCK / LRCK ratio."]
    #[inline]
    pub(crate) fn read_i2s_config_ratio_ratio(&self) -> MemResult<u8> {
        todo!("read I2S RATIO RATIO reset value 0x06 mask 0x0f")
    }
    #[doc = "I2S RATIO RATIO: MCK / LRCK ratio."]
    #[inline]
    pub(crate) fn write_i2s_config_ratio_ratio(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write I2S RATIO RATIO reset value 0x06 mask 0x0f")
    }
    #[doc = "I2S SWIDTH SWIDTH: Sample width."]
    #[inline]
    pub(crate) fn read_i2s_config_swidth_swidth(&self) -> MemResult<u8> {
        todo!("read I2S SWIDTH SWIDTH reset value 0x01 mask 0x03")
    }
    #[doc = "I2S SWIDTH SWIDTH: Sample width."]
    #[inline]
    pub(crate) fn write_i2s_config_swidth_swidth(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write I2S SWIDTH SWIDTH reset value 0x01 mask 0x03")
    }
    #[doc = "I2S ALIGN ALIGN: Alignment of sample within a frame."]
    #[inline]
    pub(crate) fn read_i2s_config_align_align(&self) -> MemResult<bool> {
        todo!("read I2S ALIGN ALIGN reset value false")
    }
    #[doc = "I2S ALIGN ALIGN: Alignment of sample within a frame."]
    #[inline]
    pub(crate) fn write_i2s_config_align_align(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S ALIGN ALIGN reset value false")
    }
    #[doc = "I2S FORMAT FORMAT: Frame format."]
    #[inline]
    pub(crate) fn read_i2s_config_format_format(&self) -> MemResult<bool> {
        todo!("read I2S FORMAT FORMAT reset value false")
    }
    #[doc = "I2S FORMAT FORMAT: Frame format."]
    #[inline]
    pub(crate) fn write_i2s_config_format_format(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S FORMAT FORMAT reset value false")
    }
    #[doc = "I2S CHANNELS CHANNELS: Enable channels."]
    #[inline]
    pub(crate) fn read_i2s_config_channels_channels(&self) -> MemResult<u8> {
        todo!("read I2S CHANNELS CHANNELS reset value 0x00 mask 0x03")
    }
    #[doc = "I2S CHANNELS CHANNELS: Enable channels."]
    #[inline]
    pub(crate) fn write_i2s_config_channels_channels(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write I2S CHANNELS CHANNELS reset value 0x00 mask 0x03")
    }
    #[doc = "I2S PTR: Receive buffer RAM start address."]
    #[inline]
    pub(crate) fn read_i2s_rxd_ptr(&self) -> MemResult<u32> {
        todo!("read I2S PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "I2S PTR: Receive buffer RAM start address."]
    #[inline]
    pub(crate) fn write_i2s_rxd_ptr(&mut self, _value: u32) -> MemResult<()> {
        todo!("write I2S PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "I2S PTR: Transmit buffer RAM start address."]
    #[inline]
    pub(crate) fn read_i2s_txd_ptr(&self) -> MemResult<u32> {
        todo!("read I2S PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "I2S PTR: Transmit buffer RAM start address."]
    #[inline]
    pub(crate) fn write_i2s_txd_ptr(&mut self, _value: u32) -> MemResult<()> {
        todo!("write I2S PTR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "I2S MAXCNT MAXCNT: Size of RXD and TXD buffers in number of 32 bit words."]
    #[inline]
    pub(crate) fn read_i2s_rxtxd_maxcnt_maxcnt(&self) -> MemResult<u16> {
        todo!("read I2S MAXCNT MAXCNT reset value 0x00 mask 0x3fff")
    }
    #[doc = "I2S MAXCNT MAXCNT: Size of RXD and TXD buffers in number of 32 bit words."]
    #[inline]
    pub(crate) fn write_i2s_rxtxd_maxcnt_maxcnt(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo!("write I2S MAXCNT MAXCNT reset value 0x00 mask 0x3fff")
    }
    #[doc = "I2S MCK PIN: Pin number"]
    #[inline]
    pub(crate) fn read_i2s_psel_mck_pin(&self) -> MemResult<u8> {
        todo!("read I2S MCK PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "I2S MCK PIN: Pin number"]
    #[inline]
    pub(crate) fn write_i2s_psel_mck_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write I2S MCK PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "I2S MCK CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_i2s_psel_mck_connect(&self) -> MemResult<bool> {
        todo!("read I2S MCK CONNECT reset value true")
    }
    #[doc = "I2S MCK CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_i2s_psel_mck_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S MCK CONNECT reset value true")
    }
    #[doc = "I2S SCK PIN: Pin number"]
    #[inline]
    pub(crate) fn read_i2s_psel_sck_pin(&self) -> MemResult<u8> {
        todo!("read I2S SCK PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "I2S SCK PIN: Pin number"]
    #[inline]
    pub(crate) fn write_i2s_psel_sck_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write I2S SCK PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "I2S SCK CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_i2s_psel_sck_connect(&self) -> MemResult<bool> {
        todo!("read I2S SCK CONNECT reset value true")
    }
    #[doc = "I2S SCK CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_i2s_psel_sck_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S SCK CONNECT reset value true")
    }
    #[doc = "I2S LRCK PIN: Pin number"]
    #[inline]
    pub(crate) fn read_i2s_psel_lrck_pin(&self) -> MemResult<u8> {
        todo!("read I2S LRCK PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "I2S LRCK PIN: Pin number"]
    #[inline]
    pub(crate) fn write_i2s_psel_lrck_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write I2S LRCK PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "I2S LRCK CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_i2s_psel_lrck_connect(&self) -> MemResult<bool> {
        todo!("read I2S LRCK CONNECT reset value true")
    }
    #[doc = "I2S LRCK CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_i2s_psel_lrck_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S LRCK CONNECT reset value true")
    }
    #[doc = "I2S SDIN PIN: Pin number"]
    #[inline]
    pub(crate) fn read_i2s_psel_sdin_pin(&self) -> MemResult<u8> {
        todo!("read I2S SDIN PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "I2S SDIN PIN: Pin number"]
    #[inline]
    pub(crate) fn write_i2s_psel_sdin_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write I2S SDIN PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "I2S SDIN CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_i2s_psel_sdin_connect(&self) -> MemResult<bool> {
        todo!("read I2S SDIN CONNECT reset value true")
    }
    #[doc = "I2S SDIN CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_i2s_psel_sdin_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S SDIN CONNECT reset value true")
    }
    #[doc = "I2S SDOUT PIN: Pin number"]
    #[inline]
    pub(crate) fn read_i2s_psel_sdout_pin(&self) -> MemResult<u8> {
        todo!("read I2S SDOUT PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "I2S SDOUT PIN: Pin number"]
    #[inline]
    pub(crate) fn write_i2s_psel_sdout_pin(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write I2S SDOUT PIN reset value 0x1f mask 0x1f")
    }
    #[doc = "I2S SDOUT CONNECT: Connection"]
    #[inline]
    pub(crate) fn read_i2s_psel_sdout_connect(&self) -> MemResult<bool> {
        todo!("read I2S SDOUT CONNECT reset value true")
    }
    #[doc = "I2S SDOUT CONNECT: Connection"]
    #[inline]
    pub(crate) fn write_i2s_psel_sdout_connect(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write I2S SDOUT CONNECT reset value true")
    }
    #[doc = "FPU UNUSED: Unused."]
    #[inline]
    pub(crate) fn read_fpu_unused(&self) -> MemResult<u32> {
        todo!("read FPU UNUSED reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "P0 OUT PIN0: Pin 0"]
    #[inline]
    pub(crate) fn read_p0_out_pin0(&self) -> MemResult<bool> {
        Ok(self.gpio[0].is_out_high())
    }
    #[doc = "P0 OUT PIN0: Pin 0"]
    #[inline]
    pub(crate) fn write_p0_out_pin0(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[0].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN1: Pin 1"]
    #[inline]
    pub(crate) fn read_p0_out_pin1(&self) -> MemResult<bool> {
        Ok(self.gpio[1].is_out_high())
    }
    #[doc = "P0 OUT PIN1: Pin 1"]
    #[inline]
    pub(crate) fn write_p0_out_pin1(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[1].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN2: Pin 2"]
    #[inline]
    pub(crate) fn read_p0_out_pin2(&self) -> MemResult<bool> {
        Ok(self.gpio[2].is_out_high())
    }
    #[doc = "P0 OUT PIN2: Pin 2"]
    #[inline]
    pub(crate) fn write_p0_out_pin2(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[2].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN3: Pin 3"]
    #[inline]
    pub(crate) fn read_p0_out_pin3(&self) -> MemResult<bool> {
        Ok(self.gpio[3].is_out_high())
    }
    #[doc = "P0 OUT PIN3: Pin 3"]
    #[inline]
    pub(crate) fn write_p0_out_pin3(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[3].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN4: Pin 4"]
    #[inline]
    pub(crate) fn read_p0_out_pin4(&self) -> MemResult<bool> {
        Ok(self.gpio[4].is_out_high())
    }
    #[doc = "P0 OUT PIN4: Pin 4"]
    #[inline]
    pub(crate) fn write_p0_out_pin4(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[4].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN5: Pin 5"]
    #[inline]
    pub(crate) fn read_p0_out_pin5(&self) -> MemResult<bool> {
        Ok(self.gpio[5].is_out_high())
    }
    #[doc = "P0 OUT PIN5: Pin 5"]
    #[inline]
    pub(crate) fn write_p0_out_pin5(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[5].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN6: Pin 6"]
    #[inline]
    pub(crate) fn read_p0_out_pin6(&self) -> MemResult<bool> {
        Ok(self.gpio[6].is_out_high())
    }
    #[doc = "P0 OUT PIN6: Pin 6"]
    #[inline]
    pub(crate) fn write_p0_out_pin6(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[6].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN7: Pin 7"]
    #[inline]
    pub(crate) fn read_p0_out_pin7(&self) -> MemResult<bool> {
        Ok(self.gpio[7].is_out_high())
    }
    #[doc = "P0 OUT PIN7: Pin 7"]
    #[inline]
    pub(crate) fn write_p0_out_pin7(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[7].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN8: Pin 8"]
    #[inline]
    pub(crate) fn read_p0_out_pin8(&self) -> MemResult<bool> {
        Ok(self.gpio[8].is_out_high())
    }
    #[doc = "P0 OUT PIN8: Pin 8"]
    #[inline]
    pub(crate) fn write_p0_out_pin8(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[8].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN9: Pin 9"]
    #[inline]
    pub(crate) fn read_p0_out_pin9(&self) -> MemResult<bool> {
        Ok(self.gpio[9].is_out_high())
    }
    #[doc = "P0 OUT PIN9: Pin 9"]
    #[inline]
    pub(crate) fn write_p0_out_pin9(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[9].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN10: Pin 10"]
    #[inline]
    pub(crate) fn read_p0_out_pin10(&self) -> MemResult<bool> {
        Ok(self.gpio[10].is_out_high())
    }
    #[doc = "P0 OUT PIN10: Pin 10"]
    #[inline]
    pub(crate) fn write_p0_out_pin10(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[10].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN11: Pin 11"]
    #[inline]
    pub(crate) fn read_p0_out_pin11(&self) -> MemResult<bool> {
        Ok(self.gpio[11].is_out_high())
    }
    #[doc = "P0 OUT PIN11: Pin 11"]
    #[inline]
    pub(crate) fn write_p0_out_pin11(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[11].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN12: Pin 12"]
    #[inline]
    pub(crate) fn read_p0_out_pin12(&self) -> MemResult<bool> {
        Ok(self.gpio[12].is_out_high())
    }
    #[doc = "P0 OUT PIN12: Pin 12"]
    #[inline]
    pub(crate) fn write_p0_out_pin12(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[12].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN13: Pin 13"]
    #[inline]
    pub(crate) fn read_p0_out_pin13(&self) -> MemResult<bool> {
        Ok(self.gpio[13].is_out_high())
    }
    #[doc = "P0 OUT PIN13: Pin 13"]
    #[inline]
    pub(crate) fn write_p0_out_pin13(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[13].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN14: Pin 14"]
    #[inline]
    pub(crate) fn read_p0_out_pin14(&self) -> MemResult<bool> {
        Ok(self.gpio[14].is_out_high())
    }
    #[doc = "P0 OUT PIN14: Pin 14"]
    #[inline]
    pub(crate) fn write_p0_out_pin14(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[14].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN15: Pin 15"]
    #[inline]
    pub(crate) fn read_p0_out_pin15(&self) -> MemResult<bool> {
        Ok(self.gpio[15].is_out_high())
    }
    #[doc = "P0 OUT PIN15: Pin 15"]
    #[inline]
    pub(crate) fn write_p0_out_pin15(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[15].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN16: Pin 16"]
    #[inline]
    pub(crate) fn read_p0_out_pin16(&self) -> MemResult<bool> {
        Ok(self.gpio[16].is_out_high())
    }
    #[doc = "P0 OUT PIN16: Pin 16"]
    #[inline]
    pub(crate) fn write_p0_out_pin16(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[16].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN17: Pin 17"]
    #[inline]
    pub(crate) fn read_p0_out_pin17(&self) -> MemResult<bool> {
        Ok(self.gpio[17].is_out_high())
    }
    #[doc = "P0 OUT PIN17: Pin 17"]
    #[inline]
    pub(crate) fn write_p0_out_pin17(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[17].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN18: Pin 18"]
    #[inline]
    pub(crate) fn read_p0_out_pin18(&self) -> MemResult<bool> {
        Ok(self.gpio[18].is_out_high())
    }
    #[doc = "P0 OUT PIN18: Pin 18"]
    #[inline]
    pub(crate) fn write_p0_out_pin18(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[18].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN19: Pin 19"]
    #[inline]
    pub(crate) fn read_p0_out_pin19(&self) -> MemResult<bool> {
        Ok(self.gpio[19].is_out_high())
    }
    #[doc = "P0 OUT PIN19: Pin 19"]
    #[inline]
    pub(crate) fn write_p0_out_pin19(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[19].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN20: Pin 20"]
    #[inline]
    pub(crate) fn read_p0_out_pin20(&self) -> MemResult<bool> {
        Ok(self.gpio[20].is_out_high())
    }
    #[doc = "P0 OUT PIN20: Pin 20"]
    #[inline]
    pub(crate) fn write_p0_out_pin20(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[20].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN21: Pin 21"]
    #[inline]
    pub(crate) fn read_p0_out_pin21(&self) -> MemResult<bool> {
        Ok(self.gpio[21].is_out_high())
    }
    #[doc = "P0 OUT PIN21: Pin 21"]
    #[inline]
    pub(crate) fn write_p0_out_pin21(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[21].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN22: Pin 22"]
    #[inline]
    pub(crate) fn read_p0_out_pin22(&self) -> MemResult<bool> {
        Ok(self.gpio[22].is_out_high())
    }
    #[doc = "P0 OUT PIN22: Pin 22"]
    #[inline]
    pub(crate) fn write_p0_out_pin22(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[22].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN23: Pin 23"]
    #[inline]
    pub(crate) fn read_p0_out_pin23(&self) -> MemResult<bool> {
        Ok(self.gpio[23].is_out_high())
    }
    #[doc = "P0 OUT PIN23: Pin 23"]
    #[inline]
    pub(crate) fn write_p0_out_pin23(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[23].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN24: Pin 24"]
    #[inline]
    pub(crate) fn read_p0_out_pin24(&self) -> MemResult<bool> {
        Ok(self.gpio[24].is_out_high())
    }
    #[doc = "P0 OUT PIN24: Pin 24"]
    #[inline]
    pub(crate) fn write_p0_out_pin24(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[24].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN25: Pin 25"]
    #[inline]
    pub(crate) fn read_p0_out_pin25(&self) -> MemResult<bool> {
        Ok(self.gpio[25].is_out_high())
    }
    #[doc = "P0 OUT PIN25: Pin 25"]
    #[inline]
    pub(crate) fn write_p0_out_pin25(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[25].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN26: Pin 26"]
    #[inline]
    pub(crate) fn read_p0_out_pin26(&self) -> MemResult<bool> {
        Ok(self.gpio[26].is_out_high())
    }
    #[doc = "P0 OUT PIN26: Pin 26"]
    #[inline]
    pub(crate) fn write_p0_out_pin26(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[26].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN27: Pin 27"]
    #[inline]
    pub(crate) fn read_p0_out_pin27(&self) -> MemResult<bool> {
        Ok(self.gpio[27].is_out_high())
    }
    #[doc = "P0 OUT PIN27: Pin 27"]
    #[inline]
    pub(crate) fn write_p0_out_pin27(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[27].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN28: Pin 28"]
    #[inline]
    pub(crate) fn read_p0_out_pin28(&self) -> MemResult<bool> {
        Ok(self.gpio[28].is_out_high())
    }
    #[doc = "P0 OUT PIN28: Pin 28"]
    #[inline]
    pub(crate) fn write_p0_out_pin28(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[28].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN29: Pin 29"]
    #[inline]
    pub(crate) fn read_p0_out_pin29(&self) -> MemResult<bool> {
        Ok(self.gpio[29].is_out_high())
    }
    #[doc = "P0 OUT PIN29: Pin 29"]
    #[inline]
    pub(crate) fn write_p0_out_pin29(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[29].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN30: Pin 30"]
    #[inline]
    pub(crate) fn read_p0_out_pin30(&self) -> MemResult<bool> {
        Ok(self.gpio[30].is_out_high())
    }
    #[doc = "P0 OUT PIN30: Pin 30"]
    #[inline]
    pub(crate) fn write_p0_out_pin30(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[30].set_out_high(_value))
    }
    #[doc = "P0 OUT PIN31: Pin 31"]
    #[inline]
    pub(crate) fn read_p0_out_pin31(&self) -> MemResult<bool> {
        Ok(self.gpio[31].is_out_high())
    }
    #[doc = "P0 OUT PIN31: Pin 31"]
    #[inline]
    pub(crate) fn write_p0_out_pin31(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[31].set_out_high(_value))
    }
    #[doc = "P0 OUTSET PIN0: Pin 0"]
    #[inline]
    pub(crate) fn read_p0_outset_pin0(&self) -> MemResult<bool> {
        Ok(self.gpio[0].is_out_high())
    }
    #[doc = "P0 OUTSET PIN0: Pin 0"]
    #[inline]
    pub(crate) fn write_p0_outset_pin0(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[0].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN1: Pin 1"]
    #[inline]
    pub(crate) fn read_p0_outset_pin1(&self) -> MemResult<bool> {
        Ok(self.gpio[1].is_out_high())
    }
    #[doc = "P0 OUTSET PIN1: Pin 1"]
    #[inline]
    pub(crate) fn write_p0_outset_pin1(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[1].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN2: Pin 2"]
    #[inline]
    pub(crate) fn read_p0_outset_pin2(&self) -> MemResult<bool> {
        Ok(self.gpio[2].is_out_high())
    }
    #[doc = "P0 OUTSET PIN2: Pin 2"]
    #[inline]
    pub(crate) fn write_p0_outset_pin2(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[2].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN3: Pin 3"]
    #[inline]
    pub(crate) fn read_p0_outset_pin3(&self) -> MemResult<bool> {
        Ok(self.gpio[3].is_out_high())
    }
    #[doc = "P0 OUTSET PIN3: Pin 3"]
    #[inline]
    pub(crate) fn write_p0_outset_pin3(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[3].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN4: Pin 4"]
    #[inline]
    pub(crate) fn read_p0_outset_pin4(&self) -> MemResult<bool> {
        Ok(self.gpio[4].is_out_high())
    }
    #[doc = "P0 OUTSET PIN4: Pin 4"]
    #[inline]
    pub(crate) fn write_p0_outset_pin4(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[4].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN5: Pin 5"]
    #[inline]
    pub(crate) fn read_p0_outset_pin5(&self) -> MemResult<bool> {
        Ok(self.gpio[5].is_out_high())
    }
    #[doc = "P0 OUTSET PIN5: Pin 5"]
    #[inline]
    pub(crate) fn write_p0_outset_pin5(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[5].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN6: Pin 6"]
    #[inline]
    pub(crate) fn read_p0_outset_pin6(&self) -> MemResult<bool> {
        Ok(self.gpio[6].is_out_high())
    }
    #[doc = "P0 OUTSET PIN6: Pin 6"]
    #[inline]
    pub(crate) fn write_p0_outset_pin6(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[6].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN7: Pin 7"]
    #[inline]
    pub(crate) fn read_p0_outset_pin7(&self) -> MemResult<bool> {
        Ok(self.gpio[7].is_out_high())
    }
    #[doc = "P0 OUTSET PIN7: Pin 7"]
    #[inline]
    pub(crate) fn write_p0_outset_pin7(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[7].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN8: Pin 8"]
    #[inline]
    pub(crate) fn read_p0_outset_pin8(&self) -> MemResult<bool> {
        Ok(self.gpio[8].is_out_high())
    }
    #[doc = "P0 OUTSET PIN8: Pin 8"]
    #[inline]
    pub(crate) fn write_p0_outset_pin8(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[8].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN9: Pin 9"]
    #[inline]
    pub(crate) fn read_p0_outset_pin9(&self) -> MemResult<bool> {
        Ok(self.gpio[9].is_out_high())
    }
    #[doc = "P0 OUTSET PIN9: Pin 9"]
    #[inline]
    pub(crate) fn write_p0_outset_pin9(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[9].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN10: Pin 10"]
    #[inline]
    pub(crate) fn read_p0_outset_pin10(&self) -> MemResult<bool> {
        Ok(self.gpio[10].is_out_high())
    }
    #[doc = "P0 OUTSET PIN10: Pin 10"]
    #[inline]
    pub(crate) fn write_p0_outset_pin10(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[10].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN11: Pin 11"]
    #[inline]
    pub(crate) fn read_p0_outset_pin11(&self) -> MemResult<bool> {
        Ok(self.gpio[11].is_out_high())
    }
    #[doc = "P0 OUTSET PIN11: Pin 11"]
    #[inline]
    pub(crate) fn write_p0_outset_pin11(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[11].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN12: Pin 12"]
    #[inline]
    pub(crate) fn read_p0_outset_pin12(&self) -> MemResult<bool> {
        Ok(self.gpio[12].is_out_high())
    }
    #[doc = "P0 OUTSET PIN12: Pin 12"]
    #[inline]
    pub(crate) fn write_p0_outset_pin12(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[12].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN13: Pin 13"]
    #[inline]
    pub(crate) fn read_p0_outset_pin13(&self) -> MemResult<bool> {
        Ok(self.gpio[13].is_out_high())
    }
    #[doc = "P0 OUTSET PIN13: Pin 13"]
    #[inline]
    pub(crate) fn write_p0_outset_pin13(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[13].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN14: Pin 14"]
    #[inline]
    pub(crate) fn read_p0_outset_pin14(&self) -> MemResult<bool> {
        Ok(self.gpio[14].is_out_high())
    }
    #[doc = "P0 OUTSET PIN14: Pin 14"]
    #[inline]
    pub(crate) fn write_p0_outset_pin14(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[14].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN15: Pin 15"]
    #[inline]
    pub(crate) fn read_p0_outset_pin15(&self) -> MemResult<bool> {
        Ok(self.gpio[15].is_out_high())
    }
    #[doc = "P0 OUTSET PIN15: Pin 15"]
    #[inline]
    pub(crate) fn write_p0_outset_pin15(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[15].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN16: Pin 16"]
    #[inline]
    pub(crate) fn read_p0_outset_pin16(&self) -> MemResult<bool> {
        Ok(self.gpio[16].is_out_high())
    }
    #[doc = "P0 OUTSET PIN16: Pin 16"]
    #[inline]
    pub(crate) fn write_p0_outset_pin16(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[16].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN17: Pin 17"]
    #[inline]
    pub(crate) fn read_p0_outset_pin17(&self) -> MemResult<bool> {
        Ok(self.gpio[17].is_out_high())
    }
    #[doc = "P0 OUTSET PIN17: Pin 17"]
    #[inline]
    pub(crate) fn write_p0_outset_pin17(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[17].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN18: Pin 18"]
    #[inline]
    pub(crate) fn read_p0_outset_pin18(&self) -> MemResult<bool> {
        Ok(self.gpio[18].is_out_high())
    }
    #[doc = "P0 OUTSET PIN18: Pin 18"]
    #[inline]
    pub(crate) fn write_p0_outset_pin18(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[18].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN19: Pin 19"]
    #[inline]
    pub(crate) fn read_p0_outset_pin19(&self) -> MemResult<bool> {
        Ok(self.gpio[19].is_out_high())
    }
    #[doc = "P0 OUTSET PIN19: Pin 19"]
    #[inline]
    pub(crate) fn write_p0_outset_pin19(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[19].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN20: Pin 20"]
    #[inline]
    pub(crate) fn read_p0_outset_pin20(&self) -> MemResult<bool> {
        Ok(self.gpio[20].is_out_high())
    }
    #[doc = "P0 OUTSET PIN20: Pin 20"]
    #[inline]
    pub(crate) fn write_p0_outset_pin20(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[20].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN21: Pin 21"]
    #[inline]
    pub(crate) fn read_p0_outset_pin21(&self) -> MemResult<bool> {
        Ok(self.gpio[21].is_out_high())
    }
    #[doc = "P0 OUTSET PIN21: Pin 21"]
    #[inline]
    pub(crate) fn write_p0_outset_pin21(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[21].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN22: Pin 22"]
    #[inline]
    pub(crate) fn read_p0_outset_pin22(&self) -> MemResult<bool> {
        Ok(self.gpio[22].is_out_high())
    }
    #[doc = "P0 OUTSET PIN22: Pin 22"]
    #[inline]
    pub(crate) fn write_p0_outset_pin22(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[22].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN23: Pin 23"]
    #[inline]
    pub(crate) fn read_p0_outset_pin23(&self) -> MemResult<bool> {
        Ok(self.gpio[23].is_out_high())
    }
    #[doc = "P0 OUTSET PIN23: Pin 23"]
    #[inline]
    pub(crate) fn write_p0_outset_pin23(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[23].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN24: Pin 24"]
    #[inline]
    pub(crate) fn read_p0_outset_pin24(&self) -> MemResult<bool> {
        Ok(self.gpio[24].is_out_high())
    }
    #[doc = "P0 OUTSET PIN24: Pin 24"]
    #[inline]
    pub(crate) fn write_p0_outset_pin24(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[24].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN25: Pin 25"]
    #[inline]
    pub(crate) fn read_p0_outset_pin25(&self) -> MemResult<bool> {
        Ok(self.gpio[25].is_out_high())
    }
    #[doc = "P0 OUTSET PIN25: Pin 25"]
    #[inline]
    pub(crate) fn write_p0_outset_pin25(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[25].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN26: Pin 26"]
    #[inline]
    pub(crate) fn read_p0_outset_pin26(&self) -> MemResult<bool> {
        Ok(self.gpio[26].is_out_high())
    }
    #[doc = "P0 OUTSET PIN26: Pin 26"]
    #[inline]
    pub(crate) fn write_p0_outset_pin26(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[26].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN27: Pin 27"]
    #[inline]
    pub(crate) fn read_p0_outset_pin27(&self) -> MemResult<bool> {
        Ok(self.gpio[27].is_out_high())
    }
    #[doc = "P0 OUTSET PIN27: Pin 27"]
    #[inline]
    pub(crate) fn write_p0_outset_pin27(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[27].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN28: Pin 28"]
    #[inline]
    pub(crate) fn read_p0_outset_pin28(&self) -> MemResult<bool> {
        Ok(self.gpio[28].is_out_high())
    }
    #[doc = "P0 OUTSET PIN28: Pin 28"]
    #[inline]
    pub(crate) fn write_p0_outset_pin28(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[28].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN29: Pin 29"]
    #[inline]
    pub(crate) fn read_p0_outset_pin29(&self) -> MemResult<bool> {
        Ok(self.gpio[29].is_out_high())
    }
    #[doc = "P0 OUTSET PIN29: Pin 29"]
    #[inline]
    pub(crate) fn write_p0_outset_pin29(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[29].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN30: Pin 30"]
    #[inline]
    pub(crate) fn read_p0_outset_pin30(&self) -> MemResult<bool> {
        Ok(self.gpio[30].is_out_high())
    }
    #[doc = "P0 OUTSET PIN30: Pin 30"]
    #[inline]
    pub(crate) fn write_p0_outset_pin30(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[30].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTSET PIN31: Pin 31"]
    #[inline]
    pub(crate) fn read_p0_outset_pin31(&self) -> MemResult<bool> {
        Ok(self.gpio[31].is_out_high())
    }
    #[doc = "P0 OUTSET PIN31: Pin 31"]
    #[inline]
    pub(crate) fn write_p0_outset_pin31(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[31].set_out_high(true)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN0: Pin 0"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin0(&self) -> MemResult<bool> {
        Ok(self.gpio[0].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN0: Pin 0"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin0(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[0].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN1: Pin 1"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin1(&self) -> MemResult<bool> {
        Ok(self.gpio[1].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN1: Pin 1"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin1(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[1].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN2: Pin 2"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin2(&self) -> MemResult<bool> {
        Ok(self.gpio[2].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN2: Pin 2"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin2(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[2].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN3: Pin 3"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin3(&self) -> MemResult<bool> {
        Ok(self.gpio[3].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN3: Pin 3"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin3(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[3].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN4: Pin 4"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin4(&self) -> MemResult<bool> {
        Ok(self.gpio[4].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN4: Pin 4"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin4(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[4].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN5: Pin 5"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin5(&self) -> MemResult<bool> {
        Ok(self.gpio[5].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN5: Pin 5"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin5(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[5].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN6: Pin 6"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin6(&self) -> MemResult<bool> {
        Ok(self.gpio[6].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN6: Pin 6"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin6(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[6].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN7: Pin 7"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin7(&self) -> MemResult<bool> {
        Ok(self.gpio[7].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN7: Pin 7"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin7(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[7].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN8: Pin 8"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin8(&self) -> MemResult<bool> {
        Ok(self.gpio[8].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN8: Pin 8"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin8(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[8].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN9: Pin 9"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin9(&self) -> MemResult<bool> {
        Ok(self.gpio[9].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN9: Pin 9"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin9(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[9].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN10: Pin 10"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin10(&self) -> MemResult<bool> {
        Ok(self.gpio[10].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN10: Pin 10"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin10(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[10].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN11: Pin 11"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin11(&self) -> MemResult<bool> {
        Ok(self.gpio[11].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN11: Pin 11"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin11(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[11].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN12: Pin 12"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin12(&self) -> MemResult<bool> {
        Ok(self.gpio[12].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN12: Pin 12"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin12(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[12].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN13: Pin 13"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin13(&self) -> MemResult<bool> {
        Ok(self.gpio[13].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN13: Pin 13"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin13(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[13].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN14: Pin 14"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin14(&self) -> MemResult<bool> {
        Ok(self.gpio[14].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN14: Pin 14"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin14(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[14].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN15: Pin 15"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin15(&self) -> MemResult<bool> {
        Ok(self.gpio[15].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN15: Pin 15"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin15(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[15].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN16: Pin 16"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin16(&self) -> MemResult<bool> {
        Ok(self.gpio[16].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN16: Pin 16"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin16(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[16].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN17: Pin 17"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin17(&self) -> MemResult<bool> {
        Ok(self.gpio[17].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN17: Pin 17"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin17(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[17].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN18: Pin 18"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin18(&self) -> MemResult<bool> {
        Ok(self.gpio[18].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN18: Pin 18"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin18(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[18].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN19: Pin 19"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin19(&self) -> MemResult<bool> {
        Ok(self.gpio[19].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN19: Pin 19"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin19(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[19].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN20: Pin 20"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin20(&self) -> MemResult<bool> {
        Ok(self.gpio[20].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN20: Pin 20"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin20(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[20].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN21: Pin 21"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin21(&self) -> MemResult<bool> {
        Ok(self.gpio[21].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN21: Pin 21"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin21(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[21].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN22: Pin 22"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin22(&self) -> MemResult<bool> {
        Ok(self.gpio[22].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN22: Pin 22"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin22(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[22].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN23: Pin 23"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin23(&self) -> MemResult<bool> {
        Ok(self.gpio[23].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN23: Pin 23"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin23(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[23].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN24: Pin 24"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin24(&self) -> MemResult<bool> {
        Ok(self.gpio[24].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN24: Pin 24"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin24(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[24].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN25: Pin 25"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin25(&self) -> MemResult<bool> {
        Ok(self.gpio[25].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN25: Pin 25"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin25(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[25].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN26: Pin 26"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin26(&self) -> MemResult<bool> {
        Ok(self.gpio[26].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN26: Pin 26"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin26(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[26].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN27: Pin 27"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin27(&self) -> MemResult<bool> {
        Ok(self.gpio[27].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN27: Pin 27"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin27(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[27].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN28: Pin 28"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin28(&self) -> MemResult<bool> {
        Ok(self.gpio[28].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN28: Pin 28"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin28(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[28].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN29: Pin 29"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin29(&self) -> MemResult<bool> {
        Ok(self.gpio[29].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN29: Pin 29"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin29(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[29].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN30: Pin 30"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin30(&self) -> MemResult<bool> {
        Ok(self.gpio[30].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN30: Pin 30"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin30(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[30].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 OUTCLR PIN31: Pin 31"]
    #[inline]
    pub(crate) fn read_p0_outclr_pin31(&self) -> MemResult<bool> {
        Ok(self.gpio[31].is_out_high())
    }
    #[doc = "P0 OUTCLR PIN31: Pin 31"]
    #[inline]
    pub(crate) fn write_p0_outclr_pin31(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[31].set_out_high(false)
        }
        Ok(())
    }
    #[doc = "P0 IN PIN0: Pin 0"]
    #[inline]
    pub(crate) fn read_p0_in_pin0(&self) -> MemResult<bool> {
        Ok(self.gpio[0].read_input())
    }
    #[doc = "P0 IN PIN1: Pin 1"]
    #[inline]
    pub(crate) fn read_p0_in_pin1(&self) -> MemResult<bool> {
        Ok(self.gpio[1].read_input())
    }
    #[doc = "P0 IN PIN2: Pin 2"]
    #[inline]
    pub(crate) fn read_p0_in_pin2(&self) -> MemResult<bool> {
        Ok(self.gpio[2].read_input())
    }
    #[doc = "P0 IN PIN3: Pin 3"]
    #[inline]
    pub(crate) fn read_p0_in_pin3(&self) -> MemResult<bool> {
        Ok(self.gpio[3].read_input())
    }
    #[doc = "P0 IN PIN4: Pin 4"]
    #[inline]
    pub(crate) fn read_p0_in_pin4(&self) -> MemResult<bool> {
        Ok(self.gpio[4].read_input())
    }
    #[doc = "P0 IN PIN5: Pin 5"]
    #[inline]
    pub(crate) fn read_p0_in_pin5(&self) -> MemResult<bool> {
        Ok(self.gpio[5].read_input())
    }
    #[doc = "P0 IN PIN6: Pin 6"]
    #[inline]
    pub(crate) fn read_p0_in_pin6(&self) -> MemResult<bool> {
        Ok(self.gpio[6].read_input())
    }
    #[doc = "P0 IN PIN7: Pin 7"]
    #[inline]
    pub(crate) fn read_p0_in_pin7(&self) -> MemResult<bool> {
        Ok(self.gpio[7].read_input())
    }
    #[doc = "P0 IN PIN8: Pin 8"]
    #[inline]
    pub(crate) fn read_p0_in_pin8(&self) -> MemResult<bool> {
        Ok(self.gpio[8].read_input())
    }
    #[doc = "P0 IN PIN9: Pin 9"]
    #[inline]
    pub(crate) fn read_p0_in_pin9(&self) -> MemResult<bool> {
        Ok(self.gpio[9].read_input())
    }
    #[doc = "P0 IN PIN10: Pin 10"]
    #[inline]
    pub(crate) fn read_p0_in_pin10(&self) -> MemResult<bool> {
        Ok(self.gpio[10].read_input())
    }
    #[doc = "P0 IN PIN11: Pin 11"]
    #[inline]
    pub(crate) fn read_p0_in_pin11(&self) -> MemResult<bool> {
        Ok(self.gpio[11].read_input())
    }
    #[doc = "P0 IN PIN12: Pin 12"]
    #[inline]
    pub(crate) fn read_p0_in_pin12(&self) -> MemResult<bool> {
        Ok(self.gpio[12].read_input())
    }
    #[doc = "P0 IN PIN13: Pin 13"]
    #[inline]
    pub(crate) fn read_p0_in_pin13(&self) -> MemResult<bool> {
        Ok(self.gpio[13].read_input())
    }
    #[doc = "P0 IN PIN14: Pin 14"]
    #[inline]
    pub(crate) fn read_p0_in_pin14(&self) -> MemResult<bool> {
        Ok(self.gpio[14].read_input())
    }
    #[doc = "P0 IN PIN15: Pin 15"]
    #[inline]
    pub(crate) fn read_p0_in_pin15(&self) -> MemResult<bool> {
        Ok(self.gpio[15].read_input())
    }
    #[doc = "P0 IN PIN16: Pin 16"]
    #[inline]
    pub(crate) fn read_p0_in_pin16(&self) -> MemResult<bool> {
        Ok(self.gpio[16].read_input())
    }
    #[doc = "P0 IN PIN17: Pin 17"]
    #[inline]
    pub(crate) fn read_p0_in_pin17(&self) -> MemResult<bool> {
        Ok(self.gpio[17].read_input())
    }
    #[doc = "P0 IN PIN18: Pin 18"]
    #[inline]
    pub(crate) fn read_p0_in_pin18(&self) -> MemResult<bool> {
        Ok(self.gpio[18].read_input())
    }
    #[doc = "P0 IN PIN19: Pin 19"]
    #[inline]
    pub(crate) fn read_p0_in_pin19(&self) -> MemResult<bool> {
        Ok(self.gpio[19].read_input())
    }
    #[doc = "P0 IN PIN20: Pin 20"]
    #[inline]
    pub(crate) fn read_p0_in_pin20(&self) -> MemResult<bool> {
        Ok(self.gpio[20].read_input())
    }
    #[doc = "P0 IN PIN21: Pin 21"]
    #[inline]
    pub(crate) fn read_p0_in_pin21(&self) -> MemResult<bool> {
        Ok(self.gpio[21].read_input())
    }
    #[doc = "P0 IN PIN22: Pin 22"]
    #[inline]
    pub(crate) fn read_p0_in_pin22(&self) -> MemResult<bool> {
        Ok(self.gpio[22].read_input())
    }
    #[doc = "P0 IN PIN23: Pin 23"]
    #[inline]
    pub(crate) fn read_p0_in_pin23(&self) -> MemResult<bool> {
        Ok(self.gpio[23].read_input())
    }
    #[doc = "P0 IN PIN24: Pin 24"]
    #[inline]
    pub(crate) fn read_p0_in_pin24(&self) -> MemResult<bool> {
        Ok(self.gpio[24].read_input())
    }
    #[doc = "P0 IN PIN25: Pin 25"]
    #[inline]
    pub(crate) fn read_p0_in_pin25(&self) -> MemResult<bool> {
        Ok(self.gpio[25].read_input())
    }
    #[doc = "P0 IN PIN26: Pin 26"]
    #[inline]
    pub(crate) fn read_p0_in_pin26(&self) -> MemResult<bool> {
        Ok(self.gpio[26].read_input())
    }
    #[doc = "P0 IN PIN27: Pin 27"]
    #[inline]
    pub(crate) fn read_p0_in_pin27(&self) -> MemResult<bool> {
        Ok(self.gpio[27].read_input())
    }
    #[doc = "P0 IN PIN28: Pin 28"]
    #[inline]
    pub(crate) fn read_p0_in_pin28(&self) -> MemResult<bool> {
        Ok(self.gpio[28].read_input())
    }
    #[doc = "P0 IN PIN29: Pin 29"]
    #[inline]
    pub(crate) fn read_p0_in_pin29(&self) -> MemResult<bool> {
        Ok(self.gpio[29].read_input())
    }
    #[doc = "P0 IN PIN30: Pin 30"]
    #[inline]
    pub(crate) fn read_p0_in_pin30(&self) -> MemResult<bool> {
        Ok(self.gpio[30].read_input())
    }
    #[doc = "P0 IN PIN31: Pin 31"]
    #[inline]
    pub(crate) fn read_p0_in_pin31(&self) -> MemResult<bool> {
        Ok(self.gpio[31].read_input())
    }
    #[doc = "P0 DIR PIN0: Pin 0"]
    #[inline]
    pub(crate) fn read_p0_dir_pin0(&self) -> MemResult<bool> {
        Ok(self.gpio[0].get_direction())
    }
    #[doc = "P0 DIR PIN0: Pin 0"]
    #[inline]
    pub(crate) fn write_p0_dir_pin0(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[0].set_direction(_value))
    }
    #[doc = "P0 DIR PIN1: Pin 1"]
    #[inline]
    pub(crate) fn read_p0_dir_pin1(&self) -> MemResult<bool> {
        Ok(self.gpio[1].get_direction())
    }
    #[doc = "P0 DIR PIN1: Pin 1"]
    #[inline]
    pub(crate) fn write_p0_dir_pin1(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[1].set_direction(_value))
    }
    #[doc = "P0 DIR PIN2: Pin 2"]
    #[inline]
    pub(crate) fn read_p0_dir_pin2(&self) -> MemResult<bool> {
        Ok(self.gpio[2].get_direction())
    }
    #[doc = "P0 DIR PIN2: Pin 2"]
    #[inline]
    pub(crate) fn write_p0_dir_pin2(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[2].set_direction(_value))
    }
    #[doc = "P0 DIR PIN3: Pin 3"]
    #[inline]
    pub(crate) fn read_p0_dir_pin3(&self) -> MemResult<bool> {
        Ok(self.gpio[3].get_direction())
    }
    #[doc = "P0 DIR PIN3: Pin 3"]
    #[inline]
    pub(crate) fn write_p0_dir_pin3(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[3].set_direction(_value))
    }
    #[doc = "P0 DIR PIN4: Pin 4"]
    #[inline]
    pub(crate) fn read_p0_dir_pin4(&self) -> MemResult<bool> {
        Ok(self.gpio[4].get_direction())
    }
    #[doc = "P0 DIR PIN4: Pin 4"]
    #[inline]
    pub(crate) fn write_p0_dir_pin4(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[4].set_direction(_value))
    }
    #[doc = "P0 DIR PIN5: Pin 5"]
    #[inline]
    pub(crate) fn read_p0_dir_pin5(&self) -> MemResult<bool> {
        Ok(self.gpio[5].get_direction())
    }
    #[doc = "P0 DIR PIN5: Pin 5"]
    #[inline]
    pub(crate) fn write_p0_dir_pin5(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[5].set_direction(_value))
    }
    #[doc = "P0 DIR PIN6: Pin 6"]
    #[inline]
    pub(crate) fn read_p0_dir_pin6(&self) -> MemResult<bool> {
        Ok(self.gpio[6].get_direction())
    }
    #[doc = "P0 DIR PIN6: Pin 6"]
    #[inline]
    pub(crate) fn write_p0_dir_pin6(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[6].set_direction(_value))
    }
    #[doc = "P0 DIR PIN7: Pin 7"]
    #[inline]
    pub(crate) fn read_p0_dir_pin7(&self) -> MemResult<bool> {
        Ok(self.gpio[7].get_direction())
    }
    #[doc = "P0 DIR PIN7: Pin 7"]
    #[inline]
    pub(crate) fn write_p0_dir_pin7(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[7].set_direction(_value))
    }
    #[doc = "P0 DIR PIN8: Pin 8"]
    #[inline]
    pub(crate) fn read_p0_dir_pin8(&self) -> MemResult<bool> {
        Ok(self.gpio[8].get_direction())
    }
    #[doc = "P0 DIR PIN8: Pin 8"]
    #[inline]
    pub(crate) fn write_p0_dir_pin8(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[8].set_direction(_value))
    }
    #[doc = "P0 DIR PIN9: Pin 9"]
    #[inline]
    pub(crate) fn read_p0_dir_pin9(&self) -> MemResult<bool> {
        Ok(self.gpio[9].get_direction())
    }
    #[doc = "P0 DIR PIN9: Pin 9"]
    #[inline]
    pub(crate) fn write_p0_dir_pin9(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[9].set_direction(_value))
    }
    #[doc = "P0 DIR PIN10: Pin 10"]
    #[inline]
    pub(crate) fn read_p0_dir_pin10(&self) -> MemResult<bool> {
        Ok(self.gpio[10].get_direction())
    }
    #[doc = "P0 DIR PIN10: Pin 10"]
    #[inline]
    pub(crate) fn write_p0_dir_pin10(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[10].set_direction(_value))
    }
    #[doc = "P0 DIR PIN11: Pin 11"]
    #[inline]
    pub(crate) fn read_p0_dir_pin11(&self) -> MemResult<bool> {
        Ok(self.gpio[11].get_direction())
    }
    #[doc = "P0 DIR PIN11: Pin 11"]
    #[inline]
    pub(crate) fn write_p0_dir_pin11(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[11].set_direction(_value))
    }
    #[doc = "P0 DIR PIN12: Pin 12"]
    #[inline]
    pub(crate) fn read_p0_dir_pin12(&self) -> MemResult<bool> {
        Ok(self.gpio[12].get_direction())
    }
    #[doc = "P0 DIR PIN12: Pin 12"]
    #[inline]
    pub(crate) fn write_p0_dir_pin12(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[12].set_direction(_value))
    }
    #[doc = "P0 DIR PIN13: Pin 13"]
    #[inline]
    pub(crate) fn read_p0_dir_pin13(&self) -> MemResult<bool> {
        Ok(self.gpio[13].get_direction())
    }
    #[doc = "P0 DIR PIN13: Pin 13"]
    #[inline]
    pub(crate) fn write_p0_dir_pin13(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[13].set_direction(_value))
    }
    #[doc = "P0 DIR PIN14: Pin 14"]
    #[inline]
    pub(crate) fn read_p0_dir_pin14(&self) -> MemResult<bool> {
        Ok(self.gpio[14].get_direction())
    }
    #[doc = "P0 DIR PIN14: Pin 14"]
    #[inline]
    pub(crate) fn write_p0_dir_pin14(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[14].set_direction(_value))
    }
    #[doc = "P0 DIR PIN15: Pin 15"]
    #[inline]
    pub(crate) fn read_p0_dir_pin15(&self) -> MemResult<bool> {
        Ok(self.gpio[15].get_direction())
    }
    #[doc = "P0 DIR PIN15: Pin 15"]
    #[inline]
    pub(crate) fn write_p0_dir_pin15(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[15].set_direction(_value))
    }
    #[doc = "P0 DIR PIN16: Pin 16"]
    #[inline]
    pub(crate) fn read_p0_dir_pin16(&self) -> MemResult<bool> {
        Ok(self.gpio[16].get_direction())
    }
    #[doc = "P0 DIR PIN16: Pin 16"]
    #[inline]
    pub(crate) fn write_p0_dir_pin16(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[16].set_direction(_value))
    }
    #[doc = "P0 DIR PIN17: Pin 17"]
    #[inline]
    pub(crate) fn read_p0_dir_pin17(&self) -> MemResult<bool> {
        Ok(self.gpio[17].get_direction())
    }
    #[doc = "P0 DIR PIN17: Pin 17"]
    #[inline]
    pub(crate) fn write_p0_dir_pin17(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[17].set_direction(_value))
    }
    #[doc = "P0 DIR PIN18: Pin 18"]
    #[inline]
    pub(crate) fn read_p0_dir_pin18(&self) -> MemResult<bool> {
        Ok(self.gpio[18].get_direction())
    }
    #[doc = "P0 DIR PIN18: Pin 18"]
    #[inline]
    pub(crate) fn write_p0_dir_pin18(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[18].set_direction(_value))
    }
    #[doc = "P0 DIR PIN19: Pin 19"]
    #[inline]
    pub(crate) fn read_p0_dir_pin19(&self) -> MemResult<bool> {
        Ok(self.gpio[19].get_direction())
    }
    #[doc = "P0 DIR PIN19: Pin 19"]
    #[inline]
    pub(crate) fn write_p0_dir_pin19(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[19].set_direction(_value))
    }
    #[doc = "P0 DIR PIN20: Pin 20"]
    #[inline]
    pub(crate) fn read_p0_dir_pin20(&self) -> MemResult<bool> {
        Ok(self.gpio[20].get_direction())
    }
    #[doc = "P0 DIR PIN20: Pin 20"]
    #[inline]
    pub(crate) fn write_p0_dir_pin20(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[20].set_direction(_value))
    }
    #[doc = "P0 DIR PIN21: Pin 21"]
    #[inline]
    pub(crate) fn read_p0_dir_pin21(&self) -> MemResult<bool> {
        Ok(self.gpio[21].get_direction())
    }
    #[doc = "P0 DIR PIN21: Pin 21"]
    #[inline]
    pub(crate) fn write_p0_dir_pin21(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[21].set_direction(_value))
    }
    #[doc = "P0 DIR PIN22: Pin 22"]
    #[inline]
    pub(crate) fn read_p0_dir_pin22(&self) -> MemResult<bool> {
        Ok(self.gpio[22].get_direction())
    }
    #[doc = "P0 DIR PIN22: Pin 22"]
    #[inline]
    pub(crate) fn write_p0_dir_pin22(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[22].set_direction(_value))
    }
    #[doc = "P0 DIR PIN23: Pin 23"]
    #[inline]
    pub(crate) fn read_p0_dir_pin23(&self) -> MemResult<bool> {
        Ok(self.gpio[23].get_direction())
    }
    #[doc = "P0 DIR PIN23: Pin 23"]
    #[inline]
    pub(crate) fn write_p0_dir_pin23(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[23].set_direction(_value))
    }
    #[doc = "P0 DIR PIN24: Pin 24"]
    #[inline]
    pub(crate) fn read_p0_dir_pin24(&self) -> MemResult<bool> {
        Ok(self.gpio[24].get_direction())
    }
    #[doc = "P0 DIR PIN24: Pin 24"]
    #[inline]
    pub(crate) fn write_p0_dir_pin24(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[24].set_direction(_value))
    }
    #[doc = "P0 DIR PIN25: Pin 25"]
    #[inline]
    pub(crate) fn read_p0_dir_pin25(&self) -> MemResult<bool> {
        Ok(self.gpio[25].get_direction())
    }
    #[doc = "P0 DIR PIN25: Pin 25"]
    #[inline]
    pub(crate) fn write_p0_dir_pin25(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[25].set_direction(_value))
    }
    #[doc = "P0 DIR PIN26: Pin 26"]
    #[inline]
    pub(crate) fn read_p0_dir_pin26(&self) -> MemResult<bool> {
        Ok(self.gpio[26].get_direction())
    }
    #[doc = "P0 DIR PIN26: Pin 26"]
    #[inline]
    pub(crate) fn write_p0_dir_pin26(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[26].set_direction(_value))
    }
    #[doc = "P0 DIR PIN27: Pin 27"]
    #[inline]
    pub(crate) fn read_p0_dir_pin27(&self) -> MemResult<bool> {
        Ok(self.gpio[27].get_direction())
    }
    #[doc = "P0 DIR PIN27: Pin 27"]
    #[inline]
    pub(crate) fn write_p0_dir_pin27(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[27].set_direction(_value))
    }
    #[doc = "P0 DIR PIN28: Pin 28"]
    #[inline]
    pub(crate) fn read_p0_dir_pin28(&self) -> MemResult<bool> {
        Ok(self.gpio[28].get_direction())
    }
    #[doc = "P0 DIR PIN28: Pin 28"]
    #[inline]
    pub(crate) fn write_p0_dir_pin28(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[28].set_direction(_value))
    }
    #[doc = "P0 DIR PIN29: Pin 29"]
    #[inline]
    pub(crate) fn read_p0_dir_pin29(&self) -> MemResult<bool> {
        Ok(self.gpio[29].get_direction())
    }
    #[doc = "P0 DIR PIN29: Pin 29"]
    #[inline]
    pub(crate) fn write_p0_dir_pin29(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[29].set_direction(_value))
    }
    #[doc = "P0 DIR PIN30: Pin 30"]
    #[inline]
    pub(crate) fn read_p0_dir_pin30(&self) -> MemResult<bool> {
        Ok(self.gpio[30].get_direction())
    }
    #[doc = "P0 DIR PIN30: Pin 30"]
    #[inline]
    pub(crate) fn write_p0_dir_pin30(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[30].set_direction(_value))
    }
    #[doc = "P0 DIR PIN31: Pin 31"]
    #[inline]
    pub(crate) fn read_p0_dir_pin31(&self) -> MemResult<bool> {
        Ok(self.gpio[31].get_direction())
    }
    #[doc = "P0 DIR PIN31: Pin 31"]
    #[inline]
    pub(crate) fn write_p0_dir_pin31(&mut self, _value: bool) -> MemResult<()> {
        Ok(self.gpio[31].set_direction(_value))
    }
    #[doc = "P0 DIRSET PIN0: Set as output pin 0"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin0(&self) -> MemResult<bool> {
        Ok(self.gpio[0].get_direction())
    }
    #[doc = "P0 DIRSET PIN0: Set as output pin 0"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin0(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[0].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN1: Set as output pin 1"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin1(&self) -> MemResult<bool> {
        Ok(self.gpio[1].get_direction())
    }
    #[doc = "P0 DIRSET PIN1: Set as output pin 1"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin1(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[1].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN2: Set as output pin 2"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin2(&self) -> MemResult<bool> {
        Ok(self.gpio[2].get_direction())
    }
    #[doc = "P0 DIRSET PIN2: Set as output pin 2"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin2(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[2].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN3: Set as output pin 3"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin3(&self) -> MemResult<bool> {
        Ok(self.gpio[3].get_direction())
    }
    #[doc = "P0 DIRSET PIN3: Set as output pin 3"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin3(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[3].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN4: Set as output pin 4"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin4(&self) -> MemResult<bool> {
        Ok(self.gpio[4].get_direction())
    }
    #[doc = "P0 DIRSET PIN4: Set as output pin 4"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin4(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[4].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN5: Set as output pin 5"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin5(&self) -> MemResult<bool> {
        Ok(self.gpio[5].get_direction())
    }
    #[doc = "P0 DIRSET PIN5: Set as output pin 5"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin5(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[5].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN6: Set as output pin 6"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin6(&self) -> MemResult<bool> {
        Ok(self.gpio[6].get_direction())
    }
    #[doc = "P0 DIRSET PIN6: Set as output pin 6"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin6(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[6].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN7: Set as output pin 7"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin7(&self) -> MemResult<bool> {
        Ok(self.gpio[7].get_direction())
    }
    #[doc = "P0 DIRSET PIN7: Set as output pin 7"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin7(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[7].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN8: Set as output pin 8"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin8(&self) -> MemResult<bool> {
        Ok(self.gpio[8].get_direction())
    }
    #[doc = "P0 DIRSET PIN8: Set as output pin 8"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin8(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[8].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN9: Set as output pin 9"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin9(&self) -> MemResult<bool> {
        Ok(self.gpio[9].get_direction())
    }
    #[doc = "P0 DIRSET PIN9: Set as output pin 9"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin9(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[9].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN10: Set as output pin 10"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin10(&self) -> MemResult<bool> {
        Ok(self.gpio[10].get_direction())
    }
    #[doc = "P0 DIRSET PIN10: Set as output pin 10"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin10(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[10].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN11: Set as output pin 11"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin11(&self) -> MemResult<bool> {
        Ok(self.gpio[11].get_direction())
    }
    #[doc = "P0 DIRSET PIN11: Set as output pin 11"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin11(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[11].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN12: Set as output pin 12"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin12(&self) -> MemResult<bool> {
        Ok(self.gpio[12].get_direction())
    }
    #[doc = "P0 DIRSET PIN12: Set as output pin 12"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin12(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[12].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN13: Set as output pin 13"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin13(&self) -> MemResult<bool> {
        Ok(self.gpio[13].get_direction())
    }
    #[doc = "P0 DIRSET PIN13: Set as output pin 13"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin13(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[13].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN14: Set as output pin 14"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin14(&self) -> MemResult<bool> {
        Ok(self.gpio[14].get_direction())
    }
    #[doc = "P0 DIRSET PIN14: Set as output pin 14"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin14(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[14].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN15: Set as output pin 15"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin15(&self) -> MemResult<bool> {
        Ok(self.gpio[15].get_direction())
    }
    #[doc = "P0 DIRSET PIN15: Set as output pin 15"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin15(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[15].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN16: Set as output pin 16"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin16(&self) -> MemResult<bool> {
        Ok(self.gpio[16].get_direction())
    }
    #[doc = "P0 DIRSET PIN16: Set as output pin 16"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin16(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[16].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN17: Set as output pin 17"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin17(&self) -> MemResult<bool> {
        Ok(self.gpio[17].get_direction())
    }
    #[doc = "P0 DIRSET PIN17: Set as output pin 17"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin17(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[17].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN18: Set as output pin 18"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin18(&self) -> MemResult<bool> {
        Ok(self.gpio[18].get_direction())
    }
    #[doc = "P0 DIRSET PIN18: Set as output pin 18"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin18(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[18].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN19: Set as output pin 19"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin19(&self) -> MemResult<bool> {
        Ok(self.gpio[19].get_direction())
    }
    #[doc = "P0 DIRSET PIN19: Set as output pin 19"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin19(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[19].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN20: Set as output pin 20"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin20(&self) -> MemResult<bool> {
        Ok(self.gpio[20].get_direction())
    }
    #[doc = "P0 DIRSET PIN20: Set as output pin 20"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin20(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[20].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN21: Set as output pin 21"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin21(&self) -> MemResult<bool> {
        Ok(self.gpio[21].get_direction())
    }
    #[doc = "P0 DIRSET PIN21: Set as output pin 21"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin21(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[21].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN22: Set as output pin 22"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin22(&self) -> MemResult<bool> {
        Ok(self.gpio[22].get_direction())
    }
    #[doc = "P0 DIRSET PIN22: Set as output pin 22"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin22(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[22].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN23: Set as output pin 23"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin23(&self) -> MemResult<bool> {
        Ok(self.gpio[23].get_direction())
    }
    #[doc = "P0 DIRSET PIN23: Set as output pin 23"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin23(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[23].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN24: Set as output pin 24"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin24(&self) -> MemResult<bool> {
        Ok(self.gpio[24].get_direction())
    }
    #[doc = "P0 DIRSET PIN24: Set as output pin 24"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin24(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[24].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN25: Set as output pin 25"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin25(&self) -> MemResult<bool> {
        Ok(self.gpio[25].get_direction())
    }
    #[doc = "P0 DIRSET PIN25: Set as output pin 25"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin25(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[25].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN26: Set as output pin 26"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin26(&self) -> MemResult<bool> {
        Ok(self.gpio[26].get_direction())
    }
    #[doc = "P0 DIRSET PIN26: Set as output pin 26"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin26(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[26].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN27: Set as output pin 27"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin27(&self) -> MemResult<bool> {
        Ok(self.gpio[27].get_direction())
    }
    #[doc = "P0 DIRSET PIN27: Set as output pin 27"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin27(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[27].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN28: Set as output pin 28"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin28(&self) -> MemResult<bool> {
        Ok(self.gpio[28].get_direction())
    }
    #[doc = "P0 DIRSET PIN28: Set as output pin 28"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin28(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[28].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN29: Set as output pin 29"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin29(&self) -> MemResult<bool> {
        Ok(self.gpio[29].get_direction())
    }
    #[doc = "P0 DIRSET PIN29: Set as output pin 29"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin29(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[29].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN30: Set as output pin 30"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin30(&self) -> MemResult<bool> {
        Ok(self.gpio[30].get_direction())
    }
    #[doc = "P0 DIRSET PIN30: Set as output pin 30"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin30(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[30].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRSET PIN31: Set as output pin 31"]
    #[inline]
    pub(crate) fn read_p0_dirset_pin31(&self) -> MemResult<bool> {
        Ok(self.gpio[31].get_direction())
    }
    #[doc = "P0 DIRSET PIN31: Set as output pin 31"]
    #[inline]
    pub(crate) fn write_p0_dirset_pin31(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[31].set_direction(true)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN0: Set as input pin 0"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin0(&self) -> MemResult<bool> {
        Ok(self.gpio[0].get_direction())
    }
    #[doc = "P0 DIRCLR PIN0: Set as input pin 0"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin0(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[0].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN1: Set as input pin 1"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin1(&self) -> MemResult<bool> {
        Ok(self.gpio[1].get_direction())
    }
    #[doc = "P0 DIRCLR PIN1: Set as input pin 1"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin1(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[1].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN2: Set as input pin 2"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin2(&self) -> MemResult<bool> {
        Ok(self.gpio[2].get_direction())
    }
    #[doc = "P0 DIRCLR PIN2: Set as input pin 2"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin2(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[2].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN3: Set as input pin 3"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin3(&self) -> MemResult<bool> {
        Ok(self.gpio[3].get_direction())
    }
    #[doc = "P0 DIRCLR PIN3: Set as input pin 3"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin3(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[3].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN4: Set as input pin 4"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin4(&self) -> MemResult<bool> {
        Ok(self.gpio[4].get_direction())
    }
    #[doc = "P0 DIRCLR PIN4: Set as input pin 4"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin4(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[4].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN5: Set as input pin 5"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin5(&self) -> MemResult<bool> {
        Ok(self.gpio[5].get_direction())
    }
    #[doc = "P0 DIRCLR PIN5: Set as input pin 5"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin5(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[5].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN6: Set as input pin 6"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin6(&self) -> MemResult<bool> {
        Ok(self.gpio[6].get_direction())
    }
    #[doc = "P0 DIRCLR PIN6: Set as input pin 6"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin6(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[6].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN7: Set as input pin 7"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin7(&self) -> MemResult<bool> {
        Ok(self.gpio[7].get_direction())
    }
    #[doc = "P0 DIRCLR PIN7: Set as input pin 7"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin7(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[7].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN8: Set as input pin 8"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin8(&self) -> MemResult<bool> {
        Ok(self.gpio[8].get_direction())
    }
    #[doc = "P0 DIRCLR PIN8: Set as input pin 8"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin8(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[8].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN9: Set as input pin 9"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin9(&self) -> MemResult<bool> {
        Ok(self.gpio[9].get_direction())
    }
    #[doc = "P0 DIRCLR PIN9: Set as input pin 9"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin9(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[9].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN10: Set as input pin 10"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin10(&self) -> MemResult<bool> {
        Ok(self.gpio[10].get_direction())
    }
    #[doc = "P0 DIRCLR PIN10: Set as input pin 10"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin10(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[10].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN11: Set as input pin 11"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin11(&self) -> MemResult<bool> {
        Ok(self.gpio[11].get_direction())
    }
    #[doc = "P0 DIRCLR PIN11: Set as input pin 11"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin11(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[11].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN12: Set as input pin 12"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin12(&self) -> MemResult<bool> {
        Ok(self.gpio[12].get_direction())
    }
    #[doc = "P0 DIRCLR PIN12: Set as input pin 12"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin12(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[12].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN13: Set as input pin 13"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin13(&self) -> MemResult<bool> {
        Ok(self.gpio[13].get_direction())
    }
    #[doc = "P0 DIRCLR PIN13: Set as input pin 13"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin13(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[13].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN14: Set as input pin 14"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin14(&self) -> MemResult<bool> {
        Ok(self.gpio[14].get_direction())
    }
    #[doc = "P0 DIRCLR PIN14: Set as input pin 14"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin14(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[14].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN15: Set as input pin 15"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin15(&self) -> MemResult<bool> {
        Ok(self.gpio[15].get_direction())
    }
    #[doc = "P0 DIRCLR PIN15: Set as input pin 15"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin15(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[15].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN16: Set as input pin 16"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin16(&self) -> MemResult<bool> {
        Ok(self.gpio[16].get_direction())
    }
    #[doc = "P0 DIRCLR PIN16: Set as input pin 16"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin16(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[16].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN17: Set as input pin 17"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin17(&self) -> MemResult<bool> {
        Ok(self.gpio[17].get_direction())
    }
    #[doc = "P0 DIRCLR PIN17: Set as input pin 17"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin17(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[17].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN18: Set as input pin 18"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin18(&self) -> MemResult<bool> {
        Ok(self.gpio[18].get_direction())
    }
    #[doc = "P0 DIRCLR PIN18: Set as input pin 18"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin18(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[18].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN19: Set as input pin 19"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin19(&self) -> MemResult<bool> {
        Ok(self.gpio[19].get_direction())
    }
    #[doc = "P0 DIRCLR PIN19: Set as input pin 19"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin19(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[19].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN20: Set as input pin 20"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin20(&self) -> MemResult<bool> {
        Ok(self.gpio[20].get_direction())
    }
    #[doc = "P0 DIRCLR PIN20: Set as input pin 20"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin20(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[20].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN21: Set as input pin 21"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin21(&self) -> MemResult<bool> {
        Ok(self.gpio[21].get_direction())
    }
    #[doc = "P0 DIRCLR PIN21: Set as input pin 21"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin21(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[21].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN22: Set as input pin 22"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin22(&self) -> MemResult<bool> {
        Ok(self.gpio[22].get_direction())
    }
    #[doc = "P0 DIRCLR PIN22: Set as input pin 22"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin22(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[22].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN23: Set as input pin 23"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin23(&self) -> MemResult<bool> {
        Ok(self.gpio[23].get_direction())
    }
    #[doc = "P0 DIRCLR PIN23: Set as input pin 23"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin23(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[23].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN24: Set as input pin 24"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin24(&self) -> MemResult<bool> {
        Ok(self.gpio[24].get_direction())
    }
    #[doc = "P0 DIRCLR PIN24: Set as input pin 24"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin24(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[24].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN25: Set as input pin 25"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin25(&self) -> MemResult<bool> {
        Ok(self.gpio[25].get_direction())
    }
    #[doc = "P0 DIRCLR PIN25: Set as input pin 25"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin25(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[25].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN26: Set as input pin 26"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin26(&self) -> MemResult<bool> {
        Ok(self.gpio[26].get_direction())
    }
    #[doc = "P0 DIRCLR PIN26: Set as input pin 26"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin26(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[26].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN27: Set as input pin 27"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin27(&self) -> MemResult<bool> {
        Ok(self.gpio[27].get_direction())
    }
    #[doc = "P0 DIRCLR PIN27: Set as input pin 27"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin27(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[27].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN28: Set as input pin 28"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin28(&self) -> MemResult<bool> {
        Ok(self.gpio[28].get_direction())
    }
    #[doc = "P0 DIRCLR PIN28: Set as input pin 28"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin28(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[28].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN29: Set as input pin 29"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin29(&self) -> MemResult<bool> {
        Ok(self.gpio[29].get_direction())
    }
    #[doc = "P0 DIRCLR PIN29: Set as input pin 29"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin29(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[29].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN30: Set as input pin 30"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin30(&self) -> MemResult<bool> {
        Ok(self.gpio[30].get_direction())
    }
    #[doc = "P0 DIRCLR PIN30: Set as input pin 30"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin30(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[30].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 DIRCLR PIN31: Set as input pin 31"]
    #[inline]
    pub(crate) fn read_p0_dirclr_pin31(&self) -> MemResult<bool> {
        Ok(self.gpio[31].get_direction())
    }
    #[doc = "P0 DIRCLR PIN31: Set as input pin 31"]
    #[inline]
    pub(crate) fn write_p0_dirclr_pin31(&mut self, _value: bool) -> MemResult<()> {
        if _value {
            self.gpio[31].set_direction(false)
        }
        Ok(())
    }
    #[doc = "P0 LATCH PIN0: Status on whether PIN0 has met criteria set in PIN_CNF0.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin0(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN0 reset value false")
    }
    #[doc = "P0 LATCH PIN0: Status on whether PIN0 has met criteria set in PIN_CNF0.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin0(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN0 reset value false")
    }
    #[doc = "P0 LATCH PIN1: Status on whether PIN1 has met criteria set in PIN_CNF1.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin1(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN1 reset value false")
    }
    #[doc = "P0 LATCH PIN1: Status on whether PIN1 has met criteria set in PIN_CNF1.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin1(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN1 reset value false")
    }
    #[doc = "P0 LATCH PIN2: Status on whether PIN2 has met criteria set in PIN_CNF2.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin2(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN2 reset value false")
    }
    #[doc = "P0 LATCH PIN2: Status on whether PIN2 has met criteria set in PIN_CNF2.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin2(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN2 reset value false")
    }
    #[doc = "P0 LATCH PIN3: Status on whether PIN3 has met criteria set in PIN_CNF3.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin3(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN3 reset value false")
    }
    #[doc = "P0 LATCH PIN3: Status on whether PIN3 has met criteria set in PIN_CNF3.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin3(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN3 reset value false")
    }
    #[doc = "P0 LATCH PIN4: Status on whether PIN4 has met criteria set in PIN_CNF4.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin4(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN4 reset value false")
    }
    #[doc = "P0 LATCH PIN4: Status on whether PIN4 has met criteria set in PIN_CNF4.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin4(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN4 reset value false")
    }
    #[doc = "P0 LATCH PIN5: Status on whether PIN5 has met criteria set in PIN_CNF5.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin5(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN5 reset value false")
    }
    #[doc = "P0 LATCH PIN5: Status on whether PIN5 has met criteria set in PIN_CNF5.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin5(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN5 reset value false")
    }
    #[doc = "P0 LATCH PIN6: Status on whether PIN6 has met criteria set in PIN_CNF6.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin6(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN6 reset value false")
    }
    #[doc = "P0 LATCH PIN6: Status on whether PIN6 has met criteria set in PIN_CNF6.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin6(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN6 reset value false")
    }
    #[doc = "P0 LATCH PIN7: Status on whether PIN7 has met criteria set in PIN_CNF7.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin7(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN7 reset value false")
    }
    #[doc = "P0 LATCH PIN7: Status on whether PIN7 has met criteria set in PIN_CNF7.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin7(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN7 reset value false")
    }
    #[doc = "P0 LATCH PIN8: Status on whether PIN8 has met criteria set in PIN_CNF8.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin8(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN8 reset value false")
    }
    #[doc = "P0 LATCH PIN8: Status on whether PIN8 has met criteria set in PIN_CNF8.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin8(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN8 reset value false")
    }
    #[doc = "P0 LATCH PIN9: Status on whether PIN9 has met criteria set in PIN_CNF9.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin9(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN9 reset value false")
    }
    #[doc = "P0 LATCH PIN9: Status on whether PIN9 has met criteria set in PIN_CNF9.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin9(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN9 reset value false")
    }
    #[doc = "P0 LATCH PIN10: Status on whether PIN10 has met criteria set in PIN_CNF10.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin10(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN10 reset value false")
    }
    #[doc = "P0 LATCH PIN10: Status on whether PIN10 has met criteria set in PIN_CNF10.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin10(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN10 reset value false")
    }
    #[doc = "P0 LATCH PIN11: Status on whether PIN11 has met criteria set in PIN_CNF11.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin11(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN11 reset value false")
    }
    #[doc = "P0 LATCH PIN11: Status on whether PIN11 has met criteria set in PIN_CNF11.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin11(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN11 reset value false")
    }
    #[doc = "P0 LATCH PIN12: Status on whether PIN12 has met criteria set in PIN_CNF12.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin12(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN12 reset value false")
    }
    #[doc = "P0 LATCH PIN12: Status on whether PIN12 has met criteria set in PIN_CNF12.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin12(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN12 reset value false")
    }
    #[doc = "P0 LATCH PIN13: Status on whether PIN13 has met criteria set in PIN_CNF13.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin13(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN13 reset value false")
    }
    #[doc = "P0 LATCH PIN13: Status on whether PIN13 has met criteria set in PIN_CNF13.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin13(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN13 reset value false")
    }
    #[doc = "P0 LATCH PIN14: Status on whether PIN14 has met criteria set in PIN_CNF14.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin14(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN14 reset value false")
    }
    #[doc = "P0 LATCH PIN14: Status on whether PIN14 has met criteria set in PIN_CNF14.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin14(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN14 reset value false")
    }
    #[doc = "P0 LATCH PIN15: Status on whether PIN15 has met criteria set in PIN_CNF15.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin15(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN15 reset value false")
    }
    #[doc = "P0 LATCH PIN15: Status on whether PIN15 has met criteria set in PIN_CNF15.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin15(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN15 reset value false")
    }
    #[doc = "P0 LATCH PIN16: Status on whether PIN16 has met criteria set in PIN_CNF16.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin16(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN16 reset value false")
    }
    #[doc = "P0 LATCH PIN16: Status on whether PIN16 has met criteria set in PIN_CNF16.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin16(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN16 reset value false")
    }
    #[doc = "P0 LATCH PIN17: Status on whether PIN17 has met criteria set in PIN_CNF17.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin17(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN17 reset value false")
    }
    #[doc = "P0 LATCH PIN17: Status on whether PIN17 has met criteria set in PIN_CNF17.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin17(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN17 reset value false")
    }
    #[doc = "P0 LATCH PIN18: Status on whether PIN18 has met criteria set in PIN_CNF18.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin18(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN18 reset value false")
    }
    #[doc = "P0 LATCH PIN18: Status on whether PIN18 has met criteria set in PIN_CNF18.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin18(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN18 reset value false")
    }
    #[doc = "P0 LATCH PIN19: Status on whether PIN19 has met criteria set in PIN_CNF19.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin19(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN19 reset value false")
    }
    #[doc = "P0 LATCH PIN19: Status on whether PIN19 has met criteria set in PIN_CNF19.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin19(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN19 reset value false")
    }
    #[doc = "P0 LATCH PIN20: Status on whether PIN20 has met criteria set in PIN_CNF20.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin20(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN20 reset value false")
    }
    #[doc = "P0 LATCH PIN20: Status on whether PIN20 has met criteria set in PIN_CNF20.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin20(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN20 reset value false")
    }
    #[doc = "P0 LATCH PIN21: Status on whether PIN21 has met criteria set in PIN_CNF21.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin21(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN21 reset value false")
    }
    #[doc = "P0 LATCH PIN21: Status on whether PIN21 has met criteria set in PIN_CNF21.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin21(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN21 reset value false")
    }
    #[doc = "P0 LATCH PIN22: Status on whether PIN22 has met criteria set in PIN_CNF22.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin22(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN22 reset value false")
    }
    #[doc = "P0 LATCH PIN22: Status on whether PIN22 has met criteria set in PIN_CNF22.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin22(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN22 reset value false")
    }
    #[doc = "P0 LATCH PIN23: Status on whether PIN23 has met criteria set in PIN_CNF23.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin23(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN23 reset value false")
    }
    #[doc = "P0 LATCH PIN23: Status on whether PIN23 has met criteria set in PIN_CNF23.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin23(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN23 reset value false")
    }
    #[doc = "P0 LATCH PIN24: Status on whether PIN24 has met criteria set in PIN_CNF24.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin24(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN24 reset value false")
    }
    #[doc = "P0 LATCH PIN24: Status on whether PIN24 has met criteria set in PIN_CNF24.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin24(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN24 reset value false")
    }
    #[doc = "P0 LATCH PIN25: Status on whether PIN25 has met criteria set in PIN_CNF25.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin25(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN25 reset value false")
    }
    #[doc = "P0 LATCH PIN25: Status on whether PIN25 has met criteria set in PIN_CNF25.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin25(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN25 reset value false")
    }
    #[doc = "P0 LATCH PIN26: Status on whether PIN26 has met criteria set in PIN_CNF26.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin26(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN26 reset value false")
    }
    #[doc = "P0 LATCH PIN26: Status on whether PIN26 has met criteria set in PIN_CNF26.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin26(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN26 reset value false")
    }
    #[doc = "P0 LATCH PIN27: Status on whether PIN27 has met criteria set in PIN_CNF27.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin27(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN27 reset value false")
    }
    #[doc = "P0 LATCH PIN27: Status on whether PIN27 has met criteria set in PIN_CNF27.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin27(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN27 reset value false")
    }
    #[doc = "P0 LATCH PIN28: Status on whether PIN28 has met criteria set in PIN_CNF28.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin28(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN28 reset value false")
    }
    #[doc = "P0 LATCH PIN28: Status on whether PIN28 has met criteria set in PIN_CNF28.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin28(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN28 reset value false")
    }
    #[doc = "P0 LATCH PIN29: Status on whether PIN29 has met criteria set in PIN_CNF29.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin29(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN29 reset value false")
    }
    #[doc = "P0 LATCH PIN29: Status on whether PIN29 has met criteria set in PIN_CNF29.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin29(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN29 reset value false")
    }
    #[doc = "P0 LATCH PIN30: Status on whether PIN30 has met criteria set in PIN_CNF30.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin30(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN30 reset value false")
    }
    #[doc = "P0 LATCH PIN30: Status on whether PIN30 has met criteria set in PIN_CNF30.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin30(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN30 reset value false")
    }
    #[doc = "P0 LATCH PIN31: Status on whether PIN31 has met criteria set in PIN_CNF31.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn read_p0_latch_pin31(&self) -> MemResult<bool> {
        todo!("read P0 LATCH PIN31 reset value false")
    }
    #[doc = "P0 LATCH PIN31: Status on whether PIN31 has met criteria set in PIN_CNF31.SENSE register. Write '1' to clear."]
    #[inline]
    pub(crate) fn write_p0_latch_pin31(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 LATCH PIN31 reset value false")
    }
    #[doc = "P0 DETECTMODE DETECTMODE: Select between default DETECT signal behaviour and LDETECT mode"]
    #[inline]
    pub(crate) fn read_p0_detectmode_detectmode(&self) -> MemResult<bool> {
        todo!("read P0 DETECTMODE DETECTMODE reset value false")
    }
    #[doc = "P0 DETECTMODE DETECTMODE: Select between default DETECT signal behaviour and LDETECT mode"]
    #[inline]
    pub(crate) fn write_p0_detectmode_detectmode(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write P0 DETECTMODE DETECTMODE reset value false")
    }
    #[doc = "P0 PIN_CNF[%s] DIR: Pin direction. Same physical register as DIR register"]
    #[inline]
    pub(crate) fn read_p0_pin_cnfn_dir(&self, _dim: usize) -> MemResult<bool> {
        Ok(self.gpio[_dim].get_direction())
    }
    #[doc = "P0 PIN_CNF[%s] DIR: Pin direction. Same physical register as DIR register"]
    #[inline]
    pub(crate) fn write_p0_pin_cnfn_dir(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.gpio[_dim].set_direction(_value))
    }
    #[doc = "P0 PIN_CNF[%s] INPUT: Connect or disconnect input buffer"]
    #[inline]
    pub(crate) fn read_p0_pin_cnfn_input(
        &self,
        _dim: usize,
    ) -> MemResult<bool> {
        Ok(self.gpio[_dim].get_direction())
    }
    #[doc = "P0 PIN_CNF[%s] INPUT: Connect or disconnect input buffer"]
    #[inline]
    pub(crate) fn write_p0_pin_cnfn_input(
        &mut self,
        _dim: usize,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.gpio[_dim].set_direction(_value))
    }
    #[doc = "P0 PIN_CNF[%s] PULL: Pull configuration"]
    #[inline]
    pub(crate) fn read_p0_pin_cnfn_pull(&self, _dim: usize) -> MemResult<u8> {
        Ok(self.gpio[_dim].get_pull() as u8)
    }
    #[doc = "P0 PIN_CNF[%s] PULL: Pull configuration"]
    #[inline]
    pub(crate) fn write_p0_pin_cnfn_pull(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.gpio[_dim]
            .set_pull(_value.try_into().map_err(|_| MemError::WriteViolation)?))
    }
    #[doc = "P0 PIN_CNF[%s] DRIVE: Drive configuration"]
    #[inline]
    pub(crate) fn read_p0_pin_cnfn_drive(&self, _dim: usize) -> MemResult<u8> {
        Ok(self.gpio[_dim].get_drive() as u8)
    }
    #[doc = "P0 PIN_CNF[%s] DRIVE: Drive configuration"]
    #[inline]
    pub(crate) fn write_p0_pin_cnfn_drive(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.gpio[_dim].set_drive(
            _value.try_into().map_err(|_| MemError::WriteViolation)?,
        ))
    }
    #[doc = "P0 PIN_CNF[%s] SENSE: Pin sensing mechanism"]
    #[inline]
    pub(crate) fn read_p0_pin_cnfn_sense(&self, _dim: usize) -> MemResult<u8> {
        Ok(self.gpio[_dim].get_sense() as u8)
    }
    #[doc = "P0 PIN_CNF[%s] SENSE: Pin sensing mechanism"]
    #[inline]
    pub(crate) fn write_p0_pin_cnfn_sense(
        &mut self,
        _dim: usize,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.gpio[_dim].set_sense(
            _value.try_into().map_err(|_| MemError::WriteViolation)?,
        ))
    }
    #[doc = "NVIC ICTR INTLINESNUM: The total number of interrupt lines supported n, defined in groups of\n32. That is, the total number of interrupt lines is up to (32*(INTLINESNUM+1)). However,\nthe absolute maximum number of interrupts is 496, corresponding to the INTLINESNUM\nvalue 0b1111."]
    #[inline]
    pub(crate) fn read_nvic_ictr_intlinesnum(&self) -> MemResult<u8> {
        todo!("read NVIC ICTR INTLINESNUM reset value 0x00 mask 0x0f")
    }
    #[doc = "Control ACTLR DISMCYCINT: Disables interruption of multi-cycle instructions"]
    #[inline]
    pub(crate) fn read_control_actlr_dismcycint(&self) -> MemResult<bool> {
        todo!("read Control ACTLR DISMCYCINT reset value false")
    }
    #[doc = "Control ACTLR DISMCYCINT: Disables interruption of multi-cycle instructions"]
    #[inline]
    pub(crate) fn write_control_actlr_dismcycint(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control ACTLR DISMCYCINT reset value false")
    }
    #[doc = "Control ACTLR DISDEFWBUF: Disables write buffer use during default memory map accesses"]
    #[inline]
    pub(crate) fn read_control_actlr_disdefwbuf(&self) -> MemResult<bool> {
        todo!("read Control ACTLR DISDEFWBUF reset value false")
    }
    #[doc = "Control ACTLR DISDEFWBUF: Disables write buffer use during default memory map accesses"]
    #[inline]
    pub(crate) fn write_control_actlr_disdefwbuf(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control ACTLR DISDEFWBUF reset value false")
    }
    #[doc = "Control ACTLR DISFOLD: Disables folding of IT instructions"]
    #[inline]
    pub(crate) fn read_control_actlr_disfold(&self) -> MemResult<bool> {
        todo!("read Control ACTLR DISFOLD reset value false")
    }
    #[doc = "Control ACTLR DISFOLD: Disables folding of IT instructions"]
    #[inline]
    pub(crate) fn write_control_actlr_disfold(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control ACTLR DISFOLD reset value false")
    }
    #[doc = "Control ACTLR DISFPCA: Disable automatic update of CONTROL.FPCA"]
    #[inline]
    pub(crate) fn read_control_actlr_disfpca(&self) -> MemResult<bool> {
        todo!("read Control ACTLR DISFPCA reset value false")
    }
    #[doc = "Control ACTLR DISFPCA: Disable automatic update of CONTROL.FPCA"]
    #[inline]
    pub(crate) fn write_control_actlr_disfpca(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control ACTLR DISFPCA reset value false")
    }
    #[doc = "Control ACTLR DISOOFP: Disables floating point instructions completing out of order with respect to integer instructions"]
    #[inline]
    pub(crate) fn read_control_actlr_disoofp(&self) -> MemResult<bool> {
        todo!("read Control ACTLR DISOOFP reset value false")
    }
    #[doc = "Control ACTLR DISOOFP: Disables floating point instructions completing out of order with respect to integer instructions"]
    #[inline]
    pub(crate) fn write_control_actlr_disoofp(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control ACTLR DISOOFP reset value false")
    }
    #[doc = "SysTick STCSR ENABLE: Indicates the enabled status of the SysTick counter"]
    #[inline]
    pub(crate) fn read_systick_stcsr_enable(&self) -> MemResult<bool> {
        todo!("read SysTick STCSR ENABLE reset value false")
    }
    #[doc = "SysTick STCSR ENABLE: Indicates the enabled status of the SysTick counter"]
    #[inline]
    pub(crate) fn write_systick_stcsr_enable(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SysTick STCSR ENABLE reset value false")
    }
    #[doc = "SysTick STCSR TICKINT: Indicates whether counting to 0 causes the status of the SysTick exception to change to pending"]
    #[inline]
    pub(crate) fn read_systick_stcsr_tickint(&self) -> MemResult<bool> {
        todo!("read SysTick STCSR TICKINT reset value false")
    }
    #[doc = "SysTick STCSR TICKINT: Indicates whether counting to 0 causes the status of the SysTick exception to change to pending"]
    #[inline]
    pub(crate) fn write_systick_stcsr_tickint(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SysTick STCSR TICKINT reset value false")
    }
    #[doc = "SysTick STCSR CLKSOURCE: Indicates the SysTick clock source"]
    #[inline]
    pub(crate) fn read_systick_stcsr_clksource(&self) -> MemResult<bool> {
        todo!("read SysTick STCSR CLKSOURCE reset value false")
    }
    #[doc = "SysTick STCSR CLKSOURCE: Indicates the SysTick clock source"]
    #[inline]
    pub(crate) fn write_systick_stcsr_clksource(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SysTick STCSR CLKSOURCE reset value false")
    }
    #[doc = "SysTick STCSR COUNTFLAG: Indicates whether the counter has counted to 0 since the last read of this register"]
    #[inline]
    pub(crate) fn read_systick_stcsr_countflag(&self) -> MemResult<bool> {
        todo!("read SysTick STCSR COUNTFLAG reset value false")
    }
    #[doc = "SysTick STCSR COUNTFLAG: Indicates whether the counter has counted to 0 since the last read of this register"]
    #[inline]
    pub(crate) fn write_systick_stcsr_countflag(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write SysTick STCSR COUNTFLAG reset value false")
    }
    #[doc = "SysTick STRVR RELOAD: The value to load into the SYST_CVR register when the counter reaches 0"]
    #[inline]
    pub(crate) fn read_systick_strvr_reload(&self) -> MemResult<u32> {
        todo!("read SysTick STRVR RELOAD reset value 0x00 mask 0xffffff")
    }
    #[doc = "SysTick STRVR RELOAD: The value to load into the SYST_CVR register when the counter reaches 0"]
    #[inline]
    pub(crate) fn write_systick_strvr_reload(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write SysTick STRVR RELOAD reset value 0x00 mask 0xffffff")
    }
    #[doc = "SysTick STCVR CURRENT: This is the value of the counter at the time it is sampled"]
    #[inline]
    pub(crate) fn read_systick_stcvr_current(&self) -> MemResult<u32> {
        todo!("read SysTick STCVR CURRENT reset value 0x00 mask 0xffffff")
    }
    #[doc = "SysTick STCVR CURRENT: This is the value of the counter at the time it is sampled"]
    #[inline]
    pub(crate) fn write_systick_stcvr_current(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write SysTick STCVR CURRENT reset value 0x00 mask 0xffffff")
    }
    #[doc = "SysTick STCR TENMS: Optionally, holds a reload value to be used for 10ms (100Hz) timing, subject to system clock skew errors"]
    #[inline]
    pub(crate) fn read_systick_stcr_tenms(&self) -> MemResult<u32> {
        todo!("read SysTick STCR TENMS reset value 0x00 mask 0xffffff")
    }
    #[doc = "SysTick STCR SKEW: Indicates whether the 10ms calibration value is exact"]
    #[inline]
    pub(crate) fn read_systick_stcr_skew(&self) -> MemResult<bool> {
        todo!("read SysTick STCR SKEW reset value false")
    }
    #[doc = "SysTick STCR NOREF: Indicates whether the IMPLEMENTATION DEFINED reference clock is provided"]
    #[inline]
    pub(crate) fn read_systick_stcr_noref(&self) -> MemResult<bool> {
        todo!("read SysTick STCR NOREF reset value false")
    }
    #[doc = "NVIC NVIC_ISER0: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iser0(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(0))
    }
    #[doc = "NVIC NVIC_ISER0: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_iser0(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_enable(0, _value))
    }
    #[doc = "NVIC NVIC_ISER1: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iser1(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(1))
    }
    #[doc = "NVIC NVIC_ISER1: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_iser1(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_enable(1, _value))
    }
    #[doc = "NVIC NVIC_ISER2: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iser2(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(2))
    }
    #[doc = "NVIC NVIC_ISER2: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_iser2(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_enable(2, _value))
    }
    #[doc = "NVIC NVIC_ISER3: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iser3(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(3))
    }
    #[doc = "NVIC NVIC_ISER3: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_iser3(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_enable(3, _value))
    }
    #[doc = "NVIC NVIC_ISER4: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iser4(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(4))
    }
    #[doc = "NVIC NVIC_ISER4: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_iser4(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_enable(4, _value))
    }
    #[doc = "NVIC NVIC_ISER5: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iser5(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(5))
    }
    #[doc = "NVIC NVIC_ISER5: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_iser5(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_enable(5, _value))
    }
    #[doc = "NVIC NVIC_ISER6: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iser6(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(6))
    }
    #[doc = "NVIC NVIC_ISER6: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_iser6(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_enable(6, _value))
    }
    #[doc = "NVIC NVIC_ISER7: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iser7(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(7))
    }
    #[doc = "NVIC NVIC_ISER7: Enables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_iser7(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_enable(7, _value))
    }
    #[doc = "NVIC NVIC_ICER0: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icer0(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(0))
    }
    #[doc = "NVIC NVIC_ICER0: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_icer0(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_enable(0, _value))
    }
    #[doc = "NVIC NVIC_ICER1: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icer1(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(1))
    }
    #[doc = "NVIC NVIC_ICER1: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_icer1(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_enable(1, _value))
    }
    #[doc = "NVIC NVIC_ICER2: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icer2(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(2))
    }
    #[doc = "NVIC NVIC_ICER2: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_icer2(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_enable(2, _value))
    }
    #[doc = "NVIC NVIC_ICER3: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icer3(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(3))
    }
    #[doc = "NVIC NVIC_ICER3: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_icer3(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_enable(3, _value))
    }
    #[doc = "NVIC NVIC_ICER4: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icer4(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(4))
    }
    #[doc = "NVIC NVIC_ICER4: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_icer4(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_enable(4, _value))
    }
    #[doc = "NVIC NVIC_ICER5: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icer5(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(5))
    }
    #[doc = "NVIC NVIC_ICER5: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_icer5(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_enable(5, _value))
    }
    #[doc = "NVIC NVIC_ICER6: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icer6(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(6))
    }
    #[doc = "NVIC NVIC_ICER6: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_icer6(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_enable(6, _value))
    }
    #[doc = "NVIC NVIC_ICER7: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icer7(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(7))
    }
    #[doc = "NVIC NVIC_ICER7: Disables, or reads the enable state of a group of interrupts"]
    #[inline]
    pub fn write_nvic_nvic_icer7(&mut self, _value: u32) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_enable(7, _value))
    }
    #[doc = "NVIC NVIC_ISPR0: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ispr0(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(0))
    }
    #[doc = "NVIC NVIC_ISPR0: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ispr0(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_pending(0, _value))
    }
    #[doc = "NVIC NVIC_ISPR1: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ispr1(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(1))
    }
    #[doc = "NVIC NVIC_ISPR1: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ispr1(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_pending(1, _value))
    }
    #[doc = "NVIC NVIC_ISPR2: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ispr2(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(2))
    }
    #[doc = "NVIC NVIC_ISPR2: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ispr2(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_pending(2, _value))
    }
    #[doc = "NVIC NVIC_ISPR3: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ispr3(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(3))
    }
    #[doc = "NVIC NVIC_ISPR3: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ispr3(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_pending(3, _value))
    }
    #[doc = "NVIC NVIC_ISPR4: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ispr4(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(4))
    }
    #[doc = "NVIC NVIC_ISPR4: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ispr4(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_pending(4, _value))
    }
    #[doc = "NVIC NVIC_ISPR5: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ispr5(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(5))
    }
    #[doc = "NVIC NVIC_ISPR5: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ispr5(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_pending(5, _value))
    }
    #[doc = "NVIC NVIC_ISPR6: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ispr6(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(6))
    }
    #[doc = "NVIC NVIC_ISPR6: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ispr6(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_pending(6, _value))
    }
    #[doc = "NVIC NVIC_ISPR7: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ispr7(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(7))
    }
    #[doc = "NVIC NVIC_ISPR7: For a group of interrupts, changes interrupt status to pending, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ispr7(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_set_pending(7, _value))
    }
    #[doc = "NVIC NVIC_ICPR0: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icpr0(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(0))
    }
    #[doc = "NVIC NVIC_ICPR0: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_icpr0(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_pending(0, _value))
    }
    #[doc = "NVIC NVIC_ICPR1: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icpr1(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(1))
    }
    #[doc = "NVIC NVIC_ICPR1: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_icpr1(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_pending(1, _value))
    }
    #[doc = "NVIC NVIC_ICPR2: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icpr2(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(2))
    }
    #[doc = "NVIC NVIC_ICPR2: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_icpr2(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_pending(2, _value))
    }
    #[doc = "NVIC NVIC_ICPR3: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icpr3(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(3))
    }
    #[doc = "NVIC NVIC_ICPR3: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_icpr3(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_pending(3, _value))
    }
    #[doc = "NVIC NVIC_ICPR4: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icpr4(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(4))
    }
    #[doc = "NVIC NVIC_ICPR4: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_icpr4(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_pending(4, _value))
    }
    #[doc = "NVIC NVIC_ICPR5: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icpr5(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(5))
    }
    #[doc = "NVIC NVIC_ICPR5: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_icpr5(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_pending(5, _value))
    }
    #[doc = "NVIC NVIC_ICPR6: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icpr6(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(6))
    }
    #[doc = "NVIC NVIC_ICPR6: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_icpr6(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_pending(6, _value))
    }
    #[doc = "NVIC NVIC_ICPR7: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn read_nvic_nvic_icpr7(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_pending(7))
    }
    #[doc = "NVIC NVIC_ICPR7: For a group of interrupts, clears the interrupt pending status, or shows the current pending\nstatus"]
    #[inline]
    pub(crate) fn write_nvic_nvic_icpr7(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        Ok(self.interrupts.nvic_clr_pending(7, _value))
    }
    #[doc = "NVIC NVIC_IABR0: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iabr0(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(0))
    }
    #[doc = "NVIC NVIC_IABR0: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn write_nvic_nvic_iabr0(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write NVIC NVIC_IABR0 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVIC NVIC_IABR1: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iabr1(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(1))
    }
    #[doc = "NVIC NVIC_IABR1: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn write_nvic_nvic_iabr1(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write NVIC NVIC_IABR1 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVIC NVIC_IABR2: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iabr2(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(2))
    }
    #[doc = "NVIC NVIC_IABR2: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn write_nvic_nvic_iabr2(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write NVIC NVIC_IABR2 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVIC NVIC_IABR3: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iabr3(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(3))
    }
    #[doc = "NVIC NVIC_IABR3: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn write_nvic_nvic_iabr3(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write NVIC NVIC_IABR3 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVIC NVIC_IABR4: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iabr4(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(4))
    }
    #[doc = "NVIC NVIC_IABR4: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn write_nvic_nvic_iabr4(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write NVIC NVIC_IABR4 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVIC NVIC_IABR5: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iabr5(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(5))
    }
    #[doc = "NVIC NVIC_IABR5: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn write_nvic_nvic_iabr5(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write NVIC NVIC_IABR5 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVIC NVIC_IABR6: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iabr6(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(6))
    }
    #[doc = "NVIC NVIC_IABR6: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn write_nvic_nvic_iabr6(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write NVIC NVIC_IABR6 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVIC NVIC_IABR7: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn read_nvic_nvic_iabr7(&self) -> MemResult<u32> {
        Ok(self.interrupts.nvic_enable(7))
    }
    #[doc = "NVIC NVIC_IABR7: For a group of 32 interrupts, shows whether each interrupt is active"]
    #[inline]
    pub(crate) fn write_nvic_nvic_iabr7(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write NVIC NVIC_IABR7 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "NVIC NVIC_IPR0 PRI_N0: Priority of interrupt 0"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr0_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 0) + 0))
    }
    #[doc = "NVIC NVIC_IPR0 PRI_N0: Priority of interrupt 0"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr0_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 0) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR0 PRI_N1: Priority of interrupt 1"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr0_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 0) + 1))
    }
    #[doc = "NVIC NVIC_IPR0 PRI_N1: Priority of interrupt 1"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr0_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 0) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR0 PRI_N2: Priority of interrupt 2"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr0_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 0) + 2))
    }
    #[doc = "NVIC NVIC_IPR0 PRI_N2: Priority of interrupt 2"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr0_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 0) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR0 PRI_N3: Priority of interrupt 3"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr0_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 0) + 3))
    }
    #[doc = "NVIC NVIC_IPR0 PRI_N3: Priority of interrupt 3"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr0_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 0) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR1 PRI_N0: Priority of interrupt 4"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr1_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 1) + 0))
    }
    #[doc = "NVIC NVIC_IPR1 PRI_N0: Priority of interrupt 4"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr1_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 1) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR1 PRI_N1: Priority of interrupt 5"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr1_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 1) + 1))
    }
    #[doc = "NVIC NVIC_IPR1 PRI_N1: Priority of interrupt 5"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr1_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 1) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR1 PRI_N2: Priority of interrupt 6"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr1_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 1) + 2))
    }
    #[doc = "NVIC NVIC_IPR1 PRI_N2: Priority of interrupt 6"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr1_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 1) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR1 PRI_N3: Priority of interrupt 7"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr1_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 1) + 3))
    }
    #[doc = "NVIC NVIC_IPR1 PRI_N3: Priority of interrupt 7"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr1_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 1) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR2 PRI_N0: Priority of interrupt 8"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr2_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 2) + 0))
    }
    #[doc = "NVIC NVIC_IPR2 PRI_N0: Priority of interrupt 8"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr2_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 2) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR2 PRI_N1: Priority of interrupt 9"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr2_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 2) + 1))
    }
    #[doc = "NVIC NVIC_IPR2 PRI_N1: Priority of interrupt 9"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr2_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 2) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR2 PRI_N2: Priority of interrupt 10"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr2_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 2) + 2))
    }
    #[doc = "NVIC NVIC_IPR2 PRI_N2: Priority of interrupt 10"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr2_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 2) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR2 PRI_N3: Priority of interrupt 11"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr2_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 2) + 3))
    }
    #[doc = "NVIC NVIC_IPR2 PRI_N3: Priority of interrupt 11"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr2_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 2) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR3 PRI_N0: Priority of interrupt 12"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr3_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 3) + 0))
    }
    #[doc = "NVIC NVIC_IPR3 PRI_N0: Priority of interrupt 12"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr3_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 3) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR3 PRI_N1: Priority of interrupt 13"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr3_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 3) + 1))
    }
    #[doc = "NVIC NVIC_IPR3 PRI_N1: Priority of interrupt 13"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr3_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 3) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR3 PRI_N2: Priority of interrupt 14"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr3_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 3) + 2))
    }
    #[doc = "NVIC NVIC_IPR3 PRI_N2: Priority of interrupt 14"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr3_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 3) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR3 PRI_N3: Priority of interrupt 15"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr3_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 3) + 3))
    }
    #[doc = "NVIC NVIC_IPR3 PRI_N3: Priority of interrupt 15"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr3_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 3) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR4 PRI_N0: Priority of interrupt 16"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr4_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 4) + 0))
    }
    #[doc = "NVIC NVIC_IPR4 PRI_N0: Priority of interrupt 16"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr4_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 4) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR4 PRI_N1: Priority of interrupt 17"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr4_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 4) + 1))
    }
    #[doc = "NVIC NVIC_IPR4 PRI_N1: Priority of interrupt 17"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr4_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 4) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR4 PRI_N2: Priority of interrupt 18"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr4_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 4) + 2))
    }
    #[doc = "NVIC NVIC_IPR4 PRI_N2: Priority of interrupt 18"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr4_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 4) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR4 PRI_N3: Priority of interrupt 19"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr4_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 4) + 3))
    }
    #[doc = "NVIC NVIC_IPR4 PRI_N3: Priority of interrupt 19"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr4_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 4) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR5 PRI_N0: Priority of interrupt 20"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr5_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 5) + 0))
    }
    #[doc = "NVIC NVIC_IPR5 PRI_N0: Priority of interrupt 20"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr5_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 5) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR5 PRI_N1: Priority of interrupt 21"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr5_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 5) + 1))
    }
    #[doc = "NVIC NVIC_IPR5 PRI_N1: Priority of interrupt 21"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr5_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 5) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR5 PRI_N2: Priority of interrupt 22"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr5_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 5) + 2))
    }
    #[doc = "NVIC NVIC_IPR5 PRI_N2: Priority of interrupt 22"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr5_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 5) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR5 PRI_N3: Priority of interrupt 23"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr5_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 5) + 3))
    }
    #[doc = "NVIC NVIC_IPR5 PRI_N3: Priority of interrupt 23"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr5_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 5) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR6 PRI_N0: Priority of interrupt 24"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr6_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 6) + 0))
    }
    #[doc = "NVIC NVIC_IPR6 PRI_N0: Priority of interrupt 24"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr6_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 6) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR6 PRI_N1: Priority of interrupt 25"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr6_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 6) + 1))
    }
    #[doc = "NVIC NVIC_IPR6 PRI_N1: Priority of interrupt 25"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr6_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 6) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR6 PRI_N2: Priority of interrupt 26"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr6_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 6) + 2))
    }
    #[doc = "NVIC NVIC_IPR6 PRI_N2: Priority of interrupt 26"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr6_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 6) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR6 PRI_N3: Priority of interrupt 27"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr6_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 6) + 3))
    }
    #[doc = "NVIC NVIC_IPR6 PRI_N3: Priority of interrupt 27"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr6_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 6) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR7 PRI_N0: Priority of interrupt 28"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr7_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 7) + 0))
    }
    #[doc = "NVIC NVIC_IPR7 PRI_N0: Priority of interrupt 28"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr7_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 7) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR7 PRI_N1: Priority of interrupt 29"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr7_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 7) + 1))
    }
    #[doc = "NVIC NVIC_IPR7 PRI_N1: Priority of interrupt 29"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr7_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 7) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR7 PRI_N2: Priority of interrupt 30"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr7_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 7) + 2))
    }
    #[doc = "NVIC NVIC_IPR7 PRI_N2: Priority of interrupt 30"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr7_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 7) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR7 PRI_N3: Priority of interrupt 31"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr7_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 7) + 3))
    }
    #[doc = "NVIC NVIC_IPR7 PRI_N3: Priority of interrupt 31"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr7_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 7) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR8 PRI_N0: Priority of interrupt 32"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr8_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 8) + 0))
    }
    #[doc = "NVIC NVIC_IPR8 PRI_N0: Priority of interrupt 32"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr8_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 8) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR8 PRI_N1: Priority of interrupt 33"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr8_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 8) + 1))
    }
    #[doc = "NVIC NVIC_IPR8 PRI_N1: Priority of interrupt 33"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr8_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 8) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR8 PRI_N2: Priority of interrupt 34"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr8_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 8) + 2))
    }
    #[doc = "NVIC NVIC_IPR8 PRI_N2: Priority of interrupt 34"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr8_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 8) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR8 PRI_N3: Priority of interrupt 35"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr8_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 8) + 3))
    }
    #[doc = "NVIC NVIC_IPR8 PRI_N3: Priority of interrupt 35"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr8_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 8) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR9 PRI_N0: Priority of interrupt 36"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr9_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 9) + 0))
    }
    #[doc = "NVIC NVIC_IPR9 PRI_N0: Priority of interrupt 36"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr9_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 9) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR9 PRI_N1: Priority of interrupt 37"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr9_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 9) + 1))
    }
    #[doc = "NVIC NVIC_IPR9 PRI_N1: Priority of interrupt 37"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr9_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 9) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR9 PRI_N2: Priority of interrupt 38"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr9_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 9) + 2))
    }
    #[doc = "NVIC NVIC_IPR9 PRI_N2: Priority of interrupt 38"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr9_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 9) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR9 PRI_N3: Priority of interrupt 39"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr9_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 9) + 3))
    }
    #[doc = "NVIC NVIC_IPR9 PRI_N3: Priority of interrupt 39"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr9_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 9) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR10 PRI_N0: Priority of interrupt 40"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr10_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 10) + 0))
    }
    #[doc = "NVIC NVIC_IPR10 PRI_N0: Priority of interrupt 40"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr10_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 10) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR10 PRI_N1: Priority of interrupt 41"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr10_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 10) + 1))
    }
    #[doc = "NVIC NVIC_IPR10 PRI_N1: Priority of interrupt 41"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr10_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 10) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR10 PRI_N2: Priority of interrupt 42"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr10_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 10) + 2))
    }
    #[doc = "NVIC NVIC_IPR10 PRI_N2: Priority of interrupt 42"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr10_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 10) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR10 PRI_N3: Priority of interrupt 43"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr10_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 10) + 3))
    }
    #[doc = "NVIC NVIC_IPR10 PRI_N3: Priority of interrupt 43"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr10_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 10) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR11 PRI_N0: Priority of interrupt 44"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr11_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 11) + 0))
    }
    #[doc = "NVIC NVIC_IPR11 PRI_N0: Priority of interrupt 44"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr11_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 11) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR11 PRI_N1: Priority of interrupt 45"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr11_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 11) + 1))
    }
    #[doc = "NVIC NVIC_IPR11 PRI_N1: Priority of interrupt 45"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr11_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 11) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR11 PRI_N2: Priority of interrupt 46"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr11_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 11) + 2))
    }
    #[doc = "NVIC NVIC_IPR11 PRI_N2: Priority of interrupt 46"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr11_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 11) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR11 PRI_N3: Priority of interrupt 47"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr11_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 11) + 3))
    }
    #[doc = "NVIC NVIC_IPR11 PRI_N3: Priority of interrupt 47"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr11_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 11) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR12 PRI_N0: Priority of interrupt 48"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr12_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 12) + 0))
    }
    #[doc = "NVIC NVIC_IPR12 PRI_N0: Priority of interrupt 48"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr12_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 12) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR12 PRI_N1: Priority of interrupt 49"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr12_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 12) + 1))
    }
    #[doc = "NVIC NVIC_IPR12 PRI_N1: Priority of interrupt 49"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr12_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 12) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR12 PRI_N2: Priority of interrupt 50"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr12_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 12) + 2))
    }
    #[doc = "NVIC NVIC_IPR12 PRI_N2: Priority of interrupt 50"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr12_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 12) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR12 PRI_N3: Priority of interrupt 51"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr12_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 12) + 3))
    }
    #[doc = "NVIC NVIC_IPR12 PRI_N3: Priority of interrupt 51"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr12_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 12) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR13 PRI_N0: Priority of interrupt 52"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr13_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 13) + 0))
    }
    #[doc = "NVIC NVIC_IPR13 PRI_N0: Priority of interrupt 52"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr13_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 13) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR13 PRI_N1: Priority of interrupt 53"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr13_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 13) + 1))
    }
    #[doc = "NVIC NVIC_IPR13 PRI_N1: Priority of interrupt 53"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr13_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 13) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR13 PRI_N2: Priority of interrupt 54"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr13_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 13) + 2))
    }
    #[doc = "NVIC NVIC_IPR13 PRI_N2: Priority of interrupt 54"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr13_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 13) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR13 PRI_N3: Priority of interrupt 55"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr13_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 13) + 3))
    }
    #[doc = "NVIC NVIC_IPR13 PRI_N3: Priority of interrupt 55"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr13_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 13) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR14 PRI_N0: Priority of interrupt 56"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr14_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 14) + 0))
    }
    #[doc = "NVIC NVIC_IPR14 PRI_N0: Priority of interrupt 56"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr14_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 14) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR14 PRI_N1: Priority of interrupt 57"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr14_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 14) + 1))
    }
    #[doc = "NVIC NVIC_IPR14 PRI_N1: Priority of interrupt 57"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr14_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 14) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR14 PRI_N2: Priority of interrupt 58"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr14_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 14) + 2))
    }
    #[doc = "NVIC NVIC_IPR14 PRI_N2: Priority of interrupt 58"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr14_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 14) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR14 PRI_N3: Priority of interrupt 59"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr14_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 14) + 3))
    }
    #[doc = "NVIC NVIC_IPR14 PRI_N3: Priority of interrupt 59"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr14_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 14) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR15 PRI_N0: Priority of interrupt 60"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr15_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 15) + 0))
    }
    #[doc = "NVIC NVIC_IPR15 PRI_N0: Priority of interrupt 60"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr15_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 15) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR15 PRI_N1: Priority of interrupt 61"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr15_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 15) + 1))
    }
    #[doc = "NVIC NVIC_IPR15 PRI_N1: Priority of interrupt 61"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr15_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 15) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR15 PRI_N2: Priority of interrupt 62"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr15_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 15) + 2))
    }
    #[doc = "NVIC NVIC_IPR15 PRI_N2: Priority of interrupt 62"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr15_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 15) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR15 PRI_N3: Priority of interrupt 63"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr15_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 15) + 3))
    }
    #[doc = "NVIC NVIC_IPR15 PRI_N3: Priority of interrupt 63"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr15_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 15) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR16 PRI_N0: Priority of interrupt 64"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr16_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 16) + 0))
    }
    #[doc = "NVIC NVIC_IPR16 PRI_N0: Priority of interrupt 64"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr16_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 16) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR16 PRI_N1: Priority of interrupt 65"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr16_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 16) + 1))
    }
    #[doc = "NVIC NVIC_IPR16 PRI_N1: Priority of interrupt 65"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr16_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 16) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR16 PRI_N2: Priority of interrupt 66"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr16_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 16) + 2))
    }
    #[doc = "NVIC NVIC_IPR16 PRI_N2: Priority of interrupt 66"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr16_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 16) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR16 PRI_N3: Priority of interrupt 67"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr16_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 16) + 3))
    }
    #[doc = "NVIC NVIC_IPR16 PRI_N3: Priority of interrupt 67"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr16_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 16) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR17 PRI_N0: Priority of interrupt 68"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr17_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 17) + 0))
    }
    #[doc = "NVIC NVIC_IPR17 PRI_N0: Priority of interrupt 68"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr17_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 17) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR17 PRI_N1: Priority of interrupt 69"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr17_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 17) + 1))
    }
    #[doc = "NVIC NVIC_IPR17 PRI_N1: Priority of interrupt 69"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr17_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 17) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR17 PRI_N2: Priority of interrupt 70"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr17_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 17) + 2))
    }
    #[doc = "NVIC NVIC_IPR17 PRI_N2: Priority of interrupt 70"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr17_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 17) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR17 PRI_N3: Priority of interrupt 71"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr17_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 17) + 3))
    }
    #[doc = "NVIC NVIC_IPR17 PRI_N3: Priority of interrupt 71"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr17_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 17) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR18 PRI_N0: Priority of interrupt 72"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr18_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 18) + 0))
    }
    #[doc = "NVIC NVIC_IPR18 PRI_N0: Priority of interrupt 72"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr18_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 18) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR18 PRI_N1: Priority of interrupt 73"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr18_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 18) + 1))
    }
    #[doc = "NVIC NVIC_IPR18 PRI_N1: Priority of interrupt 73"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr18_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 18) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR18 PRI_N2: Priority of interrupt 74"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr18_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 18) + 2))
    }
    #[doc = "NVIC NVIC_IPR18 PRI_N2: Priority of interrupt 74"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr18_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 18) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR18 PRI_N3: Priority of interrupt 75"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr18_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 18) + 3))
    }
    #[doc = "NVIC NVIC_IPR18 PRI_N3: Priority of interrupt 75"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr18_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 18) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR19 PRI_N0: Priority of interrupt 76"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr19_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 19) + 0))
    }
    #[doc = "NVIC NVIC_IPR19 PRI_N0: Priority of interrupt 76"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr19_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 19) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR19 PRI_N1: Priority of interrupt 77"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr19_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 19) + 1))
    }
    #[doc = "NVIC NVIC_IPR19 PRI_N1: Priority of interrupt 77"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr19_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 19) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR19 PRI_N2: Priority of interrupt 78"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr19_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 19) + 2))
    }
    #[doc = "NVIC NVIC_IPR19 PRI_N2: Priority of interrupt 78"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr19_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 19) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR19 PRI_N3: Priority of interrupt 79"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr19_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 19) + 3))
    }
    #[doc = "NVIC NVIC_IPR19 PRI_N3: Priority of interrupt 79"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr19_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 19) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR20 PRI_N0: Priority of interrupt 80"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr20_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 20) + 0))
    }
    #[doc = "NVIC NVIC_IPR20 PRI_N0: Priority of interrupt 80"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr20_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 20) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR20 PRI_N1: Priority of interrupt 81"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr20_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 20) + 1))
    }
    #[doc = "NVIC NVIC_IPR20 PRI_N1: Priority of interrupt 81"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr20_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 20) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR20 PRI_N2: Priority of interrupt 82"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr20_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 20) + 2))
    }
    #[doc = "NVIC NVIC_IPR20 PRI_N2: Priority of interrupt 82"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr20_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 20) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR20 PRI_N3: Priority of interrupt 83"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr20_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 20) + 3))
    }
    #[doc = "NVIC NVIC_IPR20 PRI_N3: Priority of interrupt 83"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr20_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 20) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR21 PRI_N0: Priority of interrupt 84"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr21_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 21) + 0))
    }
    #[doc = "NVIC NVIC_IPR21 PRI_N0: Priority of interrupt 84"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr21_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 21) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR21 PRI_N1: Priority of interrupt 85"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr21_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 21) + 1))
    }
    #[doc = "NVIC NVIC_IPR21 PRI_N1: Priority of interrupt 85"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr21_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 21) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR21 PRI_N2: Priority of interrupt 86"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr21_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 21) + 2))
    }
    #[doc = "NVIC NVIC_IPR21 PRI_N2: Priority of interrupt 86"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr21_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 21) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR21 PRI_N3: Priority of interrupt 87"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr21_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 21) + 3))
    }
    #[doc = "NVIC NVIC_IPR21 PRI_N3: Priority of interrupt 87"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr21_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 21) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR22 PRI_N0: Priority of interrupt 88"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr22_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 22) + 0))
    }
    #[doc = "NVIC NVIC_IPR22 PRI_N0: Priority of interrupt 88"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr22_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 22) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR22 PRI_N1: Priority of interrupt 89"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr22_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 22) + 1))
    }
    #[doc = "NVIC NVIC_IPR22 PRI_N1: Priority of interrupt 89"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr22_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 22) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR22 PRI_N2: Priority of interrupt 90"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr22_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 22) + 2))
    }
    #[doc = "NVIC NVIC_IPR22 PRI_N2: Priority of interrupt 90"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr22_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 22) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR22 PRI_N3: Priority of interrupt 91"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr22_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 22) + 3))
    }
    #[doc = "NVIC NVIC_IPR22 PRI_N3: Priority of interrupt 91"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr22_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 22) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR23 PRI_N0: Priority of interrupt 92"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr23_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 23) + 0))
    }
    #[doc = "NVIC NVIC_IPR23 PRI_N0: Priority of interrupt 92"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr23_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 23) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR23 PRI_N1: Priority of interrupt 93"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr23_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 23) + 1))
    }
    #[doc = "NVIC NVIC_IPR23 PRI_N1: Priority of interrupt 93"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr23_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 23) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR23 PRI_N2: Priority of interrupt 94"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr23_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 23) + 2))
    }
    #[doc = "NVIC NVIC_IPR23 PRI_N2: Priority of interrupt 94"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr23_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 23) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR23 PRI_N3: Priority of interrupt 95"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr23_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 23) + 3))
    }
    #[doc = "NVIC NVIC_IPR23 PRI_N3: Priority of interrupt 95"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr23_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 23) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR24 PRI_N0: Priority of interrupt 96"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr24_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 24) + 0))
    }
    #[doc = "NVIC NVIC_IPR24 PRI_N0: Priority of interrupt 96"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr24_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 24) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR24 PRI_N1: Priority of interrupt 97"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr24_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 24) + 1))
    }
    #[doc = "NVIC NVIC_IPR24 PRI_N1: Priority of interrupt 97"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr24_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 24) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR24 PRI_N2: Priority of interrupt 98"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr24_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 24) + 2))
    }
    #[doc = "NVIC NVIC_IPR24 PRI_N2: Priority of interrupt 98"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr24_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 24) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR24 PRI_N3: Priority of interrupt 99"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr24_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 24) + 3))
    }
    #[doc = "NVIC NVIC_IPR24 PRI_N3: Priority of interrupt 99"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr24_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 24) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR25 PRI_N0: Priority of interrupt 100"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr25_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 25) + 0))
    }
    #[doc = "NVIC NVIC_IPR25 PRI_N0: Priority of interrupt 100"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr25_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 25) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR25 PRI_N1: Priority of interrupt 101"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr25_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 25) + 1))
    }
    #[doc = "NVIC NVIC_IPR25 PRI_N1: Priority of interrupt 101"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr25_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 25) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR25 PRI_N2: Priority of interrupt 102"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr25_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 25) + 2))
    }
    #[doc = "NVIC NVIC_IPR25 PRI_N2: Priority of interrupt 102"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr25_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 25) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR25 PRI_N3: Priority of interrupt 103"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr25_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 25) + 3))
    }
    #[doc = "NVIC NVIC_IPR25 PRI_N3: Priority of interrupt 103"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr25_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 25) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR26 PRI_N0: Priority of interrupt 104"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr26_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 26) + 0))
    }
    #[doc = "NVIC NVIC_IPR26 PRI_N0: Priority of interrupt 104"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr26_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 26) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR26 PRI_N1: Priority of interrupt 105"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr26_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 26) + 1))
    }
    #[doc = "NVIC NVIC_IPR26 PRI_N1: Priority of interrupt 105"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr26_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 26) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR26 PRI_N2: Priority of interrupt 106"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr26_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 26) + 2))
    }
    #[doc = "NVIC NVIC_IPR26 PRI_N2: Priority of interrupt 106"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr26_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 26) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR26 PRI_N3: Priority of interrupt 107"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr26_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 26) + 3))
    }
    #[doc = "NVIC NVIC_IPR26 PRI_N3: Priority of interrupt 107"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr26_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 26) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR27 PRI_N0: Priority of interrupt 108"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr27_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 27) + 0))
    }
    #[doc = "NVIC NVIC_IPR27 PRI_N0: Priority of interrupt 108"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr27_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 27) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR27 PRI_N1: Priority of interrupt 109"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr27_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 27) + 1))
    }
    #[doc = "NVIC NVIC_IPR27 PRI_N1: Priority of interrupt 109"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr27_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 27) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR27 PRI_N2: Priority of interrupt 110"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr27_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 27) + 2))
    }
    #[doc = "NVIC NVIC_IPR27 PRI_N2: Priority of interrupt 110"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr27_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 27) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR27 PRI_N3: Priority of interrupt 111"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr27_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 27) + 3))
    }
    #[doc = "NVIC NVIC_IPR27 PRI_N3: Priority of interrupt 111"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr27_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 27) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR28 PRI_N0: Priority of interrupt 112"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr28_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 28) + 0))
    }
    #[doc = "NVIC NVIC_IPR28 PRI_N0: Priority of interrupt 112"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr28_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 28) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR28 PRI_N1: Priority of interrupt 113"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr28_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 28) + 1))
    }
    #[doc = "NVIC NVIC_IPR28 PRI_N1: Priority of interrupt 113"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr28_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 28) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR28 PRI_N2: Priority of interrupt 114"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr28_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 28) + 2))
    }
    #[doc = "NVIC NVIC_IPR28 PRI_N2: Priority of interrupt 114"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr28_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 28) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR28 PRI_N3: Priority of interrupt 115"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr28_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 28) + 3))
    }
    #[doc = "NVIC NVIC_IPR28 PRI_N3: Priority of interrupt 115"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr28_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 28) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR29 PRI_N0: Priority of interrupt 116"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr29_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 29) + 0))
    }
    #[doc = "NVIC NVIC_IPR29 PRI_N0: Priority of interrupt 116"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr29_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 29) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR29 PRI_N1: Priority of interrupt 117"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr29_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 29) + 1))
    }
    #[doc = "NVIC NVIC_IPR29 PRI_N1: Priority of interrupt 117"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr29_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 29) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR29 PRI_N2: Priority of interrupt 118"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr29_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 29) + 2))
    }
    #[doc = "NVIC NVIC_IPR29 PRI_N2: Priority of interrupt 118"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr29_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 29) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR29 PRI_N3: Priority of interrupt 119"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr29_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 29) + 3))
    }
    #[doc = "NVIC NVIC_IPR29 PRI_N3: Priority of interrupt 119"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr29_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 29) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR30 PRI_N0: Priority of interrupt 120"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr30_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 30) + 0))
    }
    #[doc = "NVIC NVIC_IPR30 PRI_N0: Priority of interrupt 120"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr30_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 30) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR30 PRI_N1: Priority of interrupt 121"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr30_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 30) + 1))
    }
    #[doc = "NVIC NVIC_IPR30 PRI_N1: Priority of interrupt 121"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr30_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 30) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR30 PRI_N2: Priority of interrupt 122"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr30_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 30) + 2))
    }
    #[doc = "NVIC NVIC_IPR30 PRI_N2: Priority of interrupt 122"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr30_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 30) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR30 PRI_N3: Priority of interrupt 123"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr30_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 30) + 3))
    }
    #[doc = "NVIC NVIC_IPR30 PRI_N3: Priority of interrupt 123"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr30_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 30) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR31 PRI_N0: Priority of interrupt 124"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr31_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 31) + 0))
    }
    #[doc = "NVIC NVIC_IPR31 PRI_N0: Priority of interrupt 124"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr31_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 31) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR31 PRI_N1: Priority of interrupt 125"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr31_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 31) + 1))
    }
    #[doc = "NVIC NVIC_IPR31 PRI_N1: Priority of interrupt 125"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr31_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 31) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR31 PRI_N2: Priority of interrupt 126"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr31_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 31) + 2))
    }
    #[doc = "NVIC NVIC_IPR31 PRI_N2: Priority of interrupt 126"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr31_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 31) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR31 PRI_N3: Priority of interrupt 127"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr31_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 31) + 3))
    }
    #[doc = "NVIC NVIC_IPR31 PRI_N3: Priority of interrupt 127"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr31_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 31) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR32 PRI_N0: Priority of interrupt 128"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr32_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 32) + 0))
    }
    #[doc = "NVIC NVIC_IPR32 PRI_N0: Priority of interrupt 128"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr32_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 32) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR32 PRI_N1: Priority of interrupt 129"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr32_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 32) + 1))
    }
    #[doc = "NVIC NVIC_IPR32 PRI_N1: Priority of interrupt 129"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr32_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 32) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR32 PRI_N2: Priority of interrupt 130"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr32_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 32) + 2))
    }
    #[doc = "NVIC NVIC_IPR32 PRI_N2: Priority of interrupt 130"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr32_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 32) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR32 PRI_N3: Priority of interrupt 131"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr32_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 32) + 3))
    }
    #[doc = "NVIC NVIC_IPR32 PRI_N3: Priority of interrupt 131"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr32_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 32) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR33 PRI_N0: Priority of interrupt 132"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr33_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 33) + 0))
    }
    #[doc = "NVIC NVIC_IPR33 PRI_N0: Priority of interrupt 132"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr33_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 33) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR33 PRI_N1: Priority of interrupt 133"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr33_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 33) + 1))
    }
    #[doc = "NVIC NVIC_IPR33 PRI_N1: Priority of interrupt 133"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr33_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 33) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR33 PRI_N2: Priority of interrupt 134"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr33_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 33) + 2))
    }
    #[doc = "NVIC NVIC_IPR33 PRI_N2: Priority of interrupt 134"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr33_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 33) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR33 PRI_N3: Priority of interrupt 135"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr33_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 33) + 3))
    }
    #[doc = "NVIC NVIC_IPR33 PRI_N3: Priority of interrupt 135"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr33_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 33) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR34 PRI_N0: Priority of interrupt 136"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr34_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 34) + 0))
    }
    #[doc = "NVIC NVIC_IPR34 PRI_N0: Priority of interrupt 136"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr34_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 34) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR34 PRI_N1: Priority of interrupt 137"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr34_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 34) + 1))
    }
    #[doc = "NVIC NVIC_IPR34 PRI_N1: Priority of interrupt 137"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr34_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 34) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR34 PRI_N2: Priority of interrupt 138"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr34_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 34) + 2))
    }
    #[doc = "NVIC NVIC_IPR34 PRI_N2: Priority of interrupt 138"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr34_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 34) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR34 PRI_N3: Priority of interrupt 139"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr34_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 34) + 3))
    }
    #[doc = "NVIC NVIC_IPR34 PRI_N3: Priority of interrupt 139"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr34_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 34) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR35 PRI_N0: Priority of interrupt 140"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr35_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 35) + 0))
    }
    #[doc = "NVIC NVIC_IPR35 PRI_N0: Priority of interrupt 140"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr35_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 35) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR35 PRI_N1: Priority of interrupt 141"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr35_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 35) + 1))
    }
    #[doc = "NVIC NVIC_IPR35 PRI_N1: Priority of interrupt 141"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr35_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 35) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR35 PRI_N2: Priority of interrupt 142"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr35_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 35) + 2))
    }
    #[doc = "NVIC NVIC_IPR35 PRI_N2: Priority of interrupt 142"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr35_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 35) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR35 PRI_N3: Priority of interrupt 143"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr35_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 35) + 3))
    }
    #[doc = "NVIC NVIC_IPR35 PRI_N3: Priority of interrupt 143"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr35_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 35) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR36 PRI_N0: Priority of interrupt 144"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr36_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 36) + 0))
    }
    #[doc = "NVIC NVIC_IPR36 PRI_N0: Priority of interrupt 144"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr36_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 36) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR36 PRI_N1: Priority of interrupt 145"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr36_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 36) + 1))
    }
    #[doc = "NVIC NVIC_IPR36 PRI_N1: Priority of interrupt 145"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr36_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 36) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR36 PRI_N2: Priority of interrupt 146"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr36_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 36) + 2))
    }
    #[doc = "NVIC NVIC_IPR36 PRI_N2: Priority of interrupt 146"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr36_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 36) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR36 PRI_N3: Priority of interrupt 147"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr36_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 36) + 3))
    }
    #[doc = "NVIC NVIC_IPR36 PRI_N3: Priority of interrupt 147"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr36_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 36) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR37 PRI_N0: Priority of interrupt 148"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr37_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 37) + 0))
    }
    #[doc = "NVIC NVIC_IPR37 PRI_N0: Priority of interrupt 148"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr37_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 37) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR37 PRI_N1: Priority of interrupt 149"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr37_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 37) + 1))
    }
    #[doc = "NVIC NVIC_IPR37 PRI_N1: Priority of interrupt 149"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr37_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 37) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR37 PRI_N2: Priority of interrupt 150"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr37_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 37) + 2))
    }
    #[doc = "NVIC NVIC_IPR37 PRI_N2: Priority of interrupt 150"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr37_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 37) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR37 PRI_N3: Priority of interrupt 151"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr37_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 37) + 3))
    }
    #[doc = "NVIC NVIC_IPR37 PRI_N3: Priority of interrupt 151"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr37_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 37) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR38 PRI_N0: Priority of interrupt 152"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr38_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 38) + 0))
    }
    #[doc = "NVIC NVIC_IPR38 PRI_N0: Priority of interrupt 152"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr38_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 38) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR38 PRI_N1: Priority of interrupt 153"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr38_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 38) + 1))
    }
    #[doc = "NVIC NVIC_IPR38 PRI_N1: Priority of interrupt 153"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr38_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 38) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR38 PRI_N2: Priority of interrupt 154"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr38_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 38) + 2))
    }
    #[doc = "NVIC NVIC_IPR38 PRI_N2: Priority of interrupt 154"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr38_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 38) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR38 PRI_N3: Priority of interrupt 155"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr38_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 38) + 3))
    }
    #[doc = "NVIC NVIC_IPR38 PRI_N3: Priority of interrupt 155"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr38_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 38) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR39 PRI_N0: Priority of interrupt 156"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr39_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 39) + 0))
    }
    #[doc = "NVIC NVIC_IPR39 PRI_N0: Priority of interrupt 156"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr39_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 39) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR39 PRI_N1: Priority of interrupt 157"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr39_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 39) + 1))
    }
    #[doc = "NVIC NVIC_IPR39 PRI_N1: Priority of interrupt 157"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr39_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 39) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR39 PRI_N2: Priority of interrupt 158"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr39_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 39) + 2))
    }
    #[doc = "NVIC NVIC_IPR39 PRI_N2: Priority of interrupt 158"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr39_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 39) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR39 PRI_N3: Priority of interrupt 159"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr39_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 39) + 3))
    }
    #[doc = "NVIC NVIC_IPR39 PRI_N3: Priority of interrupt 159"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr39_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 39) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR40 PRI_N0: Priority of interrupt 160"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr40_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 40) + 0))
    }
    #[doc = "NVIC NVIC_IPR40 PRI_N0: Priority of interrupt 160"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr40_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 40) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR40 PRI_N1: Priority of interrupt 161"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr40_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 40) + 1))
    }
    #[doc = "NVIC NVIC_IPR40 PRI_N1: Priority of interrupt 161"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr40_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 40) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR40 PRI_N2: Priority of interrupt 162"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr40_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 40) + 2))
    }
    #[doc = "NVIC NVIC_IPR40 PRI_N2: Priority of interrupt 162"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr40_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 40) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR40 PRI_N3: Priority of interrupt 163"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr40_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 40) + 3))
    }
    #[doc = "NVIC NVIC_IPR40 PRI_N3: Priority of interrupt 163"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr40_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 40) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR41 PRI_N0: Priority of interrupt 164"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr41_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 41) + 0))
    }
    #[doc = "NVIC NVIC_IPR41 PRI_N0: Priority of interrupt 164"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr41_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 41) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR41 PRI_N1: Priority of interrupt 165"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr41_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 41) + 1))
    }
    #[doc = "NVIC NVIC_IPR41 PRI_N1: Priority of interrupt 165"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr41_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 41) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR41 PRI_N2: Priority of interrupt 166"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr41_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 41) + 2))
    }
    #[doc = "NVIC NVIC_IPR41 PRI_N2: Priority of interrupt 166"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr41_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 41) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR41 PRI_N3: Priority of interrupt 167"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr41_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 41) + 3))
    }
    #[doc = "NVIC NVIC_IPR41 PRI_N3: Priority of interrupt 167"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr41_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 41) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR42 PRI_N0: Priority of interrupt 168"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr42_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 42) + 0))
    }
    #[doc = "NVIC NVIC_IPR42 PRI_N0: Priority of interrupt 168"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr42_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 42) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR42 PRI_N1: Priority of interrupt 169"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr42_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 42) + 1))
    }
    #[doc = "NVIC NVIC_IPR42 PRI_N1: Priority of interrupt 169"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr42_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 42) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR42 PRI_N2: Priority of interrupt 170"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr42_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 42) + 2))
    }
    #[doc = "NVIC NVIC_IPR42 PRI_N2: Priority of interrupt 170"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr42_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 42) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR42 PRI_N3: Priority of interrupt 171"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr42_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 42) + 3))
    }
    #[doc = "NVIC NVIC_IPR42 PRI_N3: Priority of interrupt 171"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr42_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 42) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR43 PRI_N0: Priority of interrupt 172"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr43_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 43) + 0))
    }
    #[doc = "NVIC NVIC_IPR43 PRI_N0: Priority of interrupt 172"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr43_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 43) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR43 PRI_N1: Priority of interrupt 173"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr43_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 43) + 1))
    }
    #[doc = "NVIC NVIC_IPR43 PRI_N1: Priority of interrupt 173"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr43_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 43) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR43 PRI_N2: Priority of interrupt 174"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr43_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 43) + 2))
    }
    #[doc = "NVIC NVIC_IPR43 PRI_N2: Priority of interrupt 174"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr43_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 43) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR43 PRI_N3: Priority of interrupt 175"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr43_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 43) + 3))
    }
    #[doc = "NVIC NVIC_IPR43 PRI_N3: Priority of interrupt 175"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr43_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 43) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR44 PRI_N0: Priority of interrupt 176"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr44_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 44) + 0))
    }
    #[doc = "NVIC NVIC_IPR44 PRI_N0: Priority of interrupt 176"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr44_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 44) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR44 PRI_N1: Priority of interrupt 177"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr44_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 44) + 1))
    }
    #[doc = "NVIC NVIC_IPR44 PRI_N1: Priority of interrupt 177"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr44_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 44) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR44 PRI_N2: Priority of interrupt 178"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr44_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 44) + 2))
    }
    #[doc = "NVIC NVIC_IPR44 PRI_N2: Priority of interrupt 178"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr44_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 44) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR44 PRI_N3: Priority of interrupt 179"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr44_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 44) + 3))
    }
    #[doc = "NVIC NVIC_IPR44 PRI_N3: Priority of interrupt 179"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr44_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 44) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR45 PRI_N0: Priority of interrupt 180"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr45_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 45) + 0))
    }
    #[doc = "NVIC NVIC_IPR45 PRI_N0: Priority of interrupt 180"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr45_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 45) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR45 PRI_N1: Priority of interrupt 181"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr45_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 45) + 1))
    }
    #[doc = "NVIC NVIC_IPR45 PRI_N1: Priority of interrupt 181"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr45_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 45) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR45 PRI_N2: Priority of interrupt 182"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr45_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 45) + 2))
    }
    #[doc = "NVIC NVIC_IPR45 PRI_N2: Priority of interrupt 182"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr45_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 45) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR45 PRI_N3: Priority of interrupt 183"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr45_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 45) + 3))
    }
    #[doc = "NVIC NVIC_IPR45 PRI_N3: Priority of interrupt 183"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr45_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 45) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR46 PRI_N0: Priority of interrupt 184"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr46_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 46) + 0))
    }
    #[doc = "NVIC NVIC_IPR46 PRI_N0: Priority of interrupt 184"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr46_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 46) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR46 PRI_N1: Priority of interrupt 185"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr46_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 46) + 1))
    }
    #[doc = "NVIC NVIC_IPR46 PRI_N1: Priority of interrupt 185"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr46_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 46) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR46 PRI_N2: Priority of interrupt 186"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr46_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 46) + 2))
    }
    #[doc = "NVIC NVIC_IPR46 PRI_N2: Priority of interrupt 186"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr46_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 46) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR46 PRI_N3: Priority of interrupt 187"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr46_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 46) + 3))
    }
    #[doc = "NVIC NVIC_IPR46 PRI_N3: Priority of interrupt 187"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr46_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 46) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR47 PRI_N0: Priority of interrupt 188"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr47_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 47) + 0))
    }
    #[doc = "NVIC NVIC_IPR47 PRI_N0: Priority of interrupt 188"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr47_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 47) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR47 PRI_N1: Priority of interrupt 189"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr47_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 47) + 1))
    }
    #[doc = "NVIC NVIC_IPR47 PRI_N1: Priority of interrupt 189"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr47_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 47) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR47 PRI_N2: Priority of interrupt 190"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr47_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 47) + 2))
    }
    #[doc = "NVIC NVIC_IPR47 PRI_N2: Priority of interrupt 190"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr47_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 47) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR47 PRI_N3: Priority of interrupt 191"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr47_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 47) + 3))
    }
    #[doc = "NVIC NVIC_IPR47 PRI_N3: Priority of interrupt 191"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr47_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 47) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR48 PRI_N0: Priority of interrupt 192"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr48_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 48) + 0))
    }
    #[doc = "NVIC NVIC_IPR48 PRI_N0: Priority of interrupt 192"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr48_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 48) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR48 PRI_N1: Priority of interrupt 193"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr48_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 48) + 1))
    }
    #[doc = "NVIC NVIC_IPR48 PRI_N1: Priority of interrupt 193"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr48_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 48) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR48 PRI_N2: Priority of interrupt 194"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr48_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 48) + 2))
    }
    #[doc = "NVIC NVIC_IPR48 PRI_N2: Priority of interrupt 194"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr48_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 48) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR48 PRI_N3: Priority of interrupt 195"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr48_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 48) + 3))
    }
    #[doc = "NVIC NVIC_IPR48 PRI_N3: Priority of interrupt 195"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr48_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 48) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR49 PRI_N0: Priority of interrupt 196"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr49_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 49) + 0))
    }
    #[doc = "NVIC NVIC_IPR49 PRI_N0: Priority of interrupt 196"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr49_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 49) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR49 PRI_N1: Priority of interrupt 197"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr49_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 49) + 1))
    }
    #[doc = "NVIC NVIC_IPR49 PRI_N1: Priority of interrupt 197"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr49_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 49) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR49 PRI_N2: Priority of interrupt 198"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr49_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 49) + 2))
    }
    #[doc = "NVIC NVIC_IPR49 PRI_N2: Priority of interrupt 198"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr49_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 49) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR49 PRI_N3: Priority of interrupt 199"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr49_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 49) + 3))
    }
    #[doc = "NVIC NVIC_IPR49 PRI_N3: Priority of interrupt 199"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr49_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 49) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR50 PRI_N0: Priority of interrupt 200"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr50_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 50) + 0))
    }
    #[doc = "NVIC NVIC_IPR50 PRI_N0: Priority of interrupt 200"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr50_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 50) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR50 PRI_N1: Priority of interrupt 201"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr50_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 50) + 1))
    }
    #[doc = "NVIC NVIC_IPR50 PRI_N1: Priority of interrupt 201"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr50_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 50) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR50 PRI_N2: Priority of interrupt 202"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr50_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 50) + 2))
    }
    #[doc = "NVIC NVIC_IPR50 PRI_N2: Priority of interrupt 202"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr50_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 50) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR50 PRI_N3: Priority of interrupt 203"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr50_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 50) + 3))
    }
    #[doc = "NVIC NVIC_IPR50 PRI_N3: Priority of interrupt 203"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr50_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 50) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR51 PRI_N0: Priority of interrupt 204"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr51_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 51) + 0))
    }
    #[doc = "NVIC NVIC_IPR51 PRI_N0: Priority of interrupt 204"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr51_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 51) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR51 PRI_N1: Priority of interrupt 205"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr51_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 51) + 1))
    }
    #[doc = "NVIC NVIC_IPR51 PRI_N1: Priority of interrupt 205"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr51_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 51) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR51 PRI_N2: Priority of interrupt 206"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr51_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 51) + 2))
    }
    #[doc = "NVIC NVIC_IPR51 PRI_N2: Priority of interrupt 206"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr51_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 51) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR51 PRI_N3: Priority of interrupt 207"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr51_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 51) + 3))
    }
    #[doc = "NVIC NVIC_IPR51 PRI_N3: Priority of interrupt 207"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr51_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 51) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR52 PRI_N0: Priority of interrupt 208"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr52_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 52) + 0))
    }
    #[doc = "NVIC NVIC_IPR52 PRI_N0: Priority of interrupt 208"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr52_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 52) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR52 PRI_N1: Priority of interrupt 209"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr52_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 52) + 1))
    }
    #[doc = "NVIC NVIC_IPR52 PRI_N1: Priority of interrupt 209"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr52_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 52) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR52 PRI_N2: Priority of interrupt 210"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr52_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 52) + 2))
    }
    #[doc = "NVIC NVIC_IPR52 PRI_N2: Priority of interrupt 210"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr52_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 52) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR52 PRI_N3: Priority of interrupt 211"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr52_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 52) + 3))
    }
    #[doc = "NVIC NVIC_IPR52 PRI_N3: Priority of interrupt 211"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr52_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 52) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR53 PRI_N0: Priority of interrupt 212"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr53_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 53) + 0))
    }
    #[doc = "NVIC NVIC_IPR53 PRI_N0: Priority of interrupt 212"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr53_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 53) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR53 PRI_N1: Priority of interrupt 213"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr53_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 53) + 1))
    }
    #[doc = "NVIC NVIC_IPR53 PRI_N1: Priority of interrupt 213"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr53_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 53) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR53 PRI_N2: Priority of interrupt 214"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr53_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 53) + 2))
    }
    #[doc = "NVIC NVIC_IPR53 PRI_N2: Priority of interrupt 214"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr53_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 53) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR53 PRI_N3: Priority of interrupt 215"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr53_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 53) + 3))
    }
    #[doc = "NVIC NVIC_IPR53 PRI_N3: Priority of interrupt 215"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr53_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 53) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR54 PRI_N0: Priority of interrupt 216"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr54_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 54) + 0))
    }
    #[doc = "NVIC NVIC_IPR54 PRI_N0: Priority of interrupt 216"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr54_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 54) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR54 PRI_N1: Priority of interrupt 217"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr54_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 54) + 1))
    }
    #[doc = "NVIC NVIC_IPR54 PRI_N1: Priority of interrupt 217"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr54_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 54) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR54 PRI_N2: Priority of interrupt 218"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr54_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 54) + 2))
    }
    #[doc = "NVIC NVIC_IPR54 PRI_N2: Priority of interrupt 218"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr54_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 54) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR54 PRI_N3: Priority of interrupt 219"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr54_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 54) + 3))
    }
    #[doc = "NVIC NVIC_IPR54 PRI_N3: Priority of interrupt 219"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr54_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 54) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR55 PRI_N0: Priority of interrupt 220"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr55_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 55) + 0))
    }
    #[doc = "NVIC NVIC_IPR55 PRI_N0: Priority of interrupt 220"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr55_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 55) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR55 PRI_N1: Priority of interrupt 221"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr55_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 55) + 1))
    }
    #[doc = "NVIC NVIC_IPR55 PRI_N1: Priority of interrupt 221"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr55_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 55) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR55 PRI_N2: Priority of interrupt 222"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr55_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 55) + 2))
    }
    #[doc = "NVIC NVIC_IPR55 PRI_N2: Priority of interrupt 222"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr55_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 55) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR55 PRI_N3: Priority of interrupt 223"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr55_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 55) + 3))
    }
    #[doc = "NVIC NVIC_IPR55 PRI_N3: Priority of interrupt 223"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr55_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 55) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR56 PRI_N0: Priority of interrupt 224"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr56_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 56) + 0))
    }
    #[doc = "NVIC NVIC_IPR56 PRI_N0: Priority of interrupt 224"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr56_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 56) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR56 PRI_N1: Priority of interrupt 225"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr56_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 56) + 1))
    }
    #[doc = "NVIC NVIC_IPR56 PRI_N1: Priority of interrupt 225"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr56_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 56) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR56 PRI_N2: Priority of interrupt 226"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr56_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 56) + 2))
    }
    #[doc = "NVIC NVIC_IPR56 PRI_N2: Priority of interrupt 226"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr56_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 56) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR56 PRI_N3: Priority of interrupt 227"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr56_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 56) + 3))
    }
    #[doc = "NVIC NVIC_IPR56 PRI_N3: Priority of interrupt 227"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr56_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 56) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR57 PRI_N0: Priority of interrupt 228"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr57_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 57) + 0))
    }
    #[doc = "NVIC NVIC_IPR57 PRI_N0: Priority of interrupt 228"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr57_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 57) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR57 PRI_N1: Priority of interrupt 229"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr57_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 57) + 1))
    }
    #[doc = "NVIC NVIC_IPR57 PRI_N1: Priority of interrupt 229"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr57_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 57) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR57 PRI_N2: Priority of interrupt 230"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr57_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 57) + 2))
    }
    #[doc = "NVIC NVIC_IPR57 PRI_N2: Priority of interrupt 230"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr57_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 57) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR57 PRI_N3: Priority of interrupt 231"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr57_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 57) + 3))
    }
    #[doc = "NVIC NVIC_IPR57 PRI_N3: Priority of interrupt 231"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr57_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 57) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR58 PRI_N0: Priority of interrupt 232"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr58_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 58) + 0))
    }
    #[doc = "NVIC NVIC_IPR58 PRI_N0: Priority of interrupt 232"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr58_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 58) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR58 PRI_N1: Priority of interrupt 233"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr58_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 58) + 1))
    }
    #[doc = "NVIC NVIC_IPR58 PRI_N1: Priority of interrupt 233"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr58_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 58) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR58 PRI_N2: Priority of interrupt 234"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr58_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 58) + 2))
    }
    #[doc = "NVIC NVIC_IPR58 PRI_N2: Priority of interrupt 234"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr58_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 58) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR58 PRI_N3: Priority of interrupt 235"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr58_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 58) + 3))
    }
    #[doc = "NVIC NVIC_IPR58 PRI_N3: Priority of interrupt 235"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr58_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 58) + 3, _value))
    }
    #[doc = "NVIC NVIC_IPR59 PRI_N0: Priority of interrupt 236"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr59_pri_n0(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 59) + 0))
    }
    #[doc = "NVIC NVIC_IPR59 PRI_N0: Priority of interrupt 236"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr59_pri_n0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 59) + 0, _value))
    }
    #[doc = "NVIC NVIC_IPR59 PRI_N1: Priority of interrupt 237"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr59_pri_n1(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 59) + 1))
    }
    #[doc = "NVIC NVIC_IPR59 PRI_N1: Priority of interrupt 237"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr59_pri_n1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 59) + 1, _value))
    }
    #[doc = "NVIC NVIC_IPR59 PRI_N2: Priority of interrupt 238"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr59_pri_n2(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 59) + 2))
    }
    #[doc = "NVIC NVIC_IPR59 PRI_N2: Priority of interrupt 238"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr59_pri_n2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 59) + 2, _value))
    }
    #[doc = "NVIC NVIC_IPR59 PRI_N3: Priority of interrupt 239"]
    #[inline]
    pub(crate) fn read_nvic_nvic_ipr59_pri_n3(&self) -> MemResult<u8> {
        Ok(self.interrupts.priority((4 * 59) + 3))
    }
    #[doc = "NVIC NVIC_IPR59 PRI_N3: Priority of interrupt 239"]
    #[inline]
    pub(crate) fn write_nvic_nvic_ipr59_pri_n3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        Ok(self.interrupts.set_priority((4 * 59) + 3, _value))
    }
    #[doc = "ID CPUID Revision: Indicates revision"]
    #[inline]
    pub(crate) fn read_id_cpuid_revision(&self) -> MemResult<u8> {
        todo!("read ID CPUID Revision reset value 0x00 mask 0x0f")
    }
    #[doc = "ID CPUID Partno: Indicates part number"]
    #[inline]
    pub(crate) fn read_id_cpuid_partno(&self) -> MemResult<u16> {
        todo!("read ID CPUID Partno reset value 0x00 mask 0xfff")
    }
    #[doc = "ID CPUID Constant: Indicates the architecture"]
    #[inline]
    pub(crate) fn read_id_cpuid_constant(&self) -> MemResult<u8> {
        todo!("read ID CPUID Constant reset value 0x00 mask 0x0f")
    }
    #[doc = "ID CPUID Variant: Implementation defined"]
    #[inline]
    pub(crate) fn read_id_cpuid_variant(&self) -> MemResult<u8> {
        todo!("read ID CPUID Variant reset value 0x00 mask 0x0f")
    }
    #[doc = "ID CPUID Implementer: Implementer code"]
    #[inline]
    pub(crate) fn read_id_cpuid_implementer(&self) -> MemResult<u8> {
        todo!("read ID CPUID Implementer reset value 0x00 mask 0xff")
    }
    #[doc = "Control ICSR VECTACTIVE: The exception number for the current executing exception"]
    #[inline]
    pub(crate) fn read_control_icsr_vectactive(&self) -> MemResult<u16> {
        todo!("read Control ICSR VECTACTIVE reset value 0x00 mask 0x1ff")
    }
    #[doc = "Control ICSR VECTACTIVE: The exception number for the current executing exception"]
    #[inline]
    pub(crate) fn write_control_icsr_vectactive(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo!("write Control ICSR VECTACTIVE reset value 0x00 mask 0x1ff")
    }
    #[doc = "Control ICSR RETTOBASE: In Handler mode, indicates whether there is an active exception other than the exception indicated by the current value of the IPSR"]
    #[inline]
    pub(crate) fn read_control_icsr_rettobase(&self) -> MemResult<bool> {
        todo!("read Control ICSR RETTOBASE reset value false")
    }
    #[doc = "Control ICSR RETTOBASE: In Handler mode, indicates whether there is an active exception other than the exception indicated by the current value of the IPSR"]
    #[inline]
    pub(crate) fn write_control_icsr_rettobase(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control ICSR RETTOBASE reset value false")
    }
    #[doc = "Control ICSR VECTPENDING: The exception number for the highest priority pending exception. 0 indicates no pending exceptions"]
    #[inline]
    pub(crate) fn read_control_icsr_vectpending(&self) -> MemResult<u16> {
        todo!("read Control ICSR VECTPENDING reset value 0x00 mask 0x1ff")
    }
    #[doc = "Control ICSR VECTPENDING: The exception number for the highest priority pending exception. 0 indicates no pending exceptions"]
    #[inline]
    pub(crate) fn write_control_icsr_vectpending(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo!("write Control ICSR VECTPENDING reset value 0x00 mask 0x1ff")
    }
    #[doc = "Control ICSR ISRPENDING: Indicates if an external configurable, NVIC generated, interrupt is pending"]
    #[inline]
    pub(crate) fn read_control_icsr_isrpending(&self) -> MemResult<bool> {
        todo!("read Control ICSR ISRPENDING reset value false")
    }
    #[doc = "Control ICSR ISRPENDING: Indicates if an external configurable, NVIC generated, interrupt is pending"]
    #[inline]
    pub(crate) fn write_control_icsr_isrpending(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control ICSR ISRPENDING reset value false")
    }
    #[doc = "Control ICSR ISRPREEMPT: Indicates whether a pending exception will be serviced on exit from debug halt state"]
    #[inline]
    pub(crate) fn read_control_icsr_isrpreempt(&self) -> MemResult<bool> {
        todo!("read Control ICSR ISRPREEMPT reset value false")
    }
    #[doc = "Control ICSR ISRPREEMPT: Indicates whether a pending exception will be serviced on exit from debug halt state"]
    #[inline]
    pub(crate) fn write_control_icsr_isrpreempt(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control ICSR ISRPREEMPT reset value false")
    }
    #[doc = "Control ICSR PENDSTCLR: Clears a pending SysTick, whether set here or by the timer hardware"]
    #[inline]
    pub(crate) fn read_control_icsr_pendstclr(&self) -> MemResult<bool> {
        todo!("read Control ICSR PENDSTCLR reset value false")
    }
    #[doc = "Control ICSR PENDSTCLR: Clears a pending SysTick, whether set here or by the timer hardware"]
    #[inline]
    pub(crate) fn write_control_icsr_pendstclr(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control ICSR PENDSTCLR reset value false")
    }
    #[doc = "Control ICSR PENDSTSET: Sets a pending SysTick or reads back the current state"]
    #[inline]
    pub(crate) fn read_control_icsr_pendstset(&self) -> MemResult<bool> {
        todo!("read Control ICSR PENDSTSET reset value false")
    }
    #[doc = "Control ICSR PENDSTSET: Sets a pending SysTick or reads back the current state"]
    #[inline]
    pub(crate) fn write_control_icsr_pendstset(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control ICSR PENDSTSET reset value false")
    }
    #[doc = "Control ICSR PENDSVCLR: Clears a pending PendSV interrupt"]
    #[inline]
    pub(crate) fn read_control_icsr_pendsvclr(&self) -> MemResult<bool> {
        todo!("read Control ICSR PENDSVCLR reset value false")
    }
    #[doc = "Control ICSR PENDSVCLR: Clears a pending PendSV interrupt"]
    #[inline]
    pub(crate) fn write_control_icsr_pendsvclr(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control ICSR PENDSVCLR reset value false")
    }
    #[doc = "Control ICSR PENDSVSET: Sets a pending PendSV interrupt or reads back the current state"]
    #[inline]
    pub(crate) fn read_control_icsr_pendsvset(&self) -> MemResult<bool> {
        todo!("read Control ICSR PENDSVSET reset value false")
    }
    #[doc = "Control ICSR PENDSVSET: Sets a pending PendSV interrupt or reads back the current state"]
    #[inline]
    pub(crate) fn write_control_icsr_pendsvset(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control ICSR PENDSVSET reset value false")
    }
    #[doc = "Control ICSR NMIPENDSET: Activates an NMI exception or reads back the current state"]
    #[inline]
    pub(crate) fn read_control_icsr_nmipendset(&self) -> MemResult<bool> {
        todo!("read Control ICSR NMIPENDSET reset value false")
    }
    #[doc = "Control ICSR NMIPENDSET: Activates an NMI exception or reads back the current state"]
    #[inline]
    pub(crate) fn write_control_icsr_nmipendset(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control ICSR NMIPENDSET reset value false")
    }
    #[doc = "Control VTOR TBLOFF: Bits [31:7] of the vector table address"]
    #[inline]
    pub(crate) fn read_control_vtor_tbloff(&self) -> MemResult<u32> {
        todo!("read Control VTOR TBLOFF reset value 0x00 mask 0x1ffffff")
    }
    #[doc = "Control VTOR TBLOFF: Bits [31:7] of the vector table address"]
    #[inline]
    pub(crate) fn write_control_vtor_tbloff(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write Control VTOR TBLOFF reset value 0x00 mask 0x1ffffff")
    }
    #[doc = "Control VTOR TBLBASE: Determines whether the vector table is in the code or SRAM memory region"]
    #[inline]
    pub(crate) fn read_control_vtor_tblbase(&self) -> MemResult<bool> {
        todo!("read Control VTOR TBLBASE reset value false")
    }
    #[doc = "Control VTOR TBLBASE: Determines whether the vector table is in the code or SRAM memory region"]
    #[inline]
    pub(crate) fn write_control_vtor_tblbase(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control VTOR TBLBASE reset value false")
    }
    #[doc = "Control AIRCR VECTCLRACTIVE: Clears all active state information for fixed and configurable exceptions"]
    #[inline]
    pub(crate) fn read_control_aircr_vectclractive(&self) -> MemResult<bool> {
        todo!("read Control AIRCR VECTCLRACTIVE reset value false")
    }
    #[doc = "Control AIRCR VECTCLRACTIVE: Clears all active state information for fixed and configurable exceptions"]
    #[inline]
    pub(crate) fn write_control_aircr_vectclractive(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control AIRCR VECTCLRACTIVE reset value false")
    }
    #[doc = "Control AIRCR SYSRESETREQ: System Reset Request"]
    #[inline]
    pub(crate) fn read_control_aircr_sysresetreq(&self) -> MemResult<bool> {
        todo!("read Control AIRCR SYSRESETREQ reset value false")
    }
    #[doc = "Control AIRCR SYSRESETREQ: System Reset Request"]
    #[inline]
    pub(crate) fn write_control_aircr_sysresetreq(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control AIRCR SYSRESETREQ reset value false")
    }
    #[doc = "Control AIRCR PRIGROUP: Priority grouping, indicates the    binary point position."]
    #[inline]
    pub(crate) fn read_control_aircr_prigroup(&self) -> MemResult<u8> {
        todo!("read Control AIRCR PRIGROUP reset value 0x00 mask 0x07")
    }
    #[doc = "Control AIRCR PRIGROUP: Priority grouping, indicates the    binary point position."]
    #[inline]
    pub(crate) fn write_control_aircr_prigroup(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write Control AIRCR PRIGROUP reset value 0x00 mask 0x07")
    }
    #[doc = "Control AIRCR ENDIANNESS: Indicates the memory system data endianness"]
    #[inline]
    pub(crate) fn read_control_aircr_endianness(&self) -> MemResult<bool> {
        todo!("read Control AIRCR ENDIANNESS reset value false")
    }
    #[doc = "Control AIRCR ENDIANNESS: Indicates the memory system data endianness"]
    #[inline]
    pub(crate) fn write_control_aircr_endianness(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control AIRCR ENDIANNESS reset value false")
    }
    #[doc = "Control AIRCR VECTKEY: Vector Key\n\nControl AIRCR VECTKEYSTAT: UNKNOWN"]
    #[inline]
    pub(crate) fn read_control_aircr_vectkey(&self) -> MemResult<u16> {
        todo ! ("read Control AIRCR VECTKEY, Control AIRCR VECTKEYSTAT reset value 0x00 mask 0xffff")
    }
    #[doc = "Control AIRCR VECTKEY: Vector Key\n\nControl AIRCR VECTKEYSTAT: UNKNOWN"]
    #[inline]
    pub(crate) fn write_control_aircr_vectkey(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo ! ("write Control AIRCR VECTKEY, Control AIRCR VECTKEYSTAT reset value 0x00 mask 0xffff")
    }
    #[doc = "Control SCR SLEEPONEXIT: whether, on an exit from an ISR that returns to the base level of execution priority, the processor enters a sleep state"]
    #[inline]
    pub(crate) fn read_control_scr_sleeponexit(&self) -> MemResult<bool> {
        Ok(self.control.sleep_on_exit())
    }
    #[doc = "Control SCR SLEEPONEXIT: whether, on an exit from an ISR that returns to the base level of execution priority, the processor enters a sleep state"]
    #[inline]
    pub(crate) fn write_control_scr_sleeponexit(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.control.set_sleep_on_exit(_value))
    }
    #[doc = "Control SCR SLEEPDEEP: Hint indicating that waking from sleep might take longer"]
    #[inline]
    pub(crate) fn read_control_scr_sleepdeep(&self) -> MemResult<bool> {
        Ok(self.control.sleep_deep())
    }
    #[doc = "Control SCR SLEEPDEEP: Hint indicating that waking from sleep might take longer"]
    #[inline]
    pub(crate) fn write_control_scr_sleepdeep(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.control.set_sleep_deep(_value))
    }
    #[doc = "Control SCR SEVONPEND: Determines whether an interrupt transition from inactive state to pending state is a wakeup event"]
    #[inline]
    pub(crate) fn read_control_scr_sevonpend(&self) -> MemResult<bool> {
        Ok(self.control.event_on_pending())
    }
    #[doc = "Control SCR SEVONPEND: Determines whether an interrupt transition from inactive state to pending state is a wakeup event"]
    #[inline]
    pub(crate) fn write_control_scr_sevonpend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        Ok(self.control.set_event_on_pending(_value))
    }
    #[doc = "Control CCR NONBASETHRDENA: Controls whether the processor can enter Thread mode at an execution priority level other than base level"]
    #[inline]
    pub(crate) fn read_control_ccr_nonbasethrdena(&self) -> MemResult<bool> {
        todo!("read Control CCR NONBASETHRDENA reset value false")
    }
    #[doc = "Control CCR NONBASETHRDENA: Controls whether the processor can enter Thread mode at an execution priority level other than base level"]
    #[inline]
    pub(crate) fn write_control_ccr_nonbasethrdena(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CCR NONBASETHRDENA reset value false")
    }
    #[doc = "Control CCR USERSETMPEND: Controls whether unprivileged software can access the STIR"]
    #[inline]
    pub(crate) fn read_control_ccr_usersetmpend(&self) -> MemResult<bool> {
        todo!("read Control CCR USERSETMPEND reset value false")
    }
    #[doc = "Control CCR USERSETMPEND: Controls whether unprivileged software can access the STIR"]
    #[inline]
    pub(crate) fn write_control_ccr_usersetmpend(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CCR USERSETMPEND reset value false")
    }
    #[doc = "Control CCR UNALIGN_TRP: Controls the trapping of unaligned word or halfword accesses"]
    #[inline]
    pub(crate) fn read_control_ccr_unalign_trp(&self) -> MemResult<bool> {
        todo!("read Control CCR UNALIGN_TRP reset value false")
    }
    #[doc = "Control CCR UNALIGN_TRP: Controls the trapping of unaligned word or halfword accesses"]
    #[inline]
    pub(crate) fn write_control_ccr_unalign_trp(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CCR UNALIGN_TRP reset value false")
    }
    #[doc = "Control CCR DIV_0_TRP: Controls the trap on divide by 0"]
    #[inline]
    pub(crate) fn read_control_ccr_div_0_trp(&self) -> MemResult<bool> {
        todo!("read Control CCR DIV_0_TRP reset value false")
    }
    #[doc = "Control CCR DIV_0_TRP: Controls the trap on divide by 0"]
    #[inline]
    pub(crate) fn write_control_ccr_div_0_trp(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CCR DIV_0_TRP reset value false")
    }
    #[doc = "Control CCR BFHFNMIGN: Determines the effect of precise data access faults on handlers running at priority -1 or priority -2"]
    #[inline]
    pub(crate) fn read_control_ccr_bfhfnmign(&self) -> MemResult<bool> {
        todo!("read Control CCR BFHFNMIGN reset value false")
    }
    #[doc = "Control CCR BFHFNMIGN: Determines the effect of precise data access faults on handlers running at priority -1 or priority -2"]
    #[inline]
    pub(crate) fn write_control_ccr_bfhfnmign(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CCR BFHFNMIGN reset value false")
    }
    #[doc = "Control CCR STKALIGN: Determines whether the exception entry sequence guarantees 8-byte stack frame alignment, adjusting the SP if necessary before saving state"]
    #[inline]
    pub(crate) fn read_control_ccr_stkalign(&self) -> MemResult<bool> {
        todo!("read Control CCR STKALIGN reset value false")
    }
    #[doc = "Control CCR STKALIGN: Determines whether the exception entry sequence guarantees 8-byte stack frame alignment, adjusting the SP if necessary before saving state"]
    #[inline]
    pub(crate) fn write_control_ccr_stkalign(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CCR STKALIGN reset value false")
    }
    #[doc = "Control SHPR1 PRI_4: Priority of system handler 4, MemManage"]
    #[inline]
    pub(crate) fn read_control_shpr1_pri_4(&self) -> MemResult<u8> {
        Ok(self.control.priority(SysHandlerPriority::Pri4))
    }
    #[doc = "Control SHPR1 PRI_4: Priority of system handler 4, MemManage"]
    #[inline]
    pub(crate) fn write_control_shpr1_pri_4(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        self.control.set_priority(SysHandlerPriority::Pri4, _value)
    }
    #[doc = "Control SHPR1 PRI_5: Priority of system handler 5, BusFault"]
    #[inline]
    pub(crate) fn read_control_shpr1_pri_5(&self) -> MemResult<u8> {
        Ok(self.control.priority(SysHandlerPriority::Pri5))
    }
    #[doc = "Control SHPR1 PRI_5: Priority of system handler 5, BusFault"]
    #[inline]
    pub(crate) fn write_control_shpr1_pri_5(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        self.control.set_priority(SysHandlerPriority::Pri5, _value)
    }
    #[doc = "Control SHPR1 PRI_6: Priority of system handler 6, UsageFault"]
    #[inline]
    pub(crate) fn read_control_shpr1_pri_6(&self) -> MemResult<u8> {
        Ok(self.control.priority(SysHandlerPriority::Pri6))
    }
    #[doc = "Control SHPR1 PRI_6: Priority of system handler 6, UsageFault"]
    #[inline]
    pub(crate) fn write_control_shpr1_pri_6(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        self.control.set_priority(SysHandlerPriority::Pri6, _value)
    }
    #[doc = "Control SHPR1 PRI_7: Priority of system handler 7"]
    #[inline]
    pub(crate) fn read_control_shpr1_pri_7(&self) -> MemResult<u8> {
        Ok(self.control.priority(SysHandlerPriority::Pri7))
    }
    #[doc = "Control SHPR1 PRI_7: Priority of system handler 7"]
    #[inline]
    pub(crate) fn write_control_shpr1_pri_7(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        self.control.set_priority(SysHandlerPriority::Pri7, _value)
    }
    #[doc = "Control SHPR2 PRI_8: Priority of system handler 8"]
    #[inline]
    pub(crate) fn read_control_shpr2_pri_8(&self) -> MemResult<u8> {
        Ok(self.control.priority(SysHandlerPriority::Pri8))
    }
    #[doc = "Control SHPR2 PRI_8: Priority of system handler 8"]
    #[inline]
    pub(crate) fn write_control_shpr2_pri_8(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        self.control.set_priority(SysHandlerPriority::Pri8, _value)
    }
    #[doc = "Control SHPR2 PRI_9: Priority of system handler 9"]
    #[inline]
    pub(crate) fn read_control_shpr2_pri_9(&self) -> MemResult<u8> {
        Ok(self.control.priority(SysHandlerPriority::Pri9))
    }
    #[doc = "Control SHPR2 PRI_9: Priority of system handler 9"]
    #[inline]
    pub(crate) fn write_control_shpr2_pri_9(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        self.control.set_priority(SysHandlerPriority::Pri9, _value)
    }
    #[doc = "Control SHPR2 PRI_10: Priority of system handler 10"]
    #[inline]
    pub(crate) fn read_control_shpr2_pri_10(&self) -> MemResult<u8> {
        Ok(self.control.priority(SysHandlerPriority::Pri10))
    }
    #[doc = "Control SHPR2 PRI_10: Priority of system handler 10"]
    #[inline]
    pub(crate) fn write_control_shpr2_pri_10(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        self.control.set_priority(SysHandlerPriority::Pri10, _value)
    }
    #[doc = "Control SHPR2 PRI_11: Priority of system handler 11, SVCall"]
    #[inline]
    pub(crate) fn read_control_shpr2_pri_11(&self) -> MemResult<u8> {
        Ok(self.control.priority(SysHandlerPriority::Pri11))
    }
    #[doc = "Control SHPR2 PRI_11: Priority of system handler 11, SVCall"]
    #[inline]
    pub(crate) fn write_control_shpr2_pri_11(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        self.control.set_priority(SysHandlerPriority::Pri11, _value)
    }
    #[doc = "Control SHPR3 PRI_12: Priority of system handler 4, DebugMonitor"]
    #[inline]
    pub(crate) fn read_control_shpr3_pri_12(&self) -> MemResult<u8> {
        Ok(self.control.priority(SysHandlerPriority::Pri12))
    }
    #[doc = "Control SHPR3 PRI_12: Priority of system handler 4, DebugMonitor"]
    #[inline]
    pub(crate) fn write_control_shpr3_pri_12(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        self.control.set_priority(SysHandlerPriority::Pri12, _value)
    }
    #[doc = "Control SHPR3 PRI_13: Priority of system handler 13"]
    #[inline]
    pub(crate) fn read_control_shpr3_pri_13(&self) -> MemResult<u8> {
        Ok(self.control.priority(SysHandlerPriority::Pri13))
    }
    #[doc = "Control SHPR3 PRI_13: Priority of system handler 13"]
    #[inline]
    pub(crate) fn write_control_shpr3_pri_13(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        self.control.set_priority(SysHandlerPriority::Pri13, _value)
    }
    #[doc = "Control SHPR3 PRI_14: Priority of system handler 14, PendSV"]
    #[inline]
    pub(crate) fn read_control_shpr3_pri_14(&self) -> MemResult<u8> {
        Ok(self.control.priority(SysHandlerPriority::Pri14))
    }
    #[doc = "Control SHPR3 PRI_14: Priority of system handler 14, PendSV"]
    #[inline]
    pub(crate) fn write_control_shpr3_pri_14(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        self.control.set_priority(SysHandlerPriority::Pri14, _value)
    }
    #[doc = "Control SHPR3 PRI_15: Priority of system handler 15, SysTick"]
    #[inline]
    pub(crate) fn read_control_shpr3_pri_15(&self) -> MemResult<u8> {
        Ok(self.control.priority(SysHandlerPriority::Pri15))
    }
    #[doc = "Control SHPR3 PRI_15: Priority of system handler 15, SysTick"]
    #[inline]
    pub(crate) fn write_control_shpr3_pri_15(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        self.control.set_priority(SysHandlerPriority::Pri15, _value)
    }
    #[doc = "Control SHCSR MEMFAULTACT: MemManage active"]
    #[inline]
    pub(crate) fn read_control_shcsr_memfaultact(&self) -> MemResult<bool> {
        todo!("read Control SHCSR MEMFAULTACT reset value false")
    }
    #[doc = "Control SHCSR MEMFAULTACT: MemManage active"]
    #[inline]
    pub(crate) fn write_control_shcsr_memfaultact(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control SHCSR MEMFAULTACT reset value false")
    }
    #[doc = "Control SHCSR BUSFAULTACT: BusFault active"]
    #[inline]
    pub(crate) fn read_control_shcsr_busfaultact(&self) -> MemResult<bool> {
        todo!("read Control SHCSR BUSFAULTACT reset value false")
    }
    #[doc = "Control SHCSR BUSFAULTACT: BusFault active"]
    #[inline]
    pub(crate) fn write_control_shcsr_busfaultact(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control SHCSR BUSFAULTACT reset value false")
    }
    #[doc = "Control SHCSR USGFAULTACT: UsageFault active"]
    #[inline]
    pub(crate) fn read_control_shcsr_usgfaultact(&self) -> MemResult<bool> {
        todo!("read Control SHCSR USGFAULTACT reset value false")
    }
    #[doc = "Control SHCSR USGFAULTACT: UsageFault active"]
    #[inline]
    pub(crate) fn write_control_shcsr_usgfaultact(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control SHCSR USGFAULTACT reset value false")
    }
    #[doc = "Control SHCSR SVCALLACT: SVCall active"]
    #[inline]
    pub(crate) fn read_control_shcsr_svcallact(&self) -> MemResult<bool> {
        todo!("read Control SHCSR SVCALLACT reset value false")
    }
    #[doc = "Control SHCSR SVCALLACT: SVCall active"]
    #[inline]
    pub(crate) fn write_control_shcsr_svcallact(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control SHCSR SVCALLACT reset value false")
    }
    #[doc = "Control SHCSR MONITORACT: Monitor active"]
    #[inline]
    pub(crate) fn read_control_shcsr_monitoract(&self) -> MemResult<bool> {
        todo!("read Control SHCSR MONITORACT reset value false")
    }
    #[doc = "Control SHCSR MONITORACT: Monitor active"]
    #[inline]
    pub(crate) fn write_control_shcsr_monitoract(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control SHCSR MONITORACT reset value false")
    }
    #[doc = "Control SHCSR PENDSVACT: PendSV active"]
    #[inline]
    pub(crate) fn read_control_shcsr_pendsvact(&self) -> MemResult<bool> {
        todo!("read Control SHCSR PENDSVACT reset value false")
    }
    #[doc = "Control SHCSR PENDSVACT: PendSV active"]
    #[inline]
    pub(crate) fn write_control_shcsr_pendsvact(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control SHCSR PENDSVACT reset value false")
    }
    #[doc = "Control SHCSR SYSTICKACT: SysTick active"]
    #[inline]
    pub(crate) fn read_control_shcsr_systickact(&self) -> MemResult<bool> {
        todo!("read Control SHCSR SYSTICKACT reset value false")
    }
    #[doc = "Control SHCSR SYSTICKACT: SysTick active"]
    #[inline]
    pub(crate) fn write_control_shcsr_systickact(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control SHCSR SYSTICKACT reset value false")
    }
    #[doc = "Control SHCSR USGFAULTPENDED: UsageFault pending"]
    #[inline]
    pub(crate) fn read_control_shcsr_usgfaultpended(&self) -> MemResult<bool> {
        todo!("read Control SHCSR USGFAULTPENDED reset value false")
    }
    #[doc = "Control SHCSR USGFAULTPENDED: UsageFault pending"]
    #[inline]
    pub(crate) fn write_control_shcsr_usgfaultpended(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control SHCSR USGFAULTPENDED reset value false")
    }
    #[doc = "Control SHCSR MEMFAULTPENDED: MemManage pending"]
    #[inline]
    pub(crate) fn read_control_shcsr_memfaultpended(&self) -> MemResult<bool> {
        todo!("read Control SHCSR MEMFAULTPENDED reset value false")
    }
    #[doc = "Control SHCSR MEMFAULTPENDED: MemManage pending"]
    #[inline]
    pub(crate) fn write_control_shcsr_memfaultpended(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control SHCSR MEMFAULTPENDED reset value false")
    }
    #[doc = "Control SHCSR BUSFAULTPENDED: BusFault pending"]
    #[inline]
    pub(crate) fn read_control_shcsr_busfaultpended(&self) -> MemResult<bool> {
        todo!("read Control SHCSR BUSFAULTPENDED reset value false")
    }
    #[doc = "Control SHCSR BUSFAULTPENDED: BusFault pending"]
    #[inline]
    pub(crate) fn write_control_shcsr_busfaultpended(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control SHCSR BUSFAULTPENDED reset value false")
    }
    #[doc = "Control SHCSR SVCALLPENDED: SVCall pending"]
    #[inline]
    pub(crate) fn read_control_shcsr_svcallpended(&self) -> MemResult<bool> {
        todo!("read Control SHCSR SVCALLPENDED reset value false")
    }
    #[doc = "Control SHCSR SVCALLPENDED: SVCall pending"]
    #[inline]
    pub(crate) fn write_control_shcsr_svcallpended(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control SHCSR SVCALLPENDED reset value false")
    }
    #[doc = "Control SHCSR MEMFAULTENA: Enable MemManage fault"]
    #[inline]
    pub(crate) fn read_control_shcsr_memfaultena(&self) -> MemResult<bool> {
        todo!("read Control SHCSR MEMFAULTENA reset value false")
    }
    #[doc = "Control SHCSR MEMFAULTENA: Enable MemManage fault"]
    #[inline]
    pub(crate) fn write_control_shcsr_memfaultena(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control SHCSR MEMFAULTENA reset value false")
    }
    #[doc = "Control SHCSR BUSFAULTENA: Enable BusFault"]
    #[inline]
    pub(crate) fn read_control_shcsr_busfaultena(&self) -> MemResult<bool> {
        todo!("read Control SHCSR BUSFAULTENA reset value false")
    }
    #[doc = "Control SHCSR BUSFAULTENA: Enable BusFault"]
    #[inline]
    pub(crate) fn write_control_shcsr_busfaultena(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control SHCSR BUSFAULTENA reset value false")
    }
    #[doc = "Control SHCSR USGFAULTENA: Enable UsageFault"]
    #[inline]
    pub(crate) fn read_control_shcsr_usgfaultena(&self) -> MemResult<bool> {
        todo!("read Control SHCSR USGFAULTENA reset value false")
    }
    #[doc = "Control SHCSR USGFAULTENA: Enable UsageFault"]
    #[inline]
    pub(crate) fn write_control_shcsr_usgfaultena(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control SHCSR USGFAULTENA reset value false")
    }
    #[doc = "Control CFSR IACCVIOL: MPU or Execute Never (XN) default memory map access violation on an instruction fetch"]
    #[inline]
    pub(crate) fn read_control_cfsr_iaccviol(&self) -> MemResult<bool> {
        todo!("read Control CFSR IACCVIOL reset value false")
    }
    #[doc = "Control CFSR IACCVIOL: MPU or Execute Never (XN) default memory map access violation on an instruction fetch"]
    #[inline]
    pub(crate) fn write_control_cfsr_iaccviol(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR IACCVIOL reset value false")
    }
    #[doc = "Control CFSR DACCVIOL: Data access violation. The MMAR shows the data address that the load or store tried to access"]
    #[inline]
    pub(crate) fn read_control_cfsr_daccviol(&self) -> MemResult<bool> {
        todo!("read Control CFSR DACCVIOL reset value false")
    }
    #[doc = "Control CFSR DACCVIOL: Data access violation. The MMAR shows the data address that the load or store tried to access"]
    #[inline]
    pub(crate) fn write_control_cfsr_daccviol(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR DACCVIOL reset value false")
    }
    #[doc = "Control CFSR MUNSTKERR: Derived MemManage fault on exception return"]
    #[inline]
    pub(crate) fn read_control_cfsr_munstkerr(&self) -> MemResult<bool> {
        todo!("read Control CFSR MUNSTKERR reset value false")
    }
    #[doc = "Control CFSR MUNSTKERR: Derived MemManage fault on exception return"]
    #[inline]
    pub(crate) fn write_control_cfsr_munstkerr(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR MUNSTKERR reset value false")
    }
    #[doc = "Control CFSR MSTKERR: Derived MemManage fault on exception entry"]
    #[inline]
    pub(crate) fn read_control_cfsr_mstkerr(&self) -> MemResult<bool> {
        todo!("read Control CFSR MSTKERR reset value false")
    }
    #[doc = "Control CFSR MSTKERR: Derived MemManage fault on exception entry"]
    #[inline]
    pub(crate) fn write_control_cfsr_mstkerr(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR MSTKERR reset value false")
    }
    #[doc = "Control CFSR MLSPERR: MemManage fault during FP lazy state preservation"]
    #[inline]
    pub(crate) fn read_control_cfsr_mlsperr(&self) -> MemResult<bool> {
        todo!("read Control CFSR MLSPERR reset value false")
    }
    #[doc = "Control CFSR MLSPERR: MemManage fault during FP lazy state preservation"]
    #[inline]
    pub(crate) fn write_control_cfsr_mlsperr(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR MLSPERR reset value false")
    }
    #[doc = "Control CFSR MMARVALID: MMAR has valid contents"]
    #[inline]
    pub(crate) fn read_control_cfsr_mmarvalid(&self) -> MemResult<bool> {
        todo!("read Control CFSR MMARVALID reset value false")
    }
    #[doc = "Control CFSR MMARVALID: MMAR has valid contents"]
    #[inline]
    pub(crate) fn write_control_cfsr_mmarvalid(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR MMARVALID reset value false")
    }
    #[doc = "Control CFSR IBUSERR: Bus fault on an instruction prefetch"]
    #[inline]
    pub(crate) fn read_control_cfsr_ibuserr(&self) -> MemResult<bool> {
        todo!("read Control CFSR IBUSERR reset value false")
    }
    #[doc = "Control CFSR IBUSERR: Bus fault on an instruction prefetch"]
    #[inline]
    pub(crate) fn write_control_cfsr_ibuserr(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR IBUSERR reset value false")
    }
    #[doc = "Control CFSR PRECISERR: Precise data access error"]
    #[inline]
    pub(crate) fn read_control_cfsr_preciserr(&self) -> MemResult<bool> {
        todo!("read Control CFSR PRECISERR reset value false")
    }
    #[doc = "Control CFSR PRECISERR: Precise data access error"]
    #[inline]
    pub(crate) fn write_control_cfsr_preciserr(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR PRECISERR reset value false")
    }
    #[doc = "Control CFSR IMPRECISERR: Imprecise data access error"]
    #[inline]
    pub(crate) fn read_control_cfsr_impreciserr(&self) -> MemResult<bool> {
        todo!("read Control CFSR IMPRECISERR reset value false")
    }
    #[doc = "Control CFSR IMPRECISERR: Imprecise data access error"]
    #[inline]
    pub(crate) fn write_control_cfsr_impreciserr(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR IMPRECISERR reset value false")
    }
    #[doc = "Control CFSR UNSTKERR: Derived bus fault on exception return"]
    #[inline]
    pub(crate) fn read_control_cfsr_unstkerr(&self) -> MemResult<bool> {
        todo!("read Control CFSR UNSTKERR reset value false")
    }
    #[doc = "Control CFSR UNSTKERR: Derived bus fault on exception return"]
    #[inline]
    pub(crate) fn write_control_cfsr_unstkerr(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR UNSTKERR reset value false")
    }
    #[doc = "Control CFSR STKERR: Derived bus fault on exception entry"]
    #[inline]
    pub(crate) fn read_control_cfsr_stkerr(&self) -> MemResult<bool> {
        todo!("read Control CFSR STKERR reset value false")
    }
    #[doc = "Control CFSR STKERR: Derived bus fault on exception entry"]
    #[inline]
    pub(crate) fn write_control_cfsr_stkerr(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR STKERR reset value false")
    }
    #[doc = "Control CFSR LSPERR: Bus fault during FP lazy state preservation"]
    #[inline]
    pub(crate) fn read_control_cfsr_lsperr(&self) -> MemResult<bool> {
        todo!("read Control CFSR LSPERR reset value false")
    }
    #[doc = "Control CFSR LSPERR: Bus fault during FP lazy state preservation"]
    #[inline]
    pub(crate) fn write_control_cfsr_lsperr(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR LSPERR reset value false")
    }
    #[doc = "Control CFSR BFARVALID: BFAR has valid contents"]
    #[inline]
    pub(crate) fn read_control_cfsr_bfarvalid(&self) -> MemResult<bool> {
        todo!("read Control CFSR BFARVALID reset value false")
    }
    #[doc = "Control CFSR BFARVALID: BFAR has valid contents"]
    #[inline]
    pub(crate) fn write_control_cfsr_bfarvalid(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR BFARVALID reset value false")
    }
    #[doc = "Control CFSR UNDEFINSTR: Processor has attempted to execute an undefined instruction."]
    #[inline]
    pub(crate) fn read_control_cfsr_undefinstr(&self) -> MemResult<bool> {
        todo!("read Control CFSR UNDEFINSTR reset value false")
    }
    #[doc = "Control CFSR UNDEFINSTR: Processor has attempted to execute an undefined instruction."]
    #[inline]
    pub(crate) fn write_control_cfsr_undefinstr(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR UNDEFINSTR reset value false")
    }
    #[doc = "Control CFSR INVSTATE: Instruction executed with invalid EPSR.T or EPSR.IT field"]
    #[inline]
    pub(crate) fn read_control_cfsr_invstate(&self) -> MemResult<bool> {
        todo!("read Control CFSR INVSTATE reset value false")
    }
    #[doc = "Control CFSR INVSTATE: Instruction executed with invalid EPSR.T or EPSR.IT field"]
    #[inline]
    pub(crate) fn write_control_cfsr_invstate(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR INVSTATE reset value false")
    }
    #[doc = "Control CFSR INVPC: Integrity check error on EXC_RETURN"]
    #[inline]
    pub(crate) fn read_control_cfsr_invpc(&self) -> MemResult<bool> {
        todo!("read Control CFSR INVPC reset value false")
    }
    #[doc = "Control CFSR INVPC: Integrity check error on EXC_RETURN"]
    #[inline]
    pub(crate) fn write_control_cfsr_invpc(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR INVPC reset value false")
    }
    #[doc = "Control CFSR NOCP: Coprocessor access error"]
    #[inline]
    pub(crate) fn read_control_cfsr_nocp(&self) -> MemResult<bool> {
        todo!("read Control CFSR NOCP reset value false")
    }
    #[doc = "Control CFSR NOCP: Coprocessor access error"]
    #[inline]
    pub(crate) fn write_control_cfsr_nocp(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR NOCP reset value false")
    }
    #[doc = "Control CFSR UNALIGNED: Unaligned access error"]
    #[inline]
    pub(crate) fn read_control_cfsr_unaligned(&self) -> MemResult<bool> {
        todo!("read Control CFSR UNALIGNED reset value false")
    }
    #[doc = "Control CFSR UNALIGNED: Unaligned access error"]
    #[inline]
    pub(crate) fn write_control_cfsr_unaligned(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR UNALIGNED reset value false")
    }
    #[doc = "Control CFSR DIVBYZERO: Divide by zero error"]
    #[inline]
    pub(crate) fn read_control_cfsr_divbyzero(&self) -> MemResult<bool> {
        todo!("read Control CFSR DIVBYZERO reset value false")
    }
    #[doc = "Control CFSR DIVBYZERO: Divide by zero error"]
    #[inline]
    pub(crate) fn write_control_cfsr_divbyzero(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control CFSR DIVBYZERO reset value false")
    }
    #[doc = "Control HFSR VECTTBL: Indicates a fault has occurred because of a vector table read error on exception processing"]
    #[inline]
    pub(crate) fn read_control_hfsr_vecttbl(&self) -> MemResult<bool> {
        todo!("read Control HFSR VECTTBL reset value false")
    }
    #[doc = "Control HFSR VECTTBL: Indicates a fault has occurred because of a vector table read error on exception processing"]
    #[inline]
    pub(crate) fn write_control_hfsr_vecttbl(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control HFSR VECTTBL reset value false")
    }
    #[doc = "Control HFSR FORCED: Indicates a fault with configurable priority has been escalated to a HardFault"]
    #[inline]
    pub(crate) fn read_control_hfsr_forced(&self) -> MemResult<bool> {
        todo!("read Control HFSR FORCED reset value false")
    }
    #[doc = "Control HFSR FORCED: Indicates a fault with configurable priority has been escalated to a HardFault"]
    #[inline]
    pub(crate) fn write_control_hfsr_forced(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control HFSR FORCED reset value false")
    }
    #[doc = "Control HFSR DEBUGEVT: Indicates a Debug event has occurred"]
    #[inline]
    pub(crate) fn read_control_hfsr_debugevt(&self) -> MemResult<bool> {
        todo!("read Control HFSR DEBUGEVT reset value false")
    }
    #[doc = "Control HFSR DEBUGEVT: Indicates a Debug event has occurred"]
    #[inline]
    pub(crate) fn write_control_hfsr_debugevt(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control HFSR DEBUGEVT reset value false")
    }
    #[doc = "Control DFSR HALTED: Indicates a debug event generated by C_HALT or C_STEP request or setting DEMCR.MON_STEP"]
    #[inline]
    pub(crate) fn read_control_dfsr_halted(&self) -> MemResult<bool> {
        todo!("read Control DFSR HALTED reset value false")
    }
    #[doc = "Control DFSR HALTED: Indicates a debug event generated by C_HALT or C_STEP request or setting DEMCR.MON_STEP"]
    #[inline]
    pub(crate) fn write_control_dfsr_halted(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control DFSR HALTED reset value false")
    }
    #[doc = "Control DFSR BKPT: Indicates a debug event generated by BKPT instruction execution or a breakpoint match in FPB"]
    #[inline]
    pub(crate) fn read_control_dfsr_bkpt(&self) -> MemResult<bool> {
        todo!("read Control DFSR BKPT reset value false")
    }
    #[doc = "Control DFSR BKPT: Indicates a debug event generated by BKPT instruction execution or a breakpoint match in FPB"]
    #[inline]
    pub(crate) fn write_control_dfsr_bkpt(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control DFSR BKPT reset value false")
    }
    #[doc = "Control DFSR DWTTRAP: Indicates a debug event generated by the DWT"]
    #[inline]
    pub(crate) fn read_control_dfsr_dwttrap(&self) -> MemResult<bool> {
        todo!("read Control DFSR DWTTRAP reset value false")
    }
    #[doc = "Control DFSR DWTTRAP: Indicates a debug event generated by the DWT"]
    #[inline]
    pub(crate) fn write_control_dfsr_dwttrap(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control DFSR DWTTRAP reset value false")
    }
    #[doc = "Control DFSR VCATCH: Indicates triggering of a Vector catch"]
    #[inline]
    pub(crate) fn read_control_dfsr_vcatch(&self) -> MemResult<bool> {
        todo!("read Control DFSR VCATCH reset value false")
    }
    #[doc = "Control DFSR VCATCH: Indicates triggering of a Vector catch"]
    #[inline]
    pub(crate) fn write_control_dfsr_vcatch(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control DFSR VCATCH reset value false")
    }
    #[doc = "Control DFSR EXTERNAL: Indicates a debug event generated because of the assertion of EDBGRQ"]
    #[inline]
    pub(crate) fn read_control_dfsr_external(&self) -> MemResult<bool> {
        todo!("read Control DFSR EXTERNAL reset value false")
    }
    #[doc = "Control DFSR EXTERNAL: Indicates a debug event generated because of the assertion of EDBGRQ"]
    #[inline]
    pub(crate) fn write_control_dfsr_external(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write Control DFSR EXTERNAL reset value false")
    }
    #[doc = "Control MMFAR: Shows the address of the memory location that caused an MMU fault"]
    #[inline]
    pub(crate) fn read_control_mmfar(&self) -> MemResult<u32> {
        todo!("read Control MMFAR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "Control MMFAR: Shows the address of the memory location that caused an MMU fault"]
    #[inline]
    pub(crate) fn write_control_mmfar(&mut self, _value: u32) -> MemResult<()> {
        todo!("write Control MMFAR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "Control BFAR: Shows the address associated with a precise data access fault"]
    #[inline]
    pub(crate) fn read_control_bfar(&self) -> MemResult<u32> {
        todo!("read Control BFAR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "Control BFAR: Shows the address associated with a precise data access fault"]
    #[inline]
    pub(crate) fn write_control_bfar(&mut self, _value: u32) -> MemResult<()> {
        todo!("write Control BFAR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "Control AFSR: Latched version of the AUXFAULT inputs"]
    #[inline]
    pub(crate) fn read_control_afsr(&self) -> MemResult<u32> {
        todo!("read Control AFSR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "Control AFSR: Latched version of the AUXFAULT inputs"]
    #[inline]
    pub(crate) fn write_control_afsr(&mut self, _value: u32) -> MemResult<()> {
        todo!("write Control AFSR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "ID ID_PFR0 State1: Thumb instruction set support"]
    #[inline]
    pub(crate) fn read_id_id_pfr0_state1(&self) -> MemResult<u8> {
        todo!("read ID ID_PFR0 State1 reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_PFR1 M_Profile: M profile programmers' model"]
    #[inline]
    pub(crate) fn read_id_id_pfr1_m_profile(&self) -> MemResult<u8> {
        todo!("read ID ID_PFR1 M_Profile reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_DFR0 M_Profile: Debug model, M profile"]
    #[inline]
    pub(crate) fn read_id_id_dfr0_m_profile(&self) -> MemResult<u8> {
        todo!("read ID ID_DFR0 M_Profile reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_AFR0: Implementation defined features"]
    #[inline]
    pub(crate) fn read_id_id_afr0(&self) -> MemResult<u32> {
        todo!("read ID ID_AFR0 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "ID ID_MMFR0 PMSA: Indicates support for a PMSA"]
    #[inline]
    pub(crate) fn read_id_id_mmfr0_pmsa(&self) -> MemResult<u8> {
        todo!("read ID ID_MMFR0 PMSA reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_MMFR0 Outermost_shareability: Indicates the outermost shareability domain implemented"]
    #[inline]
    pub(crate) fn read_id_id_mmfr0_outermost_shareability(
        &self,
    ) -> MemResult<u8> {
        todo ! ("read ID ID_MMFR0 Outermost_shareability reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_MMFR0 Shareability_levels: Indicates the number of shareability levels implemented"]
    #[inline]
    pub(crate) fn read_id_id_mmfr0_shareability_levels(&self) -> MemResult<u8> {
        todo!("read ID ID_MMFR0 Shareability_levels reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_MMFR0 Auxiliary_registers: Indicates support for Auxiliary registers"]
    #[inline]
    pub(crate) fn read_id_id_mmfr0_auxiliary_registers(&self) -> MemResult<u8> {
        todo!("read ID ID_MMFR0 Auxiliary_registers reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_MMFR1: Memory Model Features"]
    #[inline]
    pub(crate) fn read_id_id_mmfr1(&self) -> MemResult<u32> {
        todo!("read ID ID_MMFR1 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "ID ID_MMFR2 WFI: Indicates support for wait-for-interrupt stalling. "]
    #[inline]
    pub(crate) fn read_id_id_mmfr2_wfi(&self) -> MemResult<u8> {
        todo!("read ID ID_MMFR2 WFI reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_MMFR3: Memory Model Features"]
    #[inline]
    pub(crate) fn read_id_id_mmfr3(&self) -> MemResult<u32> {
        todo!("read ID ID_MMFR3 reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "ID ID_ISAR0 BitCount_instrs: Indicates support for bit counting instructions. "]
    #[inline]
    pub(crate) fn read_id_id_isar0_bitcount_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR0 BitCount_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR0 Bitfield_instrs: Indicates support for bitfield instructions. "]
    #[inline]
    pub(crate) fn read_id_id_isar0_bitfield_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR0 Bitfield_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR0 CmpBranch_instrs: Indicates support for combined compare and branch instructions."]
    #[inline]
    pub(crate) fn read_id_id_isar0_cmpbranch_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR0 CmpBranch_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR0 Coproc_instrs: Indicates the supported coprocessor instructions"]
    #[inline]
    pub(crate) fn read_id_id_isar0_coproc_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR0 Coproc_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR0 Debug_instrs: Indicates the supported debug instructions"]
    #[inline]
    pub(crate) fn read_id_id_isar0_debug_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR0 Debug_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR0 Divide_instrs: Indicates the supported divide instructions"]
    #[inline]
    pub(crate) fn read_id_id_isar0_divide_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR0 Divide_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR1 Extend_instrs: Indicates support for sign or zero extend instructions. "]
    #[inline]
    pub(crate) fn read_id_id_isar1_extend_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR1 Extend_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR1 IfThen_instrs: Indicates support for IfThen instructions."]
    #[inline]
    pub(crate) fn read_id_id_isar1_ifthen_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR1 IfThen_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR1 Immediate_instrs: Indicates support for immediate instructions. "]
    #[inline]
    pub(crate) fn read_id_id_isar1_immediate_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR1 Immediate_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR1 Interwork_instrs: Indicates support for instructions that branch between ARM and Thumb code."]
    #[inline]
    pub(crate) fn read_id_id_isar1_interwork_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR1 Interwork_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR2 LoadStore_instrs: Indicates the supported additional load and store instructions. "]
    #[inline]
    pub(crate) fn read_id_id_isar2_loadstore_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR2 LoadStore_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR2 MemHint_instrs: Indicates the implemented Memory Hint instructions."]
    #[inline]
    pub(crate) fn read_id_id_isar2_memhint_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR2 MemHint_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR2 MultiAccessInt_instrs: Indicates the supported multi-access interruptible instructions."]
    #[inline]
    pub(crate) fn read_id_id_isar2_multiaccessint_instrs(
        &self,
    ) -> MemResult<u8> {
        todo!(
            "read ID ID_ISAR2 MultiAccessInt_instrs reset value 0x00 mask 0x0f"
        )
    }
    #[doc = "ID ID_ISAR2 Mult_instrs: Indicates the supported additional multiply instructions. "]
    #[inline]
    pub(crate) fn read_id_id_isar2_mult_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR2 Mult_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR2 MultS_instrs: Indicates the supported advanced signed multiply instructions."]
    #[inline]
    pub(crate) fn read_id_id_isar2_mults_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR2 MultS_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR2 MultU_instrs: Indicates the supported advanced unsigned multiply instructions."]
    #[inline]
    pub(crate) fn read_id_id_isar2_multu_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR2 MultU_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR2 Reversal_instrs: Indicates the supported reversal instructions. "]
    #[inline]
    pub(crate) fn read_id_id_isar2_reversal_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR2 Reversal_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR3 Saturate_instrs: Indicates support for saturate instructions. "]
    #[inline]
    pub(crate) fn read_id_id_isar3_saturate_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR3 Saturate_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR3 SIMD_instrs: Indicates support for Single Instruction Multiple Data (SIMD) instructions."]
    #[inline]
    pub(crate) fn read_id_id_isar3_simd_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR3 SIMD_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR3 SVC_instrs: Indicates support for SVC instructions."]
    #[inline]
    pub(crate) fn read_id_id_isar3_svc_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR3 SVC_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR3 SynchPrim_instrs: Indicates support for synchronization primitive instructions."]
    #[inline]
    pub(crate) fn read_id_id_isar3_synchprim_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR3 SynchPrim_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR3 TabBranch_instrs: Indicates support for table branch instructions. "]
    #[inline]
    pub(crate) fn read_id_id_isar3_tabbranch_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR3 TabBranch_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR3 ThumbCopy_instrs: Indicates support for Thumb copy instructions. "]
    #[inline]
    pub(crate) fn read_id_id_isar3_thumbcopy_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR3 ThumbCopy_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR3 TrueNOP_instrs: Indicates support for true NOP instructions."]
    #[inline]
    pub(crate) fn read_id_id_isar3_truenop_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR3 TrueNOP_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR4 Unpriv_instrs: Indicates the supported unprivileged instructions"]
    #[inline]
    pub(crate) fn read_id_id_isar4_unpriv_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR4 Unpriv_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR4 WithShifts_instrs: Indicates the support for instructions with shifts:"]
    #[inline]
    pub(crate) fn read_id_id_isar4_withshifts_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR4 WithShifts_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR4 Writeback_instrs: Indicates support for Writeback addressing modes"]
    #[inline]
    pub(crate) fn read_id_id_isar4_writeback_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR4 Writeback_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR4 Barrier_instrs: Indicates the supported barrier instructions. "]
    #[inline]
    pub(crate) fn read_id_id_isar4_barrier_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR4 Barrier_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "ID ID_ISAR4 SynchPrim_instrs_frac: Indicates support for Synchronization Primitives"]
    #[inline]
    pub(crate) fn read_id_id_isar4_synchprim_instrs_frac(
        &self,
    ) -> MemResult<u8> {
        todo!(
            "read ID ID_ISAR4 SynchPrim_instrs_frac reset value 0x00 mask 0x0f"
        )
    }
    #[doc = "ID ID_ISAR4 PSR_M_instrs: Indicates support for saturate instructions. "]
    #[inline]
    pub(crate) fn read_id_id_isar4_psr_m_instrs(&self) -> MemResult<u8> {
        todo!("read ID ID_ISAR4 PSR_M_instrs reset value 0x00 mask 0x0f")
    }
    #[doc = "Control CPACR CP0: Defines access permissions for the CP0 coprocessor."]
    #[inline]
    pub(crate) fn read_control_cpacr_cp0(&self) -> MemResult<u8> {
        todo!("read Control CPACR CP0 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP0: Defines access permissions for the CP0 coprocessor."]
    #[inline]
    pub(crate) fn write_control_cpacr_cp0(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write Control CPACR CP0 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP1: Defines access permissions for the CP1 coprocessor."]
    #[inline]
    pub(crate) fn read_control_cpacr_cp1(&self) -> MemResult<u8> {
        todo!("read Control CPACR CP1 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP1: Defines access permissions for the CP1 coprocessor."]
    #[inline]
    pub(crate) fn write_control_cpacr_cp1(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write Control CPACR CP1 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP2: Defines access permissions for the CP2 coprocessor."]
    #[inline]
    pub(crate) fn read_control_cpacr_cp2(&self) -> MemResult<u8> {
        todo!("read Control CPACR CP2 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP2: Defines access permissions for the CP2 coprocessor."]
    #[inline]
    pub(crate) fn write_control_cpacr_cp2(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write Control CPACR CP2 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP3: Defines access permissions for the CP3 coprocessor."]
    #[inline]
    pub(crate) fn read_control_cpacr_cp3(&self) -> MemResult<u8> {
        todo!("read Control CPACR CP3 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP3: Defines access permissions for the CP3 coprocessor."]
    #[inline]
    pub(crate) fn write_control_cpacr_cp3(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write Control CPACR CP3 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP4: Defines access permissions for the CP4 coprocessor."]
    #[inline]
    pub(crate) fn read_control_cpacr_cp4(&self) -> MemResult<u8> {
        todo!("read Control CPACR CP4 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP4: Defines access permissions for the CP4 coprocessor."]
    #[inline]
    pub(crate) fn write_control_cpacr_cp4(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write Control CPACR CP4 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP5: Defines access permissions for the CP5 coprocessor."]
    #[inline]
    pub(crate) fn read_control_cpacr_cp5(&self) -> MemResult<u8> {
        todo!("read Control CPACR CP5 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP5: Defines access permissions for the CP5 coprocessor."]
    #[inline]
    pub(crate) fn write_control_cpacr_cp5(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write Control CPACR CP5 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP6: Defines access permissions for the CP6 coprocessor."]
    #[inline]
    pub(crate) fn read_control_cpacr_cp6(&self) -> MemResult<u8> {
        todo!("read Control CPACR CP6 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP6: Defines access permissions for the CP6 coprocessor."]
    #[inline]
    pub(crate) fn write_control_cpacr_cp6(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write Control CPACR CP6 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP7: Defines access permissions for the CP7 coprocessor."]
    #[inline]
    pub(crate) fn read_control_cpacr_cp7(&self) -> MemResult<u8> {
        todo!("read Control CPACR CP7 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP7: Defines access permissions for the CP7 coprocessor."]
    #[inline]
    pub(crate) fn write_control_cpacr_cp7(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write Control CPACR CP7 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP10: Defines access permissions for the CP10 coprocessor."]
    #[inline]
    pub(crate) fn read_control_cpacr_cp10(&self) -> MemResult<u8> {
        todo!("read Control CPACR CP10 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP10: Defines access permissions for the CP10 coprocessor."]
    #[inline]
    pub(crate) fn write_control_cpacr_cp10(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write Control CPACR CP10 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP11: Defines access permissions for the CP11 coprocessor."]
    #[inline]
    pub(crate) fn read_control_cpacr_cp11(&self) -> MemResult<u8> {
        todo!("read Control CPACR CP11 reset value 0x00 mask 0x03")
    }
    #[doc = "Control CPACR CP11: Defines access permissions for the CP11 coprocessor."]
    #[inline]
    pub(crate) fn write_control_cpacr_cp11(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write Control CPACR CP11 reset value 0x00 mask 0x03")
    }
    #[doc = "MPU MPU_TYPE SEPARATE: Indicates support for separate instruction and data address maps"]
    #[inline]
    pub(crate) fn read_mpu_mpu_type_separate(&self) -> MemResult<bool> {
        todo!("read MPU MPU_TYPE SEPARATE reset value false")
    }
    #[doc = "MPU MPU_TYPE DREGION: Number of regions supported by the MPU"]
    #[inline]
    pub(crate) fn read_mpu_mpu_type_dregion(&self) -> MemResult<u8> {
        todo!("read MPU MPU_TYPE DREGION reset value 0x00 mask 0xff")
    }
    #[doc = "MPU MPU_TYPE IREGION: Number of instruction regions supported by the MPU"]
    #[inline]
    pub(crate) fn read_mpu_mpu_type_iregion(&self) -> MemResult<u8> {
        todo!("read MPU MPU_TYPE IREGION reset value 0x00 mask 0xff")
    }
    #[doc = "MPU MPU_CTRL ENABLE: Enables the MPU"]
    #[inline]
    pub(crate) fn read_mpu_mpu_ctrl_enable(&self) -> MemResult<bool> {
        todo!("read MPU MPU_CTRL ENABLE reset value false")
    }
    #[doc = "MPU MPU_CTRL ENABLE: Enables the MPU"]
    #[inline]
    pub(crate) fn write_mpu_mpu_ctrl_enable(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_CTRL ENABLE reset value false")
    }
    #[doc = "MPU MPU_CTRL HFNMIENA: When the ENABLE bit is set to 1, controls whether handlers executing with priority less than 0 access memory with the MPU enabled or with the MPU disabled"]
    #[inline]
    pub(crate) fn read_mpu_mpu_ctrl_hfnmiena(&self) -> MemResult<bool> {
        todo!("read MPU MPU_CTRL HFNMIENA reset value false")
    }
    #[doc = "MPU MPU_CTRL HFNMIENA: When the ENABLE bit is set to 1, controls whether handlers executing with priority less than 0 access memory with the MPU enabled or with the MPU disabled"]
    #[inline]
    pub(crate) fn write_mpu_mpu_ctrl_hfnmiena(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_CTRL HFNMIENA reset value false")
    }
    #[doc = "MPU MPU_CTRL PRIVDEFENA: When the ENABLE bit is set to 1, Enables the default memory map as a background region for privileged access"]
    #[inline]
    pub(crate) fn read_mpu_mpu_ctrl_privdefena(&self) -> MemResult<bool> {
        todo!("read MPU MPU_CTRL PRIVDEFENA reset value false")
    }
    #[doc = "MPU MPU_CTRL PRIVDEFENA: When the ENABLE bit is set to 1, Enables the default memory map as a background region for privileged access"]
    #[inline]
    pub(crate) fn write_mpu_mpu_ctrl_privdefena(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_CTRL PRIVDEFENA reset value false")
    }
    #[doc = "MPU MPU_RNR REGION: Indicates the memory region accessed by MPU_RBAR and MPU_RSAR"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rnr_region(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RNR REGION reset value 0x00 mask 0xff")
    }
    #[doc = "MPU MPU_RNR REGION: Indicates the memory region accessed by MPU_RBAR and MPU_RSAR"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rnr_region(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RNR REGION reset value 0x00 mask 0xff")
    }
    #[doc = "MPU MPU_RBAR REGION: On writes, can specify the number of the region to update. On reads, returns bits [3:0] of MPU_RNR"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rbar_region(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RBAR REGION reset value 0x00 mask 0x0f")
    }
    #[doc = "MPU MPU_RBAR REGION: On writes, can specify the number of the region to update. On reads, returns bits [3:0] of MPU_RNR"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rbar_region(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RBAR REGION reset value 0x00 mask 0x0f")
    }
    #[doc = "MPU MPU_RBAR VALID: On writes, indicates whether the region to update is specified by MPU_RNR.REGION, or by the REGION value specified in this write. When using the REGION value specified by this write, MPU_RNR.REGION is updated to this value"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rbar_valid(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RBAR VALID reset value false")
    }
    #[doc = "MPU MPU_RBAR VALID: On writes, indicates whether the region to update is specified by MPU_RNR.REGION, or by the REGION value specified in this write. When using the REGION value specified by this write, MPU_RNR.REGION is updated to this value"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rbar_valid(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RBAR VALID reset value false")
    }
    #[doc = "MPU MPU_RBAR ADDR: Base address of the region"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rbar_addr(&self) -> MemResult<u32> {
        todo!("read MPU MPU_RBAR ADDR reset value 0x00 mask 0x7ffffff")
    }
    #[doc = "MPU MPU_RBAR ADDR: Base address of the region"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rbar_addr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RBAR ADDR reset value 0x00 mask 0x7ffffff")
    }
    #[doc = "MPU MPU_RASR ENABLE: Enables this region"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_enable(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR ENABLE reset value false")
    }
    #[doc = "MPU MPU_RASR ENABLE: Enables this region"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_enable(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR ENABLE reset value false")
    }
    #[doc = "MPU MPU_RASR SIZE: Indicates the region size"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_size(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR SIZE reset value 0x00 mask 0x1f")
    }
    #[doc = "MPU MPU_RASR SIZE: Indicates the region size"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_size(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR SIZE reset value 0x00 mask 0x1f")
    }
    #[doc = "MPU MPU_RASR SRD: Subregion Disable"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_srd(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR SRD reset value 0x00 mask 0xff")
    }
    #[doc = "MPU MPU_RASR SRD: Subregion Disable"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_srd(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR SRD reset value 0x00 mask 0xff")
    }
    #[doc = "MPU MPU_RASR B: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_b(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR B reset value false")
    }
    #[doc = "MPU MPU_RASR B: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_b(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR B reset value false")
    }
    #[doc = "MPU MPU_RASR C: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_c(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR C reset value false")
    }
    #[doc = "MPU MPU_RASR C: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_c(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR C reset value false")
    }
    #[doc = "MPU MPU_RASR S: MPU Region Attribute field: Sharable"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_s(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR S reset value false")
    }
    #[doc = "MPU MPU_RASR S: MPU Region Attribute field: Sharable"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_s(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR S reset value false")
    }
    #[doc = "MPU MPU_RASR TEX: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_tex(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR TEX reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR TEX: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_tex(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR TEX reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR AP: Access permissions"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_ap(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR AP reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR AP: Access permissions"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_ap(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR AP reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR XN: Execute Never"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_xn(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR XN reset value false")
    }
    #[doc = "MPU MPU_RASR XN: Execute Never"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_xn(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR XN reset value false")
    }
    #[doc = "MPU MPU_RBAR_A1 REGION: On writes, can specify the number of the region to update. On reads, returns bits [3:0] of MPU_RNR"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rbar_a1_region(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RBAR_A1 REGION reset value 0x00 mask 0x0f")
    }
    #[doc = "MPU MPU_RBAR_A1 REGION: On writes, can specify the number of the region to update. On reads, returns bits [3:0] of MPU_RNR"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rbar_a1_region(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RBAR_A1 REGION reset value 0x00 mask 0x0f")
    }
    #[doc = "MPU MPU_RBAR_A1 VALID: On writes, indicates whether the region to update is specified by MPU_RNR.REGION, or by the REGION value specified in this write. When using the REGION value specified by this write, MPU_RNR.REGION is updated to this value"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rbar_a1_valid(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RBAR_A1 VALID reset value false")
    }
    #[doc = "MPU MPU_RBAR_A1 VALID: On writes, indicates whether the region to update is specified by MPU_RNR.REGION, or by the REGION value specified in this write. When using the REGION value specified by this write, MPU_RNR.REGION is updated to this value"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rbar_a1_valid(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RBAR_A1 VALID reset value false")
    }
    #[doc = "MPU MPU_RBAR_A1 ADDR: Base address of the region"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rbar_a1_addr(&self) -> MemResult<u32> {
        todo!("read MPU MPU_RBAR_A1 ADDR reset value 0x00 mask 0x7ffffff")
    }
    #[doc = "MPU MPU_RBAR_A1 ADDR: Base address of the region"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rbar_a1_addr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RBAR_A1 ADDR reset value 0x00 mask 0x7ffffff")
    }
    #[doc = "MPU MPU_RASR_A1 ENABLE: Enables this region"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a1_enable(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A1 ENABLE reset value false")
    }
    #[doc = "MPU MPU_RASR_A1 ENABLE: Enables this region"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a1_enable(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A1 ENABLE reset value false")
    }
    #[doc = "MPU MPU_RASR_A1 SIZE: Indicates the region size"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a1_size(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR_A1 SIZE reset value 0x00 mask 0x1f")
    }
    #[doc = "MPU MPU_RASR_A1 SIZE: Indicates the region size"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a1_size(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A1 SIZE reset value 0x00 mask 0x1f")
    }
    #[doc = "MPU MPU_RASR_A1 SRD: Subregion Disable"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a1_srd(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR_A1 SRD reset value 0x00 mask 0xff")
    }
    #[doc = "MPU MPU_RASR_A1 SRD: Subregion Disable"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a1_srd(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A1 SRD reset value 0x00 mask 0xff")
    }
    #[doc = "MPU MPU_RASR_A1 B: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a1_b(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A1 B reset value false")
    }
    #[doc = "MPU MPU_RASR_A1 B: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a1_b(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A1 B reset value false")
    }
    #[doc = "MPU MPU_RASR_A1 C: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a1_c(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A1 C reset value false")
    }
    #[doc = "MPU MPU_RASR_A1 C: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a1_c(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A1 C reset value false")
    }
    #[doc = "MPU MPU_RASR_A1 S: MPU Region Attribute field: Sharable"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a1_s(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A1 S reset value false")
    }
    #[doc = "MPU MPU_RASR_A1 S: MPU Region Attribute field: Sharable"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a1_s(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A1 S reset value false")
    }
    #[doc = "MPU MPU_RASR_A1 TEX: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a1_tex(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR_A1 TEX reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR_A1 TEX: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a1_tex(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A1 TEX reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR_A1 AP: Access permissions"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a1_ap(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR_A1 AP reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR_A1 AP: Access permissions"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a1_ap(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A1 AP reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR_A1 XN: Execute Never"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a1_xn(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A1 XN reset value false")
    }
    #[doc = "MPU MPU_RASR_A1 XN: Execute Never"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a1_xn(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A1 XN reset value false")
    }
    #[doc = "MPU MPU_RBAR_A2 REGION: On writes, can specify the number of the region to update. On reads, returns bits [3:0] of MPU_RNR"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rbar_a2_region(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RBAR_A2 REGION reset value 0x00 mask 0x0f")
    }
    #[doc = "MPU MPU_RBAR_A2 REGION: On writes, can specify the number of the region to update. On reads, returns bits [3:0] of MPU_RNR"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rbar_a2_region(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RBAR_A2 REGION reset value 0x00 mask 0x0f")
    }
    #[doc = "MPU MPU_RBAR_A2 VALID: On writes, indicates whether the region to update is specified by MPU_RNR.REGION, or by the REGION value specified in this write. When using the REGION value specified by this write, MPU_RNR.REGION is updated to this value"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rbar_a2_valid(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RBAR_A2 VALID reset value false")
    }
    #[doc = "MPU MPU_RBAR_A2 VALID: On writes, indicates whether the region to update is specified by MPU_RNR.REGION, or by the REGION value specified in this write. When using the REGION value specified by this write, MPU_RNR.REGION is updated to this value"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rbar_a2_valid(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RBAR_A2 VALID reset value false")
    }
    #[doc = "MPU MPU_RBAR_A2 ADDR: Base address of the region"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rbar_a2_addr(&self) -> MemResult<u32> {
        todo!("read MPU MPU_RBAR_A2 ADDR reset value 0x00 mask 0x7ffffff")
    }
    #[doc = "MPU MPU_RBAR_A2 ADDR: Base address of the region"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rbar_a2_addr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RBAR_A2 ADDR reset value 0x00 mask 0x7ffffff")
    }
    #[doc = "MPU MPU_RASR_A2 ENABLE: Enables this region"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a2_enable(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A2 ENABLE reset value false")
    }
    #[doc = "MPU MPU_RASR_A2 ENABLE: Enables this region"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a2_enable(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A2 ENABLE reset value false")
    }
    #[doc = "MPU MPU_RASR_A2 SIZE: Indicates the region size"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a2_size(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR_A2 SIZE reset value 0x00 mask 0x1f")
    }
    #[doc = "MPU MPU_RASR_A2 SIZE: Indicates the region size"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a2_size(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A2 SIZE reset value 0x00 mask 0x1f")
    }
    #[doc = "MPU MPU_RASR_A2 SRD: Subregion Disable"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a2_srd(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR_A2 SRD reset value 0x00 mask 0xff")
    }
    #[doc = "MPU MPU_RASR_A2 SRD: Subregion Disable"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a2_srd(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A2 SRD reset value 0x00 mask 0xff")
    }
    #[doc = "MPU MPU_RASR_A2 B: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a2_b(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A2 B reset value false")
    }
    #[doc = "MPU MPU_RASR_A2 B: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a2_b(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A2 B reset value false")
    }
    #[doc = "MPU MPU_RASR_A2 C: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a2_c(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A2 C reset value false")
    }
    #[doc = "MPU MPU_RASR_A2 C: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a2_c(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A2 C reset value false")
    }
    #[doc = "MPU MPU_RASR_A2 S: MPU Region Attribute field: Sharable"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a2_s(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A2 S reset value false")
    }
    #[doc = "MPU MPU_RASR_A2 S: MPU Region Attribute field: Sharable"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a2_s(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A2 S reset value false")
    }
    #[doc = "MPU MPU_RASR_A2 TEX: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a2_tex(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR_A2 TEX reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR_A2 TEX: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a2_tex(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A2 TEX reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR_A2 AP: Access permissions"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a2_ap(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR_A2 AP reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR_A2 AP: Access permissions"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a2_ap(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A2 AP reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR_A2 XN: Execute Never"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a2_xn(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A2 XN reset value false")
    }
    #[doc = "MPU MPU_RASR_A2 XN: Execute Never"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a2_xn(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A2 XN reset value false")
    }
    #[doc = "MPU MPU_RBAR_A3 REGION: On writes, can specify the number of the region to update. On reads, returns bits [3:0] of MPU_RNR"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rbar_a3_region(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RBAR_A3 REGION reset value 0x00 mask 0x0f")
    }
    #[doc = "MPU MPU_RBAR_A3 REGION: On writes, can specify the number of the region to update. On reads, returns bits [3:0] of MPU_RNR"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rbar_a3_region(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RBAR_A3 REGION reset value 0x00 mask 0x0f")
    }
    #[doc = "MPU MPU_RBAR_A3 VALID: On writes, indicates whether the region to update is specified by MPU_RNR.REGION, or by the REGION value specified in this write. When using the REGION value specified by this write, MPU_RNR.REGION is updated to this value"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rbar_a3_valid(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RBAR_A3 VALID reset value false")
    }
    #[doc = "MPU MPU_RBAR_A3 VALID: On writes, indicates whether the region to update is specified by MPU_RNR.REGION, or by the REGION value specified in this write. When using the REGION value specified by this write, MPU_RNR.REGION is updated to this value"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rbar_a3_valid(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RBAR_A3 VALID reset value false")
    }
    #[doc = "MPU MPU_RBAR_A3 ADDR: Base address of the region"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rbar_a3_addr(&self) -> MemResult<u32> {
        todo!("read MPU MPU_RBAR_A3 ADDR reset value 0x00 mask 0x7ffffff")
    }
    #[doc = "MPU MPU_RBAR_A3 ADDR: Base address of the region"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rbar_a3_addr(
        &mut self,
        _value: u32,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RBAR_A3 ADDR reset value 0x00 mask 0x7ffffff")
    }
    #[doc = "MPU MPU_RASR_A3 ENABLE: Enables this region"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a3_enable(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A3 ENABLE reset value false")
    }
    #[doc = "MPU MPU_RASR_A3 ENABLE: Enables this region"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a3_enable(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A3 ENABLE reset value false")
    }
    #[doc = "MPU MPU_RASR_A3 SIZE: Indicates the region size"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a3_size(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR_A3 SIZE reset value 0x00 mask 0x1f")
    }
    #[doc = "MPU MPU_RASR_A3 SIZE: Indicates the region size"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a3_size(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A3 SIZE reset value 0x00 mask 0x1f")
    }
    #[doc = "MPU MPU_RASR_A3 SRD: Subregion Disable"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a3_srd(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR_A3 SRD reset value 0x00 mask 0xff")
    }
    #[doc = "MPU MPU_RASR_A3 SRD: Subregion Disable"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a3_srd(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A3 SRD reset value 0x00 mask 0xff")
    }
    #[doc = "MPU MPU_RASR_A3 B: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a3_b(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A3 B reset value false")
    }
    #[doc = "MPU MPU_RASR_A3 B: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a3_b(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A3 B reset value false")
    }
    #[doc = "MPU MPU_RASR_A3 C: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a3_c(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A3 C reset value false")
    }
    #[doc = "MPU MPU_RASR_A3 C: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a3_c(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A3 C reset value false")
    }
    #[doc = "MPU MPU_RASR_A3 S: MPU Region Attribute field: Sharable"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a3_s(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A3 S reset value false")
    }
    #[doc = "MPU MPU_RASR_A3 S: MPU Region Attribute field: Sharable"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a3_s(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A3 S reset value false")
    }
    #[doc = "MPU MPU_RASR_A3 TEX: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a3_tex(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR_A3 TEX reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR_A3 TEX: MPU Region Attribute field"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a3_tex(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A3 TEX reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR_A3 AP: Access permissions"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a3_ap(&self) -> MemResult<u8> {
        todo!("read MPU MPU_RASR_A3 AP reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR_A3 AP: Access permissions"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a3_ap(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A3 AP reset value 0x00 mask 0x07")
    }
    #[doc = "MPU MPU_RASR_A3 XN: Execute Never"]
    #[inline]
    pub(crate) fn read_mpu_mpu_rasr_a3_xn(&self) -> MemResult<bool> {
        todo!("read MPU MPU_RASR_A3 XN reset value false")
    }
    #[doc = "MPU MPU_RASR_A3 XN: Execute Never"]
    #[inline]
    pub(crate) fn write_mpu_mpu_rasr_a3_xn(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write MPU MPU_RASR_A3 XN reset value false")
    }
    #[doc = "Control DEMCR MON_EN: Enable the DebugMonitor exception"]
    #[inline]
    pub(crate) fn read_control_demcr_mon_en(&self) -> MemResult<bool> {
        //TODO debug off by default
        Ok(false)
    }
    #[doc = "Control DEMCR MON_EN: Enable the DebugMonitor exception"]
    #[inline]
    pub(crate) fn write_control_demcr_mon_en(&mut self, _value: bool) -> MemResult<()> {
        //TODO debug off by default
        if _value {
            todo!("write Control DEMCR MON_EN reset value false")
        }
        Ok(())
    }
    #[doc = "Control DEMCR MON_PEND: Sets or clears the pending state of the DebugMonitor exception"]
    #[inline]
    pub(crate) fn read_control_demcr_mon_pend(&self) -> MemResult<bool> {
        //TODO debug off by default
        Ok(false)
    }
    #[doc = "Control DEMCR MON_PEND: Sets or clears the pending state of the DebugMonitor exception"]
    #[inline]
    pub(crate) fn write_control_demcr_mon_pend(&mut self, _value: bool) -> MemResult<()> {
        //TODO debug off by default
        if _value {
            todo!("write Control DEMCR MON_PEND reset value false")
        }
        Ok(())
    }
    #[doc = "Control STIR INTID: Indicates the interrupt to be triggered. The value written is (ExceptionNumber - 16)"]
    #[inline]
    pub(crate) fn write_control_stir_intid(
        &mut self,
        _value: u16,
    ) -> MemResult<()> {
        todo!("write Control STIR INTID reset value 0x00 mask 0x1ff")
    }
    #[doc = "FPE FPCCR LSPACT: Indicates whether Lazy preservation of the FP state is active"]
    #[inline]
    pub(crate) fn read_fpe_fpccr_lspact(&self) -> MemResult<bool> {
        todo!("read FPE FPCCR LSPACT reset value false")
    }
    #[doc = "FPE FPCCR LSPACT: Indicates whether Lazy preservation of the FP state is active"]
    #[inline]
    pub(crate) fn write_fpe_fpccr_lspact(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write FPE FPCCR LSPACT reset value false")
    }
    #[doc = "FPE FPCCR USER: Indicates the privilege level of the software executing when the processor allocated the FP stack frame"]
    #[inline]
    pub(crate) fn read_fpe_fpccr_user(&self) -> MemResult<bool> {
        todo!("read FPE FPCCR USER reset value false")
    }
    #[doc = "FPE FPCCR USER: Indicates the privilege level of the software executing when the processor allocated the FP stack frame"]
    #[inline]
    pub(crate) fn write_fpe_fpccr_user(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write FPE FPCCR USER reset value false")
    }
    #[doc = "FPE FPCCR THREAD: Indicates the processor mode when it allocated the FP stack frame"]
    #[inline]
    pub(crate) fn read_fpe_fpccr_thread(&self) -> MemResult<bool> {
        todo!("read FPE FPCCR THREAD reset value false")
    }
    #[doc = "FPE FPCCR THREAD: Indicates the processor mode when it allocated the FP stack frame"]
    #[inline]
    pub(crate) fn write_fpe_fpccr_thread(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write FPE FPCCR THREAD reset value false")
    }
    #[doc = "FPE FPCCR HFRDY: Indicates whether the software executing when the processor allocated the FP stack frame was able to set the HardFault exception to pending"]
    #[inline]
    pub(crate) fn read_fpe_fpccr_hfrdy(&self) -> MemResult<bool> {
        todo!("read FPE FPCCR HFRDY reset value false")
    }
    #[doc = "FPE FPCCR HFRDY: Indicates whether the software executing when the processor allocated the FP stack frame was able to set the HardFault exception to pending"]
    #[inline]
    pub(crate) fn write_fpe_fpccr_hfrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write FPE FPCCR HFRDY reset value false")
    }
    #[doc = "FPE FPCCR MMRDY: Indicates whether the software executing when the processor allocated the FP stack frame was able to set the MemManage exception to pending"]
    #[inline]
    pub(crate) fn read_fpe_fpccr_mmrdy(&self) -> MemResult<bool> {
        todo!("read FPE FPCCR MMRDY reset value false")
    }
    #[doc = "FPE FPCCR MMRDY: Indicates whether the software executing when the processor allocated the FP stack frame was able to set the MemManage exception to pending"]
    #[inline]
    pub(crate) fn write_fpe_fpccr_mmrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write FPE FPCCR MMRDY reset value false")
    }
    #[doc = "FPE FPCCR BFRDY: Indicates whether the software executing when the processor allocated the FP stack frame was able to set the BusFault exception to pending"]
    #[inline]
    pub(crate) fn read_fpe_fpccr_bfrdy(&self) -> MemResult<bool> {
        todo!("read FPE FPCCR BFRDY reset value false")
    }
    #[doc = "FPE FPCCR BFRDY: Indicates whether the software executing when the processor allocated the FP stack frame was able to set the BusFault exception to pending"]
    #[inline]
    pub(crate) fn write_fpe_fpccr_bfrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write FPE FPCCR BFRDY reset value false")
    }
    #[doc = "FPE FPCCR MONRDY: Indicates whether the software executing when the processor allocated the FP stack frame was able to set the DebugMonitor exception to pending"]
    #[inline]
    pub(crate) fn read_fpe_fpccr_monrdy(&self) -> MemResult<bool> {
        todo!("read FPE FPCCR MONRDY reset value false")
    }
    #[doc = "FPE FPCCR MONRDY: Indicates whether the software executing when the processor allocated the FP stack frame was able to set the DebugMonitor exception to pending"]
    #[inline]
    pub(crate) fn write_fpe_fpccr_monrdy(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write FPE FPCCR MONRDY reset value false")
    }
    #[doc = "FPE FPCCR LSPEN: Enables lazy context save of FP state"]
    #[inline]
    pub(crate) fn read_fpe_fpccr_lspen(&self) -> MemResult<bool> {
        todo!("read FPE FPCCR LSPEN reset value false")
    }
    #[doc = "FPE FPCCR LSPEN: Enables lazy context save of FP state"]
    #[inline]
    pub(crate) fn write_fpe_fpccr_lspen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write FPE FPCCR LSPEN reset value false")
    }
    #[doc = "FPE FPCCR ASPEN: When this bit is set to 1, execution of a floating-point instruction sets the CONTROL.FPCA bit to 1"]
    #[inline]
    pub(crate) fn read_fpe_fpccr_aspen(&self) -> MemResult<bool> {
        todo!("read FPE FPCCR ASPEN reset value false")
    }
    #[doc = "FPE FPCCR ASPEN: When this bit is set to 1, execution of a floating-point instruction sets the CONTROL.FPCA bit to 1"]
    #[inline]
    pub(crate) fn write_fpe_fpccr_aspen(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write FPE FPCCR ASPEN reset value false")
    }
    #[doc = "FPE FPCAR: Holds the location of the unpopulated floating-point register space allocated on an exception stack frame"]
    #[inline]
    pub(crate) fn read_fpe_fpcar(&self) -> MemResult<u32> {
        todo!("read FPE FPCAR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "FPE FPCAR: Holds the location of the unpopulated floating-point register space allocated on an exception stack frame"]
    #[inline]
    pub(crate) fn write_fpe_fpcar(&mut self, _value: u32) -> MemResult<()> {
        todo!("write FPE FPCAR reset value 0x00 mask 0xffffffffffffffff")
    }
    #[doc = "FPE FPDSCR RMode: Default value for FPSCR.RMode"]
    #[inline]
    pub(crate) fn read_fpe_fpdscr_rmode(&self) -> MemResult<u8> {
        todo!("read FPE FPDSCR RMode reset value 0x00 mask 0x03")
    }
    #[doc = "FPE FPDSCR RMode: Default value for FPSCR.RMode"]
    #[inline]
    pub(crate) fn write_fpe_fpdscr_rmode(
        &mut self,
        _value: u8,
    ) -> MemResult<()> {
        todo!("write FPE FPDSCR RMode reset value 0x00 mask 0x03")
    }
    #[doc = "FPE FPDSCR FZ: Default value for FPSCR.FZ"]
    #[inline]
    pub(crate) fn read_fpe_fpdscr_fz(&self) -> MemResult<bool> {
        todo!("read FPE FPDSCR FZ reset value false")
    }
    #[doc = "FPE FPDSCR FZ: Default value for FPSCR.FZ"]
    #[inline]
    pub(crate) fn write_fpe_fpdscr_fz(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write FPE FPDSCR FZ reset value false")
    }
    #[doc = "FPE FPDSCR DN: Default value for FPSCR.DN"]
    #[inline]
    pub(crate) fn read_fpe_fpdscr_dn(&self) -> MemResult<bool> {
        todo!("read FPE FPDSCR DN reset value false")
    }
    #[doc = "FPE FPDSCR DN: Default value for FPSCR.DN"]
    #[inline]
    pub(crate) fn write_fpe_fpdscr_dn(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write FPE FPDSCR DN reset value false")
    }
    #[doc = "FPE FPDSCR AHP: Default value for FPSCR.AHP"]
    #[inline]
    pub(crate) fn read_fpe_fpdscr_ahp(&self) -> MemResult<bool> {
        todo!("read FPE FPDSCR AHP reset value false")
    }
    #[doc = "FPE FPDSCR AHP: Default value for FPSCR.AHP"]
    #[inline]
    pub(crate) fn write_fpe_fpdscr_ahp(
        &mut self,
        _value: bool,
    ) -> MemResult<()> {
        todo!("write FPE FPDSCR AHP reset value false")
    }
    #[doc = "FPE MVFR0 A_SIMD: Indicates the size of the FP register bank"]
    #[inline]
    pub(crate) fn read_fpe_mvfr0_a_simd(&self) -> MemResult<u8> {
        todo!("read FPE MVFR0 A_SIMD reset value 0x00 mask 0x0f")
    }
    #[doc = "FPE MVFR0 Single_precision: Indicates the hardware support for FP single-precision operations"]
    #[inline]
    pub(crate) fn read_fpe_mvfr0_single_precision(&self) -> MemResult<u8> {
        todo!("read FPE MVFR0 Single_precision reset value 0x00 mask 0x0f")
    }
    #[doc = "FPE MVFR0 Double_precision: Indicates the hardware support for FP double-precision operations"]
    #[inline]
    pub(crate) fn read_fpe_mvfr0_double_precision(&self) -> MemResult<u8> {
        todo!("read FPE MVFR0 Double_precision reset value 0x00 mask 0x0f")
    }
    #[doc = "FPE MVFR0 FP_exception_trapping: Indicates whether the FP hardware implementation supports exception trapping"]
    #[inline]
    pub(crate) fn read_fpe_mvfr0_fp_exception_trapping(&self) -> MemResult<u8> {
        todo!("read FPE MVFR0 FP_exception_trapping reset value 0x00 mask 0x0f")
    }
    #[doc = "FPE MVFR0 Divide: Indicates the hardware support for FP divide operations"]
    #[inline]
    pub(crate) fn read_fpe_mvfr0_divide(&self) -> MemResult<u8> {
        todo!("read FPE MVFR0 Divide reset value 0x00 mask 0x0f")
    }
    #[doc = "FPE MVFR0 Square_root: Indicates the hardware support for FP square root operations"]
    #[inline]
    pub(crate) fn read_fpe_mvfr0_square_root(&self) -> MemResult<u8> {
        todo!("read FPE MVFR0 Square_root reset value 0x00 mask 0x0f")
    }
    #[doc = "FPE MVFR0 Short_vectors: Indicates the hardware support for FP short vectors"]
    #[inline]
    pub(crate) fn read_fpe_mvfr0_short_vectors(&self) -> MemResult<u8> {
        todo!("read FPE MVFR0 Short_vectors reset value 0x00 mask 0x0f")
    }
    #[doc = "FPE MVFR0 FP_Rounding_modes: Indicates the rounding modes supported by the FP floating-point hardware"]
    #[inline]
    pub(crate) fn read_fpe_mvfr0_fp_rounding_modes(&self) -> MemResult<u8> {
        todo!("read FPE MVFR0 FP_Rounding_modes reset value 0x00 mask 0x0f")
    }
    #[doc = "FPE MVFR1 FtZ: Indicates whether the FP hardware implementation supports only the Flush-to-Zero mode of operation"]
    #[inline]
    pub(crate) fn read_fpe_mvfr1_ftz(&self) -> MemResult<u8> {
        todo!("read FPE MVFR1 FtZ reset value 0x00 mask 0x0f")
    }
    #[doc = "FPE MVFR1 D_NaN: Indicates whether the FP hardware implementation supports only the Default NaN mode"]
    #[inline]
    pub(crate) fn read_fpe_mvfr1_d_nan(&self) -> MemResult<u8> {
        todo!("read FPE MVFR1 D_NaN reset value 0x00 mask 0x0f")
    }
    #[doc = "FPE MVFR1 FP_HPFP: Indicates whether the FP supports half-precision floating-point conversion operations"]
    #[inline]
    pub(crate) fn read_fpe_mvfr1_fp_hpfp(&self) -> MemResult<u8> {
        todo!("read FPE MVFR1 FP_HPFP reset value 0x00 mask 0x0f")
    }
    #[doc = "FPE MVFR1 FP_fused_MAC: Indicates whether the FP supports fused multiply accumulate operations"]
    #[inline]
    pub(crate) fn read_fpe_mvfr1_fp_fused_mac(&self) -> MemResult<u8> {
        todo!("read FPE MVFR1 FP_fused_MAC reset value 0x00 mask 0x0f")
    }
}

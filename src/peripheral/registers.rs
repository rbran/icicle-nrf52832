use icicle_vm::cpu::mem::{MemError, MemResult};
impl super::Peripherals {
    #[doc = "Read ficr_codepagesize10 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_codepagesize10_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_codepagesize10_codepagesize_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_codesize14 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_codesize14_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_codesize14_codesize_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_deviceidn60 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_deviceidn60_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.ficr.ficr_deviceidn60_deviceid_read(_reg_array)?);
        Ok(_value)
    }
    #[doc = "Read ficr_ern80 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_ern80_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_ern80_er_read(_reg_array)?);
        Ok(_value)
    }
    #[doc = "Read ficr_irn90 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_irn90_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_irn90_ir_read(_reg_array)?);
        Ok(_value)
    }
    #[doc = "Read ficr_deviceaddrtypea0 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_deviceaddrtypea0_read(&mut self) -> MemResult<u32> {
        let mut _value = 4294967294;
        _value |=
            u32::from(self.ficr.ficr_deviceaddrtypea0_deviceaddrtype_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_deviceaddrna4 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_deviceaddrna4_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.ficr.ficr_deviceaddrna4_deviceaddr_read(_reg_array)?,
        );
        Ok(_value)
    }
    #[doc = "Read ficr_info_part0 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_info_part0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u32::from(self.ficr.ficr_info_part0_part_read()?));
        Ok(_value)
    }
    #[doc = "Read ficr_info_variant4 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_info_variant4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u32::from(self.ficr.ficr_info_variant4_variant_read()?));
        Ok(_value)
    }
    #[doc = "Read ficr_info_package8 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_info_package8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u32::from(self.ficr.ficr_info_package8_package_read()?));
        Ok(_value)
    }
    #[doc = "Read ficr_info_ramc from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_info_ramc_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u32::from(self.ficr.ficr_info_ramc_ram_read()?));
        Ok(_value)
    }
    #[doc = "Read ficr_info_flash10 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_info_flash10_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u32::from(self.ficr.ficr_info_flash10_flash_read()?));
        Ok(_value)
    }
    #[doc = "Read ficr_info_unused0n14 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_info_unused0n14_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        self.ficr.ficr_info_unused0n14_read(_reg_array)
    }
    #[doc = "Write ficr_info_unused0n14 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_info_unused0n14_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.ficr.ficr_info_unused0n14_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read ficr_temp_a00 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_a00_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_a00_a_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_a14 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_a14_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_a14_a_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_a28 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_a28_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_a28_a_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_a3c from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_a3c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_a3c_a_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_a410 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_a410_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_a410_a_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_a514 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_a514_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_a514_a_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_b018 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_b018_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_b018_b_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_b11c from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_b11c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_b11c_b_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_b220 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_b220_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_b220_b_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_b324 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_b324_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_b324_b_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_b428 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_b428_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_b428_b_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_b52c from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_b52c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_b52c_b_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_t030 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_t030_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_t030_t_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_t134 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_t134_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_t134_t_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_t238 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_t238_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_t238_t_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_t33c from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_t33c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_t33c_t_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_temp_t440 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_temp_t440_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_temp_t440_t_read()?);
        Ok(_value)
    }
    #[doc = "Read ficr_nfc_tagheader00 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_nfc_tagheader00_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_nfc_tagheader00_mfgid_read()?);
        _value |= u32::from(self.ficr.ficr_nfc_tagheader00_ud1_read()?) << 8u32;
        _value |=
            u32::from(self.ficr.ficr_nfc_tagheader00_ud2_read()?) << 16u32;
        _value |=
            u32::from(self.ficr.ficr_nfc_tagheader00_ud3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Read ficr_nfc_tagheader14 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_nfc_tagheader14_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_nfc_tagheader14_ud4_read()?);
        _value |= u32::from(self.ficr.ficr_nfc_tagheader14_ud5_read()?) << 8u32;
        _value |=
            u32::from(self.ficr.ficr_nfc_tagheader14_ud6_read()?) << 16u32;
        _value |=
            u32::from(self.ficr.ficr_nfc_tagheader14_ud7_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Read ficr_nfc_tagheader28 from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_nfc_tagheader28_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_nfc_tagheader28_ud8_read()?);
        _value |= u32::from(self.ficr.ficr_nfc_tagheader28_ud9_read()?) << 8u32;
        _value |=
            u32::from(self.ficr.ficr_nfc_tagheader28_ud10_read()?) << 16u32;
        _value |=
            u32::from(self.ficr.ficr_nfc_tagheader28_ud11_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Read ficr_nfc_tagheader3c from [crate::peripheral::ficr::Ficr]"]
    #[inline]
    pub(crate) fn ficr_nfc_tagheader3c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ficr.ficr_nfc_tagheader3c_ud12_read()?);
        _value |=
            u32::from(self.ficr.ficr_nfc_tagheader3c_ud13_read()?) << 8u32;
        _value |=
            u32::from(self.ficr.ficr_nfc_tagheader3c_ud14_read()?) << 16u32;
        _value |=
            u32::from(self.ficr.ficr_nfc_tagheader3c_ud15_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Read uicr_unused00 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_unused00_read(&mut self) -> MemResult<u32> {
        self.uicr.uicr_unused00_read()
    }
    #[doc = "Write uicr_unused00 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_unused00_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.uicr
            .uicr_unused00_write(u32::from_ne_bytes(_value.try_into().unwrap()))
    }
    #[doc = "Read uicr_unused14 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_unused14_read(&mut self) -> MemResult<u32> {
        self.uicr.uicr_unused14_read()
    }
    #[doc = "Write uicr_unused14 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_unused14_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.uicr
            .uicr_unused14_write(u32::from_ne_bytes(_value.try_into().unwrap()))
    }
    #[doc = "Read uicr_unused28 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_unused28_read(&mut self) -> MemResult<u32> {
        self.uicr.uicr_unused28_read()
    }
    #[doc = "Write uicr_unused28 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_unused28_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.uicr
            .uicr_unused28_write(u32::from_ne_bytes(_value.try_into().unwrap()))
    }
    #[doc = "Read uicr_unused310 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_unused310_read(&mut self) -> MemResult<u32> {
        self.uicr.uicr_unused310_read()
    }
    #[doc = "Write uicr_unused310 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_unused310_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.uicr.uicr_unused310_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read uicr_nrffwn14 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_nrffwn14_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.uicr.uicr_nrffwn14_nrffw_read(_reg_array)?);
        Ok(_value)
    }
    #[doc = "Write uicr_nrffwn14 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_nrffwn14_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.uicr.uicr_nrffwn14_nrffw_write(
                _reg_array,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read uicr_nrfhwn50 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_nrfhwn50_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.uicr.uicr_nrfhwn50_nrfhw_read(_reg_array)?);
        Ok(_value)
    }
    #[doc = "Write uicr_nrfhwn50 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_nrfhwn50_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.uicr.uicr_nrfhwn50_nrfhw_write(
                _reg_array,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read uicr_customern80 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_customern80_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.uicr.uicr_customern80_customer_read(_reg_array)?);
        Ok(_value)
    }
    #[doc = "Write uicr_customern80 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_customern80_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.uicr.uicr_customern80_customer_write(
                _reg_array,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read uicr_pselresetn200 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_pselresetn200_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 2147483584;
        _value |= u32::from(self.uicr.uicr_pselresetn200_pin_read(_reg_array)?);
        _value |=
            u32::from(self.uicr.uicr_pselresetn200_connect_read(_reg_array)?)
                << 31u32;
        Ok(_value)
    }
    #[doc = "Write uicr_pselresetn200 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_pselresetn200_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.uicr.uicr_pselresetn200_pin_write(
                _reg_array,
                ((_value[_i] >> 0) & 63u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.uicr.uicr_pselresetn200_connect_write(
                _reg_array,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read uicr_approtect208 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_approtect208_read(&mut self) -> MemResult<u32> {
        let mut _value = 4294967040;
        _value |= u32::from(u8::from(self.uicr.uicr_approtect208_pall_read()?));
        Ok(_value)
    }
    #[doc = "Write uicr_approtect208 from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_approtect208_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.uicr.uicr_approtect208_pall_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read uicr_nfcpins20c from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_nfcpins20c_read(&mut self) -> MemResult<u32> {
        let mut _value = 4294967294;
        _value |= u32::from(self.uicr.uicr_nfcpins20c_protect_read()?);
        Ok(_value)
    }
    #[doc = "Write uicr_nfcpins20c from [crate::peripheral::uicr::Uicr]"]
    #[inline]
    pub(crate) fn uicr_nfcpins20c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.uicr.uicr_nfcpins20c_protect_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write apb0_tasks_hfclkstart0 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_tasks_hfclkstart0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0.apb0_tasks_hfclkstart0_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb0_tasks_hfclkstop4 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_tasks_hfclkstop4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0.apb0_tasks_hfclkstop4_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb0_tasks_lfclkstart8 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_tasks_lfclkstart8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0.apb0_tasks_lfclkstart8_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb0_tasks_lfclkstopc from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_tasks_lfclkstopc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0.apb0_tasks_lfclkstopc_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb0_tasks_cal10 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_tasks_cal10_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0.apb0_tasks_cal10_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb0_tasks_ctstart14 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_tasks_ctstart14_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0.apb0_tasks_ctstart14_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb0_tasks_ctstop18 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_tasks_ctstop18_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0.apb0_tasks_ctstop18_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb0_tasks_constlat78 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_tasks_constlat78_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0.apb0_tasks_constlat78_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb0_tasks_lowpwr7c from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_tasks_lowpwr7c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0.apb0_tasks_lowpwr7c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb0_events_hfclkstarted100 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_events_hfclkstarted100_read(
        &mut self,
    ) -> MemResult<u32> {
        self.apb0.apb0_events_hfclkstarted100_read()
    }
    #[doc = "Write apb0_events_hfclkstarted100 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_events_hfclkstarted100_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0
            .apb0_events_hfclkstarted100_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read apb0_events_lfclkstarted104 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_events_lfclkstarted104_read(
        &mut self,
    ) -> MemResult<u32> {
        self.apb0.apb0_events_lfclkstarted104_read()
    }
    #[doc = "Write apb0_events_lfclkstarted104 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_events_lfclkstarted104_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0
            .apb0_events_lfclkstarted104_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read apb0_events_pofwarn108 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_events_pofwarn108_read(&mut self) -> MemResult<u32> {
        self.apb0.apb0_events_pofwarn108_read()
    }
    #[doc = "Write apb0_events_pofwarn108 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_events_pofwarn108_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0.apb0_events_pofwarn108_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb0_events_done10c from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_events_done10c_read(&mut self) -> MemResult<u32> {
        self.apb0.apb0_events_done10c_read()
    }
    #[doc = "Write apb0_events_done10c from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_events_done10c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0.apb0_events_done10c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb0_events_ctto110 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_events_ctto110_read(&mut self) -> MemResult<u32> {
        self.apb0.apb0_events_ctto110_read()
    }
    #[doc = "Write apb0_events_ctto110 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_events_ctto110_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0.apb0_events_ctto110_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb0_events_sleepenter114 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_events_sleepenter114_read(&mut self) -> MemResult<u32> {
        self.apb0.apb0_events_sleepenter114_read()
    }
    #[doc = "Write apb0_events_sleepenter114 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_events_sleepenter114_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0
            .apb0_events_sleepenter114_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read apb0_events_sleepexit118 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_events_sleepexit118_read(&mut self) -> MemResult<u32> {
        self.apb0.apb0_events_sleepexit118_read()
    }
    #[doc = "Write apb0_events_sleepexit118 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_events_sleepexit118_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0.apb0_events_sleepexit118_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb0_intenset304 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_intenset304_hfclkstarted_read()?);
        _value |=
            u32::from(self.apb0.apb0_intenset304_lfclkstarted_read()?) << 1u32;
        _value |= u32::from(self.apb0.apb0_intenset304_pofwarn_read()?) << 2u32;
        _value |= u32::from(self.apb0.apb0_intenset304_done_read()?) << 3u32;
        _value |= u32::from(self.apb0.apb0_intenset304_ctto_read()?) << 4u32;
        _value |=
            u32::from(self.apb0.apb0_intenset304_sleepenter_read()?) << 5u32;
        _value |=
            u32::from(self.apb0.apb0_intenset304_sleepexit_read()?) << 6u32;
        Ok(_value)
    }
    #[doc = "Write apb0_intenset304 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_intenset304_hfclkstarted_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_intenset304_lfclkstarted_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_intenset304_pofwarn_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_intenset304_done_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_intenset304_ctto_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_intenset304_sleepenter_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_intenset304_sleepexit_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_intenclr308 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_intenclr308_hfclkstarted_read()?);
        _value |=
            u32::from(self.apb0.apb0_intenclr308_lfclkstarted_read()?) << 1u32;
        _value |= u32::from(self.apb0.apb0_intenclr308_pofwarn_read()?) << 2u32;
        _value |= u32::from(self.apb0.apb0_intenclr308_done_read()?) << 3u32;
        _value |= u32::from(self.apb0.apb0_intenclr308_ctto_read()?) << 4u32;
        _value |=
            u32::from(self.apb0.apb0_intenclr308_sleepenter_read()?) << 5u32;
        _value |=
            u32::from(self.apb0.apb0_intenclr308_sleepexit_read()?) << 6u32;
        Ok(_value)
    }
    #[doc = "Write apb0_intenclr308 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_intenclr308_hfclkstarted_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_intenclr308_lfclkstarted_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_intenclr308_pofwarn_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_intenclr308_done_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_intenclr308_ctto_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_intenclr308_sleepenter_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_intenclr308_sleepexit_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_resetreas400 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_resetreas400_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_resetreas400_resetpin_read()?);
        _value |= u32::from(self.apb0.apb0_resetreas400_dog_read()?) << 1u32;
        _value |= u32::from(self.apb0.apb0_resetreas400_sreq_read()?) << 2u32;
        _value |= u32::from(self.apb0.apb0_resetreas400_lockup_read()?) << 3u32;
        _value |= u32::from(self.apb0.apb0_resetreas400_off_read()?) << 16u32;
        _value |=
            u32::from(self.apb0.apb0_resetreas400_lpcomp_read()?) << 17u32;
        _value |= u32::from(self.apb0.apb0_resetreas400_dif_read()?) << 18u32;
        _value |= u32::from(self.apb0.apb0_resetreas400_nfc_read()?) << 19u32;
        Ok(_value)
    }
    #[doc = "Write apb0_resetreas400 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_resetreas400_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_resetreas400_resetpin_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_resetreas400_dog_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_resetreas400_sreq_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_resetreas400_lockup_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_resetreas400_off_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_resetreas400_lpcomp_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_resetreas400_dif_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_resetreas400_nfc_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_hfclkrun408 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_hfclkrun408_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_hfclkrun408_status_read()?);
        Ok(_value)
    }
    #[doc = "Read apb0_hfclkstat40c from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_hfclkstat40c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_hfclkstat40c_src_read()?);
        _value |= u32::from(self.apb0.apb0_hfclkstat40c_state_read()?) << 16u32;
        Ok(_value)
    }
    #[doc = "Read apb0_lfclkrun414 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_lfclkrun414_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_lfclkrun414_status_read()?);
        Ok(_value)
    }
    #[doc = "Read apb0_lfclkstat418 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_lfclkstat418_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.apb0.apb0_lfclkstat418_src_read()?));
        _value |= u32::from(self.apb0.apb0_lfclkstat418_state_read()?) << 16u32;
        Ok(_value)
    }
    #[doc = "Read apb0_lfclksrccopy41c from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_lfclksrccopy41c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.apb0.apb0_lfclksrccopy41c_src_read()?));
        Ok(_value)
    }
    #[doc = "Read apb0_ramstatus428 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_ramstatus428_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_ramstatus428_ramblock0_read()?);
        _value |=
            u32::from(self.apb0.apb0_ramstatus428_ramblock1_read()?) << 1u32;
        _value |=
            u32::from(self.apb0.apb0_ramstatus428_ramblock2_read()?) << 2u32;
        _value |=
            u32::from(self.apb0.apb0_ramstatus428_ramblock3_read()?) << 3u32;
        Ok(_value)
    }
    #[doc = "Write apb0_systemoff500 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_systemoff500_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_systemoff500_systemoff_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_pofcon510 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_pofcon510_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_pofcon510_pof_read()?);
        _value |=
            u32::from(u8::from(self.apb0.apb0_pofcon510_threshold_read()?))
                << 1u32;
        Ok(_value)
    }
    #[doc = "Write apb0_pofcon510 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_pofcon510_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_pofcon510_pof_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_pofcon510_threshold_write(
                ((_value[_i] >> 1) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_lfclksrc518 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_lfclksrc518_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.apb0.apb0_lfclksrc518_src_read()?));
        _value |= u32::from(self.apb0.apb0_lfclksrc518_bypass_read()?) << 16u32;
        _value |=
            u32::from(self.apb0.apb0_lfclksrc518_external_read()?) << 17u32;
        Ok(_value)
    }
    #[doc = "Write apb0_lfclksrc518 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_lfclksrc518_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_lfclksrc518_src_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_lfclksrc518_bypass_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_lfclksrc518_external_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_gpregret51c from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_gpregret51c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_gpregret51c_gpregret_read()?);
        Ok(_value)
    }
    #[doc = "Write apb0_gpregret51c from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_gpregret51c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_gpregret51c_gpregret_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_gpregret2520 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_gpregret2520_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_gpregret2520_gpregret_read()?);
        Ok(_value)
    }
    #[doc = "Write apb0_gpregret2520 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_gpregret2520_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_gpregret2520_gpregret_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_ramon524 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_ramon524_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_ramon524_onram0_read()?);
        _value |= u32::from(self.apb0.apb0_ramon524_onram1_read()?) << 1u32;
        _value |= u32::from(self.apb0.apb0_ramon524_offram0_read()?) << 16u32;
        _value |= u32::from(self.apb0.apb0_ramon524_offram1_read()?) << 17u32;
        Ok(_value)
    }
    #[doc = "Write apb0_ramon524 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_ramon524_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_ramon524_onram0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_ramon524_onram1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_ramon524_offram0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_ramon524_offram1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_ctiv538 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_ctiv538_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_ctiv538_ctiv_read()?);
        Ok(_value)
    }
    #[doc = "Write apb0_ctiv538 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_ctiv538_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_ctiv538_ctiv_write(
                ((_value[_i] >> 0) & 127u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_ramonb554 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_ramonb554_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_ramonb554_onram2_read()?);
        _value |= u32::from(self.apb0.apb0_ramonb554_onram3_read()?) << 1u32;
        _value |= u32::from(self.apb0.apb0_ramonb554_offram2_read()?) << 16u32;
        _value |= u32::from(self.apb0.apb0_ramonb554_offram3_read()?) << 17u32;
        Ok(_value)
    }
    #[doc = "Write apb0_ramonb554 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_ramonb554_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_ramonb554_onram2_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_ramonb554_onram3_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_ramonb554_offram2_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_ramonb554_offram3_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_traceconfig55c from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_traceconfig55c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.apb0.apb0_traceconfig55c_traceportspeed_read()?,
        ));
        _value |=
            u32::from(u8::from(self.apb0.apb0_traceconfig55c_tracemux_read()?))
                << 16u32;
        Ok(_value)
    }
    #[doc = "Write apb0_traceconfig55c from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_traceconfig55c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_traceconfig55c_traceportspeed_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_traceconfig55c_tracemux_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_dcdcen578 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_dcdcen578_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_dcdcen578_dcdcen_read()?);
        Ok(_value)
    }
    #[doc = "Write apb0_dcdcen578 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_dcdcen578_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_dcdcen578_dcdcen_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_config0600 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_config0600_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_config0600_region0_read()?);
        _value |= u32::from(self.apb0.apb0_config0600_region1_read()?) << 1u32;
        _value |= u32::from(self.apb0.apb0_config0600_region2_read()?) << 2u32;
        _value |= u32::from(self.apb0.apb0_config0600_region3_read()?) << 3u32;
        _value |= u32::from(self.apb0.apb0_config0600_region4_read()?) << 4u32;
        _value |= u32::from(self.apb0.apb0_config0600_region5_read()?) << 5u32;
        _value |= u32::from(self.apb0.apb0_config0600_region6_read()?) << 6u32;
        _value |= u32::from(self.apb0.apb0_config0600_region7_read()?) << 7u32;
        _value |= u32::from(self.apb0.apb0_config0600_region8_read()?) << 8u32;
        _value |= u32::from(self.apb0.apb0_config0600_region9_read()?) << 9u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region10_read()?) << 10u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region11_read()?) << 11u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region12_read()?) << 12u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region13_read()?) << 13u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region14_read()?) << 14u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region15_read()?) << 15u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region16_read()?) << 16u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region17_read()?) << 17u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region18_read()?) << 18u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region19_read()?) << 19u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region20_read()?) << 20u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region21_read()?) << 21u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region22_read()?) << 22u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region23_read()?) << 23u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region24_read()?) << 24u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region25_read()?) << 25u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region26_read()?) << 26u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region27_read()?) << 27u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region28_read()?) << 28u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region29_read()?) << 29u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region30_read()?) << 30u32;
        _value |=
            u32::from(self.apb0.apb0_config0600_region31_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb0_config0600 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_config0600_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config0600_region0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config0600_region1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config0600_region2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config0600_region3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config0600_region4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config0600_region5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config0600_region6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config0600_region7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config0600_region8_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config0600_region9_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config0600_region10_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config0600_region11_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config0600_region12_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config0600_region13_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config0600_region14_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config0600_region15_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config0600_region16_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config0600_region17_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config0600_region18_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config0600_region19_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config0600_region20_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config0600_region21_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config0600_region22_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config0600_region23_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config0600_region24_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config0600_region25_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config0600_region26_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config0600_region27_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config0600_region28_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config0600_region29_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config0600_region30_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config0600_region31_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_config1604 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_config1604_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_config1604_region32_read()?);
        _value |= u32::from(self.apb0.apb0_config1604_region33_read()?) << 1u32;
        _value |= u32::from(self.apb0.apb0_config1604_region34_read()?) << 2u32;
        _value |= u32::from(self.apb0.apb0_config1604_region35_read()?) << 3u32;
        _value |= u32::from(self.apb0.apb0_config1604_region36_read()?) << 4u32;
        _value |= u32::from(self.apb0.apb0_config1604_region37_read()?) << 5u32;
        _value |= u32::from(self.apb0.apb0_config1604_region38_read()?) << 6u32;
        _value |= u32::from(self.apb0.apb0_config1604_region39_read()?) << 7u32;
        _value |= u32::from(self.apb0.apb0_config1604_region40_read()?) << 8u32;
        _value |= u32::from(self.apb0.apb0_config1604_region41_read()?) << 9u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region42_read()?) << 10u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region43_read()?) << 11u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region44_read()?) << 12u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region45_read()?) << 13u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region46_read()?) << 14u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region47_read()?) << 15u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region48_read()?) << 16u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region49_read()?) << 17u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region50_read()?) << 18u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region51_read()?) << 19u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region52_read()?) << 20u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region53_read()?) << 21u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region54_read()?) << 22u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region55_read()?) << 23u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region56_read()?) << 24u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region57_read()?) << 25u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region58_read()?) << 26u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region59_read()?) << 27u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region60_read()?) << 28u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region61_read()?) << 29u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region62_read()?) << 30u32;
        _value |=
            u32::from(self.apb0.apb0_config1604_region63_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb0_config1604 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_config1604_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config1604_region32_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config1604_region33_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config1604_region34_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config1604_region35_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config1604_region36_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config1604_region37_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config1604_region38_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config1604_region39_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config1604_region40_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config1604_region41_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config1604_region42_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config1604_region43_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config1604_region44_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config1604_region45_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config1604_region46_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config1604_region47_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config1604_region48_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config1604_region49_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config1604_region50_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config1604_region51_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config1604_region52_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config1604_region53_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config1604_region54_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config1604_region55_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config1604_region56_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config1604_region57_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config1604_region58_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config1604_region59_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config1604_region60_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config1604_region61_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config1604_region62_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config1604_region63_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_disableindebug608 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_disableindebug608_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.apb0.apb0_disableindebug608_disableindebug_read()?);
        Ok(_value)
    }
    #[doc = "Write apb0_disableindebug608 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_disableindebug608_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_disableindebug608_disableindebug_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_unused060c from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_unused060c_read(&mut self) -> MemResult<u32> {
        self.apb0.apb0_unused060c_read()
    }
    #[doc = "Write apb0_unused060c from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_unused060c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb0.apb0_unused060c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb0_config2610 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_config2610_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_config2610_region64_read()?);
        _value |= u32::from(self.apb0.apb0_config2610_region65_read()?) << 1u32;
        _value |= u32::from(self.apb0.apb0_config2610_region66_read()?) << 2u32;
        _value |= u32::from(self.apb0.apb0_config2610_region67_read()?) << 3u32;
        _value |= u32::from(self.apb0.apb0_config2610_region68_read()?) << 4u32;
        _value |= u32::from(self.apb0.apb0_config2610_region69_read()?) << 5u32;
        _value |= u32::from(self.apb0.apb0_config2610_region70_read()?) << 6u32;
        _value |= u32::from(self.apb0.apb0_config2610_region71_read()?) << 7u32;
        _value |= u32::from(self.apb0.apb0_config2610_region72_read()?) << 8u32;
        _value |= u32::from(self.apb0.apb0_config2610_region73_read()?) << 9u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region74_read()?) << 10u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region75_read()?) << 11u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region76_read()?) << 12u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region77_read()?) << 13u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region78_read()?) << 14u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region79_read()?) << 15u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region80_read()?) << 16u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region81_read()?) << 17u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region82_read()?) << 18u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region83_read()?) << 19u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region84_read()?) << 20u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region85_read()?) << 21u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region86_read()?) << 22u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region87_read()?) << 23u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region88_read()?) << 24u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region89_read()?) << 25u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region90_read()?) << 26u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region91_read()?) << 27u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region92_read()?) << 28u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region93_read()?) << 29u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region94_read()?) << 30u32;
        _value |=
            u32::from(self.apb0.apb0_config2610_region95_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb0_config2610 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_config2610_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config2610_region64_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config2610_region65_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config2610_region66_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config2610_region67_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config2610_region68_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config2610_region69_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config2610_region70_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config2610_region71_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config2610_region72_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config2610_region73_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config2610_region74_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config2610_region75_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config2610_region76_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config2610_region77_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config2610_region78_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config2610_region79_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config2610_region80_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config2610_region81_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config2610_region82_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config2610_region83_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config2610_region84_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config2610_region85_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config2610_region86_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config2610_region87_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config2610_region88_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config2610_region89_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config2610_region90_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config2610_region91_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config2610_region92_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config2610_region93_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config2610_region94_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config2610_region95_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_config3614 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_config3614_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb0.apb0_config3614_region96_read()?);
        _value |= u32::from(self.apb0.apb0_config3614_region97_read()?) << 1u32;
        _value |= u32::from(self.apb0.apb0_config3614_region98_read()?) << 2u32;
        _value |= u32::from(self.apb0.apb0_config3614_region99_read()?) << 3u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region100_read()?) << 4u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region101_read()?) << 5u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region102_read()?) << 6u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region103_read()?) << 7u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region104_read()?) << 8u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region105_read()?) << 9u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region106_read()?) << 10u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region107_read()?) << 11u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region108_read()?) << 12u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region109_read()?) << 13u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region110_read()?) << 14u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region111_read()?) << 15u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region112_read()?) << 16u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region113_read()?) << 17u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region114_read()?) << 18u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region115_read()?) << 19u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region116_read()?) << 20u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region117_read()?) << 21u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region118_read()?) << 22u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region119_read()?) << 23u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region120_read()?) << 24u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region121_read()?) << 25u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region122_read()?) << 26u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region123_read()?) << 27u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region124_read()?) << 28u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region125_read()?) << 29u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region126_read()?) << 30u32;
        _value |=
            u32::from(self.apb0.apb0_config3614_region127_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb0_config3614 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_config3614_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config3614_region96_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config3614_region97_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config3614_region98_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config3614_region99_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config3614_region100_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config3614_region101_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config3614_region102_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_config3614_region103_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config3614_region104_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config3614_region105_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config3614_region106_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config3614_region107_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config3614_region108_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config3614_region109_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config3614_region110_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb0.apb0_config3614_region111_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config3614_region112_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config3614_region113_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config3614_region114_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config3614_region115_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config3614_region116_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config3614_region117_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config3614_region118_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_config3614_region119_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config3614_region120_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config3614_region121_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config3614_region122_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config3614_region123_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config3614_region124_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config3614_region125_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config3614_region126_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb0.apb0_config3614_region127_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb0_ramn_power0 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_ramn_power0_read(
        &mut self,
        _ramn: usize,
    ) -> MemResult<u32> {
        let mut _value = 65532;
        _value |= u32::from(self.apb0.apb0_ramn_power0_s0power_read(_ramn)?);
        _value |=
            u32::from(self.apb0.apb0_ramn_power0_s1power_read(_ramn)?) << 1u32;
        _value |=
            u32::from(self.apb0.apb0_ramn_power0_s0retention_read(_ramn)?)
                << 16u32;
        _value |=
            u32::from(self.apb0.apb0_ramn_power0_s1retention_read(_ramn)?)
                << 17u32;
        Ok(_value)
    }
    #[doc = "Write apb0_ramn_power0 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_ramn_power0_write(
        &mut self,
        _ramn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_ramn_power0_s0power_write(
                _ramn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_ramn_power0_s1power_write(
                _ramn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_ramn_power0_s0retention_write(
                _ramn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_ramn_power0_s1retention_write(
                _ramn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write apb0_ramn_powerset4 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_ramn_powerset4_write(
        &mut self,
        _ramn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_ramn_powerset4_s0power_write(
                _ramn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_ramn_powerset4_s1power_write(
                _ramn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_ramn_powerset4_s0retention_write(
                _ramn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_ramn_powerset4_s1retention_write(
                _ramn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write apb0_ramn_powerclr8 from [crate::peripheral::apb0::Apb0]"]
    #[inline]
    pub(crate) fn apb0_ramn_powerclr8_write(
        &mut self,
        _ramn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_ramn_powerclr8_s0power_write(
                _ramn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb0.apb0_ramn_powerclr8_s1power_write(
                _ramn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_ramn_powerclr8_s0retention_write(
                _ramn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb0.apb0_ramn_powerclr8_s1retention_write(
                _ramn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write radio_tasks_txen0 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_tasks_txen0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_tasks_txen0_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write radio_tasks_rxen4 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_tasks_rxen4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_tasks_rxen4_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write radio_tasks_start8 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_tasks_start8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_tasks_start8_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write radio_tasks_stopc from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_tasks_stopc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_tasks_stopc_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write radio_tasks_disable10 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_tasks_disable10_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_tasks_disable10_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write radio_tasks_rssistart14 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_tasks_rssistart14_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_tasks_rssistart14_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write radio_tasks_rssistop18 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_tasks_rssistop18_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_tasks_rssistop18_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write radio_tasks_bcstart1c from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_tasks_bcstart1c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_tasks_bcstart1c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write radio_tasks_bcstop20 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_tasks_bcstop20_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_tasks_bcstop20_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read radio_events_ready100 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_ready100_read(&mut self) -> MemResult<u32> {
        self.radio.radio_events_ready100_read()
    }
    #[doc = "Write radio_events_ready100 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_ready100_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_events_ready100_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read radio_events_address104 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_address104_read(&mut self) -> MemResult<u32> {
        self.radio.radio_events_address104_read()
    }
    #[doc = "Write radio_events_address104 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_address104_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_events_address104_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read radio_events_payload108 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_payload108_read(&mut self) -> MemResult<u32> {
        self.radio.radio_events_payload108_read()
    }
    #[doc = "Write radio_events_payload108 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_payload108_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_events_payload108_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read radio_events_end10c from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_end10c_read(&mut self) -> MemResult<u32> {
        self.radio.radio_events_end10c_read()
    }
    #[doc = "Write radio_events_end10c from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_end10c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_events_end10c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read radio_events_disabled110 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_disabled110_read(&mut self) -> MemResult<u32> {
        self.radio.radio_events_disabled110_read()
    }
    #[doc = "Write radio_events_disabled110 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_disabled110_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio
            .radio_events_disabled110_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read radio_events_devmatch114 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_devmatch114_read(&mut self) -> MemResult<u32> {
        self.radio.radio_events_devmatch114_read()
    }
    #[doc = "Write radio_events_devmatch114 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_devmatch114_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio
            .radio_events_devmatch114_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read radio_events_devmiss118 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_devmiss118_read(&mut self) -> MemResult<u32> {
        self.radio.radio_events_devmiss118_read()
    }
    #[doc = "Write radio_events_devmiss118 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_devmiss118_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_events_devmiss118_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read radio_events_rssiend11c from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_rssiend11c_read(&mut self) -> MemResult<u32> {
        self.radio.radio_events_rssiend11c_read()
    }
    #[doc = "Write radio_events_rssiend11c from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_rssiend11c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_events_rssiend11c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read radio_events_bcmatch128 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_bcmatch128_read(&mut self) -> MemResult<u32> {
        self.radio.radio_events_bcmatch128_read()
    }
    #[doc = "Write radio_events_bcmatch128 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_bcmatch128_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_events_bcmatch128_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read radio_events_crcok130 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_crcok130_read(&mut self) -> MemResult<u32> {
        self.radio.radio_events_crcok130_read()
    }
    #[doc = "Write radio_events_crcok130 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_crcok130_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_events_crcok130_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read radio_events_crcerror134 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_crcerror134_read(&mut self) -> MemResult<u32> {
        self.radio.radio_events_crcerror134_read()
    }
    #[doc = "Write radio_events_crcerror134 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_events_crcerror134_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio
            .radio_events_crcerror134_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read radio_shorts200 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_shorts200_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_shorts200_ready_start_read()?);
        _value |=
            u32::from(self.radio.radio_shorts200_end_disable_read()?) << 1u32;
        _value |=
            u32::from(self.radio.radio_shorts200_disabled_txen_read()?) << 2u32;
        _value |=
            u32::from(self.radio.radio_shorts200_disabled_rxen_read()?) << 3u32;
        _value |=
            u32::from(self.radio.radio_shorts200_address_rssistart_read()?)
                << 4u32;
        _value |=
            u32::from(self.radio.radio_shorts200_end_start_read()?) << 5u32;
        _value |= u32::from(self.radio.radio_shorts200_address_bcstart_read()?)
            << 6u32;
        _value |=
            u32::from(self.radio.radio_shorts200_disabled_rssistop_read()?)
                << 8u32;
        Ok(_value)
    }
    #[doc = "Write radio_shorts200 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_shorts200_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_shorts200_ready_start_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_shorts200_end_disable_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_shorts200_disabled_txen_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_shorts200_disabled_rxen_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_shorts200_address_rssistart_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_shorts200_end_start_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_shorts200_address_bcstart_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_shorts200_disabled_rssistop_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_intenset304 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_intenset304_ready_read()?);
        _value |=
            u32::from(self.radio.radio_intenset304_address_read()?) << 1u32;
        _value |=
            u32::from(self.radio.radio_intenset304_payload_read()?) << 2u32;
        _value |= u32::from(self.radio.radio_intenset304_end_read()?) << 3u32;
        _value |=
            u32::from(self.radio.radio_intenset304_disabled_read()?) << 4u32;
        _value |=
            u32::from(self.radio.radio_intenset304_devmatch_read()?) << 5u32;
        _value |=
            u32::from(self.radio.radio_intenset304_devmiss_read()?) << 6u32;
        _value |=
            u32::from(self.radio.radio_intenset304_rssiend_read()?) << 7u32;
        _value |=
            u32::from(self.radio.radio_intenset304_bcmatch_read()?) << 10u32;
        _value |=
            u32::from(self.radio.radio_intenset304_crcok_read()?) << 12u32;
        _value |=
            u32::from(self.radio.radio_intenset304_crcerror_read()?) << 13u32;
        Ok(_value)
    }
    #[doc = "Write radio_intenset304 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenset304_ready_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenset304_address_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenset304_payload_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenset304_end_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenset304_disabled_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenset304_devmatch_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenset304_devmiss_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenset304_rssiend_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_intenset304_bcmatch_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_intenset304_crcok_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_intenset304_crcerror_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_intenclr308 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_intenclr308_ready_read()?);
        _value |=
            u32::from(self.radio.radio_intenclr308_address_read()?) << 1u32;
        _value |=
            u32::from(self.radio.radio_intenclr308_payload_read()?) << 2u32;
        _value |= u32::from(self.radio.radio_intenclr308_end_read()?) << 3u32;
        _value |=
            u32::from(self.radio.radio_intenclr308_disabled_read()?) << 4u32;
        _value |=
            u32::from(self.radio.radio_intenclr308_devmatch_read()?) << 5u32;
        _value |=
            u32::from(self.radio.radio_intenclr308_devmiss_read()?) << 6u32;
        _value |=
            u32::from(self.radio.radio_intenclr308_rssiend_read()?) << 7u32;
        _value |=
            u32::from(self.radio.radio_intenclr308_bcmatch_read()?) << 10u32;
        _value |=
            u32::from(self.radio.radio_intenclr308_crcok_read()?) << 12u32;
        _value |=
            u32::from(self.radio.radio_intenclr308_crcerror_read()?) << 13u32;
        Ok(_value)
    }
    #[doc = "Write radio_intenclr308 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenclr308_ready_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenclr308_address_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenclr308_payload_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenclr308_end_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenclr308_disabled_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenclr308_devmatch_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenclr308_devmiss_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_intenclr308_rssiend_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_intenclr308_bcmatch_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_intenclr308_crcok_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_intenclr308_crcerror_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_crcstatus400 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_crcstatus400_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_crcstatus400_crcstatus_read()?);
        Ok(_value)
    }
    #[doc = "Read radio_rxmatch408 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_rxmatch408_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_rxmatch408_rxmatch_read()?);
        Ok(_value)
    }
    #[doc = "Read radio_rxcrc40c from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_rxcrc40c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_rxcrc40c_rxcrc_read()?);
        Ok(_value)
    }
    #[doc = "Read radio_dai410 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_dai410_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_dai410_dai_read()?);
        Ok(_value)
    }
    #[doc = "Read radio_packetptr504 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_packetptr504_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_packetptr504_packetptr_read()?);
        Ok(_value)
    }
    #[doc = "Write radio_packetptr504 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_packetptr504_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.radio.radio_packetptr504_packetptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read radio_frequency508 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_frequency508_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_frequency508_frequency_read()?);
        _value |= u32::from(self.radio.radio_frequency508_map_read()?) << 8u32;
        Ok(_value)
    }
    #[doc = "Write radio_frequency508 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_frequency508_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_frequency508_frequency_write(
                ((_value[_i] >> 0) & 127u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_frequency508_map_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_txpower50c from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_txpower50c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.radio.radio_txpower50c_txpower_read()?));
        Ok(_value)
    }
    #[doc = "Write radio_txpower50c from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_txpower50c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_txpower50c_txpower_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_mode510 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_mode510_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.radio.radio_mode510_mode_read()?));
        Ok(_value)
    }
    #[doc = "Write radio_mode510 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_mode510_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_mode510_mode_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_pcnf0514 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_pcnf0514_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_pcnf0514_lflen_read()?);
        _value |= u32::from(self.radio.radio_pcnf0514_s0len_read()?) << 8u32;
        _value |= u32::from(self.radio.radio_pcnf0514_s1len_read()?) << 16u32;
        _value |= u32::from(self.radio.radio_pcnf0514_s1incl_read()?) << 20u32;
        _value |= u32::from(self.radio.radio_pcnf0514_plen_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write radio_pcnf0514 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_pcnf0514_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_pcnf0514_lflen_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_pcnf0514_s0len_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.radio.radio_pcnf0514_s1len_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.radio.radio_pcnf0514_s1incl_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.radio.radio_pcnf0514_plen_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_pcnf1518 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_pcnf1518_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_pcnf1518_maxlen_read()?);
        _value |= u32::from(self.radio.radio_pcnf1518_statlen_read()?) << 8u32;
        _value |= u32::from(self.radio.radio_pcnf1518_balen_read()?) << 16u32;
        _value |= u32::from(self.radio.radio_pcnf1518_endian_read()?) << 24u32;
        _value |= u32::from(self.radio.radio_pcnf1518_whiteen_read()?) << 25u32;
        Ok(_value)
    }
    #[doc = "Write radio_pcnf1518 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_pcnf1518_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_pcnf1518_maxlen_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_pcnf1518_statlen_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.radio.radio_pcnf1518_balen_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.radio.radio_pcnf1518_endian_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.radio.radio_pcnf1518_whiteen_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_base051c from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_base051c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_base051c_base0_read()?);
        Ok(_value)
    }
    #[doc = "Write radio_base051c from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_base051c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.radio.radio_base051c_base0_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read radio_base1520 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_base1520_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_base1520_base1_read()?);
        Ok(_value)
    }
    #[doc = "Write radio_base1520 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_base1520_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.radio.radio_base1520_base1_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read radio_prefix0524 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_prefix0524_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_prefix0524_ap0_read()?);
        _value |= u32::from(self.radio.radio_prefix0524_ap1_read()?) << 8u32;
        _value |= u32::from(self.radio.radio_prefix0524_ap2_read()?) << 16u32;
        _value |= u32::from(self.radio.radio_prefix0524_ap3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write radio_prefix0524 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_prefix0524_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_prefix0524_ap0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_prefix0524_ap1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.radio.radio_prefix0524_ap2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.radio.radio_prefix0524_ap3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_prefix1528 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_prefix1528_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_prefix1528_ap4_read()?);
        _value |= u32::from(self.radio.radio_prefix1528_ap5_read()?) << 8u32;
        _value |= u32::from(self.radio.radio_prefix1528_ap6_read()?) << 16u32;
        _value |= u32::from(self.radio.radio_prefix1528_ap7_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write radio_prefix1528 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_prefix1528_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_prefix1528_ap4_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_prefix1528_ap5_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.radio.radio_prefix1528_ap6_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.radio.radio_prefix1528_ap7_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_txaddress52c from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_txaddress52c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_txaddress52c_txaddress_read()?);
        Ok(_value)
    }
    #[doc = "Write radio_txaddress52c from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_txaddress52c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_txaddress52c_txaddress_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_rxaddresses530 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_rxaddresses530_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_rxaddresses530_addr0_read()?);
        _value |=
            u32::from(self.radio.radio_rxaddresses530_addr1_read()?) << 1u32;
        _value |=
            u32::from(self.radio.radio_rxaddresses530_addr2_read()?) << 2u32;
        _value |=
            u32::from(self.radio.radio_rxaddresses530_addr3_read()?) << 3u32;
        _value |=
            u32::from(self.radio.radio_rxaddresses530_addr4_read()?) << 4u32;
        _value |=
            u32::from(self.radio.radio_rxaddresses530_addr5_read()?) << 5u32;
        _value |=
            u32::from(self.radio.radio_rxaddresses530_addr6_read()?) << 6u32;
        _value |=
            u32::from(self.radio.radio_rxaddresses530_addr7_read()?) << 7u32;
        Ok(_value)
    }
    #[doc = "Write radio_rxaddresses530 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_rxaddresses530_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_rxaddresses530_addr0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_rxaddresses530_addr1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_rxaddresses530_addr2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_rxaddresses530_addr3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_rxaddresses530_addr4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_rxaddresses530_addr5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_rxaddresses530_addr6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_rxaddresses530_addr7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_crccnf534 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_crccnf534_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.radio.radio_crccnf534_len_read()?));
        _value |=
            u32::from(self.radio.radio_crccnf534_skipaddr_read()?) << 8u32;
        Ok(_value)
    }
    #[doc = "Write radio_crccnf534 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_crccnf534_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_crccnf534_len_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_crccnf534_skipaddr_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_crcpoly538 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_crcpoly538_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_crcpoly538_crcpoly_read()?);
        Ok(_value)
    }
    #[doc = "Write radio_crcpoly538 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_crcpoly538_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 3 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 3;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.radio.radio_crcpoly538_crcpoly_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 3) || (_end > 0 && _end < 3) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read radio_crcinit53c from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_crcinit53c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_crcinit53c_crcinit_read()?);
        Ok(_value)
    }
    #[doc = "Write radio_crcinit53c from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_crcinit53c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 3 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 3;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.radio.radio_crcinit53c_crcinit_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 3) || (_end > 0 && _end < 3) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read radio_unused0540 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_unused0540_read(&mut self) -> MemResult<u32> {
        self.radio.radio_unused0540_read()
    }
    #[doc = "Write radio_unused0540 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_unused0540_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.radio.radio_unused0540_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read radio_tifs544 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_tifs544_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_tifs544_tifs_read()?);
        Ok(_value)
    }
    #[doc = "Write radio_tifs544 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_tifs544_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_tifs544_tifs_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_rssisample548 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_rssisample548_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_rssisample548_rssisample_read()?);
        Ok(_value)
    }
    #[doc = "Read radio_state550 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_state550_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.radio.radio_state550_state_read()?));
        Ok(_value)
    }
    #[doc = "Read radio_datawhiteiv554 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_datawhiteiv554_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.radio.radio_datawhiteiv554_datawhiteiv_read()?);
        Ok(_value)
    }
    #[doc = "Write radio_datawhiteiv554 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_datawhiteiv554_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_datawhiteiv554_datawhiteiv_write(
                ((_value[_i] >> 0) & 127u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_bcc560 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_bcc560_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_bcc560_bcc_read()?);
        Ok(_value)
    }
    #[doc = "Write radio_bcc560 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_bcc560_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.radio.radio_bcc560_bcc_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read radio_dabn600 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_dabn600_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_dabn600_dab_read(_reg_array)?);
        Ok(_value)
    }
    #[doc = "Write radio_dabn600 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_dabn600_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.radio.radio_dabn600_dab_write(
                _reg_array,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read radio_dapn620 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_dapn620_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_dapn620_dap_read(_reg_array)?);
        Ok(_value)
    }
    #[doc = "Write radio_dapn620 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_dapn620_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 2;
            let _value = u16::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.radio.radio_dapn620_dap_write(
                _reg_array,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read radio_dacnf640 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_dacnf640_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_dacnf640_ena0_read()?);
        _value |= u32::from(self.radio.radio_dacnf640_ena1_read()?) << 1u32;
        _value |= u32::from(self.radio.radio_dacnf640_ena2_read()?) << 2u32;
        _value |= u32::from(self.radio.radio_dacnf640_ena3_read()?) << 3u32;
        _value |= u32::from(self.radio.radio_dacnf640_ena4_read()?) << 4u32;
        _value |= u32::from(self.radio.radio_dacnf640_ena5_read()?) << 5u32;
        _value |= u32::from(self.radio.radio_dacnf640_ena6_read()?) << 6u32;
        _value |= u32::from(self.radio.radio_dacnf640_ena7_read()?) << 7u32;
        _value |= u32::from(self.radio.radio_dacnf640_txadd0_read()?) << 8u32;
        _value |= u32::from(self.radio.radio_dacnf640_txadd1_read()?) << 9u32;
        _value |= u32::from(self.radio.radio_dacnf640_txadd2_read()?) << 10u32;
        _value |= u32::from(self.radio.radio_dacnf640_txadd3_read()?) << 11u32;
        _value |= u32::from(self.radio.radio_dacnf640_txadd4_read()?) << 12u32;
        _value |= u32::from(self.radio.radio_dacnf640_txadd5_read()?) << 13u32;
        _value |= u32::from(self.radio.radio_dacnf640_txadd6_read()?) << 14u32;
        _value |= u32::from(self.radio.radio_dacnf640_txadd7_read()?) << 15u32;
        Ok(_value)
    }
    #[doc = "Write radio_dacnf640 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_dacnf640_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_dacnf640_ena0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_dacnf640_ena1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_dacnf640_ena2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_dacnf640_ena3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_dacnf640_ena4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_dacnf640_ena5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_dacnf640_ena6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_dacnf640_ena7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_dacnf640_txadd0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_dacnf640_txadd1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_dacnf640_txadd2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_dacnf640_txadd3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_dacnf640_txadd4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_dacnf640_txadd5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_dacnf640_txadd6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_dacnf640_txadd7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_modecnf0650 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_modecnf0650_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_modecnf0650_ru_read()?);
        _value |= u32::from(u8::from(self.radio.radio_modecnf0650_dtx_read()?))
            << 8u32;
        Ok(_value)
    }
    #[doc = "Write radio_modecnf0650 from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_modecnf0650_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_modecnf0650_ru_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.radio.radio_modecnf0650_dtx_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read radio_powerffc from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_powerffc_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.radio.radio_powerffc_power_read()?);
        Ok(_value)
    }
    #[doc = "Write radio_powerffc from [crate::peripheral::radio::Radio]"]
    #[inline]
    pub(crate) fn radio_powerffc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.radio.radio_powerffc_power_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write apb2_tasks_startrx0 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_tasks_startrx0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_tasks_startrx0_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb2_tasks_stoprx4 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_tasks_stoprx4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_tasks_stoprx4_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb2_tasks_starttx8 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_tasks_starttx8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_tasks_starttx8_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb2_tasks_stoptxc from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_tasks_stoptxc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_tasks_stoptxc_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb2_tasks_suspend1c from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_tasks_suspend1c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_tasks_suspend1c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb2_tasks_flushrx2c from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_tasks_flushrx2c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_tasks_flushrx2c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb2_events_cts100 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_cts100_read(&mut self) -> MemResult<u32> {
        self.apb2.apb2_events_cts100_read()
    }
    #[doc = "Write apb2_events_cts100 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_cts100_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_events_cts100_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb2_events_ncts104 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_ncts104_read(&mut self) -> MemResult<u32> {
        self.apb2.apb2_events_ncts104_read()
    }
    #[doc = "Write apb2_events_ncts104 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_ncts104_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_events_ncts104_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb2_events_rxdrdy108 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_rxdrdy108_read(&mut self) -> MemResult<u32> {
        self.apb2.apb2_events_rxdrdy108_read()
    }
    #[doc = "Write apb2_events_rxdrdy108 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_rxdrdy108_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_events_rxdrdy108_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb2_events_endrx110 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_endrx110_read(&mut self) -> MemResult<u32> {
        self.apb2.apb2_events_endrx110_read()
    }
    #[doc = "Write apb2_events_endrx110 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_endrx110_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_events_endrx110_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb2_events_txdrdy11c from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_txdrdy11c_read(&mut self) -> MemResult<u32> {
        self.apb2.apb2_events_txdrdy11c_read()
    }
    #[doc = "Write apb2_events_txdrdy11c from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_txdrdy11c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_events_txdrdy11c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb2_events_endtx120 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_endtx120_read(&mut self) -> MemResult<u32> {
        self.apb2.apb2_events_endtx120_read()
    }
    #[doc = "Write apb2_events_endtx120 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_endtx120_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_events_endtx120_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb2_events_error124 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_error124_read(&mut self) -> MemResult<u32> {
        self.apb2.apb2_events_error124_read()
    }
    #[doc = "Write apb2_events_error124 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_error124_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_events_error124_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb2_events_rxto144 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_rxto144_read(&mut self) -> MemResult<u32> {
        self.apb2.apb2_events_rxto144_read()
    }
    #[doc = "Write apb2_events_rxto144 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_rxto144_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_events_rxto144_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb2_events_rxstarted14c from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_rxstarted14c_read(&mut self) -> MemResult<u32> {
        self.apb2.apb2_events_rxstarted14c_read()
    }
    #[doc = "Write apb2_events_rxstarted14c from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_rxstarted14c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_events_rxstarted14c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb2_events_txstarted150 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_txstarted150_read(&mut self) -> MemResult<u32> {
        self.apb2.apb2_events_txstarted150_read()
    }
    #[doc = "Write apb2_events_txstarted150 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_txstarted150_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_events_txstarted150_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb2_events_txstopped158 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_txstopped158_read(&mut self) -> MemResult<u32> {
        self.apb2.apb2_events_txstopped158_read()
    }
    #[doc = "Write apb2_events_txstopped158 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_events_txstopped158_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb2.apb2_events_txstopped158_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb2_shorts200 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_shorts200_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.apb2.apb2_shorts200_cts_startrx_read()?) << 3u32;
        _value |=
            u32::from(self.apb2.apb2_shorts200_ncts_stoprx_read()?) << 4u32;
        _value |=
            u32::from(self.apb2.apb2_shorts200_endrx_startrx_read()?) << 5u32;
        _value |=
            u32::from(self.apb2.apb2_shorts200_endrx_stoprx_read()?) << 6u32;
        Ok(_value)
    }
    #[doc = "Write apb2_shorts200 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_shorts200_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_shorts200_cts_startrx_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_shorts200_ncts_stoprx_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_shorts200_endrx_startrx_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_shorts200_endrx_stoprx_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb2_inten300 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_inten300_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_inten300_cts_read()?);
        _value |= u32::from(self.apb2.apb2_inten300_ncts_read()?) << 1u32;
        _value |= u32::from(self.apb2.apb2_inten300_rxdrdy_read()?) << 2u32;
        _value |= u32::from(self.apb2.apb2_inten300_endrx_read()?) << 4u32;
        _value |= u32::from(self.apb2.apb2_inten300_txdrdy_read()?) << 7u32;
        _value |= u32::from(self.apb2.apb2_inten300_endtx_read()?) << 8u32;
        _value |= u32::from(self.apb2.apb2_inten300_error_read()?) << 9u32;
        _value |= u32::from(self.apb2.apb2_inten300_rxto_read()?) << 17u32;
        _value |= u32::from(self.apb2.apb2_inten300_rxstarted_read()?) << 19u32;
        _value |= u32::from(self.apb2.apb2_inten300_txstarted_read()?) << 20u32;
        _value |= u32::from(self.apb2.apb2_inten300_txstopped_read()?) << 22u32;
        Ok(_value)
    }
    #[doc = "Write apb2_inten300 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_inten300_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_inten300_cts_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_inten300_ncts_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_inten300_rxdrdy_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_inten300_endrx_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_inten300_txdrdy_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb2.apb2_inten300_endtx_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb2.apb2_inten300_error_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb2.apb2_inten300_rxto_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb2.apb2_inten300_rxstarted_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb2.apb2_inten300_txstarted_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb2.apb2_inten300_txstopped_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb2_intenset304 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_intenset304_cts_read()?);
        _value |= u32::from(self.apb2.apb2_intenset304_ncts_read()?) << 1u32;
        _value |= u32::from(self.apb2.apb2_intenset304_rxdrdy_read()?) << 2u32;
        _value |= u32::from(self.apb2.apb2_intenset304_endrx_read()?) << 4u32;
        _value |= u32::from(self.apb2.apb2_intenset304_txdrdy_read()?) << 7u32;
        _value |= u32::from(self.apb2.apb2_intenset304_endtx_read()?) << 8u32;
        _value |= u32::from(self.apb2.apb2_intenset304_error_read()?) << 9u32;
        _value |= u32::from(self.apb2.apb2_intenset304_rxto_read()?) << 17u32;
        _value |=
            u32::from(self.apb2.apb2_intenset304_rxstarted_read()?) << 19u32;
        _value |=
            u32::from(self.apb2.apb2_intenset304_txstarted_read()?) << 20u32;
        _value |=
            u32::from(self.apb2.apb2_intenset304_txstopped_read()?) << 22u32;
        Ok(_value)
    }
    #[doc = "Write apb2_intenset304 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_intenset304_cts_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_intenset304_ncts_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_intenset304_rxdrdy_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_intenset304_endrx_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_intenset304_txdrdy_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb2.apb2_intenset304_endtx_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb2.apb2_intenset304_error_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb2.apb2_intenset304_rxto_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb2.apb2_intenset304_rxstarted_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb2.apb2_intenset304_txstarted_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb2.apb2_intenset304_txstopped_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb2_intenclr308 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_intenclr308_cts_read()?);
        _value |= u32::from(self.apb2.apb2_intenclr308_ncts_read()?) << 1u32;
        _value |= u32::from(self.apb2.apb2_intenclr308_rxdrdy_read()?) << 2u32;
        _value |= u32::from(self.apb2.apb2_intenclr308_endrx_read()?) << 4u32;
        _value |= u32::from(self.apb2.apb2_intenclr308_txdrdy_read()?) << 7u32;
        _value |= u32::from(self.apb2.apb2_intenclr308_endtx_read()?) << 8u32;
        _value |= u32::from(self.apb2.apb2_intenclr308_error_read()?) << 9u32;
        _value |= u32::from(self.apb2.apb2_intenclr308_rxto_read()?) << 17u32;
        _value |=
            u32::from(self.apb2.apb2_intenclr308_rxstarted_read()?) << 19u32;
        _value |=
            u32::from(self.apb2.apb2_intenclr308_txstarted_read()?) << 20u32;
        _value |=
            u32::from(self.apb2.apb2_intenclr308_txstopped_read()?) << 22u32;
        Ok(_value)
    }
    #[doc = "Write apb2_intenclr308 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_intenclr308_cts_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_intenclr308_ncts_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_intenclr308_rxdrdy_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_intenclr308_endrx_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_intenclr308_txdrdy_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb2.apb2_intenclr308_endtx_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb2.apb2_intenclr308_error_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb2.apb2_intenclr308_rxto_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb2.apb2_intenclr308_rxstarted_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb2.apb2_intenclr308_txstarted_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb2.apb2_intenclr308_txstopped_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb2_errorsrc480 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_errorsrc480_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_errorsrc480_overrun_read()?);
        _value |= u32::from(self.apb2.apb2_errorsrc480_parity_read()?) << 1u32;
        _value |= u32::from(self.apb2.apb2_errorsrc480_framing_read()?) << 2u32;
        _value |= u32::from(self.apb2.apb2_errorsrc480_break_read()?) << 3u32;
        Ok(_value)
    }
    #[doc = "Write apb2_errorsrc480 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_errorsrc480_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_errorsrc480_overrun_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_errorsrc480_parity_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_errorsrc480_framing_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_errorsrc480_break_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb2_enable500 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_enable500_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.apb2.apb2_enable500_enable_read()?));
        Ok(_value)
    }
    #[doc = "Write apb2_enable500 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_enable500_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_enable500_enable_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb2_psel_rts0 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_psel_rts0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_psel_rts0_pin_read()?);
        _value |= u32::from(self.apb2.apb2_psel_rts0_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb2_psel_rts0 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_psel_rts0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_psel_rts0_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb2.apb2_psel_rts0_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb2_psel_txd4 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_psel_txd4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_psel_txd4_pin_read()?);
        _value |= u32::from(self.apb2.apb2_psel_txd4_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb2_psel_txd4 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_psel_txd4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_psel_txd4_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb2.apb2_psel_txd4_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb2_psel_cts8 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_psel_cts8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_psel_cts8_pin_read()?);
        _value |= u32::from(self.apb2.apb2_psel_cts8_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb2_psel_cts8 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_psel_cts8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_psel_cts8_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb2.apb2_psel_cts8_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb2_psel_rxdc from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_psel_rxdc_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_psel_rxdc_pin_read()?);
        _value |= u32::from(self.apb2.apb2_psel_rxdc_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb2_psel_rxdc from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_psel_rxdc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_psel_rxdc_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb2.apb2_psel_rxdc_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb2_rxd518 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_rxd518_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_rxd518_rxd_read()?);
        Ok(_value)
    }
    #[doc = "Write apb2_txd51c from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_txd51c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_txd51c_txd_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb2_baudrate524 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_baudrate524_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u32::from(self.apb2.apb2_baudrate524_baudrate_read()?));
        Ok(_value)
    }
    #[doc = "Write apb2_baudrate524 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_baudrate524_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.apb2.apb2_baudrate524_baudrate_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read apb2_rxd_ptr0 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_rxd_ptr0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_rxd_ptr0_ptr_read()?);
        Ok(_value)
    }
    #[doc = "Write apb2_rxd_ptr0 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_rxd_ptr0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.apb2.apb2_rxd_ptr0_ptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read apb2_rxd_maxcnt4 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_rxd_maxcnt4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_rxd_maxcnt4_maxcnt_read()?);
        Ok(_value)
    }
    #[doc = "Write apb2_rxd_maxcnt4 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_rxd_maxcnt4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_rxd_maxcnt4_maxcnt_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb2_rxd_amount8 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_rxd_amount8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_rxd_amount8_amount_read()?);
        Ok(_value)
    }
    #[doc = "Read apb2_txd_ptr0 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_txd_ptr0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_txd_ptr0_ptr_read()?);
        Ok(_value)
    }
    #[doc = "Write apb2_txd_ptr0 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_txd_ptr0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.apb2.apb2_txd_ptr0_ptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read apb2_txd_maxcnt4 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_txd_maxcnt4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_txd_maxcnt4_maxcnt_read()?);
        Ok(_value)
    }
    #[doc = "Write apb2_txd_maxcnt4 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_txd_maxcnt4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_txd_maxcnt4_maxcnt_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb2_txd_amount8 from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_txd_amount8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_txd_amount8_amount_read()?);
        Ok(_value)
    }
    #[doc = "Read apb2_config56c from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_config56c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb2.apb2_config56c_hwfc_read()?);
        _value |= u32::from(u8::from(self.apb2.apb2_config56c_parity_read()?))
            << 1u32;
        Ok(_value)
    }
    #[doc = "Write apb2_config56c from [crate::peripheral::apb2::Apb2]"]
    #[inline]
    pub(crate) fn apb2_config56c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_config56c_hwfc_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb2.apb2_config56c_parity_write(
                ((_value[_i] >> 1) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write apb3_tasks_startrx0 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_tasks_startrx0_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_tasks_startrx0_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write apb3_tasks_starttx8 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_tasks_starttx8_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_tasks_starttx8_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write apb3_tasks_start10 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_tasks_start10_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_tasks_start10_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write apb3_tasks_stop14 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_tasks_stop14_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_tasks_stop14_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write apb3_tasks_suspend1c from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_tasks_suspend1c_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_tasks_suspend1c_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write apb3_tasks_resume20 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_tasks_resume20_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_tasks_resume20_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write apb3_tasks_acquire24 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_tasks_acquire24_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_tasks_acquire24_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write apb3_tasks_release28 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_tasks_release28_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_tasks_release28_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write apb3_tasks_preparerx30 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_tasks_preparerx30_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_tasks_preparerx30_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write apb3_tasks_preparetx34 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_tasks_preparetx34_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_tasks_preparetx34_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_stopped104 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_stopped104_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_stopped104_read()
    }
    #[doc = "Write apb3_events_stopped104 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_stopped104_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_stopped104_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_ready108 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_ready108_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_ready108_read()
    }
    #[doc = "Write apb3_events_ready108 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_ready108_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_ready108_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_endrx110 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_endrx110_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_endrx110_read()
    }
    #[doc = "Write apb3_events_endrx110 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_endrx110_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_endrx110_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_end118 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_end118_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_end118_read()
    }
    #[doc = "Write apb3_events_end118 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_end118_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_end118_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_txdsent11c from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_txdsent11c_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_txdsent11c_read()
    }
    #[doc = "Write apb3_events_txdsent11c from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_txdsent11c_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_txdsent11c_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_endtx120 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_endtx120_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_endtx120_read()
    }
    #[doc = "Write apb3_events_endtx120 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_endtx120_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_endtx120_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_error124 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_error124_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_error124_read()
    }
    #[doc = "Write apb3_events_error124 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_error124_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_error124_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_acquired128 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_acquired128_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_acquired128_read()
    }
    #[doc = "Write apb3_events_acquired128 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_acquired128_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_acquired128_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_bb138 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_bb138_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_bb138_read()
    }
    #[doc = "Write apb3_events_bb138 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_bb138_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_bb138_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_suspended148 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_suspended148_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_suspended148_read()
    }
    #[doc = "Write apb3_events_suspended148 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_suspended148_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_suspended148_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_started14c from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_started14c_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_started14c_read()
    }
    #[doc = "Write apb3_events_started14c from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_started14c_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_started14c_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_txstarted150 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_txstarted150_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_txstarted150_read()
    }
    #[doc = "Write apb3_events_txstarted150 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_txstarted150_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_txstarted150_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_lastrx15c from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_lastrx15c_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_lastrx15c_read()
    }
    #[doc = "Write apb3_events_lastrx15c from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_lastrx15c_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_lastrx15c_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_lasttx160 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_lasttx160_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_lasttx160_read()
    }
    #[doc = "Write apb3_events_lasttx160 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_lasttx160_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_lasttx160_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_write164 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_write164_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_write164_read()
    }
    #[doc = "Write apb3_events_write164 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_write164_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_write164_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_events_read168 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_read168_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.apb3[_peripheral_instance].apb3_events_read168_read()
    }
    #[doc = "Write apb3_events_read168 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_events_read168_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb3[_peripheral_instance].apb3_events_read168_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb3_shorts200 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_shorts200_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_shorts200_bb_suspend_read()?,
        );
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_shorts200_bb_stop_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_shorts200_end_acquire_read()?,
        ) << 2u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_shorts200_lasttx_startrx_read()?,
        ) << 7u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_shorts200_lasttx_suspend_read()?,
        ) << 8u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_shorts200_lasttx_stop_read()?,
        ) << 9u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_shorts200_lastrx_starttx_read()?,
        ) << 10u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_shorts200_lastrx_stop_read()?,
        ) << 12u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_shorts200_write_suspend_read()?,
        ) << 13u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_shorts200_read_suspend_read()?,
        ) << 14u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_shorts200_end_start_read()?,
        ) << 17u32;
        Ok(_value)
    }
    #[doc = "Write apb3_shorts200 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_shorts200_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_shorts200_bb_suspend_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_shorts200_bb_stop_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_shorts200_end_acquire_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance]
                .apb3_shorts200_lasttx_startrx_write(
                    ((_value[_i] >> 7) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance]
                .apb3_shorts200_lasttx_suspend_write(
                    ((_value[_i] >> 0) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_shorts200_lasttx_stop_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance]
                .apb3_shorts200_lastrx_starttx_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_shorts200_lastrx_stop_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance]
                .apb3_shorts200_write_suspend_write(
                    ((_value[_i] >> 5) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_shorts200_read_suspend_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_shorts200_end_start_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_inten300 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_inten300_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_inten300_stopped_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_inten300_error_read()?,
        ) << 9u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_inten300_suspended_read()?,
        ) << 18u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_inten300_rxstarted_read()?,
        ) << 19u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_inten300_txstarted_read()?,
        ) << 20u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_inten300_lastrx_read()?,
        ) << 23u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_inten300_lasttx_read()?,
        ) << 24u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_inten300_write_read()?,
        ) << 25u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_inten300_read_read()?,
        ) << 26u32;
        Ok(_value)
    }
    #[doc = "Write apb3_inten300 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_inten300_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_inten300_stopped_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_inten300_error_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_inten300_suspended_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_inten300_rxstarted_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_inten300_txstarted_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_inten300_lastrx_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_inten300_lasttx_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_inten300_write_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_inten300_read_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_intenset304 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_intenset304_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenset304_stopped_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenset304_ready_read()?,
        ) << 2u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenset304_endrx_read()?,
        ) << 4u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenset304_end_read()?,
        ) << 6u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenset304_txdsent_read()?,
        ) << 7u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenset304_endtx_read()?,
        ) << 8u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenset304_error_read()?,
        ) << 9u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenset304_acquired_read()?,
        ) << 10u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenset304_bb_read()?,
        ) << 14u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_intenset304_suspended_read()?,
        ) << 18u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_intenset304_rxstarted_read()?,
        ) << 19u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_intenset304_txstarted_read()?,
        ) << 20u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenset304_lastrx_read()?,
        ) << 23u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenset304_lasttx_read()?,
        ) << 24u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenset304_write_read()?,
        ) << 25u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenset304_read_read()?,
        ) << 26u32;
        Ok(_value)
    }
    #[doc = "Write apb3_intenset304 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_intenset304_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_stopped_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_ready_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_endrx_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_end_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_txdsent_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_endtx_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_error_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_acquired_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_bb_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_suspended_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_rxstarted_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_txstarted_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_lastrx_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_lasttx_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_write_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenset304_read_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_intenclr308 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_intenclr308_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenclr308_stopped_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenclr308_ready_read()?,
        ) << 2u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenclr308_endrx_read()?,
        ) << 4u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenclr308_end_read()?,
        ) << 6u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenclr308_txdsent_read()?,
        ) << 7u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenclr308_endtx_read()?,
        ) << 8u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenclr308_error_read()?,
        ) << 9u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenclr308_acquired_read()?,
        ) << 10u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenclr308_bb_read()?,
        ) << 14u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_intenclr308_suspended_read()?,
        ) << 18u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_intenclr308_rxstarted_read()?,
        ) << 19u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_intenclr308_txstarted_read()?,
        ) << 20u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenclr308_lastrx_read()?,
        ) << 23u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenclr308_lasttx_read()?,
        ) << 24u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenclr308_write_read()?,
        ) << 25u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_intenclr308_read_read()?,
        ) << 26u32;
        Ok(_value)
    }
    #[doc = "Write apb3_intenclr308 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_intenclr308_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_stopped_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_ready_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_endrx_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_end_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_txdsent_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_endtx_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_error_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_acquired_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_bb_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_suspended_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_rxstarted_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_txstarted_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_lastrx_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_lasttx_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_write_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_intenclr308_read_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_semstat400 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_semstat400_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.apb3[_peripheral_instance].apb3_semstat400_semstat_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Read apb3_status440 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_status440_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_status440_overread_read()?,
        );
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_status440_overflow_read()?,
        ) << 1u32;
        Ok(_value)
    }
    #[doc = "Write apb3_status440 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_status440_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_status440_overread_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_status440_overflow_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_errorsrc4c4 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_errorsrc4c4_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_errorsrc4c4_overrun_read()?,
        );
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_errorsrc4c4_anack_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_errorsrc4c4_dnack_read()?,
        ) << 2u32;
        Ok(_value)
    }
    #[doc = "Write apb3_errorsrc4c4 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_errorsrc4c4_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_errorsrc4c4_overrun_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_errorsrc4c4_anack_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_errorsrc4c4_dnack_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_errorsrc4d0 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_errorsrc4d0_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_errorsrc4d0_overflow_read()?,
        );
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_errorsrc4d0_dnack_read()?,
        ) << 2u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_errorsrc4d0_overread_read()?,
        ) << 3u32;
        Ok(_value)
    }
    #[doc = "Write apb3_errorsrc4d0 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_errorsrc4d0_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_errorsrc4d0_overflow_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_errorsrc4d0_dnack_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_errorsrc4d0_overread_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_match4d4 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_match4d4_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_match4d4_match_read()?,
        );
        Ok(_value)
    }
    #[doc = "Read apb3_enable500 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_enable500_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.apb3[_peripheral_instance].apb3_enable500_enable_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write apb3_enable500 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_enable500_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_enable500_enable_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_psel_sck0 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_psel_sck0_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_psel_sck0_pin_read()?,
        );
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_psel_sck0_connect_read()?,
        ) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb3_psel_sck0 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_psel_sck0_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_psel_sck0_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_psel_sck0_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_psel_miso4 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_psel_miso4_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_psel_miso4_pin_read()?,
        );
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_psel_miso4_connect_read()?,
        ) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb3_psel_miso4 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_psel_miso4_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_psel_miso4_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_psel_miso4_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_psel_mosi8 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_psel_mosi8_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_psel_mosi8_pin_read()?,
        );
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_psel_mosi8_connect_read()?,
        ) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb3_psel_mosi8 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_psel_mosi8_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_psel_mosi8_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_psel_mosi8_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_psel_csnc from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_psel_csnc_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 2147483616;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_psel_csnc_pin_read()?,
        );
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_psel_csnc_connect_read()?,
        ) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb3_psel_csnc from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_psel_csnc_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_psel_csnc_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_psel_csnc_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_rxd518 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_rxd518_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.apb3[_peripheral_instance].apb3_rxd518_rxd_read()?);
        Ok(_value)
    }
    #[doc = "Read apb3_txd51c from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_txd51c_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.apb3[_peripheral_instance].apb3_txd51c_txd_read()?);
        Ok(_value)
    }
    #[doc = "Write apb3_txd51c from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_txd51c_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_txd51c_txd_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_frequency524 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_frequency524_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u32::from(
            self.apb3[_peripheral_instance]
                .apb3_frequency524_frequency_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write apb3_frequency524 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_frequency524_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.apb3[_peripheral_instance].apb3_frequency524_frequency_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read apb3_rxd_ptr0 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_rxd_ptr0_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_rxd_ptr0_ptr_read()?,
        );
        Ok(_value)
    }
    #[doc = "Write apb3_rxd_ptr0 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_rxd_ptr0_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.apb3[_peripheral_instance].apb3_rxd_ptr0_ptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read apb3_rxd_maxcnt4 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_rxd_maxcnt4_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_rxd_maxcnt4_maxcnt_read()?,
        );
        Ok(_value)
    }
    #[doc = "Write apb3_rxd_maxcnt4 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_rxd_maxcnt4_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_rxd_maxcnt4_maxcnt_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_rxd_amount8 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_rxd_amount8_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_rxd_amount8_amount_read()?,
        );
        Ok(_value)
    }
    #[doc = "Read apb3_rxd_listc from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_rxd_listc_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.apb3[_peripheral_instance].apb3_rxd_listc_list_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write apb3_rxd_listc from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_rxd_listc_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_rxd_listc_list_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_txd_ptr0 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_txd_ptr0_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_txd_ptr0_ptr_read()?,
        );
        Ok(_value)
    }
    #[doc = "Write apb3_txd_ptr0 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_txd_ptr0_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.apb3[_peripheral_instance].apb3_txd_ptr0_ptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read apb3_txd_maxcnt4 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_txd_maxcnt4_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_txd_maxcnt4_maxcnt_read()?,
        );
        Ok(_value)
    }
    #[doc = "Write apb3_txd_maxcnt4 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_txd_maxcnt4_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_txd_maxcnt4_maxcnt_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_txd_amount8 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_txd_amount8_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_txd_amount8_amount_read()?,
        );
        Ok(_value)
    }
    #[doc = "Read apb3_txd_listc from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_txd_listc_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.apb3[_peripheral_instance].apb3_txd_listc_list_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write apb3_txd_listc from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_txd_listc_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_txd_listc_list_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_config554 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_config554_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_config554_order_read()?,
        );
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_config554_cpha_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_config554_cpol_read()?,
        ) << 2u32;
        Ok(_value)
    }
    #[doc = "Write apb3_config554 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_config554_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_config554_order_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_config554_cpha_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_config554_cpol_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_def55c from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_def55c_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.apb3[_peripheral_instance].apb3_def55c_def_read()?);
        Ok(_value)
    }
    #[doc = "Write apb3_def55c from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_def55c_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_def55c_def_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_addressn588 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_addressn588_read(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance]
                .apb3_addressn588_address_read(_reg_array)?,
        );
        Ok(_value)
    }
    #[doc = "Write apb3_addressn588 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_addressn588_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_addressn588_address_write(
                _reg_array,
                ((_value[_i] >> 0) & 127u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_config594 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_config594_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_config594_address0_read()?,
        );
        _value |= u32::from(
            self.apb3[_peripheral_instance].apb3_config594_address1_read()?,
        ) << 1u32;
        Ok(_value)
    }
    #[doc = "Write apb3_config594 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_config594_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_config594_address0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_config594_address1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb3_orc5c0 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_orc5c0_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.apb3[_peripheral_instance].apb3_orc5c0_orc_read()?);
        Ok(_value)
    }
    #[doc = "Write apb3_orc5c0 from [crate::peripheral::apb3::Apb3]"]
    #[inline]
    pub(crate) fn apb3_orc5c0_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb3[_peripheral_instance].apb3_orc5c0_orc_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write nfct_tasks_activate0 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_tasks_activate0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_tasks_activate0_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write nfct_tasks_disable4 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_tasks_disable4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_tasks_disable4_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write nfct_tasks_sense8 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_tasks_sense8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_tasks_sense8_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write nfct_tasks_starttxc from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_tasks_starttxc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_tasks_starttxc_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write nfct_tasks_enablerxdata1c from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_tasks_enablerxdata1c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct
            .nfct_tasks_enablerxdata1c_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Write nfct_tasks_goidle24 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_tasks_goidle24_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_tasks_goidle24_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write nfct_tasks_gosleep28 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_tasks_gosleep28_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_tasks_gosleep28_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read nfct_events_ready100 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_ready100_read(&mut self) -> MemResult<u32> {
        self.nfct.nfct_events_ready100_read()
    }
    #[doc = "Write nfct_events_ready100 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_ready100_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_events_ready100_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read nfct_events_fielddetected104 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_fielddetected104_read(
        &mut self,
    ) -> MemResult<u32> {
        self.nfct.nfct_events_fielddetected104_read()
    }
    #[doc = "Write nfct_events_fielddetected104 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_fielddetected104_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct
            .nfct_events_fielddetected104_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read nfct_events_fieldlost108 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_fieldlost108_read(&mut self) -> MemResult<u32> {
        self.nfct.nfct_events_fieldlost108_read()
    }
    #[doc = "Write nfct_events_fieldlost108 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_fieldlost108_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_events_fieldlost108_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read nfct_events_txframestart10c from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_txframestart10c_read(
        &mut self,
    ) -> MemResult<u32> {
        self.nfct.nfct_events_txframestart10c_read()
    }
    #[doc = "Write nfct_events_txframestart10c from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_txframestart10c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct
            .nfct_events_txframestart10c_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read nfct_events_txframeend110 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_txframeend110_read(&mut self) -> MemResult<u32> {
        self.nfct.nfct_events_txframeend110_read()
    }
    #[doc = "Write nfct_events_txframeend110 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_txframeend110_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct
            .nfct_events_txframeend110_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read nfct_events_rxframestart114 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_rxframestart114_read(
        &mut self,
    ) -> MemResult<u32> {
        self.nfct.nfct_events_rxframestart114_read()
    }
    #[doc = "Write nfct_events_rxframestart114 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_rxframestart114_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct
            .nfct_events_rxframestart114_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read nfct_events_rxframeend118 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_rxframeend118_read(&mut self) -> MemResult<u32> {
        self.nfct.nfct_events_rxframeend118_read()
    }
    #[doc = "Write nfct_events_rxframeend118 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_rxframeend118_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct
            .nfct_events_rxframeend118_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read nfct_events_error11c from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_error11c_read(&mut self) -> MemResult<u32> {
        self.nfct.nfct_events_error11c_read()
    }
    #[doc = "Write nfct_events_error11c from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_error11c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_events_error11c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read nfct_events_rxerror128 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_rxerror128_read(&mut self) -> MemResult<u32> {
        self.nfct.nfct_events_rxerror128_read()
    }
    #[doc = "Write nfct_events_rxerror128 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_rxerror128_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_events_rxerror128_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read nfct_events_endrx12c from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_endrx12c_read(&mut self) -> MemResult<u32> {
        self.nfct.nfct_events_endrx12c_read()
    }
    #[doc = "Write nfct_events_endrx12c from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_endrx12c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_events_endrx12c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read nfct_events_endtx130 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_endtx130_read(&mut self) -> MemResult<u32> {
        self.nfct.nfct_events_endtx130_read()
    }
    #[doc = "Write nfct_events_endtx130 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_endtx130_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_events_endtx130_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read nfct_events_autocolresstarted138 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_autocolresstarted138_read(
        &mut self,
    ) -> MemResult<u32> {
        self.nfct.nfct_events_autocolresstarted138_read()
    }
    #[doc = "Write nfct_events_autocolresstarted138 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_autocolresstarted138_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct
            .nfct_events_autocolresstarted138_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read nfct_events_collision148 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_collision148_read(&mut self) -> MemResult<u32> {
        self.nfct.nfct_events_collision148_read()
    }
    #[doc = "Write nfct_events_collision148 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_collision148_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_events_collision148_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read nfct_events_selected14c from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_selected14c_read(&mut self) -> MemResult<u32> {
        self.nfct.nfct_events_selected14c_read()
    }
    #[doc = "Write nfct_events_selected14c from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_selected14c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_events_selected14c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read nfct_events_started150 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_started150_read(&mut self) -> MemResult<u32> {
        self.nfct.nfct_events_started150_read()
    }
    #[doc = "Write nfct_events_started150 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_events_started150_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.nfct.nfct_events_started150_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read nfct_shorts200 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_shorts200_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.nfct.nfct_shorts200_fielddetected_activate_read()?);
        _value |=
            u32::from(self.nfct.nfct_shorts200_fieldlost_sense_read()?) << 1u32;
        Ok(_value)
    }
    #[doc = "Write nfct_shorts200 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_shorts200_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_shorts200_fielddetected_activate_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_shorts200_fieldlost_sense_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nfct_inten300 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_inten300_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nfct.nfct_inten300_ready_read()?);
        _value |=
            u32::from(self.nfct.nfct_inten300_fielddetected_read()?) << 1u32;
        _value |= u32::from(self.nfct.nfct_inten300_fieldlost_read()?) << 2u32;
        _value |=
            u32::from(self.nfct.nfct_inten300_txframestart_read()?) << 3u32;
        _value |= u32::from(self.nfct.nfct_inten300_txframeend_read()?) << 4u32;
        _value |=
            u32::from(self.nfct.nfct_inten300_rxframestart_read()?) << 5u32;
        _value |= u32::from(self.nfct.nfct_inten300_rxframeend_read()?) << 6u32;
        _value |= u32::from(self.nfct.nfct_inten300_error_read()?) << 7u32;
        _value |= u32::from(self.nfct.nfct_inten300_rxerror_read()?) << 10u32;
        _value |= u32::from(self.nfct.nfct_inten300_endrx_read()?) << 11u32;
        _value |= u32::from(self.nfct.nfct_inten300_endtx_read()?) << 12u32;
        _value |= u32::from(self.nfct.nfct_inten300_autocolresstarted_read()?)
            << 14u32;
        _value |= u32::from(self.nfct.nfct_inten300_collision_read()?) << 18u32;
        _value |= u32::from(self.nfct.nfct_inten300_selected_read()?) << 19u32;
        _value |= u32::from(self.nfct.nfct_inten300_started_read()?) << 20u32;
        Ok(_value)
    }
    #[doc = "Write nfct_inten300 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_inten300_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_inten300_ready_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_inten300_fielddetected_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_inten300_fieldlost_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_inten300_txframestart_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_inten300_txframeend_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_inten300_rxframestart_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_inten300_rxframeend_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_inten300_error_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_inten300_rxerror_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_inten300_endrx_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_inten300_endtx_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_inten300_autocolresstarted_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.nfct.nfct_inten300_collision_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.nfct.nfct_inten300_selected_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.nfct.nfct_inten300_started_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nfct_intenset304 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nfct.nfct_intenset304_ready_read()?);
        _value |=
            u32::from(self.nfct.nfct_intenset304_fielddetected_read()?) << 1u32;
        _value |=
            u32::from(self.nfct.nfct_intenset304_fieldlost_read()?) << 2u32;
        _value |=
            u32::from(self.nfct.nfct_intenset304_txframestart_read()?) << 3u32;
        _value |=
            u32::from(self.nfct.nfct_intenset304_txframeend_read()?) << 4u32;
        _value |=
            u32::from(self.nfct.nfct_intenset304_rxframestart_read()?) << 5u32;
        _value |=
            u32::from(self.nfct.nfct_intenset304_rxframeend_read()?) << 6u32;
        _value |= u32::from(self.nfct.nfct_intenset304_error_read()?) << 7u32;
        _value |=
            u32::from(self.nfct.nfct_intenset304_rxerror_read()?) << 10u32;
        _value |= u32::from(self.nfct.nfct_intenset304_endrx_read()?) << 11u32;
        _value |= u32::from(self.nfct.nfct_intenset304_endtx_read()?) << 12u32;
        _value |=
            u32::from(self.nfct.nfct_intenset304_autocolresstarted_read()?)
                << 14u32;
        _value |=
            u32::from(self.nfct.nfct_intenset304_collision_read()?) << 18u32;
        _value |=
            u32::from(self.nfct.nfct_intenset304_selected_read()?) << 19u32;
        _value |=
            u32::from(self.nfct.nfct_intenset304_started_read()?) << 20u32;
        Ok(_value)
    }
    #[doc = "Write nfct_intenset304 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenset304_ready_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenset304_fielddetected_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenset304_fieldlost_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenset304_txframestart_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenset304_txframeend_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenset304_rxframestart_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenset304_rxframeend_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenset304_error_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_intenset304_rxerror_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_intenset304_endrx_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_intenset304_endtx_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_intenset304_autocolresstarted_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.nfct.nfct_intenset304_collision_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.nfct.nfct_intenset304_selected_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.nfct.nfct_intenset304_started_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nfct_intenclr308 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nfct.nfct_intenclr308_ready_read()?);
        _value |=
            u32::from(self.nfct.nfct_intenclr308_fielddetected_read()?) << 1u32;
        _value |=
            u32::from(self.nfct.nfct_intenclr308_fieldlost_read()?) << 2u32;
        _value |=
            u32::from(self.nfct.nfct_intenclr308_txframestart_read()?) << 3u32;
        _value |=
            u32::from(self.nfct.nfct_intenclr308_txframeend_read()?) << 4u32;
        _value |=
            u32::from(self.nfct.nfct_intenclr308_rxframestart_read()?) << 5u32;
        _value |=
            u32::from(self.nfct.nfct_intenclr308_rxframeend_read()?) << 6u32;
        _value |= u32::from(self.nfct.nfct_intenclr308_error_read()?) << 7u32;
        _value |=
            u32::from(self.nfct.nfct_intenclr308_rxerror_read()?) << 10u32;
        _value |= u32::from(self.nfct.nfct_intenclr308_endrx_read()?) << 11u32;
        _value |= u32::from(self.nfct.nfct_intenclr308_endtx_read()?) << 12u32;
        _value |=
            u32::from(self.nfct.nfct_intenclr308_autocolresstarted_read()?)
                << 14u32;
        _value |=
            u32::from(self.nfct.nfct_intenclr308_collision_read()?) << 18u32;
        _value |=
            u32::from(self.nfct.nfct_intenclr308_selected_read()?) << 19u32;
        _value |=
            u32::from(self.nfct.nfct_intenclr308_started_read()?) << 20u32;
        Ok(_value)
    }
    #[doc = "Write nfct_intenclr308 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenclr308_ready_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenclr308_fielddetected_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenclr308_fieldlost_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenclr308_txframestart_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenclr308_txframeend_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenclr308_rxframestart_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenclr308_rxframeend_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_intenclr308_error_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_intenclr308_rxerror_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_intenclr308_endrx_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_intenclr308_endtx_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_intenclr308_autocolresstarted_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.nfct.nfct_intenclr308_collision_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.nfct.nfct_intenclr308_selected_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.nfct.nfct_intenclr308_started_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nfct_errorstatus404 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_errorstatus404_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.nfct.nfct_errorstatus404_framedelaytimeout_read()?);
        _value |=
            u32::from(self.nfct.nfct_errorstatus404_nfcfieldtoostrong_read()?)
                << 2u32;
        _value |=
            u32::from(self.nfct.nfct_errorstatus404_nfcfieldtooweak_read()?)
                << 3u32;
        Ok(_value)
    }
    #[doc = "Write nfct_errorstatus404 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_errorstatus404_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_errorstatus404_framedelaytimeout_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_errorstatus404_nfcfieldtoostrong_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_errorstatus404_nfcfieldtooweak_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nfct_framestatus_rx0 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_framestatus_rx0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nfct.nfct_framestatus_rx0_crcerror_read()?);
        _value |=
            u32::from(self.nfct.nfct_framestatus_rx0_paritystatus_read()?)
                << 2u32;
        _value |=
            u32::from(self.nfct.nfct_framestatus_rx0_overrun_read()?) << 3u32;
        Ok(_value)
    }
    #[doc = "Write nfct_framestatus_rx0 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_framestatus_rx0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_framestatus_rx0_crcerror_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_framestatus_rx0_paritystatus_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_framestatus_rx0_overrun_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nfct_currentloadctrl430 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_currentloadctrl430_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.nfct.nfct_currentloadctrl430_currentloadctrl_read()?,
        );
        Ok(_value)
    }
    #[doc = "Read nfct_fieldpresent43c from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_fieldpresent43c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.nfct.nfct_fieldpresent43c_fieldpresent_read()?);
        _value |= u32::from(self.nfct.nfct_fieldpresent43c_lockdetect_read()?)
            << 1u32;
        Ok(_value)
    }
    #[doc = "Read nfct_framedelaymin504 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_framedelaymin504_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.nfct.nfct_framedelaymin504_framedelaymin_read()?);
        Ok(_value)
    }
    #[doc = "Write nfct_framedelaymin504 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_framedelaymin504_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 2;
            let _value = u16::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.nfct.nfct_framedelaymin504_framedelaymin_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read nfct_framedelaymax508 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_framedelaymax508_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.nfct.nfct_framedelaymax508_framedelaymax_read()?);
        Ok(_value)
    }
    #[doc = "Write nfct_framedelaymax508 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_framedelaymax508_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 2;
            let _value = u16::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.nfct.nfct_framedelaymax508_framedelaymax_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read nfct_framedelaymode50c from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_framedelaymode50c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.nfct.nfct_framedelaymode50c_framedelaymode_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write nfct_framedelaymode50c from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_framedelaymode50c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_framedelaymode50c_framedelaymode_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nfct_packetptr510 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_packetptr510_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nfct.nfct_packetptr510_ptr_read()?);
        Ok(_value)
    }
    #[doc = "Write nfct_packetptr510 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_packetptr510_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.nfct.nfct_packetptr510_ptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read nfct_maxlen514 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_maxlen514_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nfct.nfct_maxlen514_maxlen_read()?);
        Ok(_value)
    }
    #[doc = "Write nfct_maxlen514 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_maxlen514_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 1u8)
                as u16)
                << (0 + (1 * 8));
            self.nfct.nfct_maxlen514_maxlen_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read nfct_txd_frameconfig0 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_txd_frameconfig0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nfct.nfct_txd_frameconfig0_parity_read()?);
        _value |=
            u32::from(self.nfct.nfct_txd_frameconfig0_discardmode_read()?)
                << 1u32;
        _value |=
            u32::from(self.nfct.nfct_txd_frameconfig0_sof_read()?) << 2u32;
        _value |= u32::from(self.nfct.nfct_txd_frameconfig0_crcmodetx_read()?)
            << 4u32;
        Ok(_value)
    }
    #[doc = "Write nfct_txd_frameconfig0 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_txd_frameconfig0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_txd_frameconfig0_parity_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_txd_frameconfig0_discardmode_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_txd_frameconfig0_sof_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_txd_frameconfig0_crcmodetx_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nfct_txd_amount4 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_txd_amount4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nfct.nfct_txd_amount4_txdatabits_read()?);
        _value |=
            u32::from(self.nfct.nfct_txd_amount4_txdatabytes_read()?) << 3u32;
        Ok(_value)
    }
    #[doc = "Write nfct_txd_amount4 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_txd_amount4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_txd_amount4_txdatabits_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            _extracted |= ((_value[(0 - _start) as usize] >> 3) & 31u8) as u16;
            _extracted |= ((_value[((0 + 0 + 1) - _start) as usize] & 15u8)
                as u16)
                << (3 + (0 * 8));
            self.nfct.nfct_txd_amount4_txdatabytes_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read nfct_rxd_frameconfig0 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_rxd_frameconfig0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nfct.nfct_rxd_frameconfig0_parity_read()?);
        _value |=
            u32::from(self.nfct.nfct_rxd_frameconfig0_sof_read()?) << 2u32;
        _value |= u32::from(self.nfct.nfct_rxd_frameconfig0_crcmoderx_read()?)
            << 4u32;
        Ok(_value)
    }
    #[doc = "Write nfct_rxd_frameconfig0 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_rxd_frameconfig0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_rxd_frameconfig0_parity_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_rxd_frameconfig0_sof_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_rxd_frameconfig0_crcmoderx_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nfct_rxd_amount4 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_rxd_amount4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nfct.nfct_rxd_amount4_rxdatabits_read()?);
        _value |=
            u32::from(self.nfct.nfct_rxd_amount4_rxdatabytes_read()?) << 3u32;
        Ok(_value)
    }
    #[doc = "Read nfct_nfcid1_last590 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_nfcid1_last590_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nfct.nfct_nfcid1_last590_nfcid1_z_read()?);
        _value |=
            u32::from(self.nfct.nfct_nfcid1_last590_nfcid1_y_read()?) << 8u32;
        _value |=
            u32::from(self.nfct.nfct_nfcid1_last590_nfcid1_x_read()?) << 16u32;
        _value |=
            u32::from(self.nfct.nfct_nfcid1_last590_nfcid1_w_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write nfct_nfcid1_last590 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_nfcid1_last590_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_nfcid1_last590_nfcid1_z_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_nfcid1_last590_nfcid1_y_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.nfct.nfct_nfcid1_last590_nfcid1_x_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.nfct.nfct_nfcid1_last590_nfcid1_w_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nfct_nfcid1_2nd_last594 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_nfcid1_2nd_last594_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nfct.nfct_nfcid1_2nd_last594_nfcid1_v_read()?);
        _value |= u32::from(self.nfct.nfct_nfcid1_2nd_last594_nfcid1_u_read()?)
            << 8u32;
        _value |= u32::from(self.nfct.nfct_nfcid1_2nd_last594_nfcid1_t_read()?)
            << 16u32;
        Ok(_value)
    }
    #[doc = "Write nfct_nfcid1_2nd_last594 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_nfcid1_2nd_last594_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_nfcid1_2nd_last594_nfcid1_v_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_nfcid1_2nd_last594_nfcid1_u_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.nfct.nfct_nfcid1_2nd_last594_nfcid1_t_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nfct_nfcid1_3rd_last598 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_nfcid1_3rd_last598_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nfct.nfct_nfcid1_3rd_last598_nfcid1_s_read()?);
        _value |= u32::from(self.nfct.nfct_nfcid1_3rd_last598_nfcid1_r_read()?)
            << 8u32;
        _value |= u32::from(self.nfct.nfct_nfcid1_3rd_last598_nfcid1_q_read()?)
            << 16u32;
        Ok(_value)
    }
    #[doc = "Write nfct_nfcid1_3rd_last598 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_nfcid1_3rd_last598_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_nfcid1_3rd_last598_nfcid1_s_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_nfcid1_3rd_last598_nfcid1_r_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.nfct.nfct_nfcid1_3rd_last598_nfcid1_q_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nfct_sensres5a0 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_sensres5a0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.nfct.nfct_sensres5a0_bitframesdd_read()?));
        _value |= u32::from(self.nfct.nfct_sensres5a0_rfu5_read()?) << 5u32;
        _value |=
            u32::from(u8::from(self.nfct.nfct_sensres5a0_nfcidsize_read()?))
                << 6u32;
        _value |=
            u32::from(self.nfct.nfct_sensres5a0_platfconfig_read()?) << 8u32;
        _value |= u32::from(self.nfct.nfct_sensres5a0_rfu74_read()?) << 12u32;
        Ok(_value)
    }
    #[doc = "Write nfct_sensres5a0 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_sensres5a0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_sensres5a0_bitframesdd_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_sensres5a0_rfu5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_sensres5a0_nfcidsize_write(
                ((_value[_i] >> 6) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_sensres5a0_platfconfig_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nfct.nfct_sensres5a0_rfu74_write(
                ((_value[_i] >> 4) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nfct_selres5a4 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_selres5a4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nfct.nfct_selres5a4_rfu10_read()?);
        _value |= u32::from(self.nfct.nfct_selres5a4_cascade_read()?) << 2u32;
        _value |= u32::from(self.nfct.nfct_selres5a4_rfu43_read()?) << 3u32;
        _value |= u32::from(self.nfct.nfct_selres5a4_protocol_read()?) << 5u32;
        _value |= u32::from(self.nfct.nfct_selres5a4_rfu7_read()?) << 7u32;
        Ok(_value)
    }
    #[doc = "Write nfct_selres5a4 from [crate::peripheral::nfct::Nfct]"]
    #[inline]
    pub(crate) fn nfct_selres5a4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_selres5a4_rfu10_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_selres5a4_cascade_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_selres5a4_rfu43_write(
                ((_value[_i] >> 3) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_selres5a4_protocol_write(
                ((_value[_i] >> 5) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nfct.nfct_selres5a4_rfu7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write gpiote_tasks_outn0 from [crate::peripheral::gpiote::Gpiote]"]
    #[inline]
    pub(crate) fn gpiote_tasks_outn0_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.p0.gpiote_tasks_outn0_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write gpiote_tasks_setn30 from [crate::peripheral::gpiote::Gpiote]"]
    #[inline]
    pub(crate) fn gpiote_tasks_setn30_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.p0.gpiote_tasks_setn30_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write gpiote_tasks_clrn60 from [crate::peripheral::gpiote::Gpiote]"]
    #[inline]
    pub(crate) fn gpiote_tasks_clrn60_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.p0.gpiote_tasks_clrn60_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read gpiote_events_inn100 from [crate::peripheral::gpiote::Gpiote]"]
    #[inline]
    pub(crate) fn gpiote_events_inn100_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        self.p0.gpiote_events_inn100_read(_reg_array)
    }
    #[doc = "Write gpiote_events_inn100 from [crate::peripheral::gpiote::Gpiote]"]
    #[inline]
    pub(crate) fn gpiote_events_inn100_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.p0.gpiote_events_inn100_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read gpiote_events_port17c from [crate::peripheral::gpiote::Gpiote]"]
    #[inline]
    pub(crate) fn gpiote_events_port17c_read(&mut self) -> MemResult<u32> {
        self.p0.gpiote_events_port17c_read()
    }
    #[doc = "Write gpiote_events_port17c from [crate::peripheral::gpiote::Gpiote]"]
    #[inline]
    pub(crate) fn gpiote_events_port17c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.p0.gpiote_events_port17c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read gpiote_intenset304 from [crate::peripheral::gpiote::Gpiote]"]
    #[inline]
    pub(crate) fn gpiote_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.p0.gpiote_intenset304_in0_read()?);
        _value |= u32::from(self.p0.gpiote_intenset304_in1_read()?) << 1u32;
        _value |= u32::from(self.p0.gpiote_intenset304_in2_read()?) << 2u32;
        _value |= u32::from(self.p0.gpiote_intenset304_in3_read()?) << 3u32;
        _value |= u32::from(self.p0.gpiote_intenset304_in4_read()?) << 4u32;
        _value |= u32::from(self.p0.gpiote_intenset304_in5_read()?) << 5u32;
        _value |= u32::from(self.p0.gpiote_intenset304_in6_read()?) << 6u32;
        _value |= u32::from(self.p0.gpiote_intenset304_in7_read()?) << 7u32;
        _value |= u32::from(self.p0.gpiote_intenset304_port_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write gpiote_intenset304 from [crate::peripheral::gpiote::Gpiote]"]
    #[inline]
    pub(crate) fn gpiote_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenset304_in0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenset304_in1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenset304_in2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenset304_in3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenset304_in4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenset304_in5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenset304_in6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenset304_in7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.gpiote_intenset304_port_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read gpiote_intenclr308 from [crate::peripheral::gpiote::Gpiote]"]
    #[inline]
    pub(crate) fn gpiote_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.p0.gpiote_intenclr308_in0_read()?);
        _value |= u32::from(self.p0.gpiote_intenclr308_in1_read()?) << 1u32;
        _value |= u32::from(self.p0.gpiote_intenclr308_in2_read()?) << 2u32;
        _value |= u32::from(self.p0.gpiote_intenclr308_in3_read()?) << 3u32;
        _value |= u32::from(self.p0.gpiote_intenclr308_in4_read()?) << 4u32;
        _value |= u32::from(self.p0.gpiote_intenclr308_in5_read()?) << 5u32;
        _value |= u32::from(self.p0.gpiote_intenclr308_in6_read()?) << 6u32;
        _value |= u32::from(self.p0.gpiote_intenclr308_in7_read()?) << 7u32;
        _value |= u32::from(self.p0.gpiote_intenclr308_port_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write gpiote_intenclr308 from [crate::peripheral::gpiote::Gpiote]"]
    #[inline]
    pub(crate) fn gpiote_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenclr308_in0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenclr308_in1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenclr308_in2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenclr308_in3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenclr308_in4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenclr308_in5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenclr308_in6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_intenclr308_in7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.gpiote_intenclr308_port_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read gpiote_confign510 from [crate::peripheral::gpiote::Gpiote]"]
    #[inline]
    pub(crate) fn gpiote_confign510_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.p0.gpiote_confign510_mode_read(_reg_array)?,
        ));
        _value |=
            u32::from(self.p0.gpiote_confign510_psel_read(_reg_array)?) << 8u32;
        _value |= u32::from(u8::from(
            self.p0.gpiote_confign510_polarity_read(_reg_array)?,
        )) << 16u32;
        _value |=
            u32::from(self.p0.gpiote_confign510_outinit_read(_reg_array)?)
                << 20u32;
        Ok(_value)
    }
    #[doc = "Write gpiote_confign510 from [crate::peripheral::gpiote::Gpiote]"]
    #[inline]
    pub(crate) fn gpiote_confign510_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.gpiote_confign510_mode_write(
                _reg_array,
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.gpiote_confign510_psel_write(
                _reg_array,
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.gpiote_confign510_polarity_write(
                _reg_array,
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.gpiote_confign510_outinit_write(
                _reg_array,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write saadc_tasks_start0 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_tasks_start0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.saadc.saadc_tasks_start0_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write saadc_tasks_sample4 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_tasks_sample4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.saadc.saadc_tasks_sample4_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write saadc_tasks_stop8 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_tasks_stop8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.saadc.saadc_tasks_stop8_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write saadc_tasks_calibrateoffsetc from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_tasks_calibrateoffsetc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.saadc
            .saadc_tasks_calibrateoffsetc_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read saadc_events_started100 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_started100_read(&mut self) -> MemResult<u32> {
        self.saadc.saadc_events_started100_read()
    }
    #[doc = "Write saadc_events_started100 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_started100_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.saadc.saadc_events_started100_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read saadc_events_end104 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_end104_read(&mut self) -> MemResult<u32> {
        self.saadc.saadc_events_end104_read()
    }
    #[doc = "Write saadc_events_end104 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_end104_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.saadc.saadc_events_end104_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read saadc_events_done108 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_done108_read(&mut self) -> MemResult<u32> {
        self.saadc.saadc_events_done108_read()
    }
    #[doc = "Write saadc_events_done108 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_done108_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.saadc.saadc_events_done108_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read saadc_events_resultdone10c from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_resultdone10c_read(&mut self) -> MemResult<u32> {
        self.saadc.saadc_events_resultdone10c_read()
    }
    #[doc = "Write saadc_events_resultdone10c from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_resultdone10c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.saadc
            .saadc_events_resultdone10c_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read saadc_events_calibratedone110 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_calibratedone110_read(
        &mut self,
    ) -> MemResult<u32> {
        self.saadc.saadc_events_calibratedone110_read()
    }
    #[doc = "Write saadc_events_calibratedone110 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_calibratedone110_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.saadc
            .saadc_events_calibratedone110_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read saadc_events_stopped114 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_stopped114_read(&mut self) -> MemResult<u32> {
        self.saadc.saadc_events_stopped114_read()
    }
    #[doc = "Write saadc_events_stopped114 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_stopped114_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.saadc.saadc_events_stopped114_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read saadc_events_chn_limith0 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_chn_limith0_read(
        &mut self,
        _events_chn: usize,
    ) -> MemResult<u32> {
        self.saadc.saadc_events_chn_limith0_read(_events_chn)
    }
    #[doc = "Write saadc_events_chn_limith0 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_chn_limith0_write(
        &mut self,
        _events_chn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.saadc.saadc_events_chn_limith0_write(
            _events_chn,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read saadc_events_chn_limitl4 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_chn_limitl4_read(
        &mut self,
        _events_chn: usize,
    ) -> MemResult<u32> {
        self.saadc.saadc_events_chn_limitl4_read(_events_chn)
    }
    #[doc = "Write saadc_events_chn_limitl4 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_events_chn_limitl4_write(
        &mut self,
        _events_chn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.saadc.saadc_events_chn_limitl4_write(
            _events_chn,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read saadc_inten300 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_inten300_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.saadc.saadc_inten300_started_read()?);
        _value |= u32::from(self.saadc.saadc_inten300_end_read()?) << 1u32;
        _value |= u32::from(self.saadc.saadc_inten300_done_read()?) << 2u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_resultdone_read()?) << 3u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_calibratedone_read()?) << 4u32;
        _value |= u32::from(self.saadc.saadc_inten300_stopped_read()?) << 5u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch0limith_read()?) << 6u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch0limitl_read()?) << 7u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch1limith_read()?) << 8u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch1limitl_read()?) << 9u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch2limith_read()?) << 10u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch2limitl_read()?) << 11u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch3limith_read()?) << 12u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch3limitl_read()?) << 13u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch4limith_read()?) << 14u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch4limitl_read()?) << 15u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch5limith_read()?) << 16u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch5limitl_read()?) << 17u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch6limith_read()?) << 18u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch6limitl_read()?) << 19u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch7limith_read()?) << 20u32;
        _value |=
            u32::from(self.saadc.saadc_inten300_ch7limitl_read()?) << 21u32;
        Ok(_value)
    }
    #[doc = "Write saadc_inten300 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_inten300_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_inten300_started_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_inten300_end_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_inten300_done_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_inten300_resultdone_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_inten300_calibratedone_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_inten300_stopped_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_inten300_ch0limith_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_inten300_ch0limitl_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_inten300_ch1limith_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_inten300_ch1limitl_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_inten300_ch2limith_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_inten300_ch2limitl_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_inten300_ch3limith_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_inten300_ch3limitl_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_inten300_ch4limith_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_inten300_ch4limitl_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_inten300_ch5limith_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_inten300_ch5limitl_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_inten300_ch6limith_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_inten300_ch6limitl_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_inten300_ch7limith_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_inten300_ch7limitl_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read saadc_intenset304 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.saadc.saadc_intenset304_started_read()?);
        _value |= u32::from(self.saadc.saadc_intenset304_end_read()?) << 1u32;
        _value |= u32::from(self.saadc.saadc_intenset304_done_read()?) << 2u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_resultdone_read()?) << 3u32;
        _value |= u32::from(self.saadc.saadc_intenset304_calibratedone_read()?)
            << 4u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_stopped_read()?) << 5u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch0limith_read()?) << 6u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch0limitl_read()?) << 7u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch1limith_read()?) << 8u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch1limitl_read()?) << 9u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch2limith_read()?) << 10u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch2limitl_read()?) << 11u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch3limith_read()?) << 12u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch3limitl_read()?) << 13u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch4limith_read()?) << 14u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch4limitl_read()?) << 15u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch5limith_read()?) << 16u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch5limitl_read()?) << 17u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch6limith_read()?) << 18u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch6limitl_read()?) << 19u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch7limith_read()?) << 20u32;
        _value |=
            u32::from(self.saadc.saadc_intenset304_ch7limitl_read()?) << 21u32;
        Ok(_value)
    }
    #[doc = "Write saadc_intenset304 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenset304_started_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenset304_end_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenset304_done_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenset304_resultdone_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenset304_calibratedone_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenset304_stopped_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenset304_ch0limith_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenset304_ch0limitl_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenset304_ch1limith_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenset304_ch1limitl_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenset304_ch2limith_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenset304_ch2limitl_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenset304_ch3limith_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenset304_ch3limitl_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenset304_ch4limith_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenset304_ch4limitl_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_intenset304_ch5limith_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_intenset304_ch5limitl_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_intenset304_ch6limith_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_intenset304_ch6limitl_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_intenset304_ch7limith_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_intenset304_ch7limitl_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read saadc_intenclr308 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.saadc.saadc_intenclr308_started_read()?);
        _value |= u32::from(self.saadc.saadc_intenclr308_end_read()?) << 1u32;
        _value |= u32::from(self.saadc.saadc_intenclr308_done_read()?) << 2u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_resultdone_read()?) << 3u32;
        _value |= u32::from(self.saadc.saadc_intenclr308_calibratedone_read()?)
            << 4u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_stopped_read()?) << 5u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch0limith_read()?) << 6u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch0limitl_read()?) << 7u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch1limith_read()?) << 8u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch1limitl_read()?) << 9u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch2limith_read()?) << 10u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch2limitl_read()?) << 11u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch3limith_read()?) << 12u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch3limitl_read()?) << 13u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch4limith_read()?) << 14u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch4limitl_read()?) << 15u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch5limith_read()?) << 16u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch5limitl_read()?) << 17u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch6limith_read()?) << 18u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch6limitl_read()?) << 19u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch7limith_read()?) << 20u32;
        _value |=
            u32::from(self.saadc.saadc_intenclr308_ch7limitl_read()?) << 21u32;
        Ok(_value)
    }
    #[doc = "Write saadc_intenclr308 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenclr308_started_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenclr308_end_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenclr308_done_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenclr308_resultdone_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenclr308_calibratedone_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenclr308_stopped_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenclr308_ch0limith_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_intenclr308_ch0limitl_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenclr308_ch1limith_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenclr308_ch1limitl_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenclr308_ch2limith_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenclr308_ch2limitl_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenclr308_ch3limith_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenclr308_ch3limitl_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenclr308_ch4limith_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_intenclr308_ch4limitl_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_intenclr308_ch5limith_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_intenclr308_ch5limitl_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_intenclr308_ch6limith_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_intenclr308_ch6limitl_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_intenclr308_ch7limith_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_intenclr308_ch7limitl_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read saadc_status400 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_status400_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.saadc.saadc_status400_status_read()?);
        Ok(_value)
    }
    #[doc = "Read saadc_enable500 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_enable500_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.saadc.saadc_enable500_enable_read()?);
        Ok(_value)
    }
    #[doc = "Write saadc_enable500 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_enable500_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_enable500_enable_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read saadc_chn_pselp0 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_chn_pselp0_read(
        &mut self,
        _chn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.saadc.saadc_chn_pselp0_pselp_read(_chn)?));
        Ok(_value)
    }
    #[doc = "Write saadc_chn_pselp0 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_chn_pselp0_write(
        &mut self,
        _chn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_chn_pselp0_pselp_write(
                _chn,
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read saadc_chn_pseln4 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_chn_pseln4_read(
        &mut self,
        _chn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.saadc.saadc_chn_pseln4_pseln_read(_chn)?));
        Ok(_value)
    }
    #[doc = "Write saadc_chn_pseln4 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_chn_pseln4_write(
        &mut self,
        _chn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_chn_pseln4_pseln_write(
                _chn,
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read saadc_chn_config8 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_chn_config8_read(
        &mut self,
        _chn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.saadc.saadc_chn_config8_resp_read(_chn)?));
        _value |=
            u32::from(u8::from(self.saadc.saadc_chn_config8_resn_read(_chn)?))
                << 4u32;
        _value |=
            u32::from(u8::from(self.saadc.saadc_chn_config8_gain_read(_chn)?))
                << 8u32;
        _value |=
            u32::from(self.saadc.saadc_chn_config8_refsel_read(_chn)?) << 12u32;
        _value |=
            u32::from(u8::from(self.saadc.saadc_chn_config8_tacq_read(_chn)?))
                << 16u32;
        _value |=
            u32::from(self.saadc.saadc_chn_config8_mode_read(_chn)?) << 20u32;
        _value |=
            u32::from(self.saadc.saadc_chn_config8_burst_read(_chn)?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write saadc_chn_config8 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_chn_config8_write(
        &mut self,
        _chn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_chn_config8_resp_write(
                _chn,
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_chn_config8_resn_write(
                _chn,
                ((_value[_i] >> 4) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_chn_config8_gain_write(
                _chn,
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_chn_config8_refsel_write(
                _chn,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_chn_config8_tacq_write(
                _chn,
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.saadc.saadc_chn_config8_mode_write(
                _chn,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.saadc.saadc_chn_config8_burst_write(
                _chn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read saadc_chn_limitc from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_chn_limitc_read(
        &mut self,
        _chn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.saadc.saadc_chn_limitc_low_read(_chn)?);
        _value |=
            u32::from(self.saadc.saadc_chn_limitc_high_read(_chn)?) << 16u32;
        Ok(_value)
    }
    #[doc = "Write saadc_chn_limitc from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_chn_limitc_write(
        &mut self,
        _chn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 2;
            let _value = u16::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.saadc.saadc_chn_limitc_low_write(
                _chn,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        if _start <= 2 && _end >= 4 {
            let _offset_start = (2 - _start) as usize;
            let _offset_end = _offset_start + 2;
            let _value = u16::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.saadc.saadc_chn_limitc_high_write(
                _chn,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 2 && _start < 4) || (_end > 2 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read saadc_resolution5f0 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_resolution5f0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.saadc.saadc_resolution5f0_val_read()?));
        Ok(_value)
    }
    #[doc = "Write saadc_resolution5f0 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_resolution5f0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_resolution5f0_val_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read saadc_oversample5f4 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_oversample5f4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.saadc.saadc_oversample5f4_oversample_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write saadc_oversample5f4 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_oversample5f4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.saadc.saadc_oversample5f4_oversample_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read saadc_samplerate5f8 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_samplerate5f8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.saadc.saadc_samplerate5f8_cc_read()?);
        _value |=
            u32::from(self.saadc.saadc_samplerate5f8_mode_read()?) << 12u32;
        Ok(_value)
    }
    #[doc = "Write saadc_samplerate5f8 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_samplerate5f8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 7u8)
                as u16)
                << (0 + (1 * 8));
            self.saadc.saadc_samplerate5f8_cc_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.saadc.saadc_samplerate5f8_mode_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read saadc_result_ptr0 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_result_ptr0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.saadc.saadc_result_ptr0_ptr_read()?);
        Ok(_value)
    }
    #[doc = "Write saadc_result_ptr0 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_result_ptr0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.saadc.saadc_result_ptr0_ptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read saadc_result_maxcnt4 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_result_maxcnt4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.saadc.saadc_result_maxcnt4_maxcnt_read()?);
        Ok(_value)
    }
    #[doc = "Write saadc_result_maxcnt4 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_result_maxcnt4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 127u8)
                as u16)
                << (0 + (1 * 8));
            self.saadc.saadc_result_maxcnt4_maxcnt_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read saadc_result_amount8 from [crate::peripheral::saadc::Saadc]"]
    #[inline]
    pub(crate) fn saadc_result_amount8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.saadc.saadc_result_amount8_amount_read()?);
        Ok(_value)
    }
    #[doc = "Write timer0_tasks_start0 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_tasks_start0_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.timer0[_peripheral_instance].timer0_tasks_start0_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write timer0_tasks_stop4 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_tasks_stop4_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.timer0[_peripheral_instance].timer0_tasks_stop4_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write timer0_tasks_count8 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_tasks_count8_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.timer0[_peripheral_instance].timer0_tasks_count8_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write timer0_tasks_clearc from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_tasks_clearc_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.timer0[_peripheral_instance].timer0_tasks_clearc_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write timer0_tasks_shutdown10 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_tasks_shutdown10_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.timer0[_peripheral_instance].timer0_tasks_shutdown10_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write timer0_tasks_capturen40 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_tasks_capturen40_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.timer0[_peripheral_instance].timer0_tasks_capturen40_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read timer0_events_comparen140 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_events_comparen140_read(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
    ) -> MemResult<u32> {
        self.timer0[_peripheral_instance]
            .timer0_events_comparen140_read(_reg_array)
    }
    #[doc = "Write timer0_events_comparen140 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_events_comparen140_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.timer0[_peripheral_instance].timer0_events_comparen140_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read timer0_shorts200 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_shorts200_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare0_clear_read()?,
        );
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare1_clear_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare2_clear_read()?,
        ) << 2u32;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare3_clear_read()?,
        ) << 3u32;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare0_stop_read()?,
        ) << 8u32;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare1_stop_read()?,
        ) << 9u32;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare2_stop_read()?,
        ) << 10u32;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare3_stop_read()?,
        ) << 11u32;
        Ok(_value)
    }
    #[doc = "Write timer0_shorts200 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_shorts200_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare0_clear_write(
                    ((_value[_i] >> 0) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare1_clear_write(
                    ((_value[_i] >> 1) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare2_clear_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare3_clear_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare0_stop_write(
                    ((_value[_i] >> 0) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare1_stop_write(
                    ((_value[_i] >> 1) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare2_stop_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_shorts200_compare3_stop_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        Ok(())
    }
    #[doc = "Read timer0_intenset304 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_intenset304_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_intenset304_compare0_read()?,
        ) << 16u32;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_intenset304_compare1_read()?,
        ) << 17u32;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_intenset304_compare2_read()?,
        ) << 18u32;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_intenset304_compare3_read()?,
        ) << 19u32;
        Ok(_value)
    }
    #[doc = "Write timer0_intenset304 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_intenset304_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_intenset304_compare0_write(
                    ((_value[_i] >> 0) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_intenset304_compare1_write(
                    ((_value[_i] >> 1) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_intenset304_compare2_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_intenset304_compare3_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        Ok(())
    }
    #[doc = "Read timer0_intenclr308 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_intenclr308_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_intenclr308_compare0_read()?,
        ) << 16u32;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_intenclr308_compare1_read()?,
        ) << 17u32;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_intenclr308_compare2_read()?,
        ) << 18u32;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_intenclr308_compare3_read()?,
        ) << 19u32;
        Ok(_value)
    }
    #[doc = "Write timer0_intenclr308 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_intenclr308_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_intenclr308_compare0_write(
                    ((_value[_i] >> 0) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_intenclr308_compare1_write(
                    ((_value[_i] >> 1) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_intenclr308_compare2_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_intenclr308_compare3_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        Ok(())
    }
    #[doc = "Read timer0_mode504 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_mode504_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.timer0[_peripheral_instance].timer0_mode504_mode_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write timer0_mode504 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_mode504_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer0[_peripheral_instance].timer0_mode504_mode_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read timer0_bitmode508 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_bitmode508_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.timer0[_peripheral_instance]
                .timer0_bitmode508_bitmode_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write timer0_bitmode508 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_bitmode508_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer0[_peripheral_instance].timer0_bitmode508_bitmode_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read timer0_prescaler510 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_prescaler510_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_prescaler510_prescaler_read()?,
        );
        Ok(_value)
    }
    #[doc = "Write timer0_prescaler510 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_prescaler510_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer0[_peripheral_instance]
                .timer0_prescaler510_prescaler_write(
                    ((_value[_i] >> 0) & 15u8)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        Ok(())
    }
    #[doc = "Read timer0_ccn540 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_ccn540_read(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.timer0[_peripheral_instance]
                .timer0_ccn540_cc_read(_reg_array)?,
        );
        Ok(_value)
    }
    #[doc = "Write timer0_ccn540 from [crate::peripheral::timer0::Timer0]"]
    #[inline]
    pub(crate) fn timer0_ccn540_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.timer0[_peripheral_instance].timer0_ccn540_cc_write(
                _reg_array,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Write rtc0_tasks_start0 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_tasks_start0_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.rtc0[_peripheral_instance].rtc0_tasks_start0_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write rtc0_tasks_stop4 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_tasks_stop4_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.rtc0[_peripheral_instance].rtc0_tasks_stop4_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write rtc0_tasks_clear8 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_tasks_clear8_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.rtc0[_peripheral_instance].rtc0_tasks_clear8_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write rtc0_tasks_trigovrflwc from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_tasks_trigovrflwc_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.rtc0[_peripheral_instance].rtc0_tasks_trigovrflwc_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read rtc0_events_tick100 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_events_tick100_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.rtc0[_peripheral_instance].rtc0_events_tick100_read()
    }
    #[doc = "Write rtc0_events_tick100 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_events_tick100_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.rtc0[_peripheral_instance].rtc0_events_tick100_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read rtc0_events_ovrflw104 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_events_ovrflw104_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.rtc0[_peripheral_instance].rtc0_events_ovrflw104_read()
    }
    #[doc = "Write rtc0_events_ovrflw104 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_events_ovrflw104_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.rtc0[_peripheral_instance].rtc0_events_ovrflw104_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read rtc0_events_comparen140 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_events_comparen140_read(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
    ) -> MemResult<u32> {
        self.rtc0[_peripheral_instance].rtc0_events_comparen140_read(_reg_array)
    }
    #[doc = "Write rtc0_events_comparen140 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_events_comparen140_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.rtc0[_peripheral_instance].rtc0_events_comparen140_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read rtc0_intenset304 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_intenset304_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_intenset304_tick_read()?,
        );
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_intenset304_ovrflw_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_intenset304_compare0_read()?,
        ) << 16u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_intenset304_compare1_read()?,
        ) << 17u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_intenset304_compare2_read()?,
        ) << 18u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_intenset304_compare3_read()?,
        ) << 19u32;
        Ok(_value)
    }
    #[doc = "Write rtc0_intenset304 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_intenset304_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_intenset304_tick_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_intenset304_ovrflw_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_intenset304_compare0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_intenset304_compare1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_intenset304_compare2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_intenset304_compare3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read rtc0_intenclr308 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_intenclr308_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_intenclr308_tick_read()?,
        );
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_intenclr308_ovrflw_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_intenclr308_compare0_read()?,
        ) << 16u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_intenclr308_compare1_read()?,
        ) << 17u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_intenclr308_compare2_read()?,
        ) << 18u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_intenclr308_compare3_read()?,
        ) << 19u32;
        Ok(_value)
    }
    #[doc = "Write rtc0_intenclr308 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_intenclr308_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_intenclr308_tick_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_intenclr308_ovrflw_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_intenclr308_compare0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_intenclr308_compare1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_intenclr308_compare2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_intenclr308_compare3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read rtc0_evten340 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_evten340_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evten340_tick_read()?,
        );
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evten340_ovrflw_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evten340_compare0_read()?,
        ) << 16u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evten340_compare1_read()?,
        ) << 17u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evten340_compare2_read()?,
        ) << 18u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evten340_compare3_read()?,
        ) << 19u32;
        Ok(_value)
    }
    #[doc = "Write rtc0_evten340 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_evten340_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evten340_tick_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evten340_ovrflw_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evten340_compare0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evten340_compare1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evten340_compare2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evten340_compare3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read rtc0_evtenset344 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_evtenset344_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evtenset344_tick_read()?,
        );
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evtenset344_ovrflw_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evtenset344_compare0_read()?,
        ) << 16u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evtenset344_compare1_read()?,
        ) << 17u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evtenset344_compare2_read()?,
        ) << 18u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evtenset344_compare3_read()?,
        ) << 19u32;
        Ok(_value)
    }
    #[doc = "Write rtc0_evtenset344 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_evtenset344_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evtenset344_tick_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evtenset344_ovrflw_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evtenset344_compare0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evtenset344_compare1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evtenset344_compare2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evtenset344_compare3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read rtc0_evtenclr348 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_evtenclr348_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evtenclr348_tick_read()?,
        );
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evtenclr348_ovrflw_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evtenclr348_compare0_read()?,
        ) << 16u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evtenclr348_compare1_read()?,
        ) << 17u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evtenclr348_compare2_read()?,
        ) << 18u32;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_evtenclr348_compare3_read()?,
        ) << 19u32;
        Ok(_value)
    }
    #[doc = "Write rtc0_evtenclr348 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_evtenclr348_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evtenclr348_tick_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evtenclr348_ovrflw_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evtenclr348_compare0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evtenclr348_compare1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evtenclr348_compare2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.rtc0[_peripheral_instance].rtc0_evtenclr348_compare3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read rtc0_counter504 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_counter504_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.rtc0[_peripheral_instance].rtc0_counter504_counter_read()?,
        );
        Ok(_value)
    }
    #[doc = "Read rtc0_prescaler508 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_prescaler508_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.rtc0[_peripheral_instance]
                .rtc0_prescaler508_prescaler_read()?,
        );
        Ok(_value)
    }
    #[doc = "Write rtc0_prescaler508 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_prescaler508_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 15u8)
                as u16)
                << (0 + (1 * 8));
            self.rtc0[_peripheral_instance].rtc0_prescaler508_prescaler_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read rtc0_ccn540 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_ccn540_read(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.rtc0[_peripheral_instance]
                .rtc0_ccn540_compare_read(_reg_array)?,
        );
        Ok(_value)
    }
    #[doc = "Write rtc0_ccn540 from [crate::peripheral::rtc0::Rtc0]"]
    #[inline]
    pub(crate) fn rtc0_ccn540_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 3 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 3;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.rtc0[_peripheral_instance].rtc0_ccn540_compare_write(
                _reg_array,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 3) || (_end > 0 && _end < 3) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Write temp_tasks_start0 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_tasks_start0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.temp.temp_tasks_start0_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write temp_tasks_stop4 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_tasks_stop4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.temp.temp_tasks_stop4_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read temp_events_datardy100 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_events_datardy100_read(&mut self) -> MemResult<u32> {
        self.temp.temp_events_datardy100_read()
    }
    #[doc = "Write temp_events_datardy100 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_events_datardy100_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.temp.temp_events_datardy100_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read temp_intenset304 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_intenset304_datardy_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_intenset304 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.temp.temp_intenset304_datardy_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read temp_intenclr308 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_intenclr308_datardy_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_intenclr308 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.temp.temp_intenclr308_datardy_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read temp_temp508 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_temp508_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_temp508_temp_read()?);
        Ok(_value)
    }
    #[doc = "Read temp_a0520 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_a0520_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_a0520_a0_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_a0520 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_a0520_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 15u8)
                as u16)
                << (0 + (1 * 8));
            self.temp.temp_a0520_a0_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read temp_a1524 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_a1524_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_a1524_a1_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_a1524 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_a1524_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 15u8)
                as u16)
                << (0 + (1 * 8));
            self.temp.temp_a1524_a1_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read temp_a2528 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_a2528_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_a2528_a2_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_a2528 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_a2528_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 15u8)
                as u16)
                << (0 + (1 * 8));
            self.temp.temp_a2528_a2_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read temp_a352c from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_a352c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_a352c_a3_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_a352c from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_a352c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 15u8)
                as u16)
                << (0 + (1 * 8));
            self.temp.temp_a352c_a3_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read temp_a4530 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_a4530_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_a4530_a4_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_a4530 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_a4530_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 15u8)
                as u16)
                << (0 + (1 * 8));
            self.temp.temp_a4530_a4_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read temp_a5534 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_a5534_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_a5534_a5_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_a5534 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_a5534_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 15u8)
                as u16)
                << (0 + (1 * 8));
            self.temp.temp_a5534_a5_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read temp_b0540 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_b0540_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_b0540_b0_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_b0540 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_b0540_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 63u8)
                as u16)
                << (0 + (1 * 8));
            self.temp.temp_b0540_b0_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read temp_b1544 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_b1544_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_b1544_b1_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_b1544 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_b1544_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 63u8)
                as u16)
                << (0 + (1 * 8));
            self.temp.temp_b1544_b1_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read temp_b2548 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_b2548_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_b2548_b2_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_b2548 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_b2548_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 63u8)
                as u16)
                << (0 + (1 * 8));
            self.temp.temp_b2548_b2_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read temp_b354c from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_b354c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_b354c_b3_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_b354c from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_b354c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 63u8)
                as u16)
                << (0 + (1 * 8));
            self.temp.temp_b354c_b3_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read temp_b4550 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_b4550_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_b4550_b4_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_b4550 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_b4550_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 63u8)
                as u16)
                << (0 + (1 * 8));
            self.temp.temp_b4550_b4_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read temp_b5554 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_b5554_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_b5554_b5_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_b5554 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_b5554_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 63u8)
                as u16)
                << (0 + (1 * 8));
            self.temp.temp_b5554_b5_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read temp_t0560 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_t0560_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_t0560_t0_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_t0560 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_t0560_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.temp.temp_t0560_t0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read temp_t1564 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_t1564_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_t1564_t1_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_t1564 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_t1564_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.temp.temp_t1564_t1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read temp_t2568 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_t2568_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_t2568_t2_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_t2568 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_t2568_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.temp.temp_t2568_t2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read temp_t356c from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_t356c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_t356c_t3_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_t356c from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_t356c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.temp.temp_t356c_t3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read temp_t4570 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_t4570_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.temp.temp_t4570_t4_read()?);
        Ok(_value)
    }
    #[doc = "Write temp_t4570 from [crate::peripheral::temp::Temp]"]
    #[inline]
    pub(crate) fn temp_t4570_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.temp.temp_t4570_t4_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write rng_tasks_start0 from [crate::peripheral::rng::Rng]"]
    #[inline]
    pub(crate) fn rng_tasks_start0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.rng.rng_tasks_start0_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write rng_tasks_stop4 from [crate::peripheral::rng::Rng]"]
    #[inline]
    pub(crate) fn rng_tasks_stop4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.rng.rng_tasks_stop4_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read rng_events_valrdy100 from [crate::peripheral::rng::Rng]"]
    #[inline]
    pub(crate) fn rng_events_valrdy100_read(&mut self) -> MemResult<u32> {
        self.rng.rng_events_valrdy100_read()
    }
    #[doc = "Write rng_events_valrdy100 from [crate::peripheral::rng::Rng]"]
    #[inline]
    pub(crate) fn rng_events_valrdy100_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.rng.rng_events_valrdy100_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read rng_shorts200 from [crate::peripheral::rng::Rng]"]
    #[inline]
    pub(crate) fn rng_shorts200_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.rng.rng_shorts200_valrdy_stop_read()?);
        Ok(_value)
    }
    #[doc = "Write rng_shorts200 from [crate::peripheral::rng::Rng]"]
    #[inline]
    pub(crate) fn rng_shorts200_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.rng.rng_shorts200_valrdy_stop_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read rng_intenset304 from [crate::peripheral::rng::Rng]"]
    #[inline]
    pub(crate) fn rng_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.rng.rng_intenset304_valrdy_read()?);
        Ok(_value)
    }
    #[doc = "Write rng_intenset304 from [crate::peripheral::rng::Rng]"]
    #[inline]
    pub(crate) fn rng_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.rng.rng_intenset304_valrdy_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read rng_intenclr308 from [crate::peripheral::rng::Rng]"]
    #[inline]
    pub(crate) fn rng_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.rng.rng_intenclr308_valrdy_read()?);
        Ok(_value)
    }
    #[doc = "Write rng_intenclr308 from [crate::peripheral::rng::Rng]"]
    #[inline]
    pub(crate) fn rng_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.rng.rng_intenclr308_valrdy_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read rng_config504 from [crate::peripheral::rng::Rng]"]
    #[inline]
    pub(crate) fn rng_config504_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.rng.rng_config504_dercen_read()?);
        Ok(_value)
    }
    #[doc = "Write rng_config504 from [crate::peripheral::rng::Rng]"]
    #[inline]
    pub(crate) fn rng_config504_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.rng.rng_config504_dercen_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read rng_value508 from [crate::peripheral::rng::Rng]"]
    #[inline]
    pub(crate) fn rng_value508_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.rng.rng_value508_value_read()?);
        Ok(_value)
    }
    #[doc = "Write ecb_tasks_startecb0 from [crate::peripheral::ecb::Ecb]"]
    #[inline]
    pub(crate) fn ecb_tasks_startecb0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.ecb.ecb_tasks_startecb0_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write ecb_tasks_stopecb4 from [crate::peripheral::ecb::Ecb]"]
    #[inline]
    pub(crate) fn ecb_tasks_stopecb4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.ecb.ecb_tasks_stopecb4_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read ecb_events_endecb100 from [crate::peripheral::ecb::Ecb]"]
    #[inline]
    pub(crate) fn ecb_events_endecb100_read(&mut self) -> MemResult<u32> {
        self.ecb.ecb_events_endecb100_read()
    }
    #[doc = "Write ecb_events_endecb100 from [crate::peripheral::ecb::Ecb]"]
    #[inline]
    pub(crate) fn ecb_events_endecb100_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.ecb.ecb_events_endecb100_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read ecb_events_errorecb104 from [crate::peripheral::ecb::Ecb]"]
    #[inline]
    pub(crate) fn ecb_events_errorecb104_read(&mut self) -> MemResult<u32> {
        self.ecb.ecb_events_errorecb104_read()
    }
    #[doc = "Write ecb_events_errorecb104 from [crate::peripheral::ecb::Ecb]"]
    #[inline]
    pub(crate) fn ecb_events_errorecb104_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.ecb.ecb_events_errorecb104_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read ecb_intenset304 from [crate::peripheral::ecb::Ecb]"]
    #[inline]
    pub(crate) fn ecb_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ecb.ecb_intenset304_endecb_read()?);
        _value |= u32::from(self.ecb.ecb_intenset304_errorecb_read()?) << 1u32;
        Ok(_value)
    }
    #[doc = "Write ecb_intenset304 from [crate::peripheral::ecb::Ecb]"]
    #[inline]
    pub(crate) fn ecb_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ecb.ecb_intenset304_endecb_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ecb.ecb_intenset304_errorecb_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read ecb_intenclr308 from [crate::peripheral::ecb::Ecb]"]
    #[inline]
    pub(crate) fn ecb_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ecb.ecb_intenclr308_endecb_read()?);
        _value |= u32::from(self.ecb.ecb_intenclr308_errorecb_read()?) << 1u32;
        Ok(_value)
    }
    #[doc = "Write ecb_intenclr308 from [crate::peripheral::ecb::Ecb]"]
    #[inline]
    pub(crate) fn ecb_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ecb.ecb_intenclr308_endecb_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ecb.ecb_intenclr308_errorecb_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read ecb_ecbdataptr504 from [crate::peripheral::ecb::Ecb]"]
    #[inline]
    pub(crate) fn ecb_ecbdataptr504_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ecb.ecb_ecbdataptr504_ecbdataptr_read()?);
        Ok(_value)
    }
    #[doc = "Write ecb_ecbdataptr504 from [crate::peripheral::ecb::Ecb]"]
    #[inline]
    pub(crate) fn ecb_ecbdataptr504_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.ecb.ecb_ecbdataptr504_ecbdataptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Write apb15_tasks_start0 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_tasks_start0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb15.apb15_tasks_start0_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb15_tasks_crypt4 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_tasks_crypt4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb15.apb15_tasks_crypt4_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb15_tasks_stop8 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_tasks_stop8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb15.apb15_tasks_stop8_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb15_events_endksgen100 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_events_endksgen100_read(&mut self) -> MemResult<u32> {
        self.apb15.apb15_events_endksgen100_read()
    }
    #[doc = "Write apb15_events_endksgen100 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_events_endksgen100_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb15
            .apb15_events_endksgen100_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read apb15_events_endcrypt104 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_events_endcrypt104_read(&mut self) -> MemResult<u32> {
        self.apb15.apb15_events_endcrypt104_read()
    }
    #[doc = "Write apb15_events_endcrypt104 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_events_endcrypt104_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb15
            .apb15_events_endcrypt104_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read apb15_events_error108 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_events_error108_read(&mut self) -> MemResult<u32> {
        self.apb15.apb15_events_error108_read()
    }
    #[doc = "Write apb15_events_error108 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_events_error108_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb15.apb15_events_error108_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb15_shorts200 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_shorts200_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb15.apb15_shorts200_endksgen_crypt_read()?);
        Ok(_value)
    }
    #[doc = "Write apb15_shorts200 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_shorts200_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb15.apb15_shorts200_endksgen_crypt_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb15_intenset304 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb15.apb15_intenset304_end_read()?);
        _value |=
            u32::from(self.apb15.apb15_intenset304_resolved_read()?) << 1u32;
        _value |=
            u32::from(self.apb15.apb15_intenset304_notresolved_read()?) << 2u32;
        Ok(_value)
    }
    #[doc = "Write apb15_intenset304 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb15.apb15_intenset304_end_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb15.apb15_intenset304_resolved_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb15.apb15_intenset304_notresolved_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb15_intenclr308 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb15.apb15_intenclr308_endksgen_read()?);
        _value |=
            u32::from(self.apb15.apb15_intenclr308_endcrypt_read()?) << 1u32;
        _value |= u32::from(self.apb15.apb15_intenclr308_error_read()?) << 2u32;
        Ok(_value)
    }
    #[doc = "Write apb15_intenclr308 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb15.apb15_intenclr308_endksgen_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb15.apb15_intenclr308_endcrypt_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb15.apb15_intenclr308_error_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb15_micstatus400 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_micstatus400_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb15.apb15_micstatus400_micstatus_read()?);
        Ok(_value)
    }
    #[doc = "Read apb15_enable500 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_enable500_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.apb15.apb15_enable500_enable_read()?));
        Ok(_value)
    }
    #[doc = "Write apb15_enable500 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_enable500_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb15.apb15_enable500_enable_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb15_mode504 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_mode504_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb15.apb15_mode504_mode_read()?);
        _value |= u32::from(self.apb15.apb15_mode504_datarate_read()?) << 16u32;
        _value |= u32::from(self.apb15.apb15_mode504_length_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write apb15_mode504 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_mode504_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb15.apb15_mode504_mode_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb15.apb15_mode504_datarate_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb15.apb15_mode504_length_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb15_cnfptr508 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_cnfptr508_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb15.apb15_cnfptr508_cnfptr_read()?);
        Ok(_value)
    }
    #[doc = "Write apb15_cnfptr508 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_cnfptr508_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.apb15.apb15_cnfptr508_cnfptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read apb15_inptr50c from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_inptr50c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb15.apb15_inptr50c_inptr_read()?);
        Ok(_value)
    }
    #[doc = "Write apb15_inptr50c from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_inptr50c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.apb15.apb15_inptr50c_inptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read apb15_outptr510 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_outptr510_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb15.apb15_outptr510_outptr_read()?);
        Ok(_value)
    }
    #[doc = "Write apb15_outptr510 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_outptr510_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.apb15.apb15_outptr510_outptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read apb15_scratchptr514 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_scratchptr514_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb15.apb15_scratchptr514_scratchptr_read()?);
        Ok(_value)
    }
    #[doc = "Write apb15_scratchptr514 from [crate::peripheral::apb15::Apb15]"]
    #[inline]
    pub(crate) fn apb15_scratchptr514_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.apb15.apb15_scratchptr514_scratchptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Write wdt_tasks_start0 from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_tasks_start0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.wdt.wdt_tasks_start0_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read wdt_events_timeout100 from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_events_timeout100_read(&mut self) -> MemResult<u32> {
        self.wdt.wdt_events_timeout100_read()
    }
    #[doc = "Write wdt_events_timeout100 from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_events_timeout100_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.wdt.wdt_events_timeout100_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read wdt_intenset304 from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.wdt.wdt_intenset304_timeout_read()?);
        Ok(_value)
    }
    #[doc = "Write wdt_intenset304 from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.wdt.wdt_intenset304_timeout_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read wdt_intenclr308 from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.wdt.wdt_intenclr308_timeout_read()?);
        Ok(_value)
    }
    #[doc = "Write wdt_intenclr308 from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.wdt.wdt_intenclr308_timeout_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read wdt_runstatus400 from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_runstatus400_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.wdt.wdt_runstatus400_runstatus_read()?);
        Ok(_value)
    }
    #[doc = "Read wdt_reqstatus404 from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_reqstatus404_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.wdt.wdt_reqstatus404_rr0_read()?);
        _value |= u32::from(self.wdt.wdt_reqstatus404_rr1_read()?) << 1u32;
        _value |= u32::from(self.wdt.wdt_reqstatus404_rr2_read()?) << 2u32;
        _value |= u32::from(self.wdt.wdt_reqstatus404_rr3_read()?) << 3u32;
        _value |= u32::from(self.wdt.wdt_reqstatus404_rr4_read()?) << 4u32;
        _value |= u32::from(self.wdt.wdt_reqstatus404_rr5_read()?) << 5u32;
        _value |= u32::from(self.wdt.wdt_reqstatus404_rr6_read()?) << 6u32;
        _value |= u32::from(self.wdt.wdt_reqstatus404_rr7_read()?) << 7u32;
        Ok(_value)
    }
    #[doc = "Read wdt_crv504 from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_crv504_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.wdt.wdt_crv504_crv_read()?);
        Ok(_value)
    }
    #[doc = "Write wdt_crv504 from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_crv504_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.wdt.wdt_crv504_crv_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read wdt_rren508 from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_rren508_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.wdt.wdt_rren508_rr0_read()?);
        _value |= u32::from(self.wdt.wdt_rren508_rr1_read()?) << 1u32;
        _value |= u32::from(self.wdt.wdt_rren508_rr2_read()?) << 2u32;
        _value |= u32::from(self.wdt.wdt_rren508_rr3_read()?) << 3u32;
        _value |= u32::from(self.wdt.wdt_rren508_rr4_read()?) << 4u32;
        _value |= u32::from(self.wdt.wdt_rren508_rr5_read()?) << 5u32;
        _value |= u32::from(self.wdt.wdt_rren508_rr6_read()?) << 6u32;
        _value |= u32::from(self.wdt.wdt_rren508_rr7_read()?) << 7u32;
        Ok(_value)
    }
    #[doc = "Write wdt_rren508 from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_rren508_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.wdt.wdt_rren508_rr0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.wdt.wdt_rren508_rr1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.wdt.wdt_rren508_rr2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.wdt.wdt_rren508_rr3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.wdt.wdt_rren508_rr4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.wdt.wdt_rren508_rr5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.wdt.wdt_rren508_rr6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.wdt.wdt_rren508_rr7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read wdt_config50c from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_config50c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.wdt.wdt_config50c_sleep_read()?);
        _value |= u32::from(self.wdt.wdt_config50c_halt_read()?) << 3u32;
        Ok(_value)
    }
    #[doc = "Write wdt_config50c from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_config50c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.wdt.wdt_config50c_sleep_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.wdt.wdt_config50c_halt_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write wdt_rrn600 from [crate::peripheral::wdt::Wdt]"]
    #[inline]
    pub(crate) fn wdt_rrn600_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.wdt.wdt_rrn600_rr_write(
                _reg_array,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Write qdec_tasks_start0 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_tasks_start0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.qdec.qdec_tasks_start0_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write qdec_tasks_stop4 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_tasks_stop4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.qdec.qdec_tasks_stop4_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write qdec_tasks_readclracc8 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_tasks_readclracc8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.qdec.qdec_tasks_readclracc8_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write qdec_tasks_rdclraccc from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_tasks_rdclraccc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.qdec.qdec_tasks_rdclraccc_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write qdec_tasks_rdclrdbl10 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_tasks_rdclrdbl10_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.qdec.qdec_tasks_rdclrdbl10_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read qdec_events_samplerdy100 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_events_samplerdy100_read(&mut self) -> MemResult<u32> {
        self.qdec.qdec_events_samplerdy100_read()
    }
    #[doc = "Write qdec_events_samplerdy100 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_events_samplerdy100_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.qdec.qdec_events_samplerdy100_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read qdec_events_reportrdy104 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_events_reportrdy104_read(&mut self) -> MemResult<u32> {
        self.qdec.qdec_events_reportrdy104_read()
    }
    #[doc = "Write qdec_events_reportrdy104 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_events_reportrdy104_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.qdec.qdec_events_reportrdy104_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read qdec_events_accof108 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_events_accof108_read(&mut self) -> MemResult<u32> {
        self.qdec.qdec_events_accof108_read()
    }
    #[doc = "Write qdec_events_accof108 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_events_accof108_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.qdec.qdec_events_accof108_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read qdec_events_dblrdy10c from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_events_dblrdy10c_read(&mut self) -> MemResult<u32> {
        self.qdec.qdec_events_dblrdy10c_read()
    }
    #[doc = "Write qdec_events_dblrdy10c from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_events_dblrdy10c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.qdec.qdec_events_dblrdy10c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read qdec_events_stopped110 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_events_stopped110_read(&mut self) -> MemResult<u32> {
        self.qdec.qdec_events_stopped110_read()
    }
    #[doc = "Write qdec_events_stopped110 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_events_stopped110_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.qdec.qdec_events_stopped110_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read qdec_shorts200 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_shorts200_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.qdec.qdec_shorts200_reportrdy_readclracc_read()?);
        _value |=
            u32::from(self.qdec.qdec_shorts200_samplerdy_stop_read()?) << 1u32;
        _value |=
            u32::from(self.qdec.qdec_shorts200_reportrdy_rdclracc_read()?)
                << 2u32;
        _value |=
            u32::from(self.qdec.qdec_shorts200_reportrdy_stop_read()?) << 3u32;
        _value |=
            u32::from(self.qdec.qdec_shorts200_dblrdy_rdclrdbl_read()?) << 4u32;
        _value |=
            u32::from(self.qdec.qdec_shorts200_dblrdy_stop_read()?) << 5u32;
        _value |=
            u32::from(self.qdec.qdec_shorts200_samplerdy_readclracc_read()?)
                << 6u32;
        Ok(_value)
    }
    #[doc = "Write qdec_shorts200 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_shorts200_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_shorts200_reportrdy_readclracc_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_shorts200_samplerdy_stop_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_shorts200_reportrdy_rdclracc_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_shorts200_reportrdy_stop_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_shorts200_dblrdy_rdclrdbl_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_shorts200_dblrdy_stop_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_shorts200_samplerdy_readclracc_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read qdec_intenset304 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.qdec.qdec_intenset304_samplerdy_read()?);
        _value |=
            u32::from(self.qdec.qdec_intenset304_reportrdy_read()?) << 1u32;
        _value |= u32::from(self.qdec.qdec_intenset304_accof_read()?) << 2u32;
        _value |= u32::from(self.qdec.qdec_intenset304_dblrdy_read()?) << 3u32;
        _value |= u32::from(self.qdec.qdec_intenset304_stopped_read()?) << 4u32;
        Ok(_value)
    }
    #[doc = "Write qdec_intenset304 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_intenset304_samplerdy_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_intenset304_reportrdy_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_intenset304_accof_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_intenset304_dblrdy_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_intenset304_stopped_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read qdec_intenclr308 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.qdec.qdec_intenclr308_samplerdy_read()?);
        _value |=
            u32::from(self.qdec.qdec_intenclr308_reportrdy_read()?) << 1u32;
        _value |= u32::from(self.qdec.qdec_intenclr308_accof_read()?) << 2u32;
        _value |= u32::from(self.qdec.qdec_intenclr308_dblrdy_read()?) << 3u32;
        _value |= u32::from(self.qdec.qdec_intenclr308_stopped_read()?) << 4u32;
        Ok(_value)
    }
    #[doc = "Write qdec_intenclr308 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_intenclr308_samplerdy_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_intenclr308_reportrdy_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_intenclr308_accof_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_intenclr308_dblrdy_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_intenclr308_stopped_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read qdec_enable500 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_enable500_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.qdec.qdec_enable500_enable_read()?);
        Ok(_value)
    }
    #[doc = "Write qdec_enable500 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_enable500_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_enable500_enable_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read qdec_ledpol504 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_ledpol504_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.qdec.qdec_ledpol504_ledpol_read()?);
        Ok(_value)
    }
    #[doc = "Write qdec_ledpol504 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_ledpol504_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_ledpol504_ledpol_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read qdec_sampleper508 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_sampleper508_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.qdec.qdec_sampleper508_sampleper_read()?));
        Ok(_value)
    }
    #[doc = "Write qdec_sampleper508 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_sampleper508_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_sampleper508_sampleper_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read qdec_sample50c from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_sample50c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.qdec.qdec_sample50c_sample_read()?);
        Ok(_value)
    }
    #[doc = "Read qdec_reportper510 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_reportper510_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.qdec.qdec_reportper510_reportper_read()?));
        Ok(_value)
    }
    #[doc = "Write qdec_reportper510 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_reportper510_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_reportper510_reportper_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read qdec_acc514 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_acc514_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.qdec.qdec_acc514_acc_read()?);
        Ok(_value)
    }
    #[doc = "Read qdec_accread518 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_accread518_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.qdec.qdec_accread518_accread_read()?);
        Ok(_value)
    }
    #[doc = "Read qdec_psel_led0 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_psel_led0_read(&mut self) -> MemResult<u32> {
        let mut _value = 2147483616;
        _value |= u32::from(self.qdec.qdec_psel_led0_pin_read()?);
        _value |= u32::from(self.qdec.qdec_psel_led0_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write qdec_psel_led0 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_psel_led0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_psel_led0_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.qdec.qdec_psel_led0_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read qdec_psel_a4 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_psel_a4_read(&mut self) -> MemResult<u32> {
        let mut _value = 2147483616;
        _value |= u32::from(self.qdec.qdec_psel_a4_pin_read()?);
        _value |= u32::from(self.qdec.qdec_psel_a4_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write qdec_psel_a4 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_psel_a4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_psel_a4_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.qdec.qdec_psel_a4_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read qdec_psel_b8 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_psel_b8_read(&mut self) -> MemResult<u32> {
        let mut _value = 2147483616;
        _value |= u32::from(self.qdec.qdec_psel_b8_pin_read()?);
        _value |= u32::from(self.qdec.qdec_psel_b8_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write qdec_psel_b8 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_psel_b8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_psel_b8_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.qdec.qdec_psel_b8_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read qdec_dbfen528 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_dbfen528_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.qdec.qdec_dbfen528_dbfen_read()?);
        Ok(_value)
    }
    #[doc = "Write qdec_dbfen528 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_dbfen528_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.qdec.qdec_dbfen528_dbfen_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read qdec_ledpre540 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_ledpre540_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.qdec.qdec_ledpre540_ledpre_read()?);
        Ok(_value)
    }
    #[doc = "Write qdec_ledpre540 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_ledpre540_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 1u8)
                as u16)
                << (0 + (1 * 8));
            self.qdec.qdec_ledpre540_ledpre_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read qdec_accdbl544 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_accdbl544_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.qdec.qdec_accdbl544_accdbl_read()?);
        Ok(_value)
    }
    #[doc = "Read qdec_accdblread548 from [crate::peripheral::qdec::Qdec]"]
    #[inline]
    pub(crate) fn qdec_accdblread548_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.qdec.qdec_accdblread548_accdblread_read()?);
        Ok(_value)
    }
    #[doc = "Write apb19_tasks_start0 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_tasks_start0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb19.apb19_tasks_start0_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb19_tasks_stop4 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_tasks_stop4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb19.apb19_tasks_stop4_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb19_tasks_sample8 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_tasks_sample8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb19.apb19_tasks_sample8_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb19_events_ready100 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_events_ready100_read(&mut self) -> MemResult<u32> {
        self.apb19.apb19_events_ready100_read()
    }
    #[doc = "Write apb19_events_ready100 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_events_ready100_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb19.apb19_events_ready100_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb19_events_down104 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_events_down104_read(&mut self) -> MemResult<u32> {
        self.apb19.apb19_events_down104_read()
    }
    #[doc = "Write apb19_events_down104 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_events_down104_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb19.apb19_events_down104_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb19_events_up108 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_events_up108_read(&mut self) -> MemResult<u32> {
        self.apb19.apb19_events_up108_read()
    }
    #[doc = "Write apb19_events_up108 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_events_up108_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb19.apb19_events_up108_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb19_events_cross10c from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_events_cross10c_read(&mut self) -> MemResult<u32> {
        self.apb19.apb19_events_cross10c_read()
    }
    #[doc = "Write apb19_events_cross10c from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_events_cross10c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb19.apb19_events_cross10c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb19_shorts200 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_shorts200_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb19.apb19_shorts200_ready_sample_read()?);
        _value |=
            u32::from(self.apb19.apb19_shorts200_ready_stop_read()?) << 1u32;
        _value |=
            u32::from(self.apb19.apb19_shorts200_down_stop_read()?) << 2u32;
        _value |= u32::from(self.apb19.apb19_shorts200_up_stop_read()?) << 3u32;
        _value |=
            u32::from(self.apb19.apb19_shorts200_cross_stop_read()?) << 4u32;
        Ok(_value)
    }
    #[doc = "Write apb19_shorts200 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_shorts200_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_shorts200_ready_sample_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_shorts200_ready_stop_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_shorts200_down_stop_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_shorts200_up_stop_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_shorts200_cross_stop_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb19_inten300 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_inten300_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb19.apb19_inten300_ready_read()?);
        _value |= u32::from(self.apb19.apb19_inten300_down_read()?) << 1u32;
        _value |= u32::from(self.apb19.apb19_inten300_up_read()?) << 2u32;
        _value |= u32::from(self.apb19.apb19_inten300_cross_read()?) << 3u32;
        Ok(_value)
    }
    #[doc = "Write apb19_inten300 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_inten300_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_inten300_ready_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_inten300_down_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_inten300_up_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_inten300_cross_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb19_intenset304 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb19.apb19_intenset304_ready_read()?);
        _value |= u32::from(self.apb19.apb19_intenset304_down_read()?) << 1u32;
        _value |= u32::from(self.apb19.apb19_intenset304_up_read()?) << 2u32;
        _value |= u32::from(self.apb19.apb19_intenset304_cross_read()?) << 3u32;
        Ok(_value)
    }
    #[doc = "Write apb19_intenset304 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_intenset304_ready_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_intenset304_down_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_intenset304_up_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_intenset304_cross_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb19_intenclr308 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb19.apb19_intenclr308_ready_read()?);
        _value |= u32::from(self.apb19.apb19_intenclr308_down_read()?) << 1u32;
        _value |= u32::from(self.apb19.apb19_intenclr308_up_read()?) << 2u32;
        _value |= u32::from(self.apb19.apb19_intenclr308_cross_read()?) << 3u32;
        Ok(_value)
    }
    #[doc = "Write apb19_intenclr308 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_intenclr308_ready_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_intenclr308_down_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_intenclr308_up_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_intenclr308_cross_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb19_result400 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_result400_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb19.apb19_result400_result_read()?);
        Ok(_value)
    }
    #[doc = "Read apb19_enable500 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_enable500_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.apb19.apb19_enable500_enable_read()?));
        Ok(_value)
    }
    #[doc = "Write apb19_enable500 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_enable500_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_enable500_enable_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb19_psel504 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_psel504_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.apb19.apb19_psel504_psel_read()?));
        Ok(_value)
    }
    #[doc = "Write apb19_psel504 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_psel504_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_psel504_psel_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb19_refsel508 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_refsel508_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.apb19.apb19_refsel508_refsel_read()?));
        Ok(_value)
    }
    #[doc = "Write apb19_refsel508 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_refsel508_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_refsel508_refsel_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb19_extrefsel50c from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_extrefsel50c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb19.apb19_extrefsel50c_extrefsel_read()?);
        Ok(_value)
    }
    #[doc = "Write apb19_extrefsel50c from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_extrefsel50c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_extrefsel50c_extrefsel_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb19_anadetect520 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_anadetect520_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.apb19.apb19_anadetect520_anadetect_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write apb19_anadetect520 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_anadetect520_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_anadetect520_anadetect_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb19_th530 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_th530_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb19.apb19_th530_thdown_read()?);
        _value |= u32::from(self.apb19.apb19_th530_thup_read()?) << 8u32;
        Ok(_value)
    }
    #[doc = "Write apb19_th530 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_th530_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_th530_thdown_write(
                ((_value[_i] >> 0) & 63u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb19.apb19_th530_thup_write(
                ((_value[_i] >> 0) & 63u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb19_mode534 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_mode534_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.apb19.apb19_mode534_sp_read()?));
        _value |= u32::from(self.apb19.apb19_mode534_main_read()?) << 8u32;
        Ok(_value)
    }
    #[doc = "Write apb19_mode534 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_mode534_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_mode534_sp_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb19.apb19_mode534_main_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb19_hyst538 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_hyst538_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb19.apb19_hyst538_hyst_read()?);
        Ok(_value)
    }
    #[doc = "Write apb19_hyst538 from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_hyst538_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_hyst538_hyst_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb19_isource53c from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_isource53c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.apb19.apb19_isource53c_isource_read()?));
        Ok(_value)
    }
    #[doc = "Write apb19_isource53c from [crate::peripheral::apb19::Apb19]"]
    #[inline]
    pub(crate) fn apb19_isource53c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb19.apb19_isource53c_isource_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write apb20_tasks_triggern0 from [crate::peripheral::apb20::Apb20]"]
    #[inline]
    pub(crate) fn apb20_tasks_triggern0_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb20[_peripheral_instance].apb20_tasks_triggern0_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb20_events_triggeredn100 from [crate::peripheral::apb20::Apb20]"]
    #[inline]
    pub(crate) fn apb20_events_triggeredn100_read(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
    ) -> MemResult<u32> {
        self.apb20[_peripheral_instance]
            .apb20_events_triggeredn100_read(_reg_array)
    }
    #[doc = "Write apb20_events_triggeredn100 from [crate::peripheral::apb20::Apb20]"]
    #[inline]
    pub(crate) fn apb20_events_triggeredn100_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb20[_peripheral_instance].apb20_events_triggeredn100_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read apb20_inten300 from [crate::peripheral::apb20::Apb20]"]
    #[inline]
    pub(crate) fn apb20_inten300_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered0_read()?,
        );
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered1_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered2_read()?,
        ) << 2u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered3_read()?,
        ) << 3u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered4_read()?,
        ) << 4u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered5_read()?,
        ) << 5u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered6_read()?,
        ) << 6u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered7_read()?,
        ) << 7u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered8_read()?,
        ) << 8u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered9_read()?,
        ) << 9u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered10_read()?,
        ) << 10u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered11_read()?,
        ) << 11u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered12_read()?,
        ) << 12u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered13_read()?,
        ) << 13u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered14_read()?,
        ) << 14u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_inten300_triggered15_read()?,
        ) << 15u32;
        Ok(_value)
    }
    #[doc = "Write apb20_inten300 from [crate::peripheral::apb20::Apb20]"]
    #[inline]
    pub(crate) fn apb20_inten300_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered8_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered9_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered10_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered11_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered12_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered13_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered14_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance].apb20_inten300_triggered15_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb20_intenset304 from [crate::peripheral::apb20::Apb20]"]
    #[inline]
    pub(crate) fn apb20_intenset304_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered0_read()?,
        );
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered1_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered2_read()?,
        ) << 2u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered3_read()?,
        ) << 3u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered4_read()?,
        ) << 4u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered5_read()?,
        ) << 5u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered6_read()?,
        ) << 6u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered7_read()?,
        ) << 7u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered8_read()?,
        ) << 8u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered9_read()?,
        ) << 9u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered10_read()?,
        ) << 10u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered11_read()?,
        ) << 11u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered12_read()?,
        ) << 12u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered13_read()?,
        ) << 13u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered14_read()?,
        ) << 14u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered15_read()?,
        ) << 15u32;
        Ok(_value)
    }
    #[doc = "Write apb20_intenset304 from [crate::peripheral::apb20::Apb20]"]
    #[inline]
    pub(crate) fn apb20_intenset304_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered0_write(
                    ((_value[_i] >> 0) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered1_write(
                    ((_value[_i] >> 1) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered2_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered3_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered4_write(
                    ((_value[_i] >> 4) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered5_write(
                    ((_value[_i] >> 5) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered6_write(
                    ((_value[_i] >> 6) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered7_write(
                    ((_value[_i] >> 7) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered8_write(
                    ((_value[_i] >> 0) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered9_write(
                    ((_value[_i] >> 1) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered10_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered11_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered12_write(
                    ((_value[_i] >> 4) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered13_write(
                    ((_value[_i] >> 5) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered14_write(
                    ((_value[_i] >> 6) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenset304_triggered15_write(
                    ((_value[_i] >> 7) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        Ok(())
    }
    #[doc = "Read apb20_intenclr308 from [crate::peripheral::apb20::Apb20]"]
    #[inline]
    pub(crate) fn apb20_intenclr308_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered0_read()?,
        );
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered1_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered2_read()?,
        ) << 2u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered3_read()?,
        ) << 3u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered4_read()?,
        ) << 4u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered5_read()?,
        ) << 5u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered6_read()?,
        ) << 6u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered7_read()?,
        ) << 7u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered8_read()?,
        ) << 8u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered9_read()?,
        ) << 9u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered10_read()?,
        ) << 10u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered11_read()?,
        ) << 11u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered12_read()?,
        ) << 12u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered13_read()?,
        ) << 13u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered14_read()?,
        ) << 14u32;
        _value |= u32::from(
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered15_read()?,
        ) << 15u32;
        Ok(_value)
    }
    #[doc = "Write apb20_intenclr308 from [crate::peripheral::apb20::Apb20]"]
    #[inline]
    pub(crate) fn apb20_intenclr308_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered0_write(
                    ((_value[_i] >> 0) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered1_write(
                    ((_value[_i] >> 1) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered2_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered3_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered4_write(
                    ((_value[_i] >> 4) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered5_write(
                    ((_value[_i] >> 5) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered6_write(
                    ((_value[_i] >> 6) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered7_write(
                    ((_value[_i] >> 7) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered8_write(
                    ((_value[_i] >> 0) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered9_write(
                    ((_value[_i] >> 1) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered10_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered11_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered12_write(
                    ((_value[_i] >> 4) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered13_write(
                    ((_value[_i] >> 5) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered14_write(
                    ((_value[_i] >> 6) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb20[_peripheral_instance]
                .apb20_intenclr308_triggered15_write(
                    ((_value[_i] >> 7) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        Ok(())
    }
    #[doc = "Write timer3_tasks_start0 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_tasks_start0_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.timer3[_peripheral_instance].timer3_tasks_start0_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write timer3_tasks_stop4 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_tasks_stop4_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.timer3[_peripheral_instance].timer3_tasks_stop4_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write timer3_tasks_count8 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_tasks_count8_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.timer3[_peripheral_instance].timer3_tasks_count8_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write timer3_tasks_clearc from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_tasks_clearc_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.timer3[_peripheral_instance].timer3_tasks_clearc_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write timer3_tasks_shutdown10 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_tasks_shutdown10_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.timer3[_peripheral_instance].timer3_tasks_shutdown10_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write timer3_tasks_capturen40 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_tasks_capturen40_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.timer3[_peripheral_instance].timer3_tasks_capturen40_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read timer3_events_comparen140 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_events_comparen140_read(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
    ) -> MemResult<u32> {
        self.timer3[_peripheral_instance]
            .timer3_events_comparen140_read(_reg_array)
    }
    #[doc = "Write timer3_events_comparen140 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_events_comparen140_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.timer3[_peripheral_instance].timer3_events_comparen140_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read timer3_shorts200 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_shorts200_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare0_clear_read()?,
        );
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare1_clear_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare2_clear_read()?,
        ) << 2u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare3_clear_read()?,
        ) << 3u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare4_clear_read()?,
        ) << 4u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare5_clear_read()?,
        ) << 5u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare0_stop_read()?,
        ) << 8u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare1_stop_read()?,
        ) << 9u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare2_stop_read()?,
        ) << 10u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare3_stop_read()?,
        ) << 11u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare4_stop_read()?,
        ) << 12u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare5_stop_read()?,
        ) << 13u32;
        Ok(_value)
    }
    #[doc = "Write timer3_shorts200 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_shorts200_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare0_clear_write(
                    ((_value[_i] >> 0) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare1_clear_write(
                    ((_value[_i] >> 1) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare2_clear_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare3_clear_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare4_clear_write(
                    ((_value[_i] >> 4) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare5_clear_write(
                    ((_value[_i] >> 5) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare0_stop_write(
                    ((_value[_i] >> 0) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare1_stop_write(
                    ((_value[_i] >> 1) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare2_stop_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare3_stop_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare4_stop_write(
                    ((_value[_i] >> 4) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_shorts200_compare5_stop_write(
                    ((_value[_i] >> 5) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        Ok(())
    }
    #[doc = "Read timer3_intenset304 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_intenset304_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_intenset304_compare0_read()?,
        ) << 16u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_intenset304_compare1_read()?,
        ) << 17u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_intenset304_compare2_read()?,
        ) << 18u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_intenset304_compare3_read()?,
        ) << 19u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_intenset304_compare4_read()?,
        ) << 20u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_intenset304_compare5_read()?,
        ) << 21u32;
        Ok(_value)
    }
    #[doc = "Write timer3_intenset304 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_intenset304_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_intenset304_compare0_write(
                    ((_value[_i] >> 0) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_intenset304_compare1_write(
                    ((_value[_i] >> 1) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_intenset304_compare2_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_intenset304_compare3_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_intenset304_compare4_write(
                    ((_value[_i] >> 4) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_intenset304_compare5_write(
                    ((_value[_i] >> 5) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        Ok(())
    }
    #[doc = "Read timer3_intenclr308 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_intenclr308_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_intenclr308_compare0_read()?,
        ) << 16u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_intenclr308_compare1_read()?,
        ) << 17u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_intenclr308_compare2_read()?,
        ) << 18u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_intenclr308_compare3_read()?,
        ) << 19u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_intenclr308_compare4_read()?,
        ) << 20u32;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_intenclr308_compare5_read()?,
        ) << 21u32;
        Ok(_value)
    }
    #[doc = "Write timer3_intenclr308 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_intenclr308_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_intenclr308_compare0_write(
                    ((_value[_i] >> 0) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_intenclr308_compare1_write(
                    ((_value[_i] >> 1) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_intenclr308_compare2_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_intenclr308_compare3_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_intenclr308_compare4_write(
                    ((_value[_i] >> 4) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_intenclr308_compare5_write(
                    ((_value[_i] >> 5) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        Ok(())
    }
    #[doc = "Read timer3_mode504 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_mode504_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.timer3[_peripheral_instance].timer3_mode504_mode_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write timer3_mode504 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_mode504_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer3[_peripheral_instance].timer3_mode504_mode_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read timer3_bitmode508 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_bitmode508_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.timer3[_peripheral_instance]
                .timer3_bitmode508_bitmode_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write timer3_bitmode508 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_bitmode508_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer3[_peripheral_instance].timer3_bitmode508_bitmode_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read timer3_prescaler510 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_prescaler510_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_prescaler510_prescaler_read()?,
        );
        Ok(_value)
    }
    #[doc = "Write timer3_prescaler510 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_prescaler510_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.timer3[_peripheral_instance]
                .timer3_prescaler510_prescaler_write(
                    ((_value[_i] >> 0) & 15u8)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        Ok(())
    }
    #[doc = "Read timer3_ccn540 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_ccn540_read(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.timer3[_peripheral_instance]
                .timer3_ccn540_cc_read(_reg_array)?,
        );
        Ok(_value)
    }
    #[doc = "Write timer3_ccn540 from [crate::peripheral::timer3::Timer3]"]
    #[inline]
    pub(crate) fn timer3_ccn540_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.timer3[_peripheral_instance].timer3_ccn540_cc_write(
                _reg_array,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Write pwm0_tasks_stop4 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_tasks_stop4_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.pwm0[_peripheral_instance].pwm0_tasks_stop4_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write pwm0_tasks_seqstartn8 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_tasks_seqstartn8_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.pwm0[_peripheral_instance].pwm0_tasks_seqstartn8_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write pwm0_tasks_nextstep10 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_tasks_nextstep10_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.pwm0[_peripheral_instance].pwm0_tasks_nextstep10_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read pwm0_events_stopped104 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_events_stopped104_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.pwm0[_peripheral_instance].pwm0_events_stopped104_read()
    }
    #[doc = "Write pwm0_events_stopped104 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_events_stopped104_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.pwm0[_peripheral_instance].pwm0_events_stopped104_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read pwm0_events_seqstartedn108 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_events_seqstartedn108_read(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
    ) -> MemResult<u32> {
        self.pwm0[_peripheral_instance]
            .pwm0_events_seqstartedn108_read(_reg_array)
    }
    #[doc = "Write pwm0_events_seqstartedn108 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_events_seqstartedn108_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.pwm0[_peripheral_instance].pwm0_events_seqstartedn108_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read pwm0_events_seqendn110 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_events_seqendn110_read(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
    ) -> MemResult<u32> {
        self.pwm0[_peripheral_instance].pwm0_events_seqendn110_read(_reg_array)
    }
    #[doc = "Write pwm0_events_seqendn110 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_events_seqendn110_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.pwm0[_peripheral_instance].pwm0_events_seqendn110_write(
            _reg_array,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read pwm0_events_pwmperiodend118 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_events_pwmperiodend118_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.pwm0[_peripheral_instance].pwm0_events_pwmperiodend118_read()
    }
    #[doc = "Write pwm0_events_pwmperiodend118 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_events_pwmperiodend118_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.pwm0[_peripheral_instance].pwm0_events_pwmperiodend118_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read pwm0_events_loopsdone11c from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_events_loopsdone11c_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        self.pwm0[_peripheral_instance].pwm0_events_loopsdone11c_read()
    }
    #[doc = "Write pwm0_events_loopsdone11c from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_events_loopsdone11c_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.pwm0[_peripheral_instance].pwm0_events_loopsdone11c_write(
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read pwm0_shorts200 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_shorts200_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_shorts200_seqend0_stop_read()?,
        );
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_shorts200_seqend1_stop_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_shorts200_loopsdone_seqstart0_read()?,
        ) << 2u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_shorts200_loopsdone_seqstart1_read()?,
        ) << 3u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_shorts200_loopsdone_stop_read()?,
        ) << 4u32;
        Ok(_value)
    }
    #[doc = "Write pwm0_shorts200 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_shorts200_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_shorts200_seqend0_stop_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_shorts200_seqend1_stop_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance]
                .pwm0_shorts200_loopsdone_seqstart0_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance]
                .pwm0_shorts200_loopsdone_seqstart1_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance]
                .pwm0_shorts200_loopsdone_stop_write(
                    ((_value[_i] >> 4) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        Ok(())
    }
    #[doc = "Read pwm0_inten300 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_inten300_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_inten300_stopped_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_inten300_seqstarted0_read()?,
        ) << 2u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_inten300_seqstarted1_read()?,
        ) << 3u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_inten300_seqend0_read()?,
        ) << 4u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_inten300_seqend1_read()?,
        ) << 5u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_inten300_pwmperiodend_read()?,
        ) << 6u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_inten300_loopsdone_read()?,
        ) << 7u32;
        Ok(_value)
    }
    #[doc = "Write pwm0_inten300 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_inten300_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_inten300_stopped_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_inten300_seqstarted0_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_inten300_seqstarted1_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_inten300_seqend0_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_inten300_seqend1_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_inten300_pwmperiodend_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_inten300_loopsdone_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pwm0_intenset304 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_intenset304_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_intenset304_stopped_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_intenset304_seqstarted0_read()?,
        ) << 2u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_intenset304_seqstarted1_read()?,
        ) << 3u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_intenset304_seqend0_read()?,
        ) << 4u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_intenset304_seqend1_read()?,
        ) << 5u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_intenset304_pwmperiodend_read()?,
        ) << 6u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_intenset304_loopsdone_read()?,
        ) << 7u32;
        Ok(_value)
    }
    #[doc = "Write pwm0_intenset304 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_intenset304_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_intenset304_stopped_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance]
                .pwm0_intenset304_seqstarted0_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance]
                .pwm0_intenset304_seqstarted1_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_intenset304_seqend0_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_intenset304_seqend1_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance]
                .pwm0_intenset304_pwmperiodend_write(
                    ((_value[_i] >> 6) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_intenset304_loopsdone_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pwm0_intenclr308 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_intenclr308_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_intenclr308_stopped_read()?,
        ) << 1u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_intenclr308_seqstarted0_read()?,
        ) << 2u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_intenclr308_seqstarted1_read()?,
        ) << 3u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_intenclr308_seqend0_read()?,
        ) << 4u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_intenclr308_seqend1_read()?,
        ) << 5u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_intenclr308_pwmperiodend_read()?,
        ) << 6u32;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_intenclr308_loopsdone_read()?,
        ) << 7u32;
        Ok(_value)
    }
    #[doc = "Write pwm0_intenclr308 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_intenclr308_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_intenclr308_stopped_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance]
                .pwm0_intenclr308_seqstarted0_write(
                    ((_value[_i] >> 2) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance]
                .pwm0_intenclr308_seqstarted1_write(
                    ((_value[_i] >> 3) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_intenclr308_seqend0_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_intenclr308_seqend1_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance]
                .pwm0_intenclr308_pwmperiodend_write(
                    ((_value[_i] >> 6) & 1 != 0)
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_intenclr308_loopsdone_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pwm0_enable500 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_enable500_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_enable500_enable_read()?,
        );
        Ok(_value)
    }
    #[doc = "Write pwm0_enable500 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_enable500_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_enable500_enable_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pwm0_mode504 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_mode504_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_mode504_updown_read()?,
        );
        Ok(_value)
    }
    #[doc = "Write pwm0_mode504 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_mode504_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_mode504_updown_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pwm0_countertop508 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_countertop508_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_countertop508_countertop_read()?,
        );
        Ok(_value)
    }
    #[doc = "Write pwm0_countertop508 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_countertop508_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 127u8)
                as u16)
                << (0 + (1 * 8));
            self.pwm0[_peripheral_instance]
                .pwm0_countertop508_countertop_write(
                    _extracted
                        .try_into()
                        .map_err(|_| MemError::WriteViolation)?,
                )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read pwm0_prescaler50c from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_prescaler50c_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.pwm0[_peripheral_instance]
                .pwm0_prescaler50c_prescaler_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write pwm0_prescaler50c from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_prescaler50c_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_prescaler50c_prescaler_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pwm0_decoder510 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_decoder510_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.pwm0[_peripheral_instance].pwm0_decoder510_load_read()?,
        ));
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_decoder510_mode_read()?,
        ) << 8u32;
        Ok(_value)
    }
    #[doc = "Write pwm0_decoder510 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_decoder510_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_decoder510_load_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_decoder510_mode_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pwm0_loop514 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_loop514_read(
        &mut self,
        _peripheral_instance: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u16::from(
            self.pwm0[_peripheral_instance].pwm0_loop514_cnt_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write pwm0_loop514 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_loop514_write(
        &mut self,
        _peripheral_instance: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 2;
            let _value = u16::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.pwm0[_peripheral_instance].pwm0_loop514_cnt_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read pwm0_seqn_ptr0 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_seqn_ptr0_read(
        &mut self,
        _peripheral_instance: usize,
        _seqn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.pwm0[_peripheral_instance].pwm0_seqn_ptr0_ptr_read(_seqn)?,
        );
        Ok(_value)
    }
    #[doc = "Write pwm0_seqn_ptr0 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_seqn_ptr0_write(
        &mut self,
        _peripheral_instance: usize,
        _seqn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.pwm0[_peripheral_instance].pwm0_seqn_ptr0_ptr_write(
                _seqn,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read pwm0_seqn_cnt4 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_seqn_cnt4_read(
        &mut self,
        _peripheral_instance: usize,
        _seqn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u16::from(
            self.pwm0[_peripheral_instance].pwm0_seqn_cnt4_cnt_read(_seqn)?,
        ));
        Ok(_value)
    }
    #[doc = "Write pwm0_seqn_cnt4 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_seqn_cnt4_write(
        &mut self,
        _peripheral_instance: usize,
        _seqn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 127u8)
                as u16)
                << (0 + (1 * 8));
            self.pwm0[_peripheral_instance].pwm0_seqn_cnt4_cnt_write(
                _seqn,
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read pwm0_seqn_refresh8 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_seqn_refresh8_read(
        &mut self,
        _peripheral_instance: usize,
        _seqn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_seqn_refresh8_cnt_read(_seqn)?,
        ));
        Ok(_value)
    }
    #[doc = "Write pwm0_seqn_refresh8 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_seqn_refresh8_write(
        &mut self,
        _peripheral_instance: usize,
        _seqn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 3 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 3;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.pwm0[_peripheral_instance].pwm0_seqn_refresh8_cnt_write(
                _seqn,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 3) || (_end > 0 && _end < 3) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read pwm0_seqn_enddelayc from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_seqn_enddelayc_read(
        &mut self,
        _peripheral_instance: usize,
        _seqn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_seqn_enddelayc_cnt_read(_seqn)?,
        );
        Ok(_value)
    }
    #[doc = "Write pwm0_seqn_enddelayc from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_seqn_enddelayc_write(
        &mut self,
        _peripheral_instance: usize,
        _seqn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 3 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 3;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.pwm0[_peripheral_instance].pwm0_seqn_enddelayc_cnt_write(
                _seqn,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 3) || (_end > 0 && _end < 3) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read pwm0_psel_outn0 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_psel_outn0_read(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 2147483616;
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_psel_outn0_pin_read(_reg_array)?,
        );
        _value |= u32::from(
            self.pwm0[_peripheral_instance]
                .pwm0_psel_outn0_connect_read(_reg_array)?,
        ) << 31u32;
        Ok(_value)
    }
    #[doc = "Write pwm0_psel_outn0 from [crate::peripheral::pwm0::Pwm0]"]
    #[inline]
    pub(crate) fn pwm0_psel_outn0_write(
        &mut self,
        _peripheral_instance: usize,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_psel_outn0_pin_write(
                _reg_array,
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.pwm0[_peripheral_instance].pwm0_psel_outn0_connect_write(
                _reg_array,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write pdm_tasks_start0 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_tasks_start0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.pdm.pdm_tasks_start0_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write pdm_tasks_stop4 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_tasks_stop4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.pdm.pdm_tasks_stop4_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read pdm_events_started100 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_events_started100_read(&mut self) -> MemResult<u32> {
        self.pdm.pdm_events_started100_read()
    }
    #[doc = "Write pdm_events_started100 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_events_started100_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.pdm.pdm_events_started100_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read pdm_events_stopped104 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_events_stopped104_read(&mut self) -> MemResult<u32> {
        self.pdm.pdm_events_stopped104_read()
    }
    #[doc = "Write pdm_events_stopped104 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_events_stopped104_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.pdm.pdm_events_stopped104_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read pdm_events_end108 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_events_end108_read(&mut self) -> MemResult<u32> {
        self.pdm.pdm_events_end108_read()
    }
    #[doc = "Write pdm_events_end108 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_events_end108_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.pdm.pdm_events_end108_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read pdm_inten300 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_inten300_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.pdm.pdm_inten300_started_read()?);
        _value |= u32::from(self.pdm.pdm_inten300_stopped_read()?) << 1u32;
        _value |= u32::from(self.pdm.pdm_inten300_end_read()?) << 2u32;
        Ok(_value)
    }
    #[doc = "Write pdm_inten300 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_inten300_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_inten300_started_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_inten300_stopped_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_inten300_end_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pdm_intenset304 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.pdm.pdm_intenset304_started_read()?);
        _value |= u32::from(self.pdm.pdm_intenset304_stopped_read()?) << 1u32;
        _value |= u32::from(self.pdm.pdm_intenset304_end_read()?) << 2u32;
        Ok(_value)
    }
    #[doc = "Write pdm_intenset304 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_intenset304_started_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_intenset304_stopped_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_intenset304_end_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pdm_intenclr308 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.pdm.pdm_intenclr308_started_read()?);
        _value |= u32::from(self.pdm.pdm_intenclr308_stopped_read()?) << 1u32;
        _value |= u32::from(self.pdm.pdm_intenclr308_end_read()?) << 2u32;
        Ok(_value)
    }
    #[doc = "Write pdm_intenclr308 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_intenclr308_started_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_intenclr308_stopped_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_intenclr308_end_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pdm_enable500 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_enable500_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.pdm.pdm_enable500_enable_read()?);
        Ok(_value)
    }
    #[doc = "Write pdm_enable500 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_enable500_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_enable500_enable_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pdm_pdmclkctrl504 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_pdmclkctrl504_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u32::from(self.pdm.pdm_pdmclkctrl504_freq_read()?));
        Ok(_value)
    }
    #[doc = "Write pdm_pdmclkctrl504 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_pdmclkctrl504_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.pdm.pdm_pdmclkctrl504_freq_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read pdm_mode508 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_mode508_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.pdm.pdm_mode508_operation_read()?);
        _value |= u32::from(self.pdm.pdm_mode508_edge_read()?) << 1u32;
        Ok(_value)
    }
    #[doc = "Write pdm_mode508 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_mode508_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_mode508_operation_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_mode508_edge_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pdm_gainl518 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_gainl518_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.pdm.pdm_gainl518_gainl_read()?));
        Ok(_value)
    }
    #[doc = "Write pdm_gainl518 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_gainl518_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_gainl518_gainl_write(
                ((_value[_i] >> 0) & 127u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pdm_gainr51c from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_gainr51c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.pdm.pdm_gainr51c_gainr_read()?));
        Ok(_value)
    }
    #[doc = "Write pdm_gainr51c from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_gainr51c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_gainr51c_gainr_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pdm_psel_clk0 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_psel_clk0_read(&mut self) -> MemResult<u32> {
        let mut _value = 2147483616;
        _value |= u32::from(self.pdm.pdm_psel_clk0_pin_read()?);
        _value |= u32::from(self.pdm.pdm_psel_clk0_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write pdm_psel_clk0 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_psel_clk0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_psel_clk0_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.pdm.pdm_psel_clk0_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pdm_psel_din4 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_psel_din4_read(&mut self) -> MemResult<u32> {
        let mut _value = 2147483616;
        _value |= u32::from(self.pdm.pdm_psel_din4_pin_read()?);
        _value |= u32::from(self.pdm.pdm_psel_din4_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write pdm_psel_din4 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_psel_din4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.pdm.pdm_psel_din4_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.pdm.pdm_psel_din4_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read pdm_sample_ptr0 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_sample_ptr0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.pdm.pdm_sample_ptr0_sampleptr_read()?);
        Ok(_value)
    }
    #[doc = "Write pdm_sample_ptr0 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_sample_ptr0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.pdm.pdm_sample_ptr0_sampleptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read pdm_sample_maxcnt4 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_sample_maxcnt4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.pdm.pdm_sample_maxcnt4_buffsize_read()?);
        Ok(_value)
    }
    #[doc = "Write pdm_sample_maxcnt4 from [crate::peripheral::pdm::Pdm]"]
    #[inline]
    pub(crate) fn pdm_sample_maxcnt4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 127u8)
                as u16)
                << (0 + (1 * 8));
            self.pdm.pdm_sample_maxcnt4_buffsize_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read nvmc_ready400 from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_ready400_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nvmc.nvmc_ready400_ready_read()?);
        Ok(_value)
    }
    #[doc = "Read nvmc_config504 from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_config504_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.nvmc.nvmc_config504_wen_read()?));
        Ok(_value)
    }
    #[doc = "Write nvmc_config504 from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_config504_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nvmc.nvmc_config504_wen_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nvmc_erasepage508 from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_erasepage508_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nvmc.nvmc_erasepage508_erasepage_read()?);
        Ok(_value)
    }
    #[doc = "Write nvmc_erasepage508 from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_erasepage508_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.nvmc.nvmc_erasepage508_erasepage_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read nvmc_eraseall50c from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_eraseall50c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nvmc.nvmc_eraseall50c_eraseall_read()?);
        Ok(_value)
    }
    #[doc = "Write nvmc_eraseall50c from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_eraseall50c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nvmc.nvmc_eraseall50c_eraseall_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nvmc_erasepcr0510 from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_erasepcr0510_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nvmc.nvmc_erasepcr0510_erasepcr0_read()?);
        Ok(_value)
    }
    #[doc = "Write nvmc_erasepcr0510 from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_erasepcr0510_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.nvmc.nvmc_erasepcr0510_erasepcr0_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read nvmc_eraseuicr514 from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_eraseuicr514_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nvmc.nvmc_eraseuicr514_eraseuicr_read()?);
        Ok(_value)
    }
    #[doc = "Write nvmc_eraseuicr514 from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_eraseuicr514_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nvmc.nvmc_eraseuicr514_eraseuicr_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nvmc_icachecnf540 from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_icachecnf540_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nvmc.nvmc_icachecnf540_cacheen_read()?);
        _value |=
            u32::from(self.nvmc.nvmc_icachecnf540_cacheprofen_read()?) << 8u32;
        Ok(_value)
    }
    #[doc = "Write nvmc_icachecnf540 from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_icachecnf540_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.nvmc.nvmc_icachecnf540_cacheen_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.nvmc.nvmc_icachecnf540_cacheprofen_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read nvmc_ihit548 from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_ihit548_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nvmc.nvmc_ihit548_hits_read()?);
        Ok(_value)
    }
    #[doc = "Write nvmc_ihit548 from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_ihit548_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.nvmc.nvmc_ihit548_hits_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read nvmc_imiss54c from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_imiss54c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.nvmc.nvmc_imiss54c_misses_read()?);
        Ok(_value)
    }
    #[doc = "Write nvmc_imiss54c from [crate::peripheral::nvmc::Nvmc]"]
    #[inline]
    pub(crate) fn nvmc_imiss54c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.nvmc.nvmc_imiss54c_misses_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Write ppi_tasks_chgn_en0 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_tasks_chgn_en0_write(
        &mut self,
        _tasks_chgn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.ppi.ppi_tasks_chgn_en0_write(
            _tasks_chgn,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Write ppi_tasks_chgn_dis4 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_tasks_chgn_dis4_write(
        &mut self,
        _tasks_chgn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.ppi.ppi_tasks_chgn_dis4_write(
            _tasks_chgn,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read ppi_chen500 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_chen500_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ppi.ppi_chen500_ch0_read()?);
        _value |= u32::from(self.ppi.ppi_chen500_ch1_read()?) << 1u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch2_read()?) << 2u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch3_read()?) << 3u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch4_read()?) << 4u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch5_read()?) << 5u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch6_read()?) << 6u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch7_read()?) << 7u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch8_read()?) << 8u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch9_read()?) << 9u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch10_read()?) << 10u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch11_read()?) << 11u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch12_read()?) << 12u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch13_read()?) << 13u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch14_read()?) << 14u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch15_read()?) << 15u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch16_read()?) << 16u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch17_read()?) << 17u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch18_read()?) << 18u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch19_read()?) << 19u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch20_read()?) << 20u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch21_read()?) << 21u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch22_read()?) << 22u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch23_read()?) << 23u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch24_read()?) << 24u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch25_read()?) << 25u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch26_read()?) << 26u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch27_read()?) << 27u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch28_read()?) << 28u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch29_read()?) << 29u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch30_read()?) << 30u32;
        _value |= u32::from(self.ppi.ppi_chen500_ch31_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write ppi_chen500 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_chen500_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chen500_ch0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chen500_ch1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chen500_ch2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chen500_ch3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chen500_ch4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chen500_ch5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chen500_ch6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chen500_ch7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chen500_ch8_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chen500_ch9_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chen500_ch10_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chen500_ch11_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chen500_ch12_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chen500_ch13_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chen500_ch14_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chen500_ch15_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chen500_ch16_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chen500_ch17_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chen500_ch18_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chen500_ch19_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chen500_ch20_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chen500_ch21_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chen500_ch22_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chen500_ch23_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chen500_ch24_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chen500_ch25_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chen500_ch26_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chen500_ch27_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chen500_ch28_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chen500_ch29_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chen500_ch30_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chen500_ch31_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read ppi_chenset504 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_chenset504_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ppi.ppi_chenset504_ch0_read()?);
        _value |= u32::from(self.ppi.ppi_chenset504_ch1_read()?) << 1u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch2_read()?) << 2u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch3_read()?) << 3u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch4_read()?) << 4u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch5_read()?) << 5u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch6_read()?) << 6u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch7_read()?) << 7u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch8_read()?) << 8u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch9_read()?) << 9u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch10_read()?) << 10u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch11_read()?) << 11u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch12_read()?) << 12u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch13_read()?) << 13u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch14_read()?) << 14u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch15_read()?) << 15u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch16_read()?) << 16u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch17_read()?) << 17u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch18_read()?) << 18u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch19_read()?) << 19u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch20_read()?) << 20u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch21_read()?) << 21u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch22_read()?) << 22u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch23_read()?) << 23u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch24_read()?) << 24u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch25_read()?) << 25u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch26_read()?) << 26u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch27_read()?) << 27u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch28_read()?) << 28u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch29_read()?) << 29u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch30_read()?) << 30u32;
        _value |= u32::from(self.ppi.ppi_chenset504_ch31_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write ppi_chenset504 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_chenset504_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenset504_ch0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenset504_ch1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenset504_ch2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenset504_ch3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenset504_ch4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenset504_ch5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenset504_ch6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenset504_ch7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenset504_ch8_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenset504_ch9_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenset504_ch10_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenset504_ch11_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenset504_ch12_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenset504_ch13_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenset504_ch14_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenset504_ch15_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenset504_ch16_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenset504_ch17_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenset504_ch18_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenset504_ch19_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenset504_ch20_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenset504_ch21_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenset504_ch22_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenset504_ch23_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenset504_ch24_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenset504_ch25_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenset504_ch26_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenset504_ch27_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenset504_ch28_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenset504_ch29_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenset504_ch30_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenset504_ch31_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read ppi_chenclr508 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_chenclr508_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch0_read()?);
        _value |= u32::from(self.ppi.ppi_chenclr508_ch1_read()?) << 1u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch2_read()?) << 2u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch3_read()?) << 3u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch4_read()?) << 4u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch5_read()?) << 5u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch6_read()?) << 6u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch7_read()?) << 7u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch8_read()?) << 8u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch9_read()?) << 9u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch10_read()?) << 10u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch11_read()?) << 11u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch12_read()?) << 12u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch13_read()?) << 13u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch14_read()?) << 14u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch15_read()?) << 15u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch16_read()?) << 16u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch17_read()?) << 17u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch18_read()?) << 18u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch19_read()?) << 19u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch20_read()?) << 20u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch21_read()?) << 21u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch22_read()?) << 22u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch23_read()?) << 23u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch24_read()?) << 24u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch25_read()?) << 25u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch26_read()?) << 26u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch27_read()?) << 27u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch28_read()?) << 28u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch29_read()?) << 29u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch30_read()?) << 30u32;
        _value |= u32::from(self.ppi.ppi_chenclr508_ch31_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write ppi_chenclr508 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_chenclr508_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenclr508_ch0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenclr508_ch1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenclr508_ch2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenclr508_ch3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenclr508_ch4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenclr508_ch5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenclr508_ch6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chenclr508_ch7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenclr508_ch8_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenclr508_ch9_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenclr508_ch10_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenclr508_ch11_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenclr508_ch12_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenclr508_ch13_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenclr508_ch14_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chenclr508_ch15_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenclr508_ch16_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenclr508_ch17_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenclr508_ch18_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenclr508_ch19_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenclr508_ch20_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenclr508_ch21_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenclr508_ch22_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chenclr508_ch23_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenclr508_ch24_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenclr508_ch25_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenclr508_ch26_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenclr508_ch27_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenclr508_ch28_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenclr508_ch29_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenclr508_ch30_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chenclr508_ch31_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read ppi_chn_eep0 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_chn_eep0_read(&mut self, _chn: usize) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ppi.ppi_chn_eep0_eep_read(_chn)?);
        Ok(_value)
    }
    #[doc = "Write ppi_chn_eep0 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_chn_eep0_write(
        &mut self,
        _chn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.ppi.ppi_chn_eep0_eep_write(
                _chn,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read ppi_chn_tep4 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_chn_tep4_read(&mut self, _chn: usize) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ppi.ppi_chn_tep4_tep_read(_chn)?);
        Ok(_value)
    }
    #[doc = "Write ppi_chn_tep4 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_chn_tep4_write(
        &mut self,
        _chn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.ppi.ppi_chn_tep4_tep_write(
                _chn,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read ppi_chgn800 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_chgn800_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ppi.ppi_chgn800_ch0_read(_reg_array)?);
        _value |= u32::from(self.ppi.ppi_chgn800_ch1_read(_reg_array)?) << 1u32;
        _value |= u32::from(self.ppi.ppi_chgn800_ch2_read(_reg_array)?) << 2u32;
        _value |= u32::from(self.ppi.ppi_chgn800_ch3_read(_reg_array)?) << 3u32;
        _value |= u32::from(self.ppi.ppi_chgn800_ch4_read(_reg_array)?) << 4u32;
        _value |= u32::from(self.ppi.ppi_chgn800_ch5_read(_reg_array)?) << 5u32;
        _value |= u32::from(self.ppi.ppi_chgn800_ch6_read(_reg_array)?) << 6u32;
        _value |= u32::from(self.ppi.ppi_chgn800_ch7_read(_reg_array)?) << 7u32;
        _value |= u32::from(self.ppi.ppi_chgn800_ch8_read(_reg_array)?) << 8u32;
        _value |= u32::from(self.ppi.ppi_chgn800_ch9_read(_reg_array)?) << 9u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch10_read(_reg_array)?) << 10u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch11_read(_reg_array)?) << 11u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch12_read(_reg_array)?) << 12u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch13_read(_reg_array)?) << 13u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch14_read(_reg_array)?) << 14u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch15_read(_reg_array)?) << 15u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch16_read(_reg_array)?) << 16u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch17_read(_reg_array)?) << 17u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch18_read(_reg_array)?) << 18u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch19_read(_reg_array)?) << 19u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch20_read(_reg_array)?) << 20u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch21_read(_reg_array)?) << 21u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch22_read(_reg_array)?) << 22u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch23_read(_reg_array)?) << 23u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch24_read(_reg_array)?) << 24u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch25_read(_reg_array)?) << 25u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch26_read(_reg_array)?) << 26u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch27_read(_reg_array)?) << 27u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch28_read(_reg_array)?) << 28u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch29_read(_reg_array)?) << 29u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch30_read(_reg_array)?) << 30u32;
        _value |=
            u32::from(self.ppi.ppi_chgn800_ch31_read(_reg_array)?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write ppi_chgn800 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_chgn800_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chgn800_ch0_write(
                _reg_array,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chgn800_ch1_write(
                _reg_array,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chgn800_ch2_write(
                _reg_array,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chgn800_ch3_write(
                _reg_array,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chgn800_ch4_write(
                _reg_array,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chgn800_ch5_write(
                _reg_array,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chgn800_ch6_write(
                _reg_array,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.ppi.ppi_chgn800_ch7_write(
                _reg_array,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chgn800_ch8_write(
                _reg_array,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chgn800_ch9_write(
                _reg_array,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chgn800_ch10_write(
                _reg_array,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chgn800_ch11_write(
                _reg_array,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chgn800_ch12_write(
                _reg_array,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chgn800_ch13_write(
                _reg_array,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chgn800_ch14_write(
                _reg_array,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.ppi.ppi_chgn800_ch15_write(
                _reg_array,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chgn800_ch16_write(
                _reg_array,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chgn800_ch17_write(
                _reg_array,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chgn800_ch18_write(
                _reg_array,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chgn800_ch19_write(
                _reg_array,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chgn800_ch20_write(
                _reg_array,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chgn800_ch21_write(
                _reg_array,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chgn800_ch22_write(
                _reg_array,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.ppi.ppi_chgn800_ch23_write(
                _reg_array,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chgn800_ch24_write(
                _reg_array,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chgn800_ch25_write(
                _reg_array,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chgn800_ch26_write(
                _reg_array,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chgn800_ch27_write(
                _reg_array,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chgn800_ch28_write(
                _reg_array,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chgn800_ch29_write(
                _reg_array,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chgn800_ch30_write(
                _reg_array,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.ppi.ppi_chgn800_ch31_write(
                _reg_array,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read ppi_forkn_tep0 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_forkn_tep0_read(
        &mut self,
        _forkn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.ppi.ppi_forkn_tep0_tep_read(_forkn)?);
        Ok(_value)
    }
    #[doc = "Write ppi_forkn_tep0 from [crate::peripheral::ppi::Ppi]"]
    #[inline]
    pub(crate) fn ppi_forkn_tep0_write(
        &mut self,
        _forkn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.ppi.ppi_forkn_tep0_tep_write(
                _forkn,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read mwu_events_regionn_wa0 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_events_regionn_wa0_read(
        &mut self,
        _events_regionn: usize,
    ) -> MemResult<u32> {
        self.mwu.mwu_events_regionn_wa0_read(_events_regionn)
    }
    #[doc = "Write mwu_events_regionn_wa0 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_events_regionn_wa0_write(
        &mut self,
        _events_regionn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.mwu.mwu_events_regionn_wa0_write(
            _events_regionn,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read mwu_events_regionn_ra4 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_events_regionn_ra4_read(
        &mut self,
        _events_regionn: usize,
    ) -> MemResult<u32> {
        self.mwu.mwu_events_regionn_ra4_read(_events_regionn)
    }
    #[doc = "Write mwu_events_regionn_ra4 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_events_regionn_ra4_write(
        &mut self,
        _events_regionn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.mwu.mwu_events_regionn_ra4_write(
            _events_regionn,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read mwu_events_pregionn_wa0 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_events_pregionn_wa0_read(
        &mut self,
        _events_pregionn: usize,
    ) -> MemResult<u32> {
        self.mwu.mwu_events_pregionn_wa0_read(_events_pregionn)
    }
    #[doc = "Write mwu_events_pregionn_wa0 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_events_pregionn_wa0_write(
        &mut self,
        _events_pregionn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.mwu.mwu_events_pregionn_wa0_write(
            _events_pregionn,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read mwu_events_pregionn_ra4 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_events_pregionn_ra4_read(
        &mut self,
        _events_pregionn: usize,
    ) -> MemResult<u32> {
        self.mwu.mwu_events_pregionn_ra4_read(_events_pregionn)
    }
    #[doc = "Write mwu_events_pregionn_ra4 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_events_pregionn_ra4_write(
        &mut self,
        _events_pregionn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.mwu.mwu_events_pregionn_ra4_write(
            _events_pregionn,
            u32::from_ne_bytes(_value.try_into().unwrap()),
        )
    }
    #[doc = "Read mwu_inten300 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_inten300_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.mwu.mwu_inten300_region0wa_read()?);
        _value |= u32::from(self.mwu.mwu_inten300_region0ra_read()?) << 1u32;
        _value |= u32::from(self.mwu.mwu_inten300_region1wa_read()?) << 2u32;
        _value |= u32::from(self.mwu.mwu_inten300_region1ra_read()?) << 3u32;
        _value |= u32::from(self.mwu.mwu_inten300_region2wa_read()?) << 4u32;
        _value |= u32::from(self.mwu.mwu_inten300_region2ra_read()?) << 5u32;
        _value |= u32::from(self.mwu.mwu_inten300_region3wa_read()?) << 6u32;
        _value |= u32::from(self.mwu.mwu_inten300_region3ra_read()?) << 7u32;
        _value |= u32::from(self.mwu.mwu_inten300_pregion0wa_read()?) << 24u32;
        _value |= u32::from(self.mwu.mwu_inten300_pregion0ra_read()?) << 25u32;
        _value |= u32::from(self.mwu.mwu_inten300_pregion1wa_read()?) << 26u32;
        _value |= u32::from(self.mwu.mwu_inten300_pregion1ra_read()?) << 27u32;
        Ok(_value)
    }
    #[doc = "Write mwu_inten300 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_inten300_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_inten300_region0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_inten300_region0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_inten300_region1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_inten300_region1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_inten300_region2wa_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_inten300_region2ra_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_inten300_region3wa_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_inten300_region3ra_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_inten300_pregion0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_inten300_pregion0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_inten300_pregion1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_inten300_pregion1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read mwu_intenset304 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.mwu.mwu_intenset304_region0wa_read()?);
        _value |= u32::from(self.mwu.mwu_intenset304_region0ra_read()?) << 1u32;
        _value |= u32::from(self.mwu.mwu_intenset304_region1wa_read()?) << 2u32;
        _value |= u32::from(self.mwu.mwu_intenset304_region1ra_read()?) << 3u32;
        _value |= u32::from(self.mwu.mwu_intenset304_region2wa_read()?) << 4u32;
        _value |= u32::from(self.mwu.mwu_intenset304_region2ra_read()?) << 5u32;
        _value |= u32::from(self.mwu.mwu_intenset304_region3wa_read()?) << 6u32;
        _value |= u32::from(self.mwu.mwu_intenset304_region3ra_read()?) << 7u32;
        _value |=
            u32::from(self.mwu.mwu_intenset304_pregion0wa_read()?) << 24u32;
        _value |=
            u32::from(self.mwu.mwu_intenset304_pregion0ra_read()?) << 25u32;
        _value |=
            u32::from(self.mwu.mwu_intenset304_pregion1wa_read()?) << 26u32;
        _value |=
            u32::from(self.mwu.mwu_intenset304_pregion1ra_read()?) << 27u32;
        Ok(_value)
    }
    #[doc = "Write mwu_intenset304 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenset304_region0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenset304_region0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenset304_region1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenset304_region1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenset304_region2wa_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenset304_region2ra_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenset304_region3wa_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenset304_region3ra_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_intenset304_pregion0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_intenset304_pregion0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_intenset304_pregion1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_intenset304_pregion1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read mwu_intenclr308 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.mwu.mwu_intenclr308_region0wa_read()?);
        _value |= u32::from(self.mwu.mwu_intenclr308_region0ra_read()?) << 1u32;
        _value |= u32::from(self.mwu.mwu_intenclr308_region1wa_read()?) << 2u32;
        _value |= u32::from(self.mwu.mwu_intenclr308_region1ra_read()?) << 3u32;
        _value |= u32::from(self.mwu.mwu_intenclr308_region2wa_read()?) << 4u32;
        _value |= u32::from(self.mwu.mwu_intenclr308_region2ra_read()?) << 5u32;
        _value |= u32::from(self.mwu.mwu_intenclr308_region3wa_read()?) << 6u32;
        _value |= u32::from(self.mwu.mwu_intenclr308_region3ra_read()?) << 7u32;
        _value |=
            u32::from(self.mwu.mwu_intenclr308_pregion0wa_read()?) << 24u32;
        _value |=
            u32::from(self.mwu.mwu_intenclr308_pregion0ra_read()?) << 25u32;
        _value |=
            u32::from(self.mwu.mwu_intenclr308_pregion1wa_read()?) << 26u32;
        _value |=
            u32::from(self.mwu.mwu_intenclr308_pregion1ra_read()?) << 27u32;
        Ok(_value)
    }
    #[doc = "Write mwu_intenclr308 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenclr308_region0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenclr308_region0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenclr308_region1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenclr308_region1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenclr308_region2wa_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenclr308_region2ra_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenclr308_region3wa_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_intenclr308_region3ra_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_intenclr308_pregion0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_intenclr308_pregion0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_intenclr308_pregion1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_intenclr308_pregion1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read mwu_nmien320 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_nmien320_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.mwu.mwu_nmien320_region0wa_read()?);
        _value |= u32::from(self.mwu.mwu_nmien320_region0ra_read()?) << 1u32;
        _value |= u32::from(self.mwu.mwu_nmien320_region1wa_read()?) << 2u32;
        _value |= u32::from(self.mwu.mwu_nmien320_region1ra_read()?) << 3u32;
        _value |= u32::from(self.mwu.mwu_nmien320_region2wa_read()?) << 4u32;
        _value |= u32::from(self.mwu.mwu_nmien320_region2ra_read()?) << 5u32;
        _value |= u32::from(self.mwu.mwu_nmien320_region3wa_read()?) << 6u32;
        _value |= u32::from(self.mwu.mwu_nmien320_region3ra_read()?) << 7u32;
        _value |= u32::from(self.mwu.mwu_nmien320_pregion0wa_read()?) << 24u32;
        _value |= u32::from(self.mwu.mwu_nmien320_pregion0ra_read()?) << 25u32;
        _value |= u32::from(self.mwu.mwu_nmien320_pregion1wa_read()?) << 26u32;
        _value |= u32::from(self.mwu.mwu_nmien320_pregion1ra_read()?) << 27u32;
        Ok(_value)
    }
    #[doc = "Write mwu_nmien320 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_nmien320_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmien320_region0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmien320_region0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmien320_region1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmien320_region1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmien320_region2wa_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmien320_region2ra_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmien320_region3wa_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmien320_region3ra_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_nmien320_pregion0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_nmien320_pregion0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_nmien320_pregion1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_nmien320_pregion1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read mwu_nmienset324 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_nmienset324_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.mwu.mwu_nmienset324_region0wa_read()?);
        _value |= u32::from(self.mwu.mwu_nmienset324_region0ra_read()?) << 1u32;
        _value |= u32::from(self.mwu.mwu_nmienset324_region1wa_read()?) << 2u32;
        _value |= u32::from(self.mwu.mwu_nmienset324_region1ra_read()?) << 3u32;
        _value |= u32::from(self.mwu.mwu_nmienset324_region2wa_read()?) << 4u32;
        _value |= u32::from(self.mwu.mwu_nmienset324_region2ra_read()?) << 5u32;
        _value |= u32::from(self.mwu.mwu_nmienset324_region3wa_read()?) << 6u32;
        _value |= u32::from(self.mwu.mwu_nmienset324_region3ra_read()?) << 7u32;
        _value |=
            u32::from(self.mwu.mwu_nmienset324_pregion0wa_read()?) << 24u32;
        _value |=
            u32::from(self.mwu.mwu_nmienset324_pregion0ra_read()?) << 25u32;
        _value |=
            u32::from(self.mwu.mwu_nmienset324_pregion1wa_read()?) << 26u32;
        _value |=
            u32::from(self.mwu.mwu_nmienset324_pregion1ra_read()?) << 27u32;
        Ok(_value)
    }
    #[doc = "Write mwu_nmienset324 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_nmienset324_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienset324_region0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienset324_region0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienset324_region1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienset324_region1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienset324_region2wa_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienset324_region2ra_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienset324_region3wa_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienset324_region3ra_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_nmienset324_pregion0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_nmienset324_pregion0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_nmienset324_pregion1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_nmienset324_pregion1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read mwu_nmienclr328 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_nmienclr328_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.mwu.mwu_nmienclr328_region0wa_read()?);
        _value |= u32::from(self.mwu.mwu_nmienclr328_region0ra_read()?) << 1u32;
        _value |= u32::from(self.mwu.mwu_nmienclr328_region1wa_read()?) << 2u32;
        _value |= u32::from(self.mwu.mwu_nmienclr328_region1ra_read()?) << 3u32;
        _value |= u32::from(self.mwu.mwu_nmienclr328_region2wa_read()?) << 4u32;
        _value |= u32::from(self.mwu.mwu_nmienclr328_region2ra_read()?) << 5u32;
        _value |= u32::from(self.mwu.mwu_nmienclr328_region3wa_read()?) << 6u32;
        _value |= u32::from(self.mwu.mwu_nmienclr328_region3ra_read()?) << 7u32;
        _value |=
            u32::from(self.mwu.mwu_nmienclr328_pregion0wa_read()?) << 24u32;
        _value |=
            u32::from(self.mwu.mwu_nmienclr328_pregion0ra_read()?) << 25u32;
        _value |=
            u32::from(self.mwu.mwu_nmienclr328_pregion1wa_read()?) << 26u32;
        _value |=
            u32::from(self.mwu.mwu_nmienclr328_pregion1ra_read()?) << 27u32;
        Ok(_value)
    }
    #[doc = "Write mwu_nmienclr328 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_nmienclr328_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienclr328_region0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienclr328_region0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienclr328_region1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienclr328_region1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienclr328_region2wa_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienclr328_region2ra_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienclr328_region3wa_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_nmienclr328_region3ra_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_nmienclr328_pregion0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_nmienclr328_pregion0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_nmienclr328_pregion1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_nmienclr328_pregion1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read mwu_perregionn_substatwa0 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_perregionn_substatwa0_read(
        &mut self,
        _perregionn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr0_read(_perregionn)?,
        );
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr1_read(_perregionn)?,
        ) << 1u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr2_read(_perregionn)?,
        ) << 2u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr3_read(_perregionn)?,
        ) << 3u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr4_read(_perregionn)?,
        ) << 4u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr5_read(_perregionn)?,
        ) << 5u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr6_read(_perregionn)?,
        ) << 6u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr7_read(_perregionn)?,
        ) << 7u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr8_read(_perregionn)?,
        ) << 8u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr9_read(_perregionn)?,
        ) << 9u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr10_read(_perregionn)?,
        ) << 10u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr11_read(_perregionn)?,
        ) << 11u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr12_read(_perregionn)?,
        ) << 12u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr13_read(_perregionn)?,
        ) << 13u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr14_read(_perregionn)?,
        ) << 14u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr15_read(_perregionn)?,
        ) << 15u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr16_read(_perregionn)?,
        ) << 16u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr17_read(_perregionn)?,
        ) << 17u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr18_read(_perregionn)?,
        ) << 18u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr19_read(_perregionn)?,
        ) << 19u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr20_read(_perregionn)?,
        ) << 20u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr21_read(_perregionn)?,
        ) << 21u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr22_read(_perregionn)?,
        ) << 22u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr23_read(_perregionn)?,
        ) << 23u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr24_read(_perregionn)?,
        ) << 24u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr25_read(_perregionn)?,
        ) << 25u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr26_read(_perregionn)?,
        ) << 26u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr27_read(_perregionn)?,
        ) << 27u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr28_read(_perregionn)?,
        ) << 28u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr29_read(_perregionn)?,
        ) << 29u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr30_read(_perregionn)?,
        ) << 30u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatwa0_sr31_read(_perregionn)?,
        ) << 31u32;
        Ok(_value)
    }
    #[doc = "Write mwu_perregionn_substatwa0 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_perregionn_substatwa0_write(
        &mut self,
        _perregionn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr0_write(
                _perregionn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr1_write(
                _perregionn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr2_write(
                _perregionn,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr3_write(
                _perregionn,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr4_write(
                _perregionn,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr5_write(
                _perregionn,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr6_write(
                _perregionn,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr7_write(
                _perregionn,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr8_write(
                _perregionn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr9_write(
                _perregionn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr10_write(
                _perregionn,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr11_write(
                _perregionn,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr12_write(
                _perregionn,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr13_write(
                _perregionn,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr14_write(
                _perregionn,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr15_write(
                _perregionn,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr16_write(
                _perregionn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr17_write(
                _perregionn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr18_write(
                _perregionn,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr19_write(
                _perregionn,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr20_write(
                _perregionn,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr21_write(
                _perregionn,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr22_write(
                _perregionn,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr23_write(
                _perregionn,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr24_write(
                _perregionn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr25_write(
                _perregionn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr26_write(
                _perregionn,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr27_write(
                _perregionn,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr28_write(
                _perregionn,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr29_write(
                _perregionn,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr30_write(
                _perregionn,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatwa0_sr31_write(
                _perregionn,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read mwu_perregionn_substatra4 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_perregionn_substatra4_read(
        &mut self,
        _perregionn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr0_read(_perregionn)?,
        );
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr1_read(_perregionn)?,
        ) << 1u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr2_read(_perregionn)?,
        ) << 2u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr3_read(_perregionn)?,
        ) << 3u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr4_read(_perregionn)?,
        ) << 4u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr5_read(_perregionn)?,
        ) << 5u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr6_read(_perregionn)?,
        ) << 6u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr7_read(_perregionn)?,
        ) << 7u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr8_read(_perregionn)?,
        ) << 8u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr9_read(_perregionn)?,
        ) << 9u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr10_read(_perregionn)?,
        ) << 10u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr11_read(_perregionn)?,
        ) << 11u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr12_read(_perregionn)?,
        ) << 12u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr13_read(_perregionn)?,
        ) << 13u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr14_read(_perregionn)?,
        ) << 14u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr15_read(_perregionn)?,
        ) << 15u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr16_read(_perregionn)?,
        ) << 16u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr17_read(_perregionn)?,
        ) << 17u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr18_read(_perregionn)?,
        ) << 18u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr19_read(_perregionn)?,
        ) << 19u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr20_read(_perregionn)?,
        ) << 20u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr21_read(_perregionn)?,
        ) << 21u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr22_read(_perregionn)?,
        ) << 22u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr23_read(_perregionn)?,
        ) << 23u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr24_read(_perregionn)?,
        ) << 24u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr25_read(_perregionn)?,
        ) << 25u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr26_read(_perregionn)?,
        ) << 26u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr27_read(_perregionn)?,
        ) << 27u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr28_read(_perregionn)?,
        ) << 28u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr29_read(_perregionn)?,
        ) << 29u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr30_read(_perregionn)?,
        ) << 30u32;
        _value |= u32::from(
            self.mwu.mwu_perregionn_substatra4_sr31_read(_perregionn)?,
        ) << 31u32;
        Ok(_value)
    }
    #[doc = "Write mwu_perregionn_substatra4 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_perregionn_substatra4_write(
        &mut self,
        _perregionn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr0_write(
                _perregionn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr1_write(
                _perregionn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr2_write(
                _perregionn,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr3_write(
                _perregionn,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr4_write(
                _perregionn,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr5_write(
                _perregionn,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr6_write(
                _perregionn,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr7_write(
                _perregionn,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr8_write(
                _perregionn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr9_write(
                _perregionn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr10_write(
                _perregionn,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr11_write(
                _perregionn,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr12_write(
                _perregionn,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr13_write(
                _perregionn,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr14_write(
                _perregionn,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr15_write(
                _perregionn,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr16_write(
                _perregionn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr17_write(
                _perregionn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr18_write(
                _perregionn,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr19_write(
                _perregionn,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr20_write(
                _perregionn,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr21_write(
                _perregionn,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr22_write(
                _perregionn,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr23_write(
                _perregionn,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr24_write(
                _perregionn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr25_write(
                _perregionn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr26_write(
                _perregionn,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr27_write(
                _perregionn,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr28_write(
                _perregionn,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr29_write(
                _perregionn,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr30_write(
                _perregionn,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_perregionn_substatra4_sr31_write(
                _perregionn,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read mwu_regionen510 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_regionen510_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.mwu.mwu_regionen510_rgn0wa_read()?);
        _value |= u32::from(self.mwu.mwu_regionen510_rgn0ra_read()?) << 1u32;
        _value |= u32::from(self.mwu.mwu_regionen510_rgn1wa_read()?) << 2u32;
        _value |= u32::from(self.mwu.mwu_regionen510_rgn1ra_read()?) << 3u32;
        _value |= u32::from(self.mwu.mwu_regionen510_rgn2wa_read()?) << 4u32;
        _value |= u32::from(self.mwu.mwu_regionen510_rgn2ra_read()?) << 5u32;
        _value |= u32::from(self.mwu.mwu_regionen510_rgn3wa_read()?) << 6u32;
        _value |= u32::from(self.mwu.mwu_regionen510_rgn3ra_read()?) << 7u32;
        _value |= u32::from(self.mwu.mwu_regionen510_prgn0wa_read()?) << 24u32;
        _value |= u32::from(self.mwu.mwu_regionen510_prgn0ra_read()?) << 25u32;
        _value |= u32::from(self.mwu.mwu_regionen510_prgn1wa_read()?) << 26u32;
        _value |= u32::from(self.mwu.mwu_regionen510_prgn1ra_read()?) << 27u32;
        Ok(_value)
    }
    #[doc = "Write mwu_regionen510 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_regionen510_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionen510_rgn0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionen510_rgn0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionen510_rgn1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionen510_rgn1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionen510_rgn2wa_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionen510_rgn2ra_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionen510_rgn3wa_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionen510_rgn3ra_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_regionen510_prgn0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_regionen510_prgn0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_regionen510_prgn1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_regionen510_prgn1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read mwu_regionenset514 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_regionenset514_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.mwu.mwu_regionenset514_rgn0wa_read()?);
        _value |= u32::from(self.mwu.mwu_regionenset514_rgn0ra_read()?) << 1u32;
        _value |= u32::from(self.mwu.mwu_regionenset514_rgn1wa_read()?) << 2u32;
        _value |= u32::from(self.mwu.mwu_regionenset514_rgn1ra_read()?) << 3u32;
        _value |= u32::from(self.mwu.mwu_regionenset514_rgn2wa_read()?) << 4u32;
        _value |= u32::from(self.mwu.mwu_regionenset514_rgn2ra_read()?) << 5u32;
        _value |= u32::from(self.mwu.mwu_regionenset514_rgn3wa_read()?) << 6u32;
        _value |= u32::from(self.mwu.mwu_regionenset514_rgn3ra_read()?) << 7u32;
        _value |=
            u32::from(self.mwu.mwu_regionenset514_prgn0wa_read()?) << 24u32;
        _value |=
            u32::from(self.mwu.mwu_regionenset514_prgn0ra_read()?) << 25u32;
        _value |=
            u32::from(self.mwu.mwu_regionenset514_prgn1wa_read()?) << 26u32;
        _value |=
            u32::from(self.mwu.mwu_regionenset514_prgn1ra_read()?) << 27u32;
        Ok(_value)
    }
    #[doc = "Write mwu_regionenset514 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_regionenset514_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenset514_rgn0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenset514_rgn0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenset514_rgn1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenset514_rgn1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenset514_rgn2wa_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenset514_rgn2ra_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenset514_rgn3wa_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenset514_rgn3ra_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_regionenset514_prgn0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_regionenset514_prgn0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_regionenset514_prgn1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_regionenset514_prgn1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read mwu_regionenclr518 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_regionenclr518_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.mwu.mwu_regionenclr518_rgn0wa_read()?);
        _value |= u32::from(self.mwu.mwu_regionenclr518_rgn0ra_read()?) << 1u32;
        _value |= u32::from(self.mwu.mwu_regionenclr518_rgn1wa_read()?) << 2u32;
        _value |= u32::from(self.mwu.mwu_regionenclr518_rgn1ra_read()?) << 3u32;
        _value |= u32::from(self.mwu.mwu_regionenclr518_rgn2wa_read()?) << 4u32;
        _value |= u32::from(self.mwu.mwu_regionenclr518_rgn2ra_read()?) << 5u32;
        _value |= u32::from(self.mwu.mwu_regionenclr518_rgn3wa_read()?) << 6u32;
        _value |= u32::from(self.mwu.mwu_regionenclr518_rgn3ra_read()?) << 7u32;
        _value |=
            u32::from(self.mwu.mwu_regionenclr518_prgn0wa_read()?) << 24u32;
        _value |=
            u32::from(self.mwu.mwu_regionenclr518_prgn0ra_read()?) << 25u32;
        _value |=
            u32::from(self.mwu.mwu_regionenclr518_prgn1wa_read()?) << 26u32;
        _value |=
            u32::from(self.mwu.mwu_regionenclr518_prgn1ra_read()?) << 27u32;
        Ok(_value)
    }
    #[doc = "Write mwu_regionenclr518 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_regionenclr518_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenclr518_rgn0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenclr518_rgn0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenclr518_rgn1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenclr518_rgn1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenclr518_rgn2wa_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenclr518_rgn2ra_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenclr518_rgn3wa_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_regionenclr518_rgn3ra_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_regionenclr518_prgn0wa_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_regionenclr518_prgn0ra_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_regionenclr518_prgn1wa_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_regionenclr518_prgn1ra_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read mwu_regionn_start0 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_regionn_start0_read(
        &mut self,
        _regionn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.mwu.mwu_regionn_start0_start_read(_regionn)?);
        Ok(_value)
    }
    #[doc = "Write mwu_regionn_start0 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_regionn_start0_write(
        &mut self,
        _regionn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.mwu.mwu_regionn_start0_start_write(
                _regionn,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read mwu_regionn_end4 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_regionn_end4_read(
        &mut self,
        _regionn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.mwu.mwu_regionn_end4_end_read(_regionn)?);
        Ok(_value)
    }
    #[doc = "Write mwu_regionn_end4 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_regionn_end4_write(
        &mut self,
        _regionn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.mwu.mwu_regionn_end4_end_write(
                _regionn,
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read mwu_pregionn_start0 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_pregionn_start0_read(
        &mut self,
        _pregionn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.mwu.mwu_pregionn_start0_start_read(_pregionn)?);
        Ok(_value)
    }
    #[doc = "Read mwu_pregionn_end4 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_pregionn_end4_read(
        &mut self,
        _pregionn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.mwu.mwu_pregionn_end4_end_read(_pregionn)?);
        Ok(_value)
    }
    #[doc = "Read mwu_pregionn_subs8 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_pregionn_subs8_read(
        &mut self,
        _pregionn: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr0_read(_pregionn)?);
        _value |=
            u32::from(self.mwu.mwu_pregionn_subs8_sr1_read(_pregionn)?) << 1u32;
        _value |=
            u32::from(self.mwu.mwu_pregionn_subs8_sr2_read(_pregionn)?) << 2u32;
        _value |=
            u32::from(self.mwu.mwu_pregionn_subs8_sr3_read(_pregionn)?) << 3u32;
        _value |=
            u32::from(self.mwu.mwu_pregionn_subs8_sr4_read(_pregionn)?) << 4u32;
        _value |=
            u32::from(self.mwu.mwu_pregionn_subs8_sr5_read(_pregionn)?) << 5u32;
        _value |=
            u32::from(self.mwu.mwu_pregionn_subs8_sr6_read(_pregionn)?) << 6u32;
        _value |=
            u32::from(self.mwu.mwu_pregionn_subs8_sr7_read(_pregionn)?) << 7u32;
        _value |=
            u32::from(self.mwu.mwu_pregionn_subs8_sr8_read(_pregionn)?) << 8u32;
        _value |=
            u32::from(self.mwu.mwu_pregionn_subs8_sr9_read(_pregionn)?) << 9u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr10_read(_pregionn)?)
            << 10u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr11_read(_pregionn)?)
            << 11u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr12_read(_pregionn)?)
            << 12u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr13_read(_pregionn)?)
            << 13u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr14_read(_pregionn)?)
            << 14u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr15_read(_pregionn)?)
            << 15u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr16_read(_pregionn)?)
            << 16u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr17_read(_pregionn)?)
            << 17u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr18_read(_pregionn)?)
            << 18u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr19_read(_pregionn)?)
            << 19u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr20_read(_pregionn)?)
            << 20u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr21_read(_pregionn)?)
            << 21u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr22_read(_pregionn)?)
            << 22u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr23_read(_pregionn)?)
            << 23u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr24_read(_pregionn)?)
            << 24u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr25_read(_pregionn)?)
            << 25u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr26_read(_pregionn)?)
            << 26u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr27_read(_pregionn)?)
            << 27u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr28_read(_pregionn)?)
            << 28u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr29_read(_pregionn)?)
            << 29u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr30_read(_pregionn)?)
            << 30u32;
        _value |= u32::from(self.mwu.mwu_pregionn_subs8_sr31_read(_pregionn)?)
            << 31u32;
        Ok(_value)
    }
    #[doc = "Write mwu_pregionn_subs8 from [crate::peripheral::mwu::Mwu]"]
    #[inline]
    pub(crate) fn mwu_pregionn_subs8_write(
        &mut self,
        _pregionn: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr0_write(
                _pregionn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr1_write(
                _pregionn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr2_write(
                _pregionn,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr3_write(
                _pregionn,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr4_write(
                _pregionn,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr5_write(
                _pregionn,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr6_write(
                _pregionn,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr7_write(
                _pregionn,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr8_write(
                _pregionn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr9_write(
                _pregionn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr10_write(
                _pregionn,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr11_write(
                _pregionn,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr12_write(
                _pregionn,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr13_write(
                _pregionn,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr14_write(
                _pregionn,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr15_write(
                _pregionn,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr16_write(
                _pregionn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr17_write(
                _pregionn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr18_write(
                _pregionn,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr19_write(
                _pregionn,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr20_write(
                _pregionn,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr21_write(
                _pregionn,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr22_write(
                _pregionn,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr23_write(
                _pregionn,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr24_write(
                _pregionn,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr25_write(
                _pregionn,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr26_write(
                _pregionn,
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr27_write(
                _pregionn,
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr28_write(
                _pregionn,
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr29_write(
                _pregionn,
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr30_write(
                _pregionn,
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.mwu.mwu_pregionn_subs8_sr31_write(
                _pregionn,
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write i2s_tasks_start0 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_tasks_start0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.i2s.i2s_tasks_start0_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write i2s_tasks_stop4 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_tasks_stop4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.i2s.i2s_tasks_stop4_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read i2s_events_rxptrupd104 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_events_rxptrupd104_read(&mut self) -> MemResult<u32> {
        self.i2s.i2s_events_rxptrupd104_read()
    }
    #[doc = "Write i2s_events_rxptrupd104 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_events_rxptrupd104_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.i2s.i2s_events_rxptrupd104_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read i2s_events_stopped108 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_events_stopped108_read(&mut self) -> MemResult<u32> {
        self.i2s.i2s_events_stopped108_read()
    }
    #[doc = "Write i2s_events_stopped108 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_events_stopped108_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.i2s.i2s_events_stopped108_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read i2s_events_txptrupd114 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_events_txptrupd114_read(&mut self) -> MemResult<u32> {
        self.i2s.i2s_events_txptrupd114_read()
    }
    #[doc = "Write i2s_events_txptrupd114 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_events_txptrupd114_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.i2s.i2s_events_txptrupd114_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read i2s_inten300 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_inten300_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.i2s.i2s_inten300_rxptrupd_read()?) << 1u32;
        _value |= u32::from(self.i2s.i2s_inten300_stopped_read()?) << 2u32;
        _value |= u32::from(self.i2s.i2s_inten300_txptrupd_read()?) << 5u32;
        Ok(_value)
    }
    #[doc = "Write i2s_inten300 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_inten300_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_inten300_rxptrupd_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_inten300_stopped_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_inten300_txptrupd_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_intenset304 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.i2s.i2s_intenset304_rxptrupd_read()?) << 1u32;
        _value |= u32::from(self.i2s.i2s_intenset304_stopped_read()?) << 2u32;
        _value |= u32::from(self.i2s.i2s_intenset304_txptrupd_read()?) << 5u32;
        Ok(_value)
    }
    #[doc = "Write i2s_intenset304 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_intenset304_rxptrupd_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_intenset304_stopped_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_intenset304_txptrupd_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_intenclr308 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.i2s.i2s_intenclr308_rxptrupd_read()?) << 1u32;
        _value |= u32::from(self.i2s.i2s_intenclr308_stopped_read()?) << 2u32;
        _value |= u32::from(self.i2s.i2s_intenclr308_txptrupd_read()?) << 5u32;
        Ok(_value)
    }
    #[doc = "Write i2s_intenclr308 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_intenclr308_rxptrupd_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_intenclr308_stopped_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_intenclr308_txptrupd_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_enable500 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_enable500_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.i2s.i2s_enable500_enable_read()?);
        Ok(_value)
    }
    #[doc = "Write i2s_enable500 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_enable500_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_enable500_enable_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_config_mode0 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_mode0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.i2s.i2s_config_mode0_mode_read()?);
        Ok(_value)
    }
    #[doc = "Write i2s_config_mode0 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_mode0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_config_mode0_mode_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_config_rxen4 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_rxen4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.i2s.i2s_config_rxen4_rxen_read()?);
        Ok(_value)
    }
    #[doc = "Write i2s_config_rxen4 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_rxen4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_config_rxen4_rxen_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_config_txen8 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_txen8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.i2s.i2s_config_txen8_txen_read()?);
        Ok(_value)
    }
    #[doc = "Write i2s_config_txen8 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_txen8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_config_txen8_txen_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_config_mckenc from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_mckenc_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.i2s.i2s_config_mckenc_mcken_read()?);
        Ok(_value)
    }
    #[doc = "Write i2s_config_mckenc from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_mckenc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_config_mckenc_mcken_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_config_mckfreq10 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_mckfreq10_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u32::from(self.i2s.i2s_config_mckfreq10_mckfreq_read()?));
        Ok(_value)
    }
    #[doc = "Write i2s_config_mckfreq10 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_mckfreq10_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.i2s.i2s_config_mckfreq10_mckfreq_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read i2s_config_ratio14 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_ratio14_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.i2s.i2s_config_ratio14_ratio_read()?));
        Ok(_value)
    }
    #[doc = "Write i2s_config_ratio14 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_ratio14_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_config_ratio14_ratio_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_config_swidth18 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_swidth18_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.i2s.i2s_config_swidth18_swidth_read()?));
        Ok(_value)
    }
    #[doc = "Write i2s_config_swidth18 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_swidth18_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_config_swidth18_swidth_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_config_align1c from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_align1c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.i2s.i2s_config_align1c_align_read()?);
        Ok(_value)
    }
    #[doc = "Write i2s_config_align1c from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_align1c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_config_align1c_align_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_config_format20 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_format20_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.i2s.i2s_config_format20_format_read()?);
        Ok(_value)
    }
    #[doc = "Write i2s_config_format20 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_format20_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_config_format20_format_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_config_channels24 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_channels24_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.i2s.i2s_config_channels24_channels_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write i2s_config_channels24 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_config_channels24_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_config_channels24_channels_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_rxd_ptr0 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_rxd_ptr0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.i2s.i2s_rxd_ptr0_ptr_read()?);
        Ok(_value)
    }
    #[doc = "Write i2s_rxd_ptr0 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_rxd_ptr0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.i2s.i2s_rxd_ptr0_ptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read i2s_txd_ptr0 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_txd_ptr0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.i2s.i2s_txd_ptr0_ptr_read()?);
        Ok(_value)
    }
    #[doc = "Write i2s_txd_ptr0 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_txd_ptr0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.i2s.i2s_txd_ptr0_ptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read i2s_rxtxd_maxcnt0 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_rxtxd_maxcnt0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.i2s.i2s_rxtxd_maxcnt0_maxcnt_read()?);
        Ok(_value)
    }
    #[doc = "Write i2s_rxtxd_maxcnt0 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_rxtxd_maxcnt0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 63u8)
                as u16)
                << (0 + (1 * 8));
            self.i2s.i2s_rxtxd_maxcnt0_maxcnt_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read i2s_psel_mck0 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_psel_mck0_read(&mut self) -> MemResult<u32> {
        let mut _value = 2147483616;
        _value |= u32::from(self.i2s.i2s_psel_mck0_pin_read()?);
        _value |= u32::from(self.i2s.i2s_psel_mck0_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write i2s_psel_mck0 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_psel_mck0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_psel_mck0_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.i2s.i2s_psel_mck0_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_psel_sck4 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_psel_sck4_read(&mut self) -> MemResult<u32> {
        let mut _value = 2147483616;
        _value |= u32::from(self.i2s.i2s_psel_sck4_pin_read()?);
        _value |= u32::from(self.i2s.i2s_psel_sck4_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write i2s_psel_sck4 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_psel_sck4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_psel_sck4_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.i2s.i2s_psel_sck4_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_psel_lrck8 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_psel_lrck8_read(&mut self) -> MemResult<u32> {
        let mut _value = 2147483616;
        _value |= u32::from(self.i2s.i2s_psel_lrck8_pin_read()?);
        _value |= u32::from(self.i2s.i2s_psel_lrck8_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write i2s_psel_lrck8 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_psel_lrck8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_psel_lrck8_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.i2s.i2s_psel_lrck8_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_psel_sdinc from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_psel_sdinc_read(&mut self) -> MemResult<u32> {
        let mut _value = 2147483616;
        _value |= u32::from(self.i2s.i2s_psel_sdinc_pin_read()?);
        _value |= u32::from(self.i2s.i2s_psel_sdinc_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write i2s_psel_sdinc from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_psel_sdinc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_psel_sdinc_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.i2s.i2s_psel_sdinc_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read i2s_psel_sdout10 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_psel_sdout10_read(&mut self) -> MemResult<u32> {
        let mut _value = 2147483616;
        _value |= u32::from(self.i2s.i2s_psel_sdout10_pin_read()?);
        _value |= u32::from(self.i2s.i2s_psel_sdout10_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write i2s_psel_sdout10 from [crate::peripheral::i2s::I2s]"]
    #[inline]
    pub(crate) fn i2s_psel_sdout10_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.i2s.i2s_psel_sdout10_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.i2s.i2s_psel_sdout10_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read fpu_unused0 from [crate::peripheral::fpu::Fpu]"]
    #[inline]
    pub(crate) fn fpu_unused0_read(&mut self) -> MemResult<u32> {
        self.fpu.fpu_unused0_read()
    }
    #[doc = "Read p0_out504 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_out504_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.p0.p0_out504_pin0_read()?);
        _value |= u32::from(self.p0.p0_out504_pin1_read()?) << 1u32;
        _value |= u32::from(self.p0.p0_out504_pin2_read()?) << 2u32;
        _value |= u32::from(self.p0.p0_out504_pin3_read()?) << 3u32;
        _value |= u32::from(self.p0.p0_out504_pin4_read()?) << 4u32;
        _value |= u32::from(self.p0.p0_out504_pin5_read()?) << 5u32;
        _value |= u32::from(self.p0.p0_out504_pin6_read()?) << 6u32;
        _value |= u32::from(self.p0.p0_out504_pin7_read()?) << 7u32;
        _value |= u32::from(self.p0.p0_out504_pin8_read()?) << 8u32;
        _value |= u32::from(self.p0.p0_out504_pin9_read()?) << 9u32;
        _value |= u32::from(self.p0.p0_out504_pin10_read()?) << 10u32;
        _value |= u32::from(self.p0.p0_out504_pin11_read()?) << 11u32;
        _value |= u32::from(self.p0.p0_out504_pin12_read()?) << 12u32;
        _value |= u32::from(self.p0.p0_out504_pin13_read()?) << 13u32;
        _value |= u32::from(self.p0.p0_out504_pin14_read()?) << 14u32;
        _value |= u32::from(self.p0.p0_out504_pin15_read()?) << 15u32;
        _value |= u32::from(self.p0.p0_out504_pin16_read()?) << 16u32;
        _value |= u32::from(self.p0.p0_out504_pin17_read()?) << 17u32;
        _value |= u32::from(self.p0.p0_out504_pin18_read()?) << 18u32;
        _value |= u32::from(self.p0.p0_out504_pin19_read()?) << 19u32;
        _value |= u32::from(self.p0.p0_out504_pin20_read()?) << 20u32;
        _value |= u32::from(self.p0.p0_out504_pin21_read()?) << 21u32;
        _value |= u32::from(self.p0.p0_out504_pin22_read()?) << 22u32;
        _value |= u32::from(self.p0.p0_out504_pin23_read()?) << 23u32;
        _value |= u32::from(self.p0.p0_out504_pin24_read()?) << 24u32;
        _value |= u32::from(self.p0.p0_out504_pin25_read()?) << 25u32;
        _value |= u32::from(self.p0.p0_out504_pin26_read()?) << 26u32;
        _value |= u32::from(self.p0.p0_out504_pin27_read()?) << 27u32;
        _value |= u32::from(self.p0.p0_out504_pin28_read()?) << 28u32;
        _value |= u32::from(self.p0.p0_out504_pin29_read()?) << 29u32;
        _value |= u32::from(self.p0.p0_out504_pin30_read()?) << 30u32;
        _value |= u32::from(self.p0.p0_out504_pin31_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write p0_out504 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_out504_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_out504_pin0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_out504_pin1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_out504_pin2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_out504_pin3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_out504_pin4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_out504_pin5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_out504_pin6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_out504_pin7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_out504_pin8_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_out504_pin9_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_out504_pin10_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_out504_pin11_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_out504_pin12_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_out504_pin13_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_out504_pin14_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_out504_pin15_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_out504_pin16_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_out504_pin17_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_out504_pin18_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_out504_pin19_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_out504_pin20_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_out504_pin21_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_out504_pin22_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_out504_pin23_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_out504_pin24_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_out504_pin25_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_out504_pin26_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_out504_pin27_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_out504_pin28_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_out504_pin29_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_out504_pin30_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_out504_pin31_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read p0_outset508 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_outset508_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.p0.p0_outset508_pin0_read()?);
        _value |= u32::from(self.p0.p0_outset508_pin1_read()?) << 1u32;
        _value |= u32::from(self.p0.p0_outset508_pin2_read()?) << 2u32;
        _value |= u32::from(self.p0.p0_outset508_pin3_read()?) << 3u32;
        _value |= u32::from(self.p0.p0_outset508_pin4_read()?) << 4u32;
        _value |= u32::from(self.p0.p0_outset508_pin5_read()?) << 5u32;
        _value |= u32::from(self.p0.p0_outset508_pin6_read()?) << 6u32;
        _value |= u32::from(self.p0.p0_outset508_pin7_read()?) << 7u32;
        _value |= u32::from(self.p0.p0_outset508_pin8_read()?) << 8u32;
        _value |= u32::from(self.p0.p0_outset508_pin9_read()?) << 9u32;
        _value |= u32::from(self.p0.p0_outset508_pin10_read()?) << 10u32;
        _value |= u32::from(self.p0.p0_outset508_pin11_read()?) << 11u32;
        _value |= u32::from(self.p0.p0_outset508_pin12_read()?) << 12u32;
        _value |= u32::from(self.p0.p0_outset508_pin13_read()?) << 13u32;
        _value |= u32::from(self.p0.p0_outset508_pin14_read()?) << 14u32;
        _value |= u32::from(self.p0.p0_outset508_pin15_read()?) << 15u32;
        _value |= u32::from(self.p0.p0_outset508_pin16_read()?) << 16u32;
        _value |= u32::from(self.p0.p0_outset508_pin17_read()?) << 17u32;
        _value |= u32::from(self.p0.p0_outset508_pin18_read()?) << 18u32;
        _value |= u32::from(self.p0.p0_outset508_pin19_read()?) << 19u32;
        _value |= u32::from(self.p0.p0_outset508_pin20_read()?) << 20u32;
        _value |= u32::from(self.p0.p0_outset508_pin21_read()?) << 21u32;
        _value |= u32::from(self.p0.p0_outset508_pin22_read()?) << 22u32;
        _value |= u32::from(self.p0.p0_outset508_pin23_read()?) << 23u32;
        _value |= u32::from(self.p0.p0_outset508_pin24_read()?) << 24u32;
        _value |= u32::from(self.p0.p0_outset508_pin25_read()?) << 25u32;
        _value |= u32::from(self.p0.p0_outset508_pin26_read()?) << 26u32;
        _value |= u32::from(self.p0.p0_outset508_pin27_read()?) << 27u32;
        _value |= u32::from(self.p0.p0_outset508_pin28_read()?) << 28u32;
        _value |= u32::from(self.p0.p0_outset508_pin29_read()?) << 29u32;
        _value |= u32::from(self.p0.p0_outset508_pin30_read()?) << 30u32;
        _value |= u32::from(self.p0.p0_outset508_pin31_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write p0_outset508 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_outset508_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outset508_pin0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outset508_pin1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outset508_pin2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outset508_pin3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outset508_pin4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outset508_pin5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outset508_pin6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outset508_pin7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outset508_pin8_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outset508_pin9_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outset508_pin10_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outset508_pin11_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outset508_pin12_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outset508_pin13_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outset508_pin14_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outset508_pin15_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outset508_pin16_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outset508_pin17_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outset508_pin18_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outset508_pin19_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outset508_pin20_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outset508_pin21_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outset508_pin22_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outset508_pin23_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outset508_pin24_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outset508_pin25_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outset508_pin26_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outset508_pin27_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outset508_pin28_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outset508_pin29_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outset508_pin30_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outset508_pin31_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read p0_outclr50c from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_outclr50c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.p0.p0_outclr50c_pin0_read()?);
        _value |= u32::from(self.p0.p0_outclr50c_pin1_read()?) << 1u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin2_read()?) << 2u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin3_read()?) << 3u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin4_read()?) << 4u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin5_read()?) << 5u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin6_read()?) << 6u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin7_read()?) << 7u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin8_read()?) << 8u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin9_read()?) << 9u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin10_read()?) << 10u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin11_read()?) << 11u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin12_read()?) << 12u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin13_read()?) << 13u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin14_read()?) << 14u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin15_read()?) << 15u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin16_read()?) << 16u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin17_read()?) << 17u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin18_read()?) << 18u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin19_read()?) << 19u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin20_read()?) << 20u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin21_read()?) << 21u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin22_read()?) << 22u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin23_read()?) << 23u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin24_read()?) << 24u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin25_read()?) << 25u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin26_read()?) << 26u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin27_read()?) << 27u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin28_read()?) << 28u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin29_read()?) << 29u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin30_read()?) << 30u32;
        _value |= u32::from(self.p0.p0_outclr50c_pin31_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write p0_outclr50c from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_outclr50c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outclr50c_pin0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outclr50c_pin1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outclr50c_pin2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outclr50c_pin3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outclr50c_pin4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outclr50c_pin5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outclr50c_pin6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_outclr50c_pin7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outclr50c_pin8_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outclr50c_pin9_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outclr50c_pin10_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outclr50c_pin11_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outclr50c_pin12_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outclr50c_pin13_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outclr50c_pin14_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_outclr50c_pin15_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outclr50c_pin16_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outclr50c_pin17_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outclr50c_pin18_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outclr50c_pin19_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outclr50c_pin20_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outclr50c_pin21_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outclr50c_pin22_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_outclr50c_pin23_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outclr50c_pin24_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outclr50c_pin25_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outclr50c_pin26_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outclr50c_pin27_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outclr50c_pin28_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outclr50c_pin29_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outclr50c_pin30_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_outclr50c_pin31_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read p0_in510 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_in510_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.p0.p0_in510_pin0_read()?);
        _value |= u32::from(self.p0.p0_in510_pin1_read()?) << 1u32;
        _value |= u32::from(self.p0.p0_in510_pin2_read()?) << 2u32;
        _value |= u32::from(self.p0.p0_in510_pin3_read()?) << 3u32;
        _value |= u32::from(self.p0.p0_in510_pin4_read()?) << 4u32;
        _value |= u32::from(self.p0.p0_in510_pin5_read()?) << 5u32;
        _value |= u32::from(self.p0.p0_in510_pin6_read()?) << 6u32;
        _value |= u32::from(self.p0.p0_in510_pin7_read()?) << 7u32;
        _value |= u32::from(self.p0.p0_in510_pin8_read()?) << 8u32;
        _value |= u32::from(self.p0.p0_in510_pin9_read()?) << 9u32;
        _value |= u32::from(self.p0.p0_in510_pin10_read()?) << 10u32;
        _value |= u32::from(self.p0.p0_in510_pin11_read()?) << 11u32;
        _value |= u32::from(self.p0.p0_in510_pin12_read()?) << 12u32;
        _value |= u32::from(self.p0.p0_in510_pin13_read()?) << 13u32;
        _value |= u32::from(self.p0.p0_in510_pin14_read()?) << 14u32;
        _value |= u32::from(self.p0.p0_in510_pin15_read()?) << 15u32;
        _value |= u32::from(self.p0.p0_in510_pin16_read()?) << 16u32;
        _value |= u32::from(self.p0.p0_in510_pin17_read()?) << 17u32;
        _value |= u32::from(self.p0.p0_in510_pin18_read()?) << 18u32;
        _value |= u32::from(self.p0.p0_in510_pin19_read()?) << 19u32;
        _value |= u32::from(self.p0.p0_in510_pin20_read()?) << 20u32;
        _value |= u32::from(self.p0.p0_in510_pin21_read()?) << 21u32;
        _value |= u32::from(self.p0.p0_in510_pin22_read()?) << 22u32;
        _value |= u32::from(self.p0.p0_in510_pin23_read()?) << 23u32;
        _value |= u32::from(self.p0.p0_in510_pin24_read()?) << 24u32;
        _value |= u32::from(self.p0.p0_in510_pin25_read()?) << 25u32;
        _value |= u32::from(self.p0.p0_in510_pin26_read()?) << 26u32;
        _value |= u32::from(self.p0.p0_in510_pin27_read()?) << 27u32;
        _value |= u32::from(self.p0.p0_in510_pin28_read()?) << 28u32;
        _value |= u32::from(self.p0.p0_in510_pin29_read()?) << 29u32;
        _value |= u32::from(self.p0.p0_in510_pin30_read()?) << 30u32;
        _value |= u32::from(self.p0.p0_in510_pin31_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Read p0_dir514 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_dir514_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.p0.p0_dir514_pin0_read()?);
        _value |= u32::from(self.p0.p0_dir514_pin1_read()?) << 1u32;
        _value |= u32::from(self.p0.p0_dir514_pin2_read()?) << 2u32;
        _value |= u32::from(self.p0.p0_dir514_pin3_read()?) << 3u32;
        _value |= u32::from(self.p0.p0_dir514_pin4_read()?) << 4u32;
        _value |= u32::from(self.p0.p0_dir514_pin5_read()?) << 5u32;
        _value |= u32::from(self.p0.p0_dir514_pin6_read()?) << 6u32;
        _value |= u32::from(self.p0.p0_dir514_pin7_read()?) << 7u32;
        _value |= u32::from(self.p0.p0_dir514_pin8_read()?) << 8u32;
        _value |= u32::from(self.p0.p0_dir514_pin9_read()?) << 9u32;
        _value |= u32::from(self.p0.p0_dir514_pin10_read()?) << 10u32;
        _value |= u32::from(self.p0.p0_dir514_pin11_read()?) << 11u32;
        _value |= u32::from(self.p0.p0_dir514_pin12_read()?) << 12u32;
        _value |= u32::from(self.p0.p0_dir514_pin13_read()?) << 13u32;
        _value |= u32::from(self.p0.p0_dir514_pin14_read()?) << 14u32;
        _value |= u32::from(self.p0.p0_dir514_pin15_read()?) << 15u32;
        _value |= u32::from(self.p0.p0_dir514_pin16_read()?) << 16u32;
        _value |= u32::from(self.p0.p0_dir514_pin17_read()?) << 17u32;
        _value |= u32::from(self.p0.p0_dir514_pin18_read()?) << 18u32;
        _value |= u32::from(self.p0.p0_dir514_pin19_read()?) << 19u32;
        _value |= u32::from(self.p0.p0_dir514_pin20_read()?) << 20u32;
        _value |= u32::from(self.p0.p0_dir514_pin21_read()?) << 21u32;
        _value |= u32::from(self.p0.p0_dir514_pin22_read()?) << 22u32;
        _value |= u32::from(self.p0.p0_dir514_pin23_read()?) << 23u32;
        _value |= u32::from(self.p0.p0_dir514_pin24_read()?) << 24u32;
        _value |= u32::from(self.p0.p0_dir514_pin25_read()?) << 25u32;
        _value |= u32::from(self.p0.p0_dir514_pin26_read()?) << 26u32;
        _value |= u32::from(self.p0.p0_dir514_pin27_read()?) << 27u32;
        _value |= u32::from(self.p0.p0_dir514_pin28_read()?) << 28u32;
        _value |= u32::from(self.p0.p0_dir514_pin29_read()?) << 29u32;
        _value |= u32::from(self.p0.p0_dir514_pin30_read()?) << 30u32;
        _value |= u32::from(self.p0.p0_dir514_pin31_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write p0_dir514 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_dir514_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dir514_pin0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dir514_pin1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dir514_pin2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dir514_pin3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dir514_pin4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dir514_pin5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dir514_pin6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dir514_pin7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dir514_pin8_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dir514_pin9_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dir514_pin10_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dir514_pin11_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dir514_pin12_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dir514_pin13_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dir514_pin14_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dir514_pin15_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dir514_pin16_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dir514_pin17_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dir514_pin18_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dir514_pin19_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dir514_pin20_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dir514_pin21_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dir514_pin22_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dir514_pin23_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dir514_pin24_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dir514_pin25_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dir514_pin26_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dir514_pin27_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dir514_pin28_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dir514_pin29_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dir514_pin30_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dir514_pin31_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read p0_dirset518 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_dirset518_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.p0.p0_dirset518_pin0_read()?);
        _value |= u32::from(self.p0.p0_dirset518_pin1_read()?) << 1u32;
        _value |= u32::from(self.p0.p0_dirset518_pin2_read()?) << 2u32;
        _value |= u32::from(self.p0.p0_dirset518_pin3_read()?) << 3u32;
        _value |= u32::from(self.p0.p0_dirset518_pin4_read()?) << 4u32;
        _value |= u32::from(self.p0.p0_dirset518_pin5_read()?) << 5u32;
        _value |= u32::from(self.p0.p0_dirset518_pin6_read()?) << 6u32;
        _value |= u32::from(self.p0.p0_dirset518_pin7_read()?) << 7u32;
        _value |= u32::from(self.p0.p0_dirset518_pin8_read()?) << 8u32;
        _value |= u32::from(self.p0.p0_dirset518_pin9_read()?) << 9u32;
        _value |= u32::from(self.p0.p0_dirset518_pin10_read()?) << 10u32;
        _value |= u32::from(self.p0.p0_dirset518_pin11_read()?) << 11u32;
        _value |= u32::from(self.p0.p0_dirset518_pin12_read()?) << 12u32;
        _value |= u32::from(self.p0.p0_dirset518_pin13_read()?) << 13u32;
        _value |= u32::from(self.p0.p0_dirset518_pin14_read()?) << 14u32;
        _value |= u32::from(self.p0.p0_dirset518_pin15_read()?) << 15u32;
        _value |= u32::from(self.p0.p0_dirset518_pin16_read()?) << 16u32;
        _value |= u32::from(self.p0.p0_dirset518_pin17_read()?) << 17u32;
        _value |= u32::from(self.p0.p0_dirset518_pin18_read()?) << 18u32;
        _value |= u32::from(self.p0.p0_dirset518_pin19_read()?) << 19u32;
        _value |= u32::from(self.p0.p0_dirset518_pin20_read()?) << 20u32;
        _value |= u32::from(self.p0.p0_dirset518_pin21_read()?) << 21u32;
        _value |= u32::from(self.p0.p0_dirset518_pin22_read()?) << 22u32;
        _value |= u32::from(self.p0.p0_dirset518_pin23_read()?) << 23u32;
        _value |= u32::from(self.p0.p0_dirset518_pin24_read()?) << 24u32;
        _value |= u32::from(self.p0.p0_dirset518_pin25_read()?) << 25u32;
        _value |= u32::from(self.p0.p0_dirset518_pin26_read()?) << 26u32;
        _value |= u32::from(self.p0.p0_dirset518_pin27_read()?) << 27u32;
        _value |= u32::from(self.p0.p0_dirset518_pin28_read()?) << 28u32;
        _value |= u32::from(self.p0.p0_dirset518_pin29_read()?) << 29u32;
        _value |= u32::from(self.p0.p0_dirset518_pin30_read()?) << 30u32;
        _value |= u32::from(self.p0.p0_dirset518_pin31_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write p0_dirset518 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_dirset518_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirset518_pin0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirset518_pin1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirset518_pin2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirset518_pin3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirset518_pin4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirset518_pin5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirset518_pin6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirset518_pin7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirset518_pin8_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirset518_pin9_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirset518_pin10_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirset518_pin11_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirset518_pin12_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirset518_pin13_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirset518_pin14_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirset518_pin15_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirset518_pin16_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirset518_pin17_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirset518_pin18_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirset518_pin19_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirset518_pin20_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirset518_pin21_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirset518_pin22_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirset518_pin23_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirset518_pin24_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirset518_pin25_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirset518_pin26_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirset518_pin27_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirset518_pin28_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirset518_pin29_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirset518_pin30_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirset518_pin31_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read p0_dirclr51c from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_dirclr51c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.p0.p0_dirclr51c_pin0_read()?);
        _value |= u32::from(self.p0.p0_dirclr51c_pin1_read()?) << 1u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin2_read()?) << 2u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin3_read()?) << 3u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin4_read()?) << 4u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin5_read()?) << 5u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin6_read()?) << 6u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin7_read()?) << 7u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin8_read()?) << 8u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin9_read()?) << 9u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin10_read()?) << 10u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin11_read()?) << 11u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin12_read()?) << 12u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin13_read()?) << 13u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin14_read()?) << 14u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin15_read()?) << 15u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin16_read()?) << 16u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin17_read()?) << 17u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin18_read()?) << 18u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin19_read()?) << 19u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin20_read()?) << 20u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin21_read()?) << 21u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin22_read()?) << 22u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin23_read()?) << 23u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin24_read()?) << 24u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin25_read()?) << 25u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin26_read()?) << 26u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin27_read()?) << 27u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin28_read()?) << 28u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin29_read()?) << 29u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin30_read()?) << 30u32;
        _value |= u32::from(self.p0.p0_dirclr51c_pin31_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write p0_dirclr51c from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_dirclr51c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirclr51c_pin0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirclr51c_pin1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirclr51c_pin2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirclr51c_pin3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirclr51c_pin4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirclr51c_pin5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirclr51c_pin6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_dirclr51c_pin7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirclr51c_pin8_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirclr51c_pin9_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirclr51c_pin10_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirclr51c_pin11_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirclr51c_pin12_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirclr51c_pin13_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirclr51c_pin14_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_dirclr51c_pin15_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirclr51c_pin16_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirclr51c_pin17_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirclr51c_pin18_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirclr51c_pin19_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirclr51c_pin20_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirclr51c_pin21_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirclr51c_pin22_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_dirclr51c_pin23_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirclr51c_pin24_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirclr51c_pin25_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirclr51c_pin26_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirclr51c_pin27_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirclr51c_pin28_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirclr51c_pin29_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirclr51c_pin30_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_dirclr51c_pin31_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read p0_latch520 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_latch520_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.p0.p0_latch520_pin0_read()?);
        _value |= u32::from(self.p0.p0_latch520_pin1_read()?) << 1u32;
        _value |= u32::from(self.p0.p0_latch520_pin2_read()?) << 2u32;
        _value |= u32::from(self.p0.p0_latch520_pin3_read()?) << 3u32;
        _value |= u32::from(self.p0.p0_latch520_pin4_read()?) << 4u32;
        _value |= u32::from(self.p0.p0_latch520_pin5_read()?) << 5u32;
        _value |= u32::from(self.p0.p0_latch520_pin6_read()?) << 6u32;
        _value |= u32::from(self.p0.p0_latch520_pin7_read()?) << 7u32;
        _value |= u32::from(self.p0.p0_latch520_pin8_read()?) << 8u32;
        _value |= u32::from(self.p0.p0_latch520_pin9_read()?) << 9u32;
        _value |= u32::from(self.p0.p0_latch520_pin10_read()?) << 10u32;
        _value |= u32::from(self.p0.p0_latch520_pin11_read()?) << 11u32;
        _value |= u32::from(self.p0.p0_latch520_pin12_read()?) << 12u32;
        _value |= u32::from(self.p0.p0_latch520_pin13_read()?) << 13u32;
        _value |= u32::from(self.p0.p0_latch520_pin14_read()?) << 14u32;
        _value |= u32::from(self.p0.p0_latch520_pin15_read()?) << 15u32;
        _value |= u32::from(self.p0.p0_latch520_pin16_read()?) << 16u32;
        _value |= u32::from(self.p0.p0_latch520_pin17_read()?) << 17u32;
        _value |= u32::from(self.p0.p0_latch520_pin18_read()?) << 18u32;
        _value |= u32::from(self.p0.p0_latch520_pin19_read()?) << 19u32;
        _value |= u32::from(self.p0.p0_latch520_pin20_read()?) << 20u32;
        _value |= u32::from(self.p0.p0_latch520_pin21_read()?) << 21u32;
        _value |= u32::from(self.p0.p0_latch520_pin22_read()?) << 22u32;
        _value |= u32::from(self.p0.p0_latch520_pin23_read()?) << 23u32;
        _value |= u32::from(self.p0.p0_latch520_pin24_read()?) << 24u32;
        _value |= u32::from(self.p0.p0_latch520_pin25_read()?) << 25u32;
        _value |= u32::from(self.p0.p0_latch520_pin26_read()?) << 26u32;
        _value |= u32::from(self.p0.p0_latch520_pin27_read()?) << 27u32;
        _value |= u32::from(self.p0.p0_latch520_pin28_read()?) << 28u32;
        _value |= u32::from(self.p0.p0_latch520_pin29_read()?) << 29u32;
        _value |= u32::from(self.p0.p0_latch520_pin30_read()?) << 30u32;
        _value |= u32::from(self.p0.p0_latch520_pin31_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write p0_latch520 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_latch520_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_latch520_pin0_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_latch520_pin1_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_latch520_pin2_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_latch520_pin3_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_latch520_pin4_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_latch520_pin5_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_latch520_pin6_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_latch520_pin7_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_latch520_pin8_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_latch520_pin9_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_latch520_pin10_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_latch520_pin11_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_latch520_pin12_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_latch520_pin13_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_latch520_pin14_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_latch520_pin15_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_latch520_pin16_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_latch520_pin17_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_latch520_pin18_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_latch520_pin19_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_latch520_pin20_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_latch520_pin21_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_latch520_pin22_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_latch520_pin23_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_latch520_pin24_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_latch520_pin25_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_latch520_pin26_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_latch520_pin27_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_latch520_pin28_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_latch520_pin29_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_latch520_pin30_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.p0.p0_latch520_pin31_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read p0_detectmode524 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_detectmode524_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.p0.p0_detectmode524_detectmode_read()?);
        Ok(_value)
    }
    #[doc = "Write p0_detectmode524 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_detectmode524_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_detectmode524_detectmode_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read p0_pin_cnfn700 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_pin_cnfn700_read(
        &mut self,
        _reg_array: usize,
    ) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.p0.p0_pin_cnfn700_dir_read(_reg_array)?);
        _value |=
            u32::from(self.p0.p0_pin_cnfn700_input_read(_reg_array)?) << 1u32;
        _value |=
            u32::from(u8::from(self.p0.p0_pin_cnfn700_pull_read(_reg_array)?))
                << 2u32;
        _value |=
            u32::from(u8::from(self.p0.p0_pin_cnfn700_drive_read(_reg_array)?))
                << 8u32;
        _value |=
            u32::from(u8::from(self.p0.p0_pin_cnfn700_sense_read(_reg_array)?))
                << 16u32;
        Ok(_value)
    }
    #[doc = "Write p0_pin_cnfn700 from [crate::peripheral::p0::P0]"]
    #[inline]
    pub(crate) fn p0_pin_cnfn700_write(
        &mut self,
        _reg_array: usize,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_pin_cnfn700_dir_write(
                _reg_array,
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_pin_cnfn700_input_write(
                _reg_array,
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.p0.p0_pin_cnfn700_pull_write(
                _reg_array,
                ((_value[_i] >> 2) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.p0.p0_pin_cnfn700_drive_write(
                _reg_array,
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.p0.p0_pin_cnfn700_sense_write(
                _reg_array,
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read dwt_dwt_ctrl0 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_ctrl0_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_ctrl0_read()
    }
    #[doc = "Write dwt_dwt_ctrl0 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_ctrl0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt
            .dwt_dwt_ctrl0_write(u32::from_ne_bytes(_value.try_into().unwrap()))
    }
    #[doc = "Read dwt_dwt_cyccnt4 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_cyccnt4_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_cyccnt4_read()
    }
    #[doc = "Write dwt_dwt_cyccnt4 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_cyccnt4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_cyccnt4_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_cpicnt8 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_cpicnt8_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_cpicnt8_read()
    }
    #[doc = "Write dwt_dwt_cpicnt8 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_cpicnt8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_cpicnt8_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_exccntc from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_exccntc_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_exccntc_read()
    }
    #[doc = "Write dwt_dwt_exccntc from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_exccntc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_exccntc_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_sleepcnt10 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_sleepcnt10_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_sleepcnt10_read()
    }
    #[doc = "Write dwt_dwt_sleepcnt10 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_sleepcnt10_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_sleepcnt10_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_lsucnt14 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_lsucnt14_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_lsucnt14_read()
    }
    #[doc = "Write dwt_dwt_lsucnt14 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_lsucnt14_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_lsucnt14_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_foldcnt18 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_foldcnt18_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_foldcnt18_read()
    }
    #[doc = "Write dwt_dwt_foldcnt18 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_foldcnt18_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_foldcnt18_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_pcsr1c from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_pcsr1c_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_pcsr1c_read()
    }
    #[doc = "Read dwt_dwt_comp020 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_comp020_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_comp020_read()
    }
    #[doc = "Write dwt_dwt_comp020 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_comp020_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_comp020_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_mask024 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_mask024_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_mask024_read()
    }
    #[doc = "Write dwt_dwt_mask024 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_mask024_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_mask024_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_function028 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_function028_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_function028_read()
    }
    #[doc = "Write dwt_dwt_function028 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_function028_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_function028_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_comp130 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_comp130_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_comp130_read()
    }
    #[doc = "Write dwt_dwt_comp130 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_comp130_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_comp130_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_mask134 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_mask134_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_mask134_read()
    }
    #[doc = "Write dwt_dwt_mask134 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_mask134_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_mask134_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_function138 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_function138_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_function138_read()
    }
    #[doc = "Write dwt_dwt_function138 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_function138_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_function138_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_comp240 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_comp240_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_comp240_read()
    }
    #[doc = "Write dwt_dwt_comp240 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_comp240_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_comp240_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_mask244 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_mask244_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_mask244_read()
    }
    #[doc = "Write dwt_dwt_mask244 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_mask244_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_mask244_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_function248 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_function248_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_function248_read()
    }
    #[doc = "Write dwt_dwt_function248 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_function248_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_function248_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_comp350 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_comp350_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_comp350_read()
    }
    #[doc = "Write dwt_dwt_comp350 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_comp350_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_comp350_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_mask354 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_mask354_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_mask354_read()
    }
    #[doc = "Write dwt_dwt_mask354 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_mask354_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_mask354_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read dwt_dwt_function358 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_function358_read(&mut self) -> MemResult<u32> {
        self.dwt.dwt_dwt_function358_read()
    }
    #[doc = "Write dwt_dwt_function358 from [crate::peripheral::dwt::Dwt]"]
    #[inline]
    pub(crate) fn dwt_dwt_function358_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.dwt.dwt_dwt_function358_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_ictr4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_ictr4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_ictr4_intlinesnum_read()?);
        Ok(_value)
    }
    #[doc = "Read scs_actlr8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_actlr8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_actlr8_dismcycint_read()?);
        _value |= u32::from(self.scs.scs_actlr8_disdefwbuf_read()?) << 1u32;
        _value |= u32::from(self.scs.scs_actlr8_disfold_read()?) << 2u32;
        _value |= u32::from(self.scs.scs_actlr8_disfpca_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_actlr8_disoofp_read()?) << 9u32;
        Ok(_value)
    }
    #[doc = "Write scs_actlr8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_actlr8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_actlr8_dismcycint_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_actlr8_disdefwbuf_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_actlr8_disfold_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_actlr8_disfpca_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_actlr8_disoofp_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_stcsr10 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_stcsr10_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_stcsr10_enable_read()?);
        _value |= u32::from(self.scs.scs_stcsr10_tickint_read()?) << 1u32;
        _value |= u32::from(self.scs.scs_stcsr10_clksource_read()?) << 2u32;
        _value |= u32::from(self.scs.scs_stcsr10_countflag_read()?) << 16u32;
        Ok(_value)
    }
    #[doc = "Write scs_stcsr10 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_stcsr10_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_stcsr10_enable_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_stcsr10_tickint_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_stcsr10_clksource_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_stcsr10_countflag_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_strvr14 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_strvr14_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_strvr14_reload_read()?);
        Ok(_value)
    }
    #[doc = "Write scs_strvr14 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_strvr14_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 3 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 3;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.scs.scs_strvr14_reload_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 3) || (_end > 0 && _end < 3) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read scs_stcvr18 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_stcvr18_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_stcvr18_current_read()?);
        Ok(_value)
    }
    #[doc = "Write scs_stcvr18 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_stcvr18_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 3 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 3;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.scs.scs_stcvr18_current_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 3) || (_end > 0 && _end < 3) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read scs_stcr1c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_stcr1c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_stcr1c_tenms_read()?);
        _value |= u32::from(self.scs.scs_stcr1c_skew_read()?) << 30u32;
        _value |= u32::from(self.scs.scs_stcr1c_noref_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Read scs_nvic_iser0100 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser0100_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iser0100_read()
    }
    #[doc = "Write scs_nvic_iser0100 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser0100_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iser0100_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iser1104 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser1104_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iser1104_read()
    }
    #[doc = "Write scs_nvic_iser1104 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser1104_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iser1104_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iser2108 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser2108_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iser2108_read()
    }
    #[doc = "Write scs_nvic_iser2108 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser2108_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iser2108_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iser310c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser310c_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iser310c_read()
    }
    #[doc = "Write scs_nvic_iser310c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser310c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iser310c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iser4110 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser4110_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iser4110_read()
    }
    #[doc = "Write scs_nvic_iser4110 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser4110_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iser4110_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iser5114 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser5114_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iser5114_read()
    }
    #[doc = "Write scs_nvic_iser5114 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser5114_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iser5114_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iser6118 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser6118_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iser6118_read()
    }
    #[doc = "Write scs_nvic_iser6118 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser6118_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iser6118_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iser711c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser711c_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iser711c_read()
    }
    #[doc = "Write scs_nvic_iser711c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iser711c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iser711c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icer0180 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer0180_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icer0180_read()
    }
    #[doc = "Write scs_nvic_icer0180 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer0180_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icer0180_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icer1184 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer1184_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icer1184_read()
    }
    #[doc = "Write scs_nvic_icer1184 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer1184_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icer1184_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icer2188 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer2188_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icer2188_read()
    }
    #[doc = "Write scs_nvic_icer2188 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer2188_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icer2188_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icer318c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer318c_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icer318c_read()
    }
    #[doc = "Write scs_nvic_icer318c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer318c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icer318c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icer4190 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer4190_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icer4190_read()
    }
    #[doc = "Write scs_nvic_icer4190 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer4190_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icer4190_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icer5194 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer5194_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icer5194_read()
    }
    #[doc = "Write scs_nvic_icer5194 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer5194_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icer5194_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icer6198 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer6198_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icer6198_read()
    }
    #[doc = "Write scs_nvic_icer6198 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer6198_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icer6198_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icer719c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer719c_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icer719c_read()
    }
    #[doc = "Write scs_nvic_icer719c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icer719c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icer719c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_ispr0200 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr0200_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_ispr0200_read()
    }
    #[doc = "Write scs_nvic_ispr0200 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr0200_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_ispr0200_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_ispr1204 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr1204_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_ispr1204_read()
    }
    #[doc = "Write scs_nvic_ispr1204 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr1204_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_ispr1204_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_ispr2208 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr2208_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_ispr2208_read()
    }
    #[doc = "Write scs_nvic_ispr2208 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr2208_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_ispr2208_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_ispr320c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr320c_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_ispr320c_read()
    }
    #[doc = "Write scs_nvic_ispr320c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr320c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_ispr320c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_ispr4210 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr4210_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_ispr4210_read()
    }
    #[doc = "Write scs_nvic_ispr4210 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr4210_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_ispr4210_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_ispr5214 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr5214_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_ispr5214_read()
    }
    #[doc = "Write scs_nvic_ispr5214 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr5214_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_ispr5214_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_ispr6218 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr6218_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_ispr6218_read()
    }
    #[doc = "Write scs_nvic_ispr6218 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr6218_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_ispr6218_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_ispr721c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr721c_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_ispr721c_read()
    }
    #[doc = "Write scs_nvic_ispr721c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ispr721c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_ispr721c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icpr0280 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr0280_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icpr0280_read()
    }
    #[doc = "Write scs_nvic_icpr0280 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr0280_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icpr0280_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icpr1284 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr1284_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icpr1284_read()
    }
    #[doc = "Write scs_nvic_icpr1284 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr1284_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icpr1284_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icpr2288 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr2288_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icpr2288_read()
    }
    #[doc = "Write scs_nvic_icpr2288 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr2288_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icpr2288_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icpr328c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr328c_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icpr328c_read()
    }
    #[doc = "Write scs_nvic_icpr328c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr328c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icpr328c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icpr4290 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr4290_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icpr4290_read()
    }
    #[doc = "Write scs_nvic_icpr4290 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr4290_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icpr4290_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icpr5294 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr5294_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icpr5294_read()
    }
    #[doc = "Write scs_nvic_icpr5294 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr5294_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icpr5294_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icpr6298 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr6298_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icpr6298_read()
    }
    #[doc = "Write scs_nvic_icpr6298 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr6298_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icpr6298_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_icpr729c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr729c_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_icpr729c_read()
    }
    #[doc = "Write scs_nvic_icpr729c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_icpr729c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_icpr729c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iabr0300 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr0300_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iabr0300_read()
    }
    #[doc = "Write scs_nvic_iabr0300 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr0300_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iabr0300_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iabr1304 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr1304_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iabr1304_read()
    }
    #[doc = "Write scs_nvic_iabr1304 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr1304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iabr1304_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iabr2308 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr2308_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iabr2308_read()
    }
    #[doc = "Write scs_nvic_iabr2308 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr2308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iabr2308_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iabr330c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr330c_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iabr330c_read()
    }
    #[doc = "Write scs_nvic_iabr330c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr330c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iabr330c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iabr4310 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr4310_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iabr4310_read()
    }
    #[doc = "Write scs_nvic_iabr4310 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr4310_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iabr4310_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iabr5314 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr5314_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iabr5314_read()
    }
    #[doc = "Write scs_nvic_iabr5314 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr5314_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iabr5314_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iabr6318 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr6318_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iabr6318_read()
    }
    #[doc = "Write scs_nvic_iabr6318 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr6318_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iabr6318_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_iabr731c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr731c_read(&mut self) -> MemResult<u32> {
        self.scs.scs_nvic_iabr731c_read()
    }
    #[doc = "Write scs_nvic_iabr731c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_iabr731c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs.scs_nvic_iabr731c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read scs_nvic_ipr0400 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr0400_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr0400_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr0400_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr0400_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr0400_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr0400 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr0400_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr0400_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr0400_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr0400_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr0400_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr1404 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr1404_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr1404_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr1404_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr1404_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr1404_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr1404 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr1404_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr1404_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr1404_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr1404_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr1404_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr2408 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr2408_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr2408_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr2408_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr2408_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr2408_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr2408 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr2408_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr2408_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr2408_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr2408_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr2408_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr340c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr340c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr340c_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr340c_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr340c_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr340c_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr340c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr340c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr340c_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr340c_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr340c_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr340c_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr4410 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr4410_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr4410_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr4410_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr4410_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr4410_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr4410 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr4410_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr4410_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr4410_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr4410_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr4410_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr5414 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr5414_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr5414_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr5414_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr5414_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr5414_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr5414 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr5414_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr5414_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr5414_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr5414_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr5414_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr6418 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr6418_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr6418_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr6418_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr6418_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr6418_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr6418 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr6418_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr6418_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr6418_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr6418_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr6418_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr741c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr741c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr741c_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr741c_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr741c_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr741c_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr741c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr741c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr741c_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr741c_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr741c_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr741c_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr8420 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr8420_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr8420_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr8420_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr8420_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr8420_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr8420 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr8420_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr8420_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr8420_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr8420_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr8420_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr9424 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr9424_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr9424_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr9424_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr9424_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr9424_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr9424 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr9424_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr9424_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr9424_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr9424_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr9424_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr10428 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr10428_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr10428_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr10428_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr10428_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr10428_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr10428 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr10428_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr10428_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr10428_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr10428_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr10428_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr1142c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr1142c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr1142c_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr1142c_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr1142c_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr1142c_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr1142c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr1142c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr1142c_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr1142c_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr1142c_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr1142c_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr12430 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr12430_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr12430_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr12430_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr12430_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr12430_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr12430 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr12430_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr12430_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr12430_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr12430_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr12430_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr13434 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr13434_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr13434_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr13434_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr13434_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr13434_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr13434 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr13434_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr13434_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr13434_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr13434_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr13434_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr14438 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr14438_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr14438_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr14438_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr14438_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr14438_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr14438 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr14438_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr14438_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr14438_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr14438_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr14438_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr1543c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr1543c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr1543c_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr1543c_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr1543c_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr1543c_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr1543c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr1543c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr1543c_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr1543c_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr1543c_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr1543c_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr16440 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr16440_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr16440_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr16440_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr16440_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr16440_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr16440 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr16440_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr16440_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr16440_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr16440_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr16440_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr17444 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr17444_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr17444_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr17444_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr17444_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr17444_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr17444 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr17444_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr17444_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr17444_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr17444_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr17444_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr18448 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr18448_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr18448_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr18448_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr18448_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr18448_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr18448 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr18448_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr18448_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr18448_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr18448_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr18448_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr1944c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr1944c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr1944c_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr1944c_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr1944c_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr1944c_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr1944c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr1944c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr1944c_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr1944c_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr1944c_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr1944c_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr20450 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr20450_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr20450_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr20450_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr20450_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr20450_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr20450 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr20450_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr20450_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr20450_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr20450_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr20450_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr21454 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr21454_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr21454_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr21454_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr21454_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr21454_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr21454 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr21454_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr21454_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr21454_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr21454_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr21454_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr22458 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr22458_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr22458_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr22458_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr22458_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr22458_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr22458 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr22458_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr22458_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr22458_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr22458_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr22458_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr2345c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr2345c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr2345c_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr2345c_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr2345c_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr2345c_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr2345c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr2345c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr2345c_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr2345c_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr2345c_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr2345c_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr24460 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr24460_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr24460_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr24460_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr24460_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr24460_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr24460 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr24460_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr24460_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr24460_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr24460_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr24460_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr25464 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr25464_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr25464_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr25464_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr25464_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr25464_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr25464 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr25464_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr25464_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr25464_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr25464_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr25464_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr26468 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr26468_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr26468_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr26468_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr26468_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr26468_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr26468 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr26468_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr26468_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr26468_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr26468_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr26468_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr2746c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr2746c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr2746c_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr2746c_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr2746c_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr2746c_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr2746c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr2746c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr2746c_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr2746c_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr2746c_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr2746c_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr28470 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr28470_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr28470_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr28470_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr28470_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr28470_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr28470 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr28470_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr28470_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr28470_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr28470_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr28470_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr29474 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr29474_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr29474_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr29474_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr29474_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr29474_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr29474 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr29474_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr29474_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr29474_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr29474_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr29474_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr30478 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr30478_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr30478_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr30478_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr30478_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr30478_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr30478 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr30478_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr30478_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr30478_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr30478_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr30478_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr3147c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr3147c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr3147c_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr3147c_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr3147c_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr3147c_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr3147c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr3147c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr3147c_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr3147c_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr3147c_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr3147c_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr32480 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr32480_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr32480_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr32480_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr32480_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr32480_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr32480 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr32480_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr32480_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr32480_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr32480_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr32480_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr33484 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr33484_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr33484_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr33484_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr33484_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr33484_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr33484 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr33484_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr33484_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr33484_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr33484_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr33484_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr34488 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr34488_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr34488_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr34488_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr34488_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr34488_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr34488 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr34488_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr34488_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr34488_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr34488_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr34488_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr3548c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr3548c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr3548c_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr3548c_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr3548c_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr3548c_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr3548c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr3548c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr3548c_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr3548c_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr3548c_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr3548c_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr36490 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr36490_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr36490_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr36490_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr36490_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr36490_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr36490 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr36490_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr36490_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr36490_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr36490_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr36490_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr37494 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr37494_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr37494_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr37494_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr37494_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr37494_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr37494 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr37494_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr37494_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr37494_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr37494_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr37494_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr38498 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr38498_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr38498_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr38498_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr38498_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr38498_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr38498 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr38498_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr38498_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr38498_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr38498_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr38498_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr3949c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr3949c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr3949c_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr3949c_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr3949c_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr3949c_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr3949c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr3949c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr3949c_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr3949c_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr3949c_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr3949c_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr404a0 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr404a0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr404a0_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr404a0_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr404a0_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr404a0_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr404a0 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr404a0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr404a0_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr404a0_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr404a0_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr404a0_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr414a4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr414a4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr414a4_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr414a4_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr414a4_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr414a4_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr414a4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr414a4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr414a4_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr414a4_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr414a4_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr414a4_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr424a8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr424a8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr424a8_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr424a8_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr424a8_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr424a8_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr424a8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr424a8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr424a8_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr424a8_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr424a8_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr424a8_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr434ac from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr434ac_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr434ac_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr434ac_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr434ac_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr434ac_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr434ac from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr434ac_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr434ac_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr434ac_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr434ac_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr434ac_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr444b0 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr444b0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr444b0_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr444b0_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr444b0_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr444b0_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr444b0 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr444b0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr444b0_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr444b0_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr444b0_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr444b0_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr454b4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr454b4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr454b4_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr454b4_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr454b4_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr454b4_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr454b4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr454b4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr454b4_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr454b4_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr454b4_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr454b4_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr464b8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr464b8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr464b8_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr464b8_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr464b8_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr464b8_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr464b8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr464b8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr464b8_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr464b8_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr464b8_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr464b8_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr474bc from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr474bc_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr474bc_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr474bc_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr474bc_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr474bc_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr474bc from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr474bc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr474bc_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr474bc_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr474bc_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr474bc_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr484c0 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr484c0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr484c0_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr484c0_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr484c0_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr484c0_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr484c0 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr484c0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr484c0_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr484c0_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr484c0_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr484c0_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr494c4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr494c4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr494c4_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr494c4_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr494c4_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr494c4_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr494c4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr494c4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr494c4_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr494c4_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr494c4_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr494c4_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr504c8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr504c8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr504c8_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr504c8_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr504c8_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr504c8_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr504c8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr504c8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr504c8_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr504c8_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr504c8_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr504c8_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr514cc from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr514cc_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr514cc_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr514cc_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr514cc_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr514cc_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr514cc from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr514cc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr514cc_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr514cc_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr514cc_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr514cc_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr524d0 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr524d0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr524d0_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr524d0_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr524d0_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr524d0_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr524d0 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr524d0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr524d0_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr524d0_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr524d0_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr524d0_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr534d4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr534d4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr534d4_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr534d4_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr534d4_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr534d4_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr534d4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr534d4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr534d4_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr534d4_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr534d4_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr534d4_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr544d8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr544d8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr544d8_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr544d8_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr544d8_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr544d8_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr544d8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr544d8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr544d8_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr544d8_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr544d8_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr544d8_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr554dc from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr554dc_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr554dc_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr554dc_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr554dc_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr554dc_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr554dc from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr554dc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr554dc_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr554dc_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr554dc_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr554dc_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr564e0 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr564e0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr564e0_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr564e0_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr564e0_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr564e0_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr564e0 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr564e0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr564e0_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr564e0_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr564e0_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr564e0_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr574e4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr574e4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr574e4_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr574e4_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr574e4_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr574e4_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr574e4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr574e4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr574e4_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr574e4_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr574e4_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr574e4_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr584e8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr584e8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr584e8_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr584e8_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr584e8_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr584e8_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr584e8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr584e8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr584e8_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr584e8_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr584e8_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr584e8_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_nvic_ipr594ec from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr594ec_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_nvic_ipr594ec_pri_n0_read()?);
        _value |= u32::from(self.scs.scs_nvic_ipr594ec_pri_n1_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_nvic_ipr594ec_pri_n2_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_nvic_ipr594ec_pri_n3_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_nvic_ipr594ec from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_nvic_ipr594ec_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_nvic_ipr594ec_pri_n0_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_nvic_ipr594ec_pri_n1_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_nvic_ipr594ec_pri_n2_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_nvic_ipr594ec_pri_n3_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_cpuidd00 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_cpuidd00_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_cpuidd00_revision_read()?);
        _value |= u32::from(self.scs.scs_cpuidd00_partno_read()?) << 4u32;
        _value |= u32::from(self.scs.scs_cpuidd00_constant_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_cpuidd00_variant_read()?) << 20u32;
        _value |= u32::from(self.scs.scs_cpuidd00_implementer_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Read scs_icsrd04 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_icsrd04_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_icsrd04_vectactive_read()?);
        _value |= u32::from(self.scs.scs_icsrd04_rettobase_read()?) << 11u32;
        _value |= u32::from(self.scs.scs_icsrd04_vectpending_read()?) << 12u32;
        _value |= u32::from(self.scs.scs_icsrd04_isrpending_read()?) << 22u32;
        _value |= u32::from(self.scs.scs_icsrd04_isrpreempt_read()?) << 23u32;
        _value |= u32::from(self.scs.scs_icsrd04_pendstclr_read()?) << 25u32;
        _value |= u32::from(self.scs.scs_icsrd04_pendstset_read()?) << 26u32;
        _value |= u32::from(self.scs.scs_icsrd04_pendsvclr_read()?) << 27u32;
        _value |= u32::from(self.scs.scs_icsrd04_pendsvset_read()?) << 28u32;
        _value |= u32::from(self.scs.scs_icsrd04_nmipendset_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write scs_icsrd04 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_icsrd04_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 1u8)
                as u16)
                << (0 + (1 * 8));
            self.scs.scs_icsrd04_vectactive_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_icsrd04_rettobase_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if _start <= 1 && _end >= 3 {
            let mut _extracted: u16 = 0;
            _extracted |= ((_value[(1 - _start) as usize] >> 4) & 15u8) as u16;
            _extracted |= ((_value[((1 + 0 + 1) - _start) as usize] & 31u8)
                as u16)
                << (4 + (0 * 8));
            self.scs.scs_icsrd04_vectpending_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 1 && _start < 3) || (_end > 1 && _end < 3) {
            return Err(MemError::WriteViolation);
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_icsrd04_isrpending_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_icsrd04_isrpreempt_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_icsrd04_pendstclr_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_icsrd04_pendstset_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_icsrd04_pendsvclr_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_icsrd04_pendsvset_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_icsrd04_nmipendset_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_vtord08 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_vtord08_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_vtord08_tbloff_read()?) << 7u32;
        _value |= u32::from(self.scs.scs_vtord08_tblbase_read()?) << 29u32;
        Ok(_value)
    }
    #[doc = "Write scs_vtord08 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_vtord08_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let mut _extracted: u32 = 0;
            _extracted |= ((_value[(0 - _start) as usize] >> 7) & 1u8) as u32;
            for byte_i in 0..3 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u32)
                    << (7 + (byte_i * 8));
            }
            self.scs.scs_vtord08_tbloff_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_vtord08_tblbase_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_aircrd0c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_aircrd0c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.scs.scs_aircrd0c_vectclractive_read()?) << 1u32;
        _value |= u32::from(self.scs.scs_aircrd0c_sysresetreq_read()?) << 2u32;
        _value |= u32::from(self.scs.scs_aircrd0c_prigroup_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_aircrd0c_endianness_read()?) << 15u32;
        _value |= u32::from(self.scs.scs_aircrd0c_vectkey_read()?) << 16u32;
        Ok(_value)
    }
    #[doc = "Write scs_aircrd0c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_aircrd0c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_aircrd0c_vectclractive_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_aircrd0c_sysresetreq_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_aircrd0c_prigroup_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_aircrd0c_endianness_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if _start <= 2 && _end >= 4 {
            let _offset_start = (2 - _start) as usize;
            let _offset_end = _offset_start + 2;
            let _value = u16::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.scs.scs_aircrd0c_vectkey_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 2 && _start < 4) || (_end > 2 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read scs_scrd10 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_scrd10_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_scrd10_sleeponexit_read()?) << 1u32;
        _value |= u32::from(self.scs.scs_scrd10_sleepdeep_read()?) << 2u32;
        _value |= u32::from(self.scs.scs_scrd10_sevonpend_read()?) << 4u32;
        Ok(_value)
    }
    #[doc = "Write scs_scrd10 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_scrd10_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_scrd10_sleeponexit_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_scrd10_sleepdeep_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_scrd10_sevonpend_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_ccrd14 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_ccrd14_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_ccrd14_nonbasethrdena_read()?);
        _value |= u32::from(self.scs.scs_ccrd14_usersetmpend_read()?) << 1u32;
        _value |= u32::from(self.scs.scs_ccrd14_unalign_trp_read()?) << 3u32;
        _value |= u32::from(self.scs.scs_ccrd14_div_0_trp_read()?) << 4u32;
        _value |= u32::from(self.scs.scs_ccrd14_bfhfnmign_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_ccrd14_stkalign_read()?) << 9u32;
        Ok(_value)
    }
    #[doc = "Write scs_ccrd14 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_ccrd14_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_ccrd14_nonbasethrdena_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_ccrd14_usersetmpend_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_ccrd14_unalign_trp_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_ccrd14_div_0_trp_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_ccrd14_bfhfnmign_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_ccrd14_stkalign_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_shpr1d18 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_shpr1d18_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_shpr1d18_pri_4_read()?);
        _value |= u32::from(self.scs.scs_shpr1d18_pri_5_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_shpr1d18_pri_6_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_shpr1d18_pri_7_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_shpr1d18 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_shpr1d18_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_shpr1d18_pri_4_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_shpr1d18_pri_5_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_shpr1d18_pri_6_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_shpr1d18_pri_7_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_shpr2d1c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_shpr2d1c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_shpr2d1c_pri_8_read()?);
        _value |= u32::from(self.scs.scs_shpr2d1c_pri_9_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_shpr2d1c_pri_10_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_shpr2d1c_pri_11_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_shpr2d1c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_shpr2d1c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_shpr2d1c_pri_8_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_shpr2d1c_pri_9_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_shpr2d1c_pri_10_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_shpr2d1c_pri_11_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_shpr3d20 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_shpr3d20_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_shpr3d20_pri_12_read()?);
        _value |= u32::from(self.scs.scs_shpr3d20_pri_13_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_shpr3d20_pri_14_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_shpr3d20_pri_15_read()?) << 24u32;
        Ok(_value)
    }
    #[doc = "Write scs_shpr3d20 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_shpr3d20_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_shpr3d20_pri_12_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_shpr3d20_pri_13_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_shpr3d20_pri_14_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_shpr3d20_pri_15_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_shcsrd24 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_shcsrd24_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_shcsrd24_memfaultact_read()?);
        _value |= u32::from(self.scs.scs_shcsrd24_busfaultact_read()?) << 1u32;
        _value |= u32::from(self.scs.scs_shcsrd24_usgfaultact_read()?) << 3u32;
        _value |= u32::from(self.scs.scs_shcsrd24_svcallact_read()?) << 7u32;
        _value |= u32::from(self.scs.scs_shcsrd24_monitoract_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_shcsrd24_pendsvact_read()?) << 10u32;
        _value |= u32::from(self.scs.scs_shcsrd24_systickact_read()?) << 11u32;
        _value |=
            u32::from(self.scs.scs_shcsrd24_usgfaultpended_read()?) << 12u32;
        _value |=
            u32::from(self.scs.scs_shcsrd24_memfaultpended_read()?) << 13u32;
        _value |=
            u32::from(self.scs.scs_shcsrd24_busfaultpended_read()?) << 14u32;
        _value |=
            u32::from(self.scs.scs_shcsrd24_svcallpended_read()?) << 15u32;
        _value |= u32::from(self.scs.scs_shcsrd24_memfaultena_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_shcsrd24_busfaultena_read()?) << 17u32;
        _value |= u32::from(self.scs.scs_shcsrd24_usgfaultena_read()?) << 18u32;
        Ok(_value)
    }
    #[doc = "Write scs_shcsrd24 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_shcsrd24_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_shcsrd24_memfaultact_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_shcsrd24_busfaultact_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_shcsrd24_usgfaultact_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_shcsrd24_svcallact_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_shcsrd24_monitoract_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_shcsrd24_pendsvact_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_shcsrd24_systickact_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_shcsrd24_usgfaultpended_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_shcsrd24_memfaultpended_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_shcsrd24_busfaultpended_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_shcsrd24_svcallpended_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_shcsrd24_memfaultena_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_shcsrd24_busfaultena_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_shcsrd24_usgfaultena_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_cfsrd28 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_cfsrd28_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_cfsrd28_iaccviol_read()?);
        _value |= u32::from(self.scs.scs_cfsrd28_daccviol_read()?) << 1u32;
        _value |= u32::from(self.scs.scs_cfsrd28_munstkerr_read()?) << 3u32;
        _value |= u32::from(self.scs.scs_cfsrd28_mstkerr_read()?) << 4u32;
        _value |= u32::from(self.scs.scs_cfsrd28_mlsperr_read()?) << 5u32;
        _value |= u32::from(self.scs.scs_cfsrd28_mmarvalid_read()?) << 7u32;
        _value |= u32::from(self.scs.scs_cfsrd28_ibuserr_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_cfsrd28_preciserr_read()?) << 9u32;
        _value |= u32::from(self.scs.scs_cfsrd28_impreciserr_read()?) << 10u32;
        _value |= u32::from(self.scs.scs_cfsrd28_unstkerr_read()?) << 11u32;
        _value |= u32::from(self.scs.scs_cfsrd28_stkerr_read()?) << 12u32;
        _value |= u32::from(self.scs.scs_cfsrd28_lsperr_read()?) << 13u32;
        _value |= u32::from(self.scs.scs_cfsrd28_bfarvalid_read()?) << 15u32;
        _value |= u32::from(self.scs.scs_cfsrd28_undefinstr_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_cfsrd28_invstate_read()?) << 17u32;
        _value |= u32::from(self.scs.scs_cfsrd28_invpc_read()?) << 18u32;
        _value |= u32::from(self.scs.scs_cfsrd28_nocp_read()?) << 19u32;
        _value |= u32::from(self.scs.scs_cfsrd28_unaligned_read()?) << 24u32;
        _value |= u32::from(self.scs.scs_cfsrd28_divbyzero_read()?) << 25u32;
        Ok(_value)
    }
    #[doc = "Write scs_cfsrd28 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_cfsrd28_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_cfsrd28_iaccviol_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_cfsrd28_daccviol_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_cfsrd28_munstkerr_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_cfsrd28_mstkerr_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_cfsrd28_mlsperr_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_cfsrd28_mmarvalid_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_cfsrd28_ibuserr_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_cfsrd28_preciserr_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_cfsrd28_impreciserr_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_cfsrd28_unstkerr_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_cfsrd28_stkerr_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_cfsrd28_lsperr_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_cfsrd28_bfarvalid_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_cfsrd28_undefinstr_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_cfsrd28_invstate_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_cfsrd28_invpc_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_cfsrd28_nocp_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_cfsrd28_unaligned_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_cfsrd28_divbyzero_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_hfsrd2c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_hfsrd2c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_hfsrd2c_vecttbl_read()?) << 1u32;
        _value |= u32::from(self.scs.scs_hfsrd2c_forced_read()?) << 30u32;
        _value |= u32::from(self.scs.scs_hfsrd2c_debugevt_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write scs_hfsrd2c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_hfsrd2c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_hfsrd2c_vecttbl_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_hfsrd2c_forced_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_hfsrd2c_debugevt_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_dfsrd30 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_dfsrd30_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_dfsrd30_halted_read()?);
        _value |= u32::from(self.scs.scs_dfsrd30_bkpt_read()?) << 1u32;
        _value |= u32::from(self.scs.scs_dfsrd30_dwttrap_read()?) << 2u32;
        _value |= u32::from(self.scs.scs_dfsrd30_vcatch_read()?) << 3u32;
        _value |= u32::from(self.scs.scs_dfsrd30_external_read()?) << 4u32;
        Ok(_value)
    }
    #[doc = "Write scs_dfsrd30 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_dfsrd30_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_dfsrd30_halted_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_dfsrd30_bkpt_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_dfsrd30_dwttrap_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_dfsrd30_vcatch_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_dfsrd30_external_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_mmfard34 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mmfard34_read(&mut self) -> MemResult<u32> {
        self.scs.scs_mmfard34_read()
    }
    #[doc = "Write scs_mmfard34 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mmfard34_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs
            .scs_mmfard34_write(u32::from_ne_bytes(_value.try_into().unwrap()))
    }
    #[doc = "Read scs_bfard38 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_bfard38_read(&mut self) -> MemResult<u32> {
        self.scs.scs_bfard38_read()
    }
    #[doc = "Write scs_bfard38 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_bfard38_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs
            .scs_bfard38_write(u32::from_ne_bytes(_value.try_into().unwrap()))
    }
    #[doc = "Read scs_afsrd3c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_afsrd3c_read(&mut self) -> MemResult<u32> {
        self.scs.scs_afsrd3c_read()
    }
    #[doc = "Write scs_afsrd3c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_afsrd3c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs
            .scs_afsrd3c_write(u32::from_ne_bytes(_value.try_into().unwrap()))
    }
    #[doc = "Read scs_id_pfr0d40 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_id_pfr0d40_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.scs.scs_id_pfr0d40_state1_read()?)) << 4u32;
        Ok(_value)
    }
    #[doc = "Read scs_id_pfr1d44 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_id_pfr1d44_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.scs.scs_id_pfr1d44_m_profile_read()?))
                << 8u32;
        Ok(_value)
    }
    #[doc = "Read scs_id_dfr0d48 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_id_dfr0d48_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.scs.scs_id_dfr0d48_m_profile_read()?))
                << 20u32;
        Ok(_value)
    }
    #[doc = "Read scs_id_afr0d4c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_id_afr0d4c_read(&mut self) -> MemResult<u32> {
        self.scs.scs_id_afr0d4c_read()
    }
    #[doc = "Read scs_id_mmfr0d50 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_id_mmfr0d50_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.scs.scs_id_mmfr0d50_pmsa_read()?)) << 4u32;
        _value |= u32::from(u8::from(
            self.scs.scs_id_mmfr0d50_outermost_shareability_read()?,
        )) << 8u32;
        _value |= u32::from(u8::from(
            self.scs.scs_id_mmfr0d50_shareability_levels_read()?,
        )) << 12u32;
        _value |= u32::from(u8::from(
            self.scs.scs_id_mmfr0d50_auxiliary_registers_read()?,
        )) << 20u32;
        Ok(_value)
    }
    #[doc = "Read scs_id_mmfr1d54 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_id_mmfr1d54_read(&mut self) -> MemResult<u32> {
        self.scs.scs_id_mmfr1d54_read()
    }
    #[doc = "Read scs_id_mmfr2d58 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_id_mmfr2d58_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.scs.scs_id_mmfr2d58_wfi_read()?)) << 24u32;
        Ok(_value)
    }
    #[doc = "Read scs_id_mmfr3d5c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_id_mmfr3d5c_read(&mut self) -> MemResult<u32> {
        self.scs.scs_id_mmfr3d5c_read()
    }
    #[doc = "Read scs_id_isar0d60 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_id_isar0d60_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.scs.scs_id_isar0d60_bitcount_instrs_read()?,
        )) << 4u32;
        _value |= u32::from(u8::from(
            self.scs.scs_id_isar0d60_bitfield_instrs_read()?,
        )) << 8u32;
        _value |= u32::from(u8::from(
            self.scs.scs_id_isar0d60_cmpbranch_instrs_read()?,
        )) << 12u32;
        _value |=
            u32::from(u8::from(self.scs.scs_id_isar0d60_coproc_instrs_read()?))
                << 16u32;
        _value |=
            u32::from(u8::from(self.scs.scs_id_isar0d60_debug_instrs_read()?))
                << 20u32;
        _value |=
            u32::from(u8::from(self.scs.scs_id_isar0d60_divide_instrs_read()?))
                << 24u32;
        Ok(_value)
    }
    #[doc = "Read scs_id_isar1d64 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_id_isar1d64_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.scs.scs_id_isar1d64_extend_instrs_read()?) << 12u32;
        _value |=
            u32::from(u8::from(self.scs.scs_id_isar1d64_ifthen_instrs_read()?))
                << 16u32;
        _value |= u32::from(u8::from(
            self.scs.scs_id_isar1d64_immediate_instrs_read()?,
        )) << 20u32;
        _value |= u32::from(u8::from(
            self.scs.scs_id_isar1d64_interwork_instrs_read()?,
        )) << 24u32;
        Ok(_value)
    }
    #[doc = "Read scs_id_isar2d68 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_id_isar2d68_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_id_isar2d68_loadstore_instrs_read()?);
        _value |=
            u32::from(self.scs.scs_id_isar2d68_memhint_instrs_read()?) << 4u32;
        _value |=
            u32::from(self.scs.scs_id_isar2d68_multiaccessint_instrs_read()?)
                << 8u32;
        _value |=
            u32::from(self.scs.scs_id_isar2d68_mult_instrs_read()?) << 12u32;
        _value |=
            u32::from(self.scs.scs_id_isar2d68_mults_instrs_read()?) << 16u32;
        _value |=
            u32::from(self.scs.scs_id_isar2d68_multu_instrs_read()?) << 20u32;
        _value |= u32::from(self.scs.scs_id_isar2d68_reversal_instrs_read()?)
            << 28u32;
        Ok(_value)
    }
    #[doc = "Read scs_id_isar3d6c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_id_isar3d6c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(
            self.scs.scs_id_isar3d6c_saturate_instrs_read()?,
        ));
        _value |=
            u32::from(self.scs.scs_id_isar3d6c_simd_instrs_read()?) << 4u32;
        _value |=
            u32::from(u8::from(self.scs.scs_id_isar3d6c_svc_instrs_read()?))
                << 8u32;
        _value |= u32::from(self.scs.scs_id_isar3d6c_synchprim_instrs_read()?)
            << 12u32;
        _value |= u32::from(u8::from(
            self.scs.scs_id_isar3d6c_tabbranch_instrs_read()?,
        )) << 16u32;
        _value |= u32::from(u8::from(
            self.scs.scs_id_isar3d6c_thumbcopy_instrs_read()?,
        )) << 20u32;
        _value |= u32::from(u8::from(
            self.scs.scs_id_isar3d6c_truenop_instrs_read()?,
        )) << 24u32;
        Ok(_value)
    }
    #[doc = "Read scs_id_isar4d70 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_id_isar4d70_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_id_isar4d70_unpriv_instrs_read()?);
        _value |= u32::from(self.scs.scs_id_isar4d70_withshifts_instrs_read()?)
            << 4u32;
        _value |= u32::from(u8::from(
            self.scs.scs_id_isar4d70_writeback_instrs_read()?,
        )) << 8u32;
        _value |= u32::from(u8::from(
            self.scs.scs_id_isar4d70_barrier_instrs_read()?,
        )) << 16u32;
        _value |=
            u32::from(self.scs.scs_id_isar4d70_synchprim_instrs_frac_read()?)
                << 20u32;
        _value |=
            u32::from(u8::from(self.scs.scs_id_isar4d70_psr_m_instrs_read()?))
                << 24u32;
        Ok(_value)
    }
    #[doc = "Read scs_cpacrd88 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_cpacrd88_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.scs.scs_cpacrd88_cp0_read()?));
        _value |=
            u32::from(u8::from(self.scs.scs_cpacrd88_cp1_read()?)) << 2u32;
        _value |=
            u32::from(u8::from(self.scs.scs_cpacrd88_cp2_read()?)) << 4u32;
        _value |=
            u32::from(u8::from(self.scs.scs_cpacrd88_cp3_read()?)) << 6u32;
        _value |=
            u32::from(u8::from(self.scs.scs_cpacrd88_cp4_read()?)) << 8u32;
        _value |=
            u32::from(u8::from(self.scs.scs_cpacrd88_cp5_read()?)) << 10u32;
        _value |=
            u32::from(u8::from(self.scs.scs_cpacrd88_cp6_read()?)) << 12u32;
        _value |=
            u32::from(u8::from(self.scs.scs_cpacrd88_cp7_read()?)) << 14u32;
        _value |=
            u32::from(u8::from(self.scs.scs_cpacrd88_cp10_read()?)) << 20u32;
        _value |=
            u32::from(u8::from(self.scs.scs_cpacrd88_cp11_read()?)) << 22u32;
        Ok(_value)
    }
    #[doc = "Write scs_cpacrd88 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_cpacrd88_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_cpacrd88_cp0_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_cpacrd88_cp1_write(
                ((_value[_i] >> 2) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_cpacrd88_cp2_write(
                ((_value[_i] >> 4) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_cpacrd88_cp3_write(
                ((_value[_i] >> 6) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_cpacrd88_cp4_write(
                ((_value[_i] >> 0) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_cpacrd88_cp5_write(
                ((_value[_i] >> 2) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_cpacrd88_cp6_write(
                ((_value[_i] >> 4) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_cpacrd88_cp7_write(
                ((_value[_i] >> 6) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_cpacrd88_cp10_write(
                ((_value[_i] >> 4) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_cpacrd88_cp11_write(
                ((_value[_i] >> 6) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_mpu_typed90 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_typed90_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_mpu_typed90_separate_read()?);
        _value |= u32::from(self.scs.scs_mpu_typed90_dregion_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_mpu_typed90_iregion_read()?) << 16u32;
        Ok(_value)
    }
    #[doc = "Read scs_mpu_ctrld94 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_ctrld94_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_mpu_ctrld94_enable_read()?);
        _value |= u32::from(self.scs.scs_mpu_ctrld94_hfnmiena_read()?) << 1u32;
        _value |=
            u32::from(self.scs.scs_mpu_ctrld94_privdefena_read()?) << 2u32;
        Ok(_value)
    }
    #[doc = "Write scs_mpu_ctrld94 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_ctrld94_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_ctrld94_enable_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_ctrld94_hfnmiena_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_ctrld94_privdefena_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_mpu_rnrd98 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rnrd98_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_mpu_rnrd98_region_read()?);
        Ok(_value)
    }
    #[doc = "Write scs_mpu_rnrd98 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rnrd98_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rnrd98_region_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_mpu_rbard9c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rbard9c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_mpu_rbard9c_region_read()?);
        _value |= u32::from(self.scs.scs_mpu_rbard9c_valid_read()?) << 4u32;
        _value |= u32::from(self.scs.scs_mpu_rbard9c_addr_read()?) << 5u32;
        Ok(_value)
    }
    #[doc = "Write scs_mpu_rbard9c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rbard9c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rbard9c_region_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rbard9c_valid_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if _start <= 0 && _end >= 4 {
            let mut _extracted: u32 = 0;
            _extracted |= ((_value[(0 - _start) as usize] >> 5) & 7u8) as u32;
            for byte_i in 0..3 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u32)
                    << (5 + (byte_i * 8));
            }
            self.scs.scs_mpu_rbard9c_addr_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read scs_mpu_rasrda0 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rasrda0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_mpu_rasrda0_enable_read()?);
        _value |= u32::from(self.scs.scs_mpu_rasrda0_size_read()?) << 1u32;
        _value |= u32::from(self.scs.scs_mpu_rasrda0_srd_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_mpu_rasrda0_b_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_mpu_rasrda0_c_read()?) << 17u32;
        _value |= u32::from(self.scs.scs_mpu_rasrda0_s_read()?) << 18u32;
        _value |= u32::from(self.scs.scs_mpu_rasrda0_tex_read()?) << 19u32;
        _value |=
            u32::from(u8::from(self.scs.scs_mpu_rasrda0_ap_read()?)) << 24u32;
        _value |= u32::from(self.scs.scs_mpu_rasrda0_xn_read()?) << 28u32;
        Ok(_value)
    }
    #[doc = "Write scs_mpu_rasrda0 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rasrda0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rasrda0_enable_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rasrda0_size_write(
                ((_value[_i] >> 1) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_mpu_rasrda0_srd_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasrda0_b_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasrda0_c_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasrda0_s_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasrda0_tex_write(
                ((_value[_i] >> 3) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_mpu_rasrda0_ap_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_mpu_rasrda0_xn_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_mpu_rbar_a1da4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rbar_a1da4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_mpu_rbar_a1da4_region_read()?);
        _value |= u32::from(self.scs.scs_mpu_rbar_a1da4_valid_read()?) << 4u32;
        _value |= u32::from(self.scs.scs_mpu_rbar_a1da4_addr_read()?) << 5u32;
        Ok(_value)
    }
    #[doc = "Write scs_mpu_rbar_a1da4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rbar_a1da4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rbar_a1da4_region_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rbar_a1da4_valid_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if _start <= 0 && _end >= 4 {
            let mut _extracted: u32 = 0;
            _extracted |= ((_value[(0 - _start) as usize] >> 5) & 7u8) as u32;
            for byte_i in 0..3 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u32)
                    << (5 + (byte_i * 8));
            }
            self.scs.scs_mpu_rbar_a1da4_addr_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read scs_mpu_rasr_a1da8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rasr_a1da8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_mpu_rasr_a1da8_enable_read()?);
        _value |= u32::from(self.scs.scs_mpu_rasr_a1da8_size_read()?) << 1u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a1da8_srd_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a1da8_b_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a1da8_c_read()?) << 17u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a1da8_s_read()?) << 18u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a1da8_tex_read()?) << 19u32;
        _value |= u32::from(u8::from(self.scs.scs_mpu_rasr_a1da8_ap_read()?))
            << 24u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a1da8_xn_read()?) << 28u32;
        Ok(_value)
    }
    #[doc = "Write scs_mpu_rasr_a1da8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rasr_a1da8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rasr_a1da8_enable_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rasr_a1da8_size_write(
                ((_value[_i] >> 1) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_mpu_rasr_a1da8_srd_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasr_a1da8_b_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasr_a1da8_c_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasr_a1da8_s_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasr_a1da8_tex_write(
                ((_value[_i] >> 3) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_mpu_rasr_a1da8_ap_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_mpu_rasr_a1da8_xn_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_mpu_rbar_a2dac from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rbar_a2dac_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_mpu_rbar_a2dac_region_read()?);
        _value |= u32::from(self.scs.scs_mpu_rbar_a2dac_valid_read()?) << 4u32;
        _value |= u32::from(self.scs.scs_mpu_rbar_a2dac_addr_read()?) << 5u32;
        Ok(_value)
    }
    #[doc = "Write scs_mpu_rbar_a2dac from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rbar_a2dac_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rbar_a2dac_region_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rbar_a2dac_valid_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if _start <= 0 && _end >= 4 {
            let mut _extracted: u32 = 0;
            _extracted |= ((_value[(0 - _start) as usize] >> 5) & 7u8) as u32;
            for byte_i in 0..3 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u32)
                    << (5 + (byte_i * 8));
            }
            self.scs.scs_mpu_rbar_a2dac_addr_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read scs_mpu_rasr_a2db0 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rasr_a2db0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_mpu_rasr_a2db0_enable_read()?);
        _value |= u32::from(self.scs.scs_mpu_rasr_a2db0_size_read()?) << 1u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a2db0_srd_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a2db0_b_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a2db0_c_read()?) << 17u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a2db0_s_read()?) << 18u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a2db0_tex_read()?) << 19u32;
        _value |= u32::from(u8::from(self.scs.scs_mpu_rasr_a2db0_ap_read()?))
            << 24u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a2db0_xn_read()?) << 28u32;
        Ok(_value)
    }
    #[doc = "Write scs_mpu_rasr_a2db0 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rasr_a2db0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rasr_a2db0_enable_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rasr_a2db0_size_write(
                ((_value[_i] >> 1) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_mpu_rasr_a2db0_srd_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasr_a2db0_b_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasr_a2db0_c_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasr_a2db0_s_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasr_a2db0_tex_write(
                ((_value[_i] >> 3) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_mpu_rasr_a2db0_ap_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_mpu_rasr_a2db0_xn_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_mpu_rbar_a3db4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rbar_a3db4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_mpu_rbar_a3db4_region_read()?);
        _value |= u32::from(self.scs.scs_mpu_rbar_a3db4_valid_read()?) << 4u32;
        _value |= u32::from(self.scs.scs_mpu_rbar_a3db4_addr_read()?) << 5u32;
        Ok(_value)
    }
    #[doc = "Write scs_mpu_rbar_a3db4 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rbar_a3db4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rbar_a3db4_region_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rbar_a3db4_valid_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if _start <= 0 && _end >= 4 {
            let mut _extracted: u32 = 0;
            _extracted |= ((_value[(0 - _start) as usize] >> 5) & 7u8) as u32;
            for byte_i in 0..3 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u32)
                    << (5 + (byte_i * 8));
            }
            self.scs.scs_mpu_rbar_a3db4_addr_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read scs_mpu_rasr_a3db8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rasr_a3db8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_mpu_rasr_a3db8_enable_read()?);
        _value |= u32::from(self.scs.scs_mpu_rasr_a3db8_size_read()?) << 1u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a3db8_srd_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a3db8_b_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a3db8_c_read()?) << 17u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a3db8_s_read()?) << 18u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a3db8_tex_read()?) << 19u32;
        _value |= u32::from(u8::from(self.scs.scs_mpu_rasr_a3db8_ap_read()?))
            << 24u32;
        _value |= u32::from(self.scs.scs_mpu_rasr_a3db8_xn_read()?) << 28u32;
        Ok(_value)
    }
    #[doc = "Write scs_mpu_rasr_a3db8 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mpu_rasr_a3db8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rasr_a3db8_enable_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_mpu_rasr_a3db8_size_write(
                ((_value[_i] >> 1) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_mpu_rasr_a3db8_srd_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasr_a3db8_b_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasr_a3db8_c_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasr_a3db8_s_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_mpu_rasr_a3db8_tex_write(
                ((_value[_i] >> 3) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_mpu_rasr_a3db8_ap_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_mpu_rasr_a3db8_xn_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_demcrdfc from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_demcrdfc_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_demcrdfc_mon_en_read()?) << 16u32;
        _value |= u32::from(self.scs.scs_demcrdfc_mon_pend_read()?) << 17u32;
        Ok(_value)
    }
    #[doc = "Write scs_demcrdfc from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_demcrdfc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_demcrdfc_mon_en_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_demcrdfc_mon_pend_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Write scs_stirf00 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_stirf00_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 2 {
            let mut _extracted: u16 = 0;
            for byte_i in 0..1 {
                _extracted |= (_value[((0 + byte_i + 1) - _start) as usize]
                    as u16)
                    << (0 + (byte_i * 8));
            }
            _extracted |= ((_value[((0 + 1 + 1) - _start) as usize] & 1u8)
                as u16)
                << (0 + (1 * 8));
            self.scs.scs_stirf00_intid_write(
                _extracted
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 2) || (_end > 0 && _end < 2) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read scs_fpccrf34 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_fpccrf34_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_fpccrf34_lspact_read()?);
        _value |= u32::from(self.scs.scs_fpccrf34_user_read()?) << 1u32;
        _value |= u32::from(self.scs.scs_fpccrf34_thread_read()?) << 3u32;
        _value |= u32::from(self.scs.scs_fpccrf34_hfrdy_read()?) << 4u32;
        _value |= u32::from(self.scs.scs_fpccrf34_mmrdy_read()?) << 5u32;
        _value |= u32::from(self.scs.scs_fpccrf34_bfrdy_read()?) << 6u32;
        _value |= u32::from(self.scs.scs_fpccrf34_monrdy_read()?) << 8u32;
        _value |= u32::from(self.scs.scs_fpccrf34_lspen_read()?) << 30u32;
        _value |= u32::from(self.scs.scs_fpccrf34_aspen_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write scs_fpccrf34 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_fpccrf34_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_fpccrf34_lspact_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_fpccrf34_user_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_fpccrf34_thread_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_fpccrf34_hfrdy_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_fpccrf34_mmrdy_write(
                ((_value[_i] >> 5) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.scs.scs_fpccrf34_bfrdy_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.scs.scs_fpccrf34_monrdy_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_fpccrf34_lspen_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_fpccrf34_aspen_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_fpcarf38 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_fpcarf38_read(&mut self) -> MemResult<u32> {
        self.scs.scs_fpcarf38_read()
    }
    #[doc = "Write scs_fpcarf38 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_fpcarf38_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.scs
            .scs_fpcarf38_write(u32::from_ne_bytes(_value.try_into().unwrap()))
    }
    #[doc = "Read scs_fpdscrf3c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_fpdscrf3c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.scs.scs_fpdscrf3c_rmode_read()?) << 22u32;
        _value |= u32::from(self.scs.scs_fpdscrf3c_fz_read()?) << 24u32;
        _value |= u32::from(self.scs.scs_fpdscrf3c_dn_read()?) << 25u32;
        _value |= u32::from(self.scs.scs_fpdscrf3c_ahp_read()?) << 26u32;
        Ok(_value)
    }
    #[doc = "Write scs_fpdscrf3c from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_fpdscrf3c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.scs.scs_fpdscrf3c_rmode_write(
                ((_value[_i] >> 6) & 3u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_fpdscrf3c_fz_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_fpdscrf3c_dn_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.scs.scs_fpdscrf3c_ahp_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read scs_mvfr0f40 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mvfr0f40_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.scs.scs_mvfr0f40_a_simd_read()?));
        _value |=
            u32::from(u8::from(self.scs.scs_mvfr0f40_single_precision_read()?))
                << 4u32;
        _value |=
            u32::from(u8::from(self.scs.scs_mvfr0f40_double_precision_read()?))
                << 8u32;
        _value |= u32::from(u8::from(
            self.scs.scs_mvfr0f40_fp_exception_trapping_read()?,
        )) << 12u32;
        _value |=
            u32::from(u8::from(self.scs.scs_mvfr0f40_divide_read()?)) << 16u32;
        _value |=
            u32::from(u8::from(self.scs.scs_mvfr0f40_square_root_read()?))
                << 20u32;
        _value |=
            u32::from(u8::from(self.scs.scs_mvfr0f40_short_vectors_read()?))
                << 24u32;
        _value |= u32::from(u8::from(
            self.scs.scs_mvfr0f40_fp_rounding_modes_read()?,
        )) << 28u32;
        Ok(_value)
    }
    #[doc = "Read scs_mvfr1f44 from [crate::peripheral::scs::Scs]"]
    #[inline]
    pub(crate) fn scs_mvfr1f44_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.scs.scs_mvfr1f44_ftz_read()?));
        _value |=
            u32::from(u8::from(self.scs.scs_mvfr1f44_d_nan_read()?)) << 4u32;
        _value |=
            u32::from(u8::from(self.scs.scs_mvfr1f44_fp_hpfp_read()?)) << 24u32;
        _value |=
            u32::from(u8::from(self.scs.scs_mvfr1f44_fp_fused_mac_read()?))
                << 28u32;
        Ok(_value)
    }
    #[doc = "Write apb35_tasks_start10 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_tasks_start10_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb35.apb35_tasks_start10_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb35_tasks_stop14 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_tasks_stop14_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb35.apb35_tasks_stop14_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb35_tasks_suspend1c from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_tasks_suspend1c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb35.apb35_tasks_suspend1c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb35_tasks_resume20 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_tasks_resume20_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb35.apb35_tasks_resume20_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb35_tasks_acquire24 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_tasks_acquire24_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb35.apb35_tasks_acquire24_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Write apb35_tasks_release28 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_tasks_release28_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb35.apb35_tasks_release28_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb35_events_stopped104 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_events_stopped104_read(&mut self) -> MemResult<u32> {
        self.apb35.apb35_events_stopped104_read()
    }
    #[doc = "Write apb35_events_stopped104 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_events_stopped104_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb35.apb35_events_stopped104_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb35_events_ready108 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_events_ready108_read(&mut self) -> MemResult<u32> {
        self.apb35.apb35_events_ready108_read()
    }
    #[doc = "Write apb35_events_ready108 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_events_ready108_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb35.apb35_events_ready108_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb35_events_endrx110 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_events_endrx110_read(&mut self) -> MemResult<u32> {
        self.apb35.apb35_events_endrx110_read()
    }
    #[doc = "Write apb35_events_endrx110 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_events_endrx110_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb35.apb35_events_endrx110_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb35_events_end118 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_events_end118_read(&mut self) -> MemResult<u32> {
        self.apb35.apb35_events_end118_read()
    }
    #[doc = "Write apb35_events_end118 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_events_end118_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb35.apb35_events_end118_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb35_events_endtx120 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_events_endtx120_read(&mut self) -> MemResult<u32> {
        self.apb35.apb35_events_endtx120_read()
    }
    #[doc = "Write apb35_events_endtx120 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_events_endtx120_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb35.apb35_events_endtx120_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb35_events_acquired128 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_events_acquired128_read(&mut self) -> MemResult<u32> {
        self.apb35.apb35_events_acquired128_read()
    }
    #[doc = "Write apb35_events_acquired128 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_events_acquired128_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb35
            .apb35_events_acquired128_write(u32::from_ne_bytes(
                _value.try_into().unwrap(),
            ))
    }
    #[doc = "Read apb35_events_started14c from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_events_started14c_read(&mut self) -> MemResult<u32> {
        self.apb35.apb35_events_started14c_read()
    }
    #[doc = "Write apb35_events_started14c from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_events_started14c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        if _start != 0 || _value.len() != 4 {
            return Err(MemError::WriteViolation);
        }
        self.apb35.apb35_events_started14c_write(u32::from_ne_bytes(
            _value.try_into().unwrap(),
        ))
    }
    #[doc = "Read apb35_shorts200 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_shorts200_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.apb35.apb35_shorts200_end_acquire_read()?) << 2u32;
        _value |=
            u32::from(self.apb35.apb35_shorts200_end_start_read()?) << 17u32;
        Ok(_value)
    }
    #[doc = "Write apb35_shorts200 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_shorts200_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_shorts200_end_acquire_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb35.apb35_shorts200_end_start_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_intenset304 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_intenset304_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.apb35.apb35_intenset304_stopped_read()?) << 1u32;
        _value |= u32::from(self.apb35.apb35_intenset304_ready_read()?) << 2u32;
        _value |= u32::from(self.apb35.apb35_intenset304_endrx_read()?) << 4u32;
        _value |= u32::from(self.apb35.apb35_intenset304_end_read()?) << 6u32;
        _value |= u32::from(self.apb35.apb35_intenset304_endtx_read()?) << 8u32;
        _value |=
            u32::from(self.apb35.apb35_intenset304_acquired_read()?) << 10u32;
        _value |=
            u32::from(self.apb35.apb35_intenset304_started_read()?) << 19u32;
        Ok(_value)
    }
    #[doc = "Write apb35_intenset304 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_intenset304_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_intenset304_stopped_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_intenset304_ready_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_intenset304_endrx_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_intenset304_end_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb35.apb35_intenset304_endtx_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb35.apb35_intenset304_acquired_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb35.apb35_intenset304_started_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_intenclr308 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_intenclr308_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(self.apb35.apb35_intenclr308_stopped_read()?) << 1u32;
        _value |= u32::from(self.apb35.apb35_intenclr308_ready_read()?) << 2u32;
        _value |= u32::from(self.apb35.apb35_intenclr308_endrx_read()?) << 4u32;
        _value |= u32::from(self.apb35.apb35_intenclr308_end_read()?) << 6u32;
        _value |= u32::from(self.apb35.apb35_intenclr308_endtx_read()?) << 8u32;
        _value |=
            u32::from(self.apb35.apb35_intenclr308_acquired_read()?) << 10u32;
        _value |=
            u32::from(self.apb35.apb35_intenclr308_started_read()?) << 19u32;
        Ok(_value)
    }
    #[doc = "Write apb35_intenclr308 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_intenclr308_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_intenclr308_stopped_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_intenclr308_ready_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_intenclr308_endrx_write(
                ((_value[_i] >> 4) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_intenclr308_end_write(
                ((_value[_i] >> 6) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb35.apb35_intenclr308_endtx_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&1) {
            let _i = (1 - _start) as usize;
            self.apb35.apb35_intenclr308_acquired_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&2) {
            let _i = (2 - _start) as usize;
            self.apb35.apb35_intenclr308_started_write(
                ((_value[_i] >> 3) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_semstat400 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_semstat400_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.apb35.apb35_semstat400_semstat_read()?));
        Ok(_value)
    }
    #[doc = "Read apb35_status440 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_status440_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_status440_overread_read()?);
        _value |=
            u32::from(self.apb35.apb35_status440_overflow_read()?) << 1u32;
        Ok(_value)
    }
    #[doc = "Write apb35_status440 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_status440_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_status440_overread_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_status440_overflow_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_enable500 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_enable500_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |=
            u32::from(u8::from(self.apb35.apb35_enable500_enable_read()?));
        Ok(_value)
    }
    #[doc = "Write apb35_enable500 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_enable500_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_enable500_enable_write(
                ((_value[_i] >> 0) & 15u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_psel_sck0 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_psel_sck0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_psel_sck0_pin_read()?);
        _value |=
            u32::from(self.apb35.apb35_psel_sck0_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb35_psel_sck0 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_psel_sck0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_psel_sck0_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb35.apb35_psel_sck0_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_psel_miso4 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_psel_miso4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_psel_miso4_pin_read()?);
        _value |=
            u32::from(self.apb35.apb35_psel_miso4_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb35_psel_miso4 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_psel_miso4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_psel_miso4_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb35.apb35_psel_miso4_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_psel_mosi8 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_psel_mosi8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_psel_mosi8_pin_read()?);
        _value |=
            u32::from(self.apb35.apb35_psel_mosi8_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb35_psel_mosi8 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_psel_mosi8_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_psel_mosi8_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb35.apb35_psel_mosi8_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_psel_csnc from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_psel_csnc_read(&mut self) -> MemResult<u32> {
        let mut _value = 2147483616;
        _value |= u32::from(self.apb35.apb35_psel_csnc_pin_read()?);
        _value |=
            u32::from(self.apb35.apb35_psel_csnc_connect_read()?) << 31u32;
        Ok(_value)
    }
    #[doc = "Write apb35_psel_csnc from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_psel_csnc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_psel_csnc_pin_write(
                ((_value[_i] >> 0) & 31u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&3) {
            let _i = (3 - _start) as usize;
            self.apb35.apb35_psel_csnc_connect_write(
                ((_value[_i] >> 7) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_rxd518 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_rxd518_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_rxd518_rxd_read()?);
        Ok(_value)
    }
    #[doc = "Read apb35_txd51c from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_txd51c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_txd51c_txd_read()?);
        Ok(_value)
    }
    #[doc = "Write apb35_txd51c from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_txd51c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_txd51c_txd_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_frequency524 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_frequency524_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u32::from(
            self.apb35.apb35_frequency524_frequency_read()?,
        ));
        Ok(_value)
    }
    #[doc = "Write apb35_frequency524 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_frequency524_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.apb35.apb35_frequency524_frequency_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read apb35_rxd_ptr0 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_rxd_ptr0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_rxd_ptr0_ptr_read()?);
        Ok(_value)
    }
    #[doc = "Write apb35_rxd_ptr0 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_rxd_ptr0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.apb35.apb35_rxd_ptr0_ptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read apb35_rxd_maxcnt4 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_rxd_maxcnt4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_rxd_maxcnt4_maxcnt_read()?);
        Ok(_value)
    }
    #[doc = "Write apb35_rxd_maxcnt4 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_rxd_maxcnt4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_rxd_maxcnt4_maxcnt_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_rxd_amount8 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_rxd_amount8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_rxd_amount8_amount_read()?);
        Ok(_value)
    }
    #[doc = "Read apb35_rxd_listc from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_rxd_listc_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.apb35.apb35_rxd_listc_list_read()?));
        Ok(_value)
    }
    #[doc = "Write apb35_rxd_listc from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_rxd_listc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_rxd_listc_list_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_txd_ptr0 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_txd_ptr0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_txd_ptr0_ptr_read()?);
        Ok(_value)
    }
    #[doc = "Write apb35_txd_ptr0 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_txd_ptr0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if _start <= 0 && _end >= 4 {
            let _offset_start = (0 - _start) as usize;
            let _offset_end = _offset_start + 4;
            let _value = u32::from_ne_bytes(
                _value[_offset_start.._offset_end].try_into().unwrap(),
            );
            self.apb35.apb35_txd_ptr0_ptr_write(
                _value.try_into().map_err(|_| MemError::WriteViolation)?,
            )?;
        } else if (_start > 0 && _start < 4) || (_end > 0 && _end < 4) {
            return Err(MemError::WriteViolation);
        }
        Ok(())
    }
    #[doc = "Read apb35_txd_maxcnt4 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_txd_maxcnt4_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_txd_maxcnt4_maxcnt_read()?);
        Ok(_value)
    }
    #[doc = "Write apb35_txd_maxcnt4 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_txd_maxcnt4_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_txd_maxcnt4_maxcnt_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_txd_amount8 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_txd_amount8_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_txd_amount8_amount_read()?);
        Ok(_value)
    }
    #[doc = "Read apb35_txd_listc from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_txd_listc_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(u8::from(self.apb35.apb35_txd_listc_list_read()?));
        Ok(_value)
    }
    #[doc = "Write apb35_txd_listc from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_txd_listc_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_txd_listc_list_write(
                ((_value[_i] >> 0) & 7u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_config554 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_config554_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_config554_order_read()?);
        _value |= u32::from(self.apb35.apb35_config554_cpha_read()?) << 1u32;
        _value |= u32::from(self.apb35.apb35_config554_cpol_read()?) << 2u32;
        Ok(_value)
    }
    #[doc = "Write apb35_config554 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_config554_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_config554_order_write(
                ((_value[_i] >> 0) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_config554_cpha_write(
                ((_value[_i] >> 1) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_config554_cpol_write(
                ((_value[_i] >> 2) & 1 != 0)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_def55c from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_def55c_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_def55c_def_read()?);
        Ok(_value)
    }
    #[doc = "Write apb35_def55c from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_def55c_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_def55c_def_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
    #[doc = "Read apb35_orc5c0 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_orc5c0_read(&mut self) -> MemResult<u32> {
        let mut _value = 0;
        _value |= u32::from(self.apb35.apb35_orc5c0_orc_read()?);
        Ok(_value)
    }
    #[doc = "Write apb35_orc5c0 from [crate::peripheral::apb35::Apb35]"]
    #[inline]
    pub(crate) fn apb35_orc5c0_write(
        &mut self,
        _start: u64,
        _value: &[u8],
    ) -> MemResult<()> {
        debug_assert!(!_value.is_empty());
        let _end = _start + _value.len() as u64;
        if (_start.._end).contains(&0) {
            let _i = (0 - _start) as usize;
            self.apb35.apb35_orc5c0_orc_write(
                ((_value[_i] >> 0) & 255u8)
                    .try_into()
                    .map_err(|_| MemError::WriteViolation)?,
            )?;
        }
        Ok(())
    }
}

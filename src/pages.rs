use icicle_vm::cpu::mem::{MemError, MemResult};
pub(crate) struct Ficr(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Ficr {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::ficr::Ficr::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (16..=23, 17..=24) => {
                if _start < 20 && _end > 16 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_codepagesize10_read()?
                        .to_ne_bytes();
                    if _start <= 16 && _end > 16 {
                        _buf[(16 - _start) as usize] = value[0];
                    }
                    if _start <= 17 && _end > 17 {
                        _buf[(17 - _start) as usize] = value[1];
                    }
                    if _start <= 18 && _end > 18 {
                        _buf[(18 - _start) as usize] = value[2];
                    }
                    if _start <= 19 && _end > 19 {
                        _buf[(19 - _start) as usize] = value[3];
                    }
                }
                if _start < 24 && _end > 20 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_codesize14_read()?
                        .to_ne_bytes();
                    if _start <= 20 && _end > 20 {
                        _buf[(20 - _start) as usize] = value[0];
                    }
                    if _start <= 21 && _end > 21 {
                        _buf[(21 - _start) as usize] = value[1];
                    }
                    if _start <= 22 && _end > 22 {
                        _buf[(22 - _start) as usize] = value[2];
                    }
                    if _start <= 23 && _end > 23 {
                        _buf[(23 - _start) as usize] = value[3];
                    }
                }
            }
            (96..=103, 97..=104) => {
                if _start < 104 && _end > 96 {
                    let _dim = ((_start - 96) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_deviceidn60_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 96 && _end > 96 {
                        _buf[(96 - _start) as usize] = value[0];
                    }
                    if _start <= 97 && _end > 97 {
                        _buf[(97 - _start) as usize] = value[1];
                    }
                    if _start <= 98 && _end > 98 {
                        _buf[(98 - _start) as usize] = value[2];
                    }
                    if _start <= 99 && _end > 99 {
                        _buf[(99 - _start) as usize] = value[3];
                    }
                    if _start <= 100 && _end > 100 {
                        _buf[(100 - _start) as usize] = value[4];
                    }
                    if _start <= 101 && _end > 101 {
                        _buf[(101 - _start) as usize] = value[5];
                    }
                    if _start <= 102 && _end > 102 {
                        _buf[(102 - _start) as usize] = value[6];
                    }
                    if _start <= 103 && _end > 103 {
                        _buf[(103 - _start) as usize] = value[7];
                    }
                }
            }
            (128..=171, 129..=172) => {
                if _start < 144 && _end > 128 {
                    let _dim = ((_start - 128) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_ern80_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 128 && _end > 128 {
                        _buf[(128 - _start) as usize] = value[0];
                    }
                    if _start <= 129 && _end > 129 {
                        _buf[(129 - _start) as usize] = value[1];
                    }
                    if _start <= 130 && _end > 130 {
                        _buf[(130 - _start) as usize] = value[2];
                    }
                    if _start <= 131 && _end > 131 {
                        _buf[(131 - _start) as usize] = value[3];
                    }
                    if _start <= 132 && _end > 132 {
                        _buf[(132 - _start) as usize] = value[4];
                    }
                    if _start <= 133 && _end > 133 {
                        _buf[(133 - _start) as usize] = value[5];
                    }
                    if _start <= 134 && _end > 134 {
                        _buf[(134 - _start) as usize] = value[6];
                    }
                    if _start <= 135 && _end > 135 {
                        _buf[(135 - _start) as usize] = value[7];
                    }
                    if _start <= 136 && _end > 136 {
                        _buf[(136 - _start) as usize] = value[8];
                    }
                    if _start <= 137 && _end > 137 {
                        _buf[(137 - _start) as usize] = value[9];
                    }
                    if _start <= 138 && _end > 138 {
                        _buf[(138 - _start) as usize] = value[10];
                    }
                    if _start <= 139 && _end > 139 {
                        _buf[(139 - _start) as usize] = value[11];
                    }
                    if _start <= 140 && _end > 140 {
                        _buf[(140 - _start) as usize] = value[12];
                    }
                    if _start <= 141 && _end > 141 {
                        _buf[(141 - _start) as usize] = value[13];
                    }
                    if _start <= 142 && _end > 142 {
                        _buf[(142 - _start) as usize] = value[14];
                    }
                    if _start <= 143 && _end > 143 {
                        _buf[(143 - _start) as usize] = value[15];
                    }
                }
                if _start < 160 && _end > 144 {
                    let _dim = ((_start - 144) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_irn90_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 144 && _end > 144 {
                        _buf[(144 - _start) as usize] = value[0];
                    }
                    if _start <= 145 && _end > 145 {
                        _buf[(145 - _start) as usize] = value[1];
                    }
                    if _start <= 146 && _end > 146 {
                        _buf[(146 - _start) as usize] = value[2];
                    }
                    if _start <= 147 && _end > 147 {
                        _buf[(147 - _start) as usize] = value[3];
                    }
                    if _start <= 148 && _end > 148 {
                        _buf[(148 - _start) as usize] = value[4];
                    }
                    if _start <= 149 && _end > 149 {
                        _buf[(149 - _start) as usize] = value[5];
                    }
                    if _start <= 150 && _end > 150 {
                        _buf[(150 - _start) as usize] = value[6];
                    }
                    if _start <= 151 && _end > 151 {
                        _buf[(151 - _start) as usize] = value[7];
                    }
                    if _start <= 152 && _end > 152 {
                        _buf[(152 - _start) as usize] = value[8];
                    }
                    if _start <= 153 && _end > 153 {
                        _buf[(153 - _start) as usize] = value[9];
                    }
                    if _start <= 154 && _end > 154 {
                        _buf[(154 - _start) as usize] = value[10];
                    }
                    if _start <= 155 && _end > 155 {
                        _buf[(155 - _start) as usize] = value[11];
                    }
                    if _start <= 156 && _end > 156 {
                        _buf[(156 - _start) as usize] = value[12];
                    }
                    if _start <= 157 && _end > 157 {
                        _buf[(157 - _start) as usize] = value[13];
                    }
                    if _start <= 158 && _end > 158 {
                        _buf[(158 - _start) as usize] = value[14];
                    }
                    if _start <= 159 && _end > 159 {
                        _buf[(159 - _start) as usize] = value[15];
                    }
                }
                if _start < 164 && _end > 160 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_deviceaddrtypea0_read()?
                        .to_ne_bytes();
                    if _start <= 160 && _end > 160 {
                        _buf[(160 - _start) as usize] = value[0];
                    }
                    if _start <= 161 && _end > 161 {
                        _buf[(161 - _start) as usize] = value[1];
                    }
                    if _start <= 162 && _end > 162 {
                        _buf[(162 - _start) as usize] = value[2];
                    }
                    if _start <= 163 && _end > 163 {
                        _buf[(163 - _start) as usize] = value[3];
                    }
                }
                if _start < 172 && _end > 164 {
                    let _dim = ((_start - 164) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_deviceaddrna4_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 164 && _end > 164 {
                        _buf[(164 - _start) as usize] = value[0];
                    }
                    if _start <= 165 && _end > 165 {
                        _buf[(165 - _start) as usize] = value[1];
                    }
                    if _start <= 166 && _end > 166 {
                        _buf[(166 - _start) as usize] = value[2];
                    }
                    if _start <= 167 && _end > 167 {
                        _buf[(167 - _start) as usize] = value[3];
                    }
                    if _start <= 168 && _end > 168 {
                        _buf[(168 - _start) as usize] = value[4];
                    }
                    if _start <= 169 && _end > 169 {
                        _buf[(169 - _start) as usize] = value[5];
                    }
                    if _start <= 170 && _end > 170 {
                        _buf[(170 - _start) as usize] = value[6];
                    }
                    if _start <= 171 && _end > 171 {
                        _buf[(171 - _start) as usize] = value[7];
                    }
                }
            }
            (256..=287, 257..=288) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_info_part0_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_info_variant4_read()?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 268 && _end > 264 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_info_package8_read()?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                }
                if _start < 272 && _end > 268 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_info_ramc_read()?
                        .to_ne_bytes();
                    if _start <= 268 && _end > 268 {
                        _buf[(268 - _start) as usize] = value[0];
                    }
                    if _start <= 269 && _end > 269 {
                        _buf[(269 - _start) as usize] = value[1];
                    }
                    if _start <= 270 && _end > 270 {
                        _buf[(270 - _start) as usize] = value[2];
                    }
                    if _start <= 271 && _end > 271 {
                        _buf[(271 - _start) as usize] = value[3];
                    }
                }
                if _start < 276 && _end > 272 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_info_flash10_read()?
                        .to_ne_bytes();
                    if _start <= 272 && _end > 272 {
                        _buf[(272 - _start) as usize] = value[0];
                    }
                    if _start <= 273 && _end > 273 {
                        _buf[(273 - _start) as usize] = value[1];
                    }
                    if _start <= 274 && _end > 274 {
                        _buf[(274 - _start) as usize] = value[2];
                    }
                    if _start <= 275 && _end > 275 {
                        _buf[(275 - _start) as usize] = value[3];
                    }
                }
                if _start < 288 && _end > 276 {
                    let _dim = ((_start - 276) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_info_unused0n14_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 276 && _end > 276 {
                        _buf[(276 - _start) as usize] = value[0];
                    }
                    if _start <= 277 && _end > 277 {
                        _buf[(277 - _start) as usize] = value[1];
                    }
                    if _start <= 278 && _end > 278 {
                        _buf[(278 - _start) as usize] = value[2];
                    }
                    if _start <= 279 && _end > 279 {
                        _buf[(279 - _start) as usize] = value[3];
                    }
                    if _start <= 280 && _end > 280 {
                        _buf[(280 - _start) as usize] = value[4];
                    }
                    if _start <= 281 && _end > 281 {
                        _buf[(281 - _start) as usize] = value[5];
                    }
                    if _start <= 282 && _end > 282 {
                        _buf[(282 - _start) as usize] = value[6];
                    }
                    if _start <= 283 && _end > 283 {
                        _buf[(283 - _start) as usize] = value[7];
                    }
                    if _start <= 284 && _end > 284 {
                        _buf[(284 - _start) as usize] = value[8];
                    }
                    if _start <= 285 && _end > 285 {
                        _buf[(285 - _start) as usize] = value[9];
                    }
                    if _start <= 286 && _end > 286 {
                        _buf[(286 - _start) as usize] = value[10];
                    }
                    if _start <= 287 && _end > 287 {
                        _buf[(287 - _start) as usize] = value[11];
                    }
                }
            }
            (1028..=1095, 1029..=1096) => {
                if _start < 1032 && _end > 1028 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_a00_read()?
                        .to_ne_bytes();
                    if _start <= 1028 && _end > 1028 {
                        _buf[(1028 - _start) as usize] = value[0];
                    }
                    if _start <= 1029 && _end > 1029 {
                        _buf[(1029 - _start) as usize] = value[1];
                    }
                    if _start <= 1030 && _end > 1030 {
                        _buf[(1030 - _start) as usize] = value[2];
                    }
                    if _start <= 1031 && _end > 1031 {
                        _buf[(1031 - _start) as usize] = value[3];
                    }
                }
                if _start < 1036 && _end > 1032 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_a14_read()?
                        .to_ne_bytes();
                    if _start <= 1032 && _end > 1032 {
                        _buf[(1032 - _start) as usize] = value[0];
                    }
                    if _start <= 1033 && _end > 1033 {
                        _buf[(1033 - _start) as usize] = value[1];
                    }
                    if _start <= 1034 && _end > 1034 {
                        _buf[(1034 - _start) as usize] = value[2];
                    }
                    if _start <= 1035 && _end > 1035 {
                        _buf[(1035 - _start) as usize] = value[3];
                    }
                }
                if _start < 1040 && _end > 1036 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_a28_read()?
                        .to_ne_bytes();
                    if _start <= 1036 && _end > 1036 {
                        _buf[(1036 - _start) as usize] = value[0];
                    }
                    if _start <= 1037 && _end > 1037 {
                        _buf[(1037 - _start) as usize] = value[1];
                    }
                    if _start <= 1038 && _end > 1038 {
                        _buf[(1038 - _start) as usize] = value[2];
                    }
                    if _start <= 1039 && _end > 1039 {
                        _buf[(1039 - _start) as usize] = value[3];
                    }
                }
                if _start < 1044 && _end > 1040 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_a3c_read()?
                        .to_ne_bytes();
                    if _start <= 1040 && _end > 1040 {
                        _buf[(1040 - _start) as usize] = value[0];
                    }
                    if _start <= 1041 && _end > 1041 {
                        _buf[(1041 - _start) as usize] = value[1];
                    }
                    if _start <= 1042 && _end > 1042 {
                        _buf[(1042 - _start) as usize] = value[2];
                    }
                    if _start <= 1043 && _end > 1043 {
                        _buf[(1043 - _start) as usize] = value[3];
                    }
                }
                if _start < 1048 && _end > 1044 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_a410_read()?
                        .to_ne_bytes();
                    if _start <= 1044 && _end > 1044 {
                        _buf[(1044 - _start) as usize] = value[0];
                    }
                    if _start <= 1045 && _end > 1045 {
                        _buf[(1045 - _start) as usize] = value[1];
                    }
                    if _start <= 1046 && _end > 1046 {
                        _buf[(1046 - _start) as usize] = value[2];
                    }
                    if _start <= 1047 && _end > 1047 {
                        _buf[(1047 - _start) as usize] = value[3];
                    }
                }
                if _start < 1052 && _end > 1048 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_a514_read()?
                        .to_ne_bytes();
                    if _start <= 1048 && _end > 1048 {
                        _buf[(1048 - _start) as usize] = value[0];
                    }
                    if _start <= 1049 && _end > 1049 {
                        _buf[(1049 - _start) as usize] = value[1];
                    }
                    if _start <= 1050 && _end > 1050 {
                        _buf[(1050 - _start) as usize] = value[2];
                    }
                    if _start <= 1051 && _end > 1051 {
                        _buf[(1051 - _start) as usize] = value[3];
                    }
                }
                if _start < 1056 && _end > 1052 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_b018_read()?
                        .to_ne_bytes();
                    if _start <= 1052 && _end > 1052 {
                        _buf[(1052 - _start) as usize] = value[0];
                    }
                    if _start <= 1053 && _end > 1053 {
                        _buf[(1053 - _start) as usize] = value[1];
                    }
                    if _start <= 1054 && _end > 1054 {
                        _buf[(1054 - _start) as usize] = value[2];
                    }
                    if _start <= 1055 && _end > 1055 {
                        _buf[(1055 - _start) as usize] = value[3];
                    }
                }
                if _start < 1060 && _end > 1056 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_b11c_read()?
                        .to_ne_bytes();
                    if _start <= 1056 && _end > 1056 {
                        _buf[(1056 - _start) as usize] = value[0];
                    }
                    if _start <= 1057 && _end > 1057 {
                        _buf[(1057 - _start) as usize] = value[1];
                    }
                    if _start <= 1058 && _end > 1058 {
                        _buf[(1058 - _start) as usize] = value[2];
                    }
                    if _start <= 1059 && _end > 1059 {
                        _buf[(1059 - _start) as usize] = value[3];
                    }
                }
                if _start < 1064 && _end > 1060 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_b220_read()?
                        .to_ne_bytes();
                    if _start <= 1060 && _end > 1060 {
                        _buf[(1060 - _start) as usize] = value[0];
                    }
                    if _start <= 1061 && _end > 1061 {
                        _buf[(1061 - _start) as usize] = value[1];
                    }
                    if _start <= 1062 && _end > 1062 {
                        _buf[(1062 - _start) as usize] = value[2];
                    }
                    if _start <= 1063 && _end > 1063 {
                        _buf[(1063 - _start) as usize] = value[3];
                    }
                }
                if _start < 1068 && _end > 1064 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_b324_read()?
                        .to_ne_bytes();
                    if _start <= 1064 && _end > 1064 {
                        _buf[(1064 - _start) as usize] = value[0];
                    }
                    if _start <= 1065 && _end > 1065 {
                        _buf[(1065 - _start) as usize] = value[1];
                    }
                    if _start <= 1066 && _end > 1066 {
                        _buf[(1066 - _start) as usize] = value[2];
                    }
                    if _start <= 1067 && _end > 1067 {
                        _buf[(1067 - _start) as usize] = value[3];
                    }
                }
                if _start < 1072 && _end > 1068 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_b428_read()?
                        .to_ne_bytes();
                    if _start <= 1068 && _end > 1068 {
                        _buf[(1068 - _start) as usize] = value[0];
                    }
                    if _start <= 1069 && _end > 1069 {
                        _buf[(1069 - _start) as usize] = value[1];
                    }
                    if _start <= 1070 && _end > 1070 {
                        _buf[(1070 - _start) as usize] = value[2];
                    }
                    if _start <= 1071 && _end > 1071 {
                        _buf[(1071 - _start) as usize] = value[3];
                    }
                }
                if _start < 1076 && _end > 1072 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_b52c_read()?
                        .to_ne_bytes();
                    if _start <= 1072 && _end > 1072 {
                        _buf[(1072 - _start) as usize] = value[0];
                    }
                    if _start <= 1073 && _end > 1073 {
                        _buf[(1073 - _start) as usize] = value[1];
                    }
                    if _start <= 1074 && _end > 1074 {
                        _buf[(1074 - _start) as usize] = value[2];
                    }
                    if _start <= 1075 && _end > 1075 {
                        _buf[(1075 - _start) as usize] = value[3];
                    }
                }
                if _start < 1080 && _end > 1076 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_t030_read()?
                        .to_ne_bytes();
                    if _start <= 1076 && _end > 1076 {
                        _buf[(1076 - _start) as usize] = value[0];
                    }
                    if _start <= 1077 && _end > 1077 {
                        _buf[(1077 - _start) as usize] = value[1];
                    }
                    if _start <= 1078 && _end > 1078 {
                        _buf[(1078 - _start) as usize] = value[2];
                    }
                    if _start <= 1079 && _end > 1079 {
                        _buf[(1079 - _start) as usize] = value[3];
                    }
                }
                if _start < 1084 && _end > 1080 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_t134_read()?
                        .to_ne_bytes();
                    if _start <= 1080 && _end > 1080 {
                        _buf[(1080 - _start) as usize] = value[0];
                    }
                    if _start <= 1081 && _end > 1081 {
                        _buf[(1081 - _start) as usize] = value[1];
                    }
                    if _start <= 1082 && _end > 1082 {
                        _buf[(1082 - _start) as usize] = value[2];
                    }
                    if _start <= 1083 && _end > 1083 {
                        _buf[(1083 - _start) as usize] = value[3];
                    }
                }
                if _start < 1088 && _end > 1084 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_t238_read()?
                        .to_ne_bytes();
                    if _start <= 1084 && _end > 1084 {
                        _buf[(1084 - _start) as usize] = value[0];
                    }
                    if _start <= 1085 && _end > 1085 {
                        _buf[(1085 - _start) as usize] = value[1];
                    }
                    if _start <= 1086 && _end > 1086 {
                        _buf[(1086 - _start) as usize] = value[2];
                    }
                    if _start <= 1087 && _end > 1087 {
                        _buf[(1087 - _start) as usize] = value[3];
                    }
                }
                if _start < 1092 && _end > 1088 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_t33c_read()?
                        .to_ne_bytes();
                    if _start <= 1088 && _end > 1088 {
                        _buf[(1088 - _start) as usize] = value[0];
                    }
                    if _start <= 1089 && _end > 1089 {
                        _buf[(1089 - _start) as usize] = value[1];
                    }
                    if _start <= 1090 && _end > 1090 {
                        _buf[(1090 - _start) as usize] = value[2];
                    }
                    if _start <= 1091 && _end > 1091 {
                        _buf[(1091 - _start) as usize] = value[3];
                    }
                }
                if _start < 1096 && _end > 1092 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_temp_t440_read()?
                        .to_ne_bytes();
                    if _start <= 1092 && _end > 1092 {
                        _buf[(1092 - _start) as usize] = value[0];
                    }
                    if _start <= 1093 && _end > 1093 {
                        _buf[(1093 - _start) as usize] = value[1];
                    }
                    if _start <= 1094 && _end > 1094 {
                        _buf[(1094 - _start) as usize] = value[2];
                    }
                    if _start <= 1095 && _end > 1095 {
                        _buf[(1095 - _start) as usize] = value[3];
                    }
                }
            }
            (1104..=1119, 1105..=1120) => {
                if _start < 1108 && _end > 1104 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_nfc_tagheader00_read()?
                        .to_ne_bytes();
                    if _start <= 1104 && _end > 1104 {
                        _buf[(1104 - _start) as usize] = value[0];
                    }
                    if _start <= 1105 && _end > 1105 {
                        _buf[(1105 - _start) as usize] = value[1];
                    }
                    if _start <= 1106 && _end > 1106 {
                        _buf[(1106 - _start) as usize] = value[2];
                    }
                    if _start <= 1107 && _end > 1107 {
                        _buf[(1107 - _start) as usize] = value[3];
                    }
                }
                if _start < 1112 && _end > 1108 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_nfc_tagheader14_read()?
                        .to_ne_bytes();
                    if _start <= 1108 && _end > 1108 {
                        _buf[(1108 - _start) as usize] = value[0];
                    }
                    if _start <= 1109 && _end > 1109 {
                        _buf[(1109 - _start) as usize] = value[1];
                    }
                    if _start <= 1110 && _end > 1110 {
                        _buf[(1110 - _start) as usize] = value[2];
                    }
                    if _start <= 1111 && _end > 1111 {
                        _buf[(1111 - _start) as usize] = value[3];
                    }
                }
                if _start < 1116 && _end > 1112 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_nfc_tagheader28_read()?
                        .to_ne_bytes();
                    if _start <= 1112 && _end > 1112 {
                        _buf[(1112 - _start) as usize] = value[0];
                    }
                    if _start <= 1113 && _end > 1113 {
                        _buf[(1113 - _start) as usize] = value[1];
                    }
                    if _start <= 1114 && _end > 1114 {
                        _buf[(1114 - _start) as usize] = value[2];
                    }
                    if _start <= 1115 && _end > 1115 {
                        _buf[(1115 - _start) as usize] = value[3];
                    }
                }
                if _start < 1120 && _end > 1116 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ficr_nfc_tagheader3c_read()?
                        .to_ne_bytes();
                    if _start <= 1116 && _end > 1116 {
                        _buf[(1116 - _start) as usize] = value[0];
                    }
                    if _start <= 1117 && _end > 1117 {
                        _buf[(1117 - _start) as usize] = value[1];
                    }
                    if _start <= 1118 && _end > 1118 {
                        _buf[(1118 - _start) as usize] = value[2];
                    }
                    if _start <= 1119 && _end > 1119 {
                        _buf[(1119 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::ficr::Ficr::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (16..=23, 17..=24) => {
                return Err(MemError::WriteViolation);
            }
            (96..=103, 97..=104) => {
                return Err(MemError::WriteViolation);
            }
            (128..=171, 129..=172) => {
                return Err(MemError::WriteViolation);
            }
            (256..=287, 257..=288) => {
                if _start < 260 && _end > 256 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 264 && _end > 260 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 268 && _end > 264 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 272 && _end > 268 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 276 && _end > 272 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 288 && _end > 276 {
                    let _dim = ((_start - 276) % 4) as usize;
                    let offset = _start.saturating_sub(276);
                    let start = 276u64.saturating_sub(_start) as usize;
                    let end = ((_end - 276) - offset) as usize;
                    self.0.lock().unwrap().ficr_info_unused0n14_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1028..=1095, 1029..=1096) => {
                return Err(MemError::WriteViolation);
            }
            (1104..=1119, 1105..=1120) => {
                return Err(MemError::WriteViolation);
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Uicr(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Uicr {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::uicr::Uicr::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=11, 1..=12) => {
                if _start < 4 && _end > 0 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .uicr_unused00_read()?
                        .to_ne_bytes();
                    if _start <= 0 && _end > 0 {
                        _buf[(0 - _start) as usize] = value[0];
                    }
                    if _start <= 1 && _end > 1 {
                        _buf[(1 - _start) as usize] = value[1];
                    }
                    if _start <= 2 && _end > 2 {
                        _buf[(2 - _start) as usize] = value[2];
                    }
                    if _start <= 3 && _end > 3 {
                        _buf[(3 - _start) as usize] = value[3];
                    }
                }
                if _start < 8 && _end > 4 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .uicr_unused14_read()?
                        .to_ne_bytes();
                    if _start <= 4 && _end > 4 {
                        _buf[(4 - _start) as usize] = value[0];
                    }
                    if _start <= 5 && _end > 5 {
                        _buf[(5 - _start) as usize] = value[1];
                    }
                    if _start <= 6 && _end > 6 {
                        _buf[(6 - _start) as usize] = value[2];
                    }
                    if _start <= 7 && _end > 7 {
                        _buf[(7 - _start) as usize] = value[3];
                    }
                }
                if _start < 12 && _end > 8 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .uicr_unused28_read()?
                        .to_ne_bytes();
                    if _start <= 8 && _end > 8 {
                        _buf[(8 - _start) as usize] = value[0];
                    }
                    if _start <= 9 && _end > 9 {
                        _buf[(9 - _start) as usize] = value[1];
                    }
                    if _start <= 10 && _end > 10 {
                        _buf[(10 - _start) as usize] = value[2];
                    }
                    if _start <= 11 && _end > 11 {
                        _buf[(11 - _start) as usize] = value[3];
                    }
                }
            }
            (16..=255, 17..=256) => {
                if _start < 20 && _end > 16 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .uicr_unused310_read()?
                        .to_ne_bytes();
                    if _start <= 16 && _end > 16 {
                        _buf[(16 - _start) as usize] = value[0];
                    }
                    if _start <= 17 && _end > 17 {
                        _buf[(17 - _start) as usize] = value[1];
                    }
                    if _start <= 18 && _end > 18 {
                        _buf[(18 - _start) as usize] = value[2];
                    }
                    if _start <= 19 && _end > 19 {
                        _buf[(19 - _start) as usize] = value[3];
                    }
                }
                if _start < 80 && _end > 20 {
                    let _dim = ((_start - 20) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .uicr_nrffwn14_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 20 && _end > 20 {
                        _buf[(20 - _start) as usize] = value[0];
                    }
                    if _start <= 21 && _end > 21 {
                        _buf[(21 - _start) as usize] = value[1];
                    }
                    if _start <= 22 && _end > 22 {
                        _buf[(22 - _start) as usize] = value[2];
                    }
                    if _start <= 23 && _end > 23 {
                        _buf[(23 - _start) as usize] = value[3];
                    }
                    if _start <= 24 && _end > 24 {
                        _buf[(24 - _start) as usize] = value[4];
                    }
                    if _start <= 25 && _end > 25 {
                        _buf[(25 - _start) as usize] = value[5];
                    }
                    if _start <= 26 && _end > 26 {
                        _buf[(26 - _start) as usize] = value[6];
                    }
                    if _start <= 27 && _end > 27 {
                        _buf[(27 - _start) as usize] = value[7];
                    }
                    if _start <= 28 && _end > 28 {
                        _buf[(28 - _start) as usize] = value[8];
                    }
                    if _start <= 29 && _end > 29 {
                        _buf[(29 - _start) as usize] = value[9];
                    }
                    if _start <= 30 && _end > 30 {
                        _buf[(30 - _start) as usize] = value[10];
                    }
                    if _start <= 31 && _end > 31 {
                        _buf[(31 - _start) as usize] = value[11];
                    }
                    if _start <= 32 && _end > 32 {
                        _buf[(32 - _start) as usize] = value[12];
                    }
                    if _start <= 33 && _end > 33 {
                        _buf[(33 - _start) as usize] = value[13];
                    }
                    if _start <= 34 && _end > 34 {
                        _buf[(34 - _start) as usize] = value[14];
                    }
                    if _start <= 35 && _end > 35 {
                        _buf[(35 - _start) as usize] = value[15];
                    }
                    if _start <= 36 && _end > 36 {
                        _buf[(36 - _start) as usize] = value[16];
                    }
                    if _start <= 37 && _end > 37 {
                        _buf[(37 - _start) as usize] = value[17];
                    }
                    if _start <= 38 && _end > 38 {
                        _buf[(38 - _start) as usize] = value[18];
                    }
                    if _start <= 39 && _end > 39 {
                        _buf[(39 - _start) as usize] = value[19];
                    }
                    if _start <= 40 && _end > 40 {
                        _buf[(40 - _start) as usize] = value[20];
                    }
                    if _start <= 41 && _end > 41 {
                        _buf[(41 - _start) as usize] = value[21];
                    }
                    if _start <= 42 && _end > 42 {
                        _buf[(42 - _start) as usize] = value[22];
                    }
                    if _start <= 43 && _end > 43 {
                        _buf[(43 - _start) as usize] = value[23];
                    }
                    if _start <= 44 && _end > 44 {
                        _buf[(44 - _start) as usize] = value[24];
                    }
                    if _start <= 45 && _end > 45 {
                        _buf[(45 - _start) as usize] = value[25];
                    }
                    if _start <= 46 && _end > 46 {
                        _buf[(46 - _start) as usize] = value[26];
                    }
                    if _start <= 47 && _end > 47 {
                        _buf[(47 - _start) as usize] = value[27];
                    }
                    if _start <= 48 && _end > 48 {
                        _buf[(48 - _start) as usize] = value[28];
                    }
                    if _start <= 49 && _end > 49 {
                        _buf[(49 - _start) as usize] = value[29];
                    }
                    if _start <= 50 && _end > 50 {
                        _buf[(50 - _start) as usize] = value[30];
                    }
                    if _start <= 51 && _end > 51 {
                        _buf[(51 - _start) as usize] = value[31];
                    }
                    if _start <= 52 && _end > 52 {
                        _buf[(52 - _start) as usize] = value[32];
                    }
                    if _start <= 53 && _end > 53 {
                        _buf[(53 - _start) as usize] = value[33];
                    }
                    if _start <= 54 && _end > 54 {
                        _buf[(54 - _start) as usize] = value[34];
                    }
                    if _start <= 55 && _end > 55 {
                        _buf[(55 - _start) as usize] = value[35];
                    }
                    if _start <= 56 && _end > 56 {
                        _buf[(56 - _start) as usize] = value[36];
                    }
                    if _start <= 57 && _end > 57 {
                        _buf[(57 - _start) as usize] = value[37];
                    }
                    if _start <= 58 && _end > 58 {
                        _buf[(58 - _start) as usize] = value[38];
                    }
                    if _start <= 59 && _end > 59 {
                        _buf[(59 - _start) as usize] = value[39];
                    }
                    if _start <= 60 && _end > 60 {
                        _buf[(60 - _start) as usize] = value[40];
                    }
                    if _start <= 61 && _end > 61 {
                        _buf[(61 - _start) as usize] = value[41];
                    }
                    if _start <= 62 && _end > 62 {
                        _buf[(62 - _start) as usize] = value[42];
                    }
                    if _start <= 63 && _end > 63 {
                        _buf[(63 - _start) as usize] = value[43];
                    }
                    if _start <= 64 && _end > 64 {
                        _buf[(64 - _start) as usize] = value[44];
                    }
                    if _start <= 65 && _end > 65 {
                        _buf[(65 - _start) as usize] = value[45];
                    }
                    if _start <= 66 && _end > 66 {
                        _buf[(66 - _start) as usize] = value[46];
                    }
                    if _start <= 67 && _end > 67 {
                        _buf[(67 - _start) as usize] = value[47];
                    }
                    if _start <= 68 && _end > 68 {
                        _buf[(68 - _start) as usize] = value[48];
                    }
                    if _start <= 69 && _end > 69 {
                        _buf[(69 - _start) as usize] = value[49];
                    }
                    if _start <= 70 && _end > 70 {
                        _buf[(70 - _start) as usize] = value[50];
                    }
                    if _start <= 71 && _end > 71 {
                        _buf[(71 - _start) as usize] = value[51];
                    }
                    if _start <= 72 && _end > 72 {
                        _buf[(72 - _start) as usize] = value[52];
                    }
                    if _start <= 73 && _end > 73 {
                        _buf[(73 - _start) as usize] = value[53];
                    }
                    if _start <= 74 && _end > 74 {
                        _buf[(74 - _start) as usize] = value[54];
                    }
                    if _start <= 75 && _end > 75 {
                        _buf[(75 - _start) as usize] = value[55];
                    }
                    if _start <= 76 && _end > 76 {
                        _buf[(76 - _start) as usize] = value[56];
                    }
                    if _start <= 77 && _end > 77 {
                        _buf[(77 - _start) as usize] = value[57];
                    }
                    if _start <= 78 && _end > 78 {
                        _buf[(78 - _start) as usize] = value[58];
                    }
                    if _start <= 79 && _end > 79 {
                        _buf[(79 - _start) as usize] = value[59];
                    }
                }
                if _start < 128 && _end > 80 {
                    let _dim = ((_start - 80) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .uicr_nrfhwn50_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 80 && _end > 80 {
                        _buf[(80 - _start) as usize] = value[0];
                    }
                    if _start <= 81 && _end > 81 {
                        _buf[(81 - _start) as usize] = value[1];
                    }
                    if _start <= 82 && _end > 82 {
                        _buf[(82 - _start) as usize] = value[2];
                    }
                    if _start <= 83 && _end > 83 {
                        _buf[(83 - _start) as usize] = value[3];
                    }
                    if _start <= 84 && _end > 84 {
                        _buf[(84 - _start) as usize] = value[4];
                    }
                    if _start <= 85 && _end > 85 {
                        _buf[(85 - _start) as usize] = value[5];
                    }
                    if _start <= 86 && _end > 86 {
                        _buf[(86 - _start) as usize] = value[6];
                    }
                    if _start <= 87 && _end > 87 {
                        _buf[(87 - _start) as usize] = value[7];
                    }
                    if _start <= 88 && _end > 88 {
                        _buf[(88 - _start) as usize] = value[8];
                    }
                    if _start <= 89 && _end > 89 {
                        _buf[(89 - _start) as usize] = value[9];
                    }
                    if _start <= 90 && _end > 90 {
                        _buf[(90 - _start) as usize] = value[10];
                    }
                    if _start <= 91 && _end > 91 {
                        _buf[(91 - _start) as usize] = value[11];
                    }
                    if _start <= 92 && _end > 92 {
                        _buf[(92 - _start) as usize] = value[12];
                    }
                    if _start <= 93 && _end > 93 {
                        _buf[(93 - _start) as usize] = value[13];
                    }
                    if _start <= 94 && _end > 94 {
                        _buf[(94 - _start) as usize] = value[14];
                    }
                    if _start <= 95 && _end > 95 {
                        _buf[(95 - _start) as usize] = value[15];
                    }
                    if _start <= 96 && _end > 96 {
                        _buf[(96 - _start) as usize] = value[16];
                    }
                    if _start <= 97 && _end > 97 {
                        _buf[(97 - _start) as usize] = value[17];
                    }
                    if _start <= 98 && _end > 98 {
                        _buf[(98 - _start) as usize] = value[18];
                    }
                    if _start <= 99 && _end > 99 {
                        _buf[(99 - _start) as usize] = value[19];
                    }
                    if _start <= 100 && _end > 100 {
                        _buf[(100 - _start) as usize] = value[20];
                    }
                    if _start <= 101 && _end > 101 {
                        _buf[(101 - _start) as usize] = value[21];
                    }
                    if _start <= 102 && _end > 102 {
                        _buf[(102 - _start) as usize] = value[22];
                    }
                    if _start <= 103 && _end > 103 {
                        _buf[(103 - _start) as usize] = value[23];
                    }
                    if _start <= 104 && _end > 104 {
                        _buf[(104 - _start) as usize] = value[24];
                    }
                    if _start <= 105 && _end > 105 {
                        _buf[(105 - _start) as usize] = value[25];
                    }
                    if _start <= 106 && _end > 106 {
                        _buf[(106 - _start) as usize] = value[26];
                    }
                    if _start <= 107 && _end > 107 {
                        _buf[(107 - _start) as usize] = value[27];
                    }
                    if _start <= 108 && _end > 108 {
                        _buf[(108 - _start) as usize] = value[28];
                    }
                    if _start <= 109 && _end > 109 {
                        _buf[(109 - _start) as usize] = value[29];
                    }
                    if _start <= 110 && _end > 110 {
                        _buf[(110 - _start) as usize] = value[30];
                    }
                    if _start <= 111 && _end > 111 {
                        _buf[(111 - _start) as usize] = value[31];
                    }
                    if _start <= 112 && _end > 112 {
                        _buf[(112 - _start) as usize] = value[32];
                    }
                    if _start <= 113 && _end > 113 {
                        _buf[(113 - _start) as usize] = value[33];
                    }
                    if _start <= 114 && _end > 114 {
                        _buf[(114 - _start) as usize] = value[34];
                    }
                    if _start <= 115 && _end > 115 {
                        _buf[(115 - _start) as usize] = value[35];
                    }
                    if _start <= 116 && _end > 116 {
                        _buf[(116 - _start) as usize] = value[36];
                    }
                    if _start <= 117 && _end > 117 {
                        _buf[(117 - _start) as usize] = value[37];
                    }
                    if _start <= 118 && _end > 118 {
                        _buf[(118 - _start) as usize] = value[38];
                    }
                    if _start <= 119 && _end > 119 {
                        _buf[(119 - _start) as usize] = value[39];
                    }
                    if _start <= 120 && _end > 120 {
                        _buf[(120 - _start) as usize] = value[40];
                    }
                    if _start <= 121 && _end > 121 {
                        _buf[(121 - _start) as usize] = value[41];
                    }
                    if _start <= 122 && _end > 122 {
                        _buf[(122 - _start) as usize] = value[42];
                    }
                    if _start <= 123 && _end > 123 {
                        _buf[(123 - _start) as usize] = value[43];
                    }
                    if _start <= 124 && _end > 124 {
                        _buf[(124 - _start) as usize] = value[44];
                    }
                    if _start <= 125 && _end > 125 {
                        _buf[(125 - _start) as usize] = value[45];
                    }
                    if _start <= 126 && _end > 126 {
                        _buf[(126 - _start) as usize] = value[46];
                    }
                    if _start <= 127 && _end > 127 {
                        _buf[(127 - _start) as usize] = value[47];
                    }
                }
                if _start < 256 && _end > 128 {
                    let _dim = ((_start - 128) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .uicr_customern80_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 128 && _end > 128 {
                        _buf[(128 - _start) as usize] = value[0];
                    }
                    if _start <= 129 && _end > 129 {
                        _buf[(129 - _start) as usize] = value[1];
                    }
                    if _start <= 130 && _end > 130 {
                        _buf[(130 - _start) as usize] = value[2];
                    }
                    if _start <= 131 && _end > 131 {
                        _buf[(131 - _start) as usize] = value[3];
                    }
                    if _start <= 132 && _end > 132 {
                        _buf[(132 - _start) as usize] = value[4];
                    }
                    if _start <= 133 && _end > 133 {
                        _buf[(133 - _start) as usize] = value[5];
                    }
                    if _start <= 134 && _end > 134 {
                        _buf[(134 - _start) as usize] = value[6];
                    }
                    if _start <= 135 && _end > 135 {
                        _buf[(135 - _start) as usize] = value[7];
                    }
                    if _start <= 136 && _end > 136 {
                        _buf[(136 - _start) as usize] = value[8];
                    }
                    if _start <= 137 && _end > 137 {
                        _buf[(137 - _start) as usize] = value[9];
                    }
                    if _start <= 138 && _end > 138 {
                        _buf[(138 - _start) as usize] = value[10];
                    }
                    if _start <= 139 && _end > 139 {
                        _buf[(139 - _start) as usize] = value[11];
                    }
                    if _start <= 140 && _end > 140 {
                        _buf[(140 - _start) as usize] = value[12];
                    }
                    if _start <= 141 && _end > 141 {
                        _buf[(141 - _start) as usize] = value[13];
                    }
                    if _start <= 142 && _end > 142 {
                        _buf[(142 - _start) as usize] = value[14];
                    }
                    if _start <= 143 && _end > 143 {
                        _buf[(143 - _start) as usize] = value[15];
                    }
                    if _start <= 144 && _end > 144 {
                        _buf[(144 - _start) as usize] = value[16];
                    }
                    if _start <= 145 && _end > 145 {
                        _buf[(145 - _start) as usize] = value[17];
                    }
                    if _start <= 146 && _end > 146 {
                        _buf[(146 - _start) as usize] = value[18];
                    }
                    if _start <= 147 && _end > 147 {
                        _buf[(147 - _start) as usize] = value[19];
                    }
                    if _start <= 148 && _end > 148 {
                        _buf[(148 - _start) as usize] = value[20];
                    }
                    if _start <= 149 && _end > 149 {
                        _buf[(149 - _start) as usize] = value[21];
                    }
                    if _start <= 150 && _end > 150 {
                        _buf[(150 - _start) as usize] = value[22];
                    }
                    if _start <= 151 && _end > 151 {
                        _buf[(151 - _start) as usize] = value[23];
                    }
                    if _start <= 152 && _end > 152 {
                        _buf[(152 - _start) as usize] = value[24];
                    }
                    if _start <= 153 && _end > 153 {
                        _buf[(153 - _start) as usize] = value[25];
                    }
                    if _start <= 154 && _end > 154 {
                        _buf[(154 - _start) as usize] = value[26];
                    }
                    if _start <= 155 && _end > 155 {
                        _buf[(155 - _start) as usize] = value[27];
                    }
                    if _start <= 156 && _end > 156 {
                        _buf[(156 - _start) as usize] = value[28];
                    }
                    if _start <= 157 && _end > 157 {
                        _buf[(157 - _start) as usize] = value[29];
                    }
                    if _start <= 158 && _end > 158 {
                        _buf[(158 - _start) as usize] = value[30];
                    }
                    if _start <= 159 && _end > 159 {
                        _buf[(159 - _start) as usize] = value[31];
                    }
                    if _start <= 160 && _end > 160 {
                        _buf[(160 - _start) as usize] = value[32];
                    }
                    if _start <= 161 && _end > 161 {
                        _buf[(161 - _start) as usize] = value[33];
                    }
                    if _start <= 162 && _end > 162 {
                        _buf[(162 - _start) as usize] = value[34];
                    }
                    if _start <= 163 && _end > 163 {
                        _buf[(163 - _start) as usize] = value[35];
                    }
                    if _start <= 164 && _end > 164 {
                        _buf[(164 - _start) as usize] = value[36];
                    }
                    if _start <= 165 && _end > 165 {
                        _buf[(165 - _start) as usize] = value[37];
                    }
                    if _start <= 166 && _end > 166 {
                        _buf[(166 - _start) as usize] = value[38];
                    }
                    if _start <= 167 && _end > 167 {
                        _buf[(167 - _start) as usize] = value[39];
                    }
                    if _start <= 168 && _end > 168 {
                        _buf[(168 - _start) as usize] = value[40];
                    }
                    if _start <= 169 && _end > 169 {
                        _buf[(169 - _start) as usize] = value[41];
                    }
                    if _start <= 170 && _end > 170 {
                        _buf[(170 - _start) as usize] = value[42];
                    }
                    if _start <= 171 && _end > 171 {
                        _buf[(171 - _start) as usize] = value[43];
                    }
                    if _start <= 172 && _end > 172 {
                        _buf[(172 - _start) as usize] = value[44];
                    }
                    if _start <= 173 && _end > 173 {
                        _buf[(173 - _start) as usize] = value[45];
                    }
                    if _start <= 174 && _end > 174 {
                        _buf[(174 - _start) as usize] = value[46];
                    }
                    if _start <= 175 && _end > 175 {
                        _buf[(175 - _start) as usize] = value[47];
                    }
                    if _start <= 176 && _end > 176 {
                        _buf[(176 - _start) as usize] = value[48];
                    }
                    if _start <= 177 && _end > 177 {
                        _buf[(177 - _start) as usize] = value[49];
                    }
                    if _start <= 178 && _end > 178 {
                        _buf[(178 - _start) as usize] = value[50];
                    }
                    if _start <= 179 && _end > 179 {
                        _buf[(179 - _start) as usize] = value[51];
                    }
                    if _start <= 180 && _end > 180 {
                        _buf[(180 - _start) as usize] = value[52];
                    }
                    if _start <= 181 && _end > 181 {
                        _buf[(181 - _start) as usize] = value[53];
                    }
                    if _start <= 182 && _end > 182 {
                        _buf[(182 - _start) as usize] = value[54];
                    }
                    if _start <= 183 && _end > 183 {
                        _buf[(183 - _start) as usize] = value[55];
                    }
                    if _start <= 184 && _end > 184 {
                        _buf[(184 - _start) as usize] = value[56];
                    }
                    if _start <= 185 && _end > 185 {
                        _buf[(185 - _start) as usize] = value[57];
                    }
                    if _start <= 186 && _end > 186 {
                        _buf[(186 - _start) as usize] = value[58];
                    }
                    if _start <= 187 && _end > 187 {
                        _buf[(187 - _start) as usize] = value[59];
                    }
                    if _start <= 188 && _end > 188 {
                        _buf[(188 - _start) as usize] = value[60];
                    }
                    if _start <= 189 && _end > 189 {
                        _buf[(189 - _start) as usize] = value[61];
                    }
                    if _start <= 190 && _end > 190 {
                        _buf[(190 - _start) as usize] = value[62];
                    }
                    if _start <= 191 && _end > 191 {
                        _buf[(191 - _start) as usize] = value[63];
                    }
                    if _start <= 192 && _end > 192 {
                        _buf[(192 - _start) as usize] = value[64];
                    }
                    if _start <= 193 && _end > 193 {
                        _buf[(193 - _start) as usize] = value[65];
                    }
                    if _start <= 194 && _end > 194 {
                        _buf[(194 - _start) as usize] = value[66];
                    }
                    if _start <= 195 && _end > 195 {
                        _buf[(195 - _start) as usize] = value[67];
                    }
                    if _start <= 196 && _end > 196 {
                        _buf[(196 - _start) as usize] = value[68];
                    }
                    if _start <= 197 && _end > 197 {
                        _buf[(197 - _start) as usize] = value[69];
                    }
                    if _start <= 198 && _end > 198 {
                        _buf[(198 - _start) as usize] = value[70];
                    }
                    if _start <= 199 && _end > 199 {
                        _buf[(199 - _start) as usize] = value[71];
                    }
                    if _start <= 200 && _end > 200 {
                        _buf[(200 - _start) as usize] = value[72];
                    }
                    if _start <= 201 && _end > 201 {
                        _buf[(201 - _start) as usize] = value[73];
                    }
                    if _start <= 202 && _end > 202 {
                        _buf[(202 - _start) as usize] = value[74];
                    }
                    if _start <= 203 && _end > 203 {
                        _buf[(203 - _start) as usize] = value[75];
                    }
                    if _start <= 204 && _end > 204 {
                        _buf[(204 - _start) as usize] = value[76];
                    }
                    if _start <= 205 && _end > 205 {
                        _buf[(205 - _start) as usize] = value[77];
                    }
                    if _start <= 206 && _end > 206 {
                        _buf[(206 - _start) as usize] = value[78];
                    }
                    if _start <= 207 && _end > 207 {
                        _buf[(207 - _start) as usize] = value[79];
                    }
                    if _start <= 208 && _end > 208 {
                        _buf[(208 - _start) as usize] = value[80];
                    }
                    if _start <= 209 && _end > 209 {
                        _buf[(209 - _start) as usize] = value[81];
                    }
                    if _start <= 210 && _end > 210 {
                        _buf[(210 - _start) as usize] = value[82];
                    }
                    if _start <= 211 && _end > 211 {
                        _buf[(211 - _start) as usize] = value[83];
                    }
                    if _start <= 212 && _end > 212 {
                        _buf[(212 - _start) as usize] = value[84];
                    }
                    if _start <= 213 && _end > 213 {
                        _buf[(213 - _start) as usize] = value[85];
                    }
                    if _start <= 214 && _end > 214 {
                        _buf[(214 - _start) as usize] = value[86];
                    }
                    if _start <= 215 && _end > 215 {
                        _buf[(215 - _start) as usize] = value[87];
                    }
                    if _start <= 216 && _end > 216 {
                        _buf[(216 - _start) as usize] = value[88];
                    }
                    if _start <= 217 && _end > 217 {
                        _buf[(217 - _start) as usize] = value[89];
                    }
                    if _start <= 218 && _end > 218 {
                        _buf[(218 - _start) as usize] = value[90];
                    }
                    if _start <= 219 && _end > 219 {
                        _buf[(219 - _start) as usize] = value[91];
                    }
                    if _start <= 220 && _end > 220 {
                        _buf[(220 - _start) as usize] = value[92];
                    }
                    if _start <= 221 && _end > 221 {
                        _buf[(221 - _start) as usize] = value[93];
                    }
                    if _start <= 222 && _end > 222 {
                        _buf[(222 - _start) as usize] = value[94];
                    }
                    if _start <= 223 && _end > 223 {
                        _buf[(223 - _start) as usize] = value[95];
                    }
                    if _start <= 224 && _end > 224 {
                        _buf[(224 - _start) as usize] = value[96];
                    }
                    if _start <= 225 && _end > 225 {
                        _buf[(225 - _start) as usize] = value[97];
                    }
                    if _start <= 226 && _end > 226 {
                        _buf[(226 - _start) as usize] = value[98];
                    }
                    if _start <= 227 && _end > 227 {
                        _buf[(227 - _start) as usize] = value[99];
                    }
                    if _start <= 228 && _end > 228 {
                        _buf[(228 - _start) as usize] = value[100];
                    }
                    if _start <= 229 && _end > 229 {
                        _buf[(229 - _start) as usize] = value[101];
                    }
                    if _start <= 230 && _end > 230 {
                        _buf[(230 - _start) as usize] = value[102];
                    }
                    if _start <= 231 && _end > 231 {
                        _buf[(231 - _start) as usize] = value[103];
                    }
                    if _start <= 232 && _end > 232 {
                        _buf[(232 - _start) as usize] = value[104];
                    }
                    if _start <= 233 && _end > 233 {
                        _buf[(233 - _start) as usize] = value[105];
                    }
                    if _start <= 234 && _end > 234 {
                        _buf[(234 - _start) as usize] = value[106];
                    }
                    if _start <= 235 && _end > 235 {
                        _buf[(235 - _start) as usize] = value[107];
                    }
                    if _start <= 236 && _end > 236 {
                        _buf[(236 - _start) as usize] = value[108];
                    }
                    if _start <= 237 && _end > 237 {
                        _buf[(237 - _start) as usize] = value[109];
                    }
                    if _start <= 238 && _end > 238 {
                        _buf[(238 - _start) as usize] = value[110];
                    }
                    if _start <= 239 && _end > 239 {
                        _buf[(239 - _start) as usize] = value[111];
                    }
                    if _start <= 240 && _end > 240 {
                        _buf[(240 - _start) as usize] = value[112];
                    }
                    if _start <= 241 && _end > 241 {
                        _buf[(241 - _start) as usize] = value[113];
                    }
                    if _start <= 242 && _end > 242 {
                        _buf[(242 - _start) as usize] = value[114];
                    }
                    if _start <= 243 && _end > 243 {
                        _buf[(243 - _start) as usize] = value[115];
                    }
                    if _start <= 244 && _end > 244 {
                        _buf[(244 - _start) as usize] = value[116];
                    }
                    if _start <= 245 && _end > 245 {
                        _buf[(245 - _start) as usize] = value[117];
                    }
                    if _start <= 246 && _end > 246 {
                        _buf[(246 - _start) as usize] = value[118];
                    }
                    if _start <= 247 && _end > 247 {
                        _buf[(247 - _start) as usize] = value[119];
                    }
                    if _start <= 248 && _end > 248 {
                        _buf[(248 - _start) as usize] = value[120];
                    }
                    if _start <= 249 && _end > 249 {
                        _buf[(249 - _start) as usize] = value[121];
                    }
                    if _start <= 250 && _end > 250 {
                        _buf[(250 - _start) as usize] = value[122];
                    }
                    if _start <= 251 && _end > 251 {
                        _buf[(251 - _start) as usize] = value[123];
                    }
                    if _start <= 252 && _end > 252 {
                        _buf[(252 - _start) as usize] = value[124];
                    }
                    if _start <= 253 && _end > 253 {
                        _buf[(253 - _start) as usize] = value[125];
                    }
                    if _start <= 254 && _end > 254 {
                        _buf[(254 - _start) as usize] = value[126];
                    }
                    if _start <= 255 && _end > 255 {
                        _buf[(255 - _start) as usize] = value[127];
                    }
                }
            }
            (512..=527, 513..=528) => {
                if _start < 520 && _end > 512 {
                    let _dim = ((_start - 512) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .uicr_pselresetn200_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 512 && _end > 512 {
                        _buf[(512 - _start) as usize] = value[0];
                    }
                    if _start <= 513 && _end > 513 {
                        _buf[(513 - _start) as usize] = value[1];
                    }
                    if _start <= 514 && _end > 514 {
                        _buf[(514 - _start) as usize] = value[2];
                    }
                    if _start <= 515 && _end > 515 {
                        _buf[(515 - _start) as usize] = value[3];
                    }
                    if _start <= 516 && _end > 516 {
                        _buf[(516 - _start) as usize] = value[4];
                    }
                    if _start <= 517 && _end > 517 {
                        _buf[(517 - _start) as usize] = value[5];
                    }
                    if _start <= 518 && _end > 518 {
                        _buf[(518 - _start) as usize] = value[6];
                    }
                    if _start <= 519 && _end > 519 {
                        _buf[(519 - _start) as usize] = value[7];
                    }
                }
                if _start < 524 && _end > 520 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .uicr_approtect208_read()?
                        .to_ne_bytes();
                    if _start <= 520 && _end > 520 {
                        _buf[(520 - _start) as usize] = value[0];
                    }
                    if _start <= 521 && _end > 521 {
                        _buf[(521 - _start) as usize] = value[1];
                    }
                    if _start <= 522 && _end > 522 {
                        _buf[(522 - _start) as usize] = value[2];
                    }
                    if _start <= 523 && _end > 523 {
                        _buf[(523 - _start) as usize] = value[3];
                    }
                }
                if _start < 528 && _end > 524 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .uicr_nfcpins20c_read()?
                        .to_ne_bytes();
                    if _start <= 524 && _end > 524 {
                        _buf[(524 - _start) as usize] = value[0];
                    }
                    if _start <= 525 && _end > 525 {
                        _buf[(525 - _start) as usize] = value[1];
                    }
                    if _start <= 526 && _end > 526 {
                        _buf[(526 - _start) as usize] = value[2];
                    }
                    if _start <= 527 && _end > 527 {
                        _buf[(527 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::uicr::Uicr::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=11, 1..=12) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .uicr_unused00_write(offset, &_buf[start..end])?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .uicr_unused14_write(offset, &_buf[start..end])?;
                }
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .uicr_unused28_write(offset, &_buf[start..end])?;
                }
            }
            (16..=255, 17..=256) => {
                if _start < 20 && _end > 16 {
                    let offset = _start.saturating_sub(16);
                    let start = 16u64.saturating_sub(_start) as usize;
                    let end = ((_end - 16) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .uicr_unused310_write(offset, &_buf[start..end])?;
                }
                if _start < 80 && _end > 20 {
                    let _dim = ((_start - 20) % 4) as usize;
                    let offset = _start.saturating_sub(20);
                    let start = 20u64.saturating_sub(_start) as usize;
                    let end = ((_end - 20) - offset) as usize;
                    self.0.lock().unwrap().uicr_nrffwn14_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 128 && _end > 80 {
                    let _dim = ((_start - 80) % 4) as usize;
                    let offset = _start.saturating_sub(80);
                    let start = 80u64.saturating_sub(_start) as usize;
                    let end = ((_end - 80) - offset) as usize;
                    self.0.lock().unwrap().uicr_nrfhwn50_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 256 && _end > 128 {
                    let _dim = ((_start - 128) % 4) as usize;
                    let offset = _start.saturating_sub(128);
                    let start = 128u64.saturating_sub(_start) as usize;
                    let end = ((_end - 128) - offset) as usize;
                    self.0.lock().unwrap().uicr_customern80_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (512..=527, 513..=528) => {
                if _start < 520 && _end > 512 {
                    let _dim = ((_start - 512) % 4) as usize;
                    let offset = _start.saturating_sub(512);
                    let start = 512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 512) - offset) as usize;
                    self.0.lock().unwrap().uicr_pselresetn200_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 524 && _end > 520 {
                    let offset = _start.saturating_sub(520);
                    let start = 520u64.saturating_sub(_start) as usize;
                    let end = ((_end - 520) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .uicr_approtect208_write(offset, &_buf[start..end])?;
                }
                if _start < 528 && _end > 524 {
                    let offset = _start.saturating_sub(524);
                    let start = 524u64.saturating_sub(_start) as usize;
                    let end = ((_end - 524) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .uicr_nfcpins20c_write(offset, &_buf[start..end])?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Apb0(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Apb0 {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::apb0::Apb0::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=27, 1..=28) => {
                return Err(MemError::ReadViolation);
            }
            (120..=127, 121..=128) => {
                return Err(MemError::ReadViolation);
            }
            (256..=283, 257..=284) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_events_hfclkstarted100_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_events_lfclkstarted104_read()?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 268 && _end > 264 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_events_pofwarn108_read()?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                }
                if _start < 272 && _end > 268 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_events_done10c_read()?
                        .to_ne_bytes();
                    if _start <= 268 && _end > 268 {
                        _buf[(268 - _start) as usize] = value[0];
                    }
                    if _start <= 269 && _end > 269 {
                        _buf[(269 - _start) as usize] = value[1];
                    }
                    if _start <= 270 && _end > 270 {
                        _buf[(270 - _start) as usize] = value[2];
                    }
                    if _start <= 271 && _end > 271 {
                        _buf[(271 - _start) as usize] = value[3];
                    }
                }
                if _start < 276 && _end > 272 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_events_ctto110_read()?
                        .to_ne_bytes();
                    if _start <= 272 && _end > 272 {
                        _buf[(272 - _start) as usize] = value[0];
                    }
                    if _start <= 273 && _end > 273 {
                        _buf[(273 - _start) as usize] = value[1];
                    }
                    if _start <= 274 && _end > 274 {
                        _buf[(274 - _start) as usize] = value[2];
                    }
                    if _start <= 275 && _end > 275 {
                        _buf[(275 - _start) as usize] = value[3];
                    }
                }
                if _start < 280 && _end > 276 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_events_sleepenter114_read()?
                        .to_ne_bytes();
                    if _start <= 276 && _end > 276 {
                        _buf[(276 - _start) as usize] = value[0];
                    }
                    if _start <= 277 && _end > 277 {
                        _buf[(277 - _start) as usize] = value[1];
                    }
                    if _start <= 278 && _end > 278 {
                        _buf[(278 - _start) as usize] = value[2];
                    }
                    if _start <= 279 && _end > 279 {
                        _buf[(279 - _start) as usize] = value[3];
                    }
                }
                if _start < 284 && _end > 280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_events_sleepexit118_read()?
                        .to_ne_bytes();
                    if _start <= 280 && _end > 280 {
                        _buf[(280 - _start) as usize] = value[0];
                    }
                    if _start <= 281 && _end > 281 {
                        _buf[(281 - _start) as usize] = value[1];
                    }
                    if _start <= 282 && _end > 282 {
                        _buf[(282 - _start) as usize] = value[2];
                    }
                    if _start <= 283 && _end > 283 {
                        _buf[(283 - _start) as usize] = value[3];
                    }
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1024..=1027, 1025..=1028) => {
                if _start < 1028 && _end > 1024 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_resetreas400_read()?
                        .to_ne_bytes();
                    if _start <= 1024 && _end > 1024 {
                        _buf[(1024 - _start) as usize] = value[0];
                    }
                    if _start <= 1025 && _end > 1025 {
                        _buf[(1025 - _start) as usize] = value[1];
                    }
                    if _start <= 1026 && _end > 1026 {
                        _buf[(1026 - _start) as usize] = value[2];
                    }
                    if _start <= 1027 && _end > 1027 {
                        _buf[(1027 - _start) as usize] = value[3];
                    }
                }
            }
            (1032..=1039, 1033..=1040) => {
                if _start < 1036 && _end > 1032 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_hfclkrun408_read()?
                        .to_ne_bytes();
                    if _start <= 1032 && _end > 1032 {
                        _buf[(1032 - _start) as usize] = value[0];
                    }
                    if _start <= 1033 && _end > 1033 {
                        _buf[(1033 - _start) as usize] = value[1];
                    }
                    if _start <= 1034 && _end > 1034 {
                        _buf[(1034 - _start) as usize] = value[2];
                    }
                    if _start <= 1035 && _end > 1035 {
                        _buf[(1035 - _start) as usize] = value[3];
                    }
                }
                if _start < 1040 && _end > 1036 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_hfclkstat40c_read()?
                        .to_ne_bytes();
                    if _start <= 1036 && _end > 1036 {
                        _buf[(1036 - _start) as usize] = value[0];
                    }
                    if _start <= 1037 && _end > 1037 {
                        _buf[(1037 - _start) as usize] = value[1];
                    }
                    if _start <= 1038 && _end > 1038 {
                        _buf[(1038 - _start) as usize] = value[2];
                    }
                    if _start <= 1039 && _end > 1039 {
                        _buf[(1039 - _start) as usize] = value[3];
                    }
                }
            }
            (1044..=1055, 1045..=1056) => {
                if _start < 1048 && _end > 1044 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_lfclkrun414_read()?
                        .to_ne_bytes();
                    if _start <= 1044 && _end > 1044 {
                        _buf[(1044 - _start) as usize] = value[0];
                    }
                    if _start <= 1045 && _end > 1045 {
                        _buf[(1045 - _start) as usize] = value[1];
                    }
                    if _start <= 1046 && _end > 1046 {
                        _buf[(1046 - _start) as usize] = value[2];
                    }
                    if _start <= 1047 && _end > 1047 {
                        _buf[(1047 - _start) as usize] = value[3];
                    }
                }
                if _start < 1052 && _end > 1048 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_lfclkstat418_read()?
                        .to_ne_bytes();
                    if _start <= 1048 && _end > 1048 {
                        _buf[(1048 - _start) as usize] = value[0];
                    }
                    if _start <= 1049 && _end > 1049 {
                        _buf[(1049 - _start) as usize] = value[1];
                    }
                    if _start <= 1050 && _end > 1050 {
                        _buf[(1050 - _start) as usize] = value[2];
                    }
                    if _start <= 1051 && _end > 1051 {
                        _buf[(1051 - _start) as usize] = value[3];
                    }
                }
                if _start < 1056 && _end > 1052 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_lfclksrccopy41c_read()?
                        .to_ne_bytes();
                    if _start <= 1052 && _end > 1052 {
                        _buf[(1052 - _start) as usize] = value[0];
                    }
                    if _start <= 1053 && _end > 1053 {
                        _buf[(1053 - _start) as usize] = value[1];
                    }
                    if _start <= 1054 && _end > 1054 {
                        _buf[(1054 - _start) as usize] = value[2];
                    }
                    if _start <= 1055 && _end > 1055 {
                        _buf[(1055 - _start) as usize] = value[3];
                    }
                }
            }
            (1064..=1067, 1065..=1068) => {
                if _start < 1068 && _end > 1064 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_ramstatus428_read()?
                        .to_ne_bytes();
                    if _start <= 1064 && _end > 1064 {
                        _buf[(1064 - _start) as usize] = value[0];
                    }
                    if _start <= 1065 && _end > 1065 {
                        _buf[(1065 - _start) as usize] = value[1];
                    }
                    if _start <= 1066 && _end > 1066 {
                        _buf[(1066 - _start) as usize] = value[2];
                    }
                    if _start <= 1067 && _end > 1067 {
                        _buf[(1067 - _start) as usize] = value[3];
                    }
                }
            }
            (1280..=1283, 1281..=1284) => {
                return Err(MemError::ReadViolation);
            }
            (1296..=1299, 1297..=1300) => {
                if _start < 1300 && _end > 1296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_pofcon510_read()?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
            }
            (1304..=1319, 1305..=1320) => {
                if _start < 1308 && _end > 1304 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_lfclksrc518_read()?
                        .to_ne_bytes();
                    if _start <= 1304 && _end > 1304 {
                        _buf[(1304 - _start) as usize] = value[0];
                    }
                    if _start <= 1305 && _end > 1305 {
                        _buf[(1305 - _start) as usize] = value[1];
                    }
                    if _start <= 1306 && _end > 1306 {
                        _buf[(1306 - _start) as usize] = value[2];
                    }
                    if _start <= 1307 && _end > 1307 {
                        _buf[(1307 - _start) as usize] = value[3];
                    }
                }
                if _start < 1312 && _end > 1308 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_gpregret51c_read()?
                        .to_ne_bytes();
                    if _start <= 1308 && _end > 1308 {
                        _buf[(1308 - _start) as usize] = value[0];
                    }
                    if _start <= 1309 && _end > 1309 {
                        _buf[(1309 - _start) as usize] = value[1];
                    }
                    if _start <= 1310 && _end > 1310 {
                        _buf[(1310 - _start) as usize] = value[2];
                    }
                    if _start <= 1311 && _end > 1311 {
                        _buf[(1311 - _start) as usize] = value[3];
                    }
                }
                if _start < 1316 && _end > 1312 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_gpregret2520_read()?
                        .to_ne_bytes();
                    if _start <= 1312 && _end > 1312 {
                        _buf[(1312 - _start) as usize] = value[0];
                    }
                    if _start <= 1313 && _end > 1313 {
                        _buf[(1313 - _start) as usize] = value[1];
                    }
                    if _start <= 1314 && _end > 1314 {
                        _buf[(1314 - _start) as usize] = value[2];
                    }
                    if _start <= 1315 && _end > 1315 {
                        _buf[(1315 - _start) as usize] = value[3];
                    }
                }
                if _start < 1320 && _end > 1316 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_ramon524_read()?
                        .to_ne_bytes();
                    if _start <= 1316 && _end > 1316 {
                        _buf[(1316 - _start) as usize] = value[0];
                    }
                    if _start <= 1317 && _end > 1317 {
                        _buf[(1317 - _start) as usize] = value[1];
                    }
                    if _start <= 1318 && _end > 1318 {
                        _buf[(1318 - _start) as usize] = value[2];
                    }
                    if _start <= 1319 && _end > 1319 {
                        _buf[(1319 - _start) as usize] = value[3];
                    }
                }
            }
            (1336..=1339, 1337..=1340) => {
                if _start < 1340 && _end > 1336 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_ctiv538_read()?
                        .to_ne_bytes();
                    if _start <= 1336 && _end > 1336 {
                        _buf[(1336 - _start) as usize] = value[0];
                    }
                    if _start <= 1337 && _end > 1337 {
                        _buf[(1337 - _start) as usize] = value[1];
                    }
                    if _start <= 1338 && _end > 1338 {
                        _buf[(1338 - _start) as usize] = value[2];
                    }
                    if _start <= 1339 && _end > 1339 {
                        _buf[(1339 - _start) as usize] = value[3];
                    }
                }
            }
            (1364..=1367, 1365..=1368) => {
                if _start < 1368 && _end > 1364 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_ramonb554_read()?
                        .to_ne_bytes();
                    if _start <= 1364 && _end > 1364 {
                        _buf[(1364 - _start) as usize] = value[0];
                    }
                    if _start <= 1365 && _end > 1365 {
                        _buf[(1365 - _start) as usize] = value[1];
                    }
                    if _start <= 1366 && _end > 1366 {
                        _buf[(1366 - _start) as usize] = value[2];
                    }
                    if _start <= 1367 && _end > 1367 {
                        _buf[(1367 - _start) as usize] = value[3];
                    }
                }
            }
            (1372..=1375, 1373..=1376) => {
                if _start < 1376 && _end > 1372 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_traceconfig55c_read()?
                        .to_ne_bytes();
                    if _start <= 1372 && _end > 1372 {
                        _buf[(1372 - _start) as usize] = value[0];
                    }
                    if _start <= 1373 && _end > 1373 {
                        _buf[(1373 - _start) as usize] = value[1];
                    }
                    if _start <= 1374 && _end > 1374 {
                        _buf[(1374 - _start) as usize] = value[2];
                    }
                    if _start <= 1375 && _end > 1375 {
                        _buf[(1375 - _start) as usize] = value[3];
                    }
                }
            }
            (1400..=1403, 1401..=1404) => {
                if _start < 1404 && _end > 1400 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_dcdcen578_read()?
                        .to_ne_bytes();
                    if _start <= 1400 && _end > 1400 {
                        _buf[(1400 - _start) as usize] = value[0];
                    }
                    if _start <= 1401 && _end > 1401 {
                        _buf[(1401 - _start) as usize] = value[1];
                    }
                    if _start <= 1402 && _end > 1402 {
                        _buf[(1402 - _start) as usize] = value[2];
                    }
                    if _start <= 1403 && _end > 1403 {
                        _buf[(1403 - _start) as usize] = value[3];
                    }
                }
            }
            (1536..=1559, 1537..=1560) => {
                if _start < 1540 && _end > 1536 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_config0600_read()?
                        .to_ne_bytes();
                    if _start <= 1536 && _end > 1536 {
                        _buf[(1536 - _start) as usize] = value[0];
                    }
                    if _start <= 1537 && _end > 1537 {
                        _buf[(1537 - _start) as usize] = value[1];
                    }
                    if _start <= 1538 && _end > 1538 {
                        _buf[(1538 - _start) as usize] = value[2];
                    }
                    if _start <= 1539 && _end > 1539 {
                        _buf[(1539 - _start) as usize] = value[3];
                    }
                }
                if _start < 1544 && _end > 1540 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_config1604_read()?
                        .to_ne_bytes();
                    if _start <= 1540 && _end > 1540 {
                        _buf[(1540 - _start) as usize] = value[0];
                    }
                    if _start <= 1541 && _end > 1541 {
                        _buf[(1541 - _start) as usize] = value[1];
                    }
                    if _start <= 1542 && _end > 1542 {
                        _buf[(1542 - _start) as usize] = value[2];
                    }
                    if _start <= 1543 && _end > 1543 {
                        _buf[(1543 - _start) as usize] = value[3];
                    }
                }
                if _start < 1548 && _end > 1544 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_disableindebug608_read()?
                        .to_ne_bytes();
                    if _start <= 1544 && _end > 1544 {
                        _buf[(1544 - _start) as usize] = value[0];
                    }
                    if _start <= 1545 && _end > 1545 {
                        _buf[(1545 - _start) as usize] = value[1];
                    }
                    if _start <= 1546 && _end > 1546 {
                        _buf[(1546 - _start) as usize] = value[2];
                    }
                    if _start <= 1547 && _end > 1547 {
                        _buf[(1547 - _start) as usize] = value[3];
                    }
                }
                if _start < 1552 && _end > 1548 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_unused060c_read()?
                        .to_ne_bytes();
                    if _start <= 1548 && _end > 1548 {
                        _buf[(1548 - _start) as usize] = value[0];
                    }
                    if _start <= 1549 && _end > 1549 {
                        _buf[(1549 - _start) as usize] = value[1];
                    }
                    if _start <= 1550 && _end > 1550 {
                        _buf[(1550 - _start) as usize] = value[2];
                    }
                    if _start <= 1551 && _end > 1551 {
                        _buf[(1551 - _start) as usize] = value[3];
                    }
                }
                if _start < 1556 && _end > 1552 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_config2610_read()?
                        .to_ne_bytes();
                    if _start <= 1552 && _end > 1552 {
                        _buf[(1552 - _start) as usize] = value[0];
                    }
                    if _start <= 1553 && _end > 1553 {
                        _buf[(1553 - _start) as usize] = value[1];
                    }
                    if _start <= 1554 && _end > 1554 {
                        _buf[(1554 - _start) as usize] = value[2];
                    }
                    if _start <= 1555 && _end > 1555 {
                        _buf[(1555 - _start) as usize] = value[3];
                    }
                }
                if _start < 1560 && _end > 1556 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb0_config3614_read()?
                        .to_ne_bytes();
                    if _start <= 1556 && _end > 1556 {
                        _buf[(1556 - _start) as usize] = value[0];
                    }
                    if _start <= 1557 && _end > 1557 {
                        _buf[(1557 - _start) as usize] = value[1];
                    }
                    if _start <= 1558 && _end > 1558 {
                        _buf[(1558 - _start) as usize] = value[2];
                    }
                    if _start <= 1559 && _end > 1559 {
                        _buf[(1559 - _start) as usize] = value[3];
                    }
                }
            }
            (2304..=2431, 2305..=2432) => {
                if _start < 2432 && _end > 2304 {
                    for _ramn in 0..8 {
                        let _dim_offset = _ramn * 16;
                        if _start < 2316 + _dim_offset
                            && _end > 2304 + _dim_offset
                        {
                            let _start = 2304u64.saturating_sub(_start);
                            let _end = _end - 2304;
                            let _buf = &mut _buf[_start as usize..];
                            if _start < 12 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .apb0_ramn_power0_read(_ramn as usize)?
                                        .to_ne_bytes();
                                    if _start <= 0 && _end > 0 {
                                        _buf[(0 - _start) as usize] = value[0];
                                    }
                                    if _start <= 1 && _end > 1 {
                                        _buf[(1 - _start) as usize] = value[1];
                                    }
                                    if _start <= 2 && _end > 2 {
                                        _buf[(2 - _start) as usize] = value[2];
                                    }
                                    if _start <= 3 && _end > 3 {
                                        _buf[(3 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 8 && _end > 4 {
                                    return Err(MemError::ReadViolation);
                                }
                                if _start < 12 && _end > 8 {
                                    return Err(MemError::ReadViolation);
                                }
                            }
                        }
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::apb0::Apb0::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=27, 1..=28) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0.lock().unwrap().apb0_tasks_hfclkstart0_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0.lock().unwrap().apb0_tasks_hfclkstop4_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0.lock().unwrap().apb0_tasks_lfclkstart8_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 16 && _end > 12 {
                    let offset = _start.saturating_sub(12);
                    let start = 12u64.saturating_sub(_start) as usize;
                    let end = ((_end - 12) - offset) as usize;
                    self.0.lock().unwrap().apb0_tasks_lfclkstopc_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 20 && _end > 16 {
                    let offset = _start.saturating_sub(16);
                    let start = 16u64.saturating_sub(_start) as usize;
                    let end = ((_end - 16) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_tasks_cal10_write(offset, &_buf[start..end])?;
                }
                if _start < 24 && _end > 20 {
                    let offset = _start.saturating_sub(20);
                    let start = 20u64.saturating_sub(_start) as usize;
                    let end = ((_end - 20) - offset) as usize;
                    self.0.lock().unwrap().apb0_tasks_ctstart14_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 28 && _end > 24 {
                    let offset = _start.saturating_sub(24);
                    let start = 24u64.saturating_sub(_start) as usize;
                    let end = ((_end - 24) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_tasks_ctstop18_write(offset, &_buf[start..end])?;
                }
            }
            (120..=127, 121..=128) => {
                if _start < 124 && _end > 120 {
                    let offset = _start.saturating_sub(120);
                    let start = 120u64.saturating_sub(_start) as usize;
                    let end = ((_end - 120) - offset) as usize;
                    self.0.lock().unwrap().apb0_tasks_constlat78_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 128 && _end > 124 {
                    let offset = _start.saturating_sub(124);
                    let start = 124u64.saturating_sub(_start) as usize;
                    let end = ((_end - 124) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_tasks_lowpwr7c_write(offset, &_buf[start..end])?;
                }
            }
            (256..=283, 257..=284) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().apb0_events_hfclkstarted100_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0.lock().unwrap().apb0_events_lfclkstarted104_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 268 && _end > 264 {
                    let offset = _start.saturating_sub(264);
                    let start = 264u64.saturating_sub(_start) as usize;
                    let end = ((_end - 264) - offset) as usize;
                    self.0.lock().unwrap().apb0_events_pofwarn108_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 272 && _end > 268 {
                    let offset = _start.saturating_sub(268);
                    let start = 268u64.saturating_sub(_start) as usize;
                    let end = ((_end - 268) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_events_done10c_write(offset, &_buf[start..end])?;
                }
                if _start < 276 && _end > 272 {
                    let offset = _start.saturating_sub(272);
                    let start = 272u64.saturating_sub(_start) as usize;
                    let end = ((_end - 272) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_events_ctto110_write(offset, &_buf[start..end])?;
                }
                if _start < 280 && _end > 276 {
                    let offset = _start.saturating_sub(276);
                    let start = 276u64.saturating_sub(_start) as usize;
                    let end = ((_end - 276) - offset) as usize;
                    self.0.lock().unwrap().apb0_events_sleepenter114_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 284 && _end > 280 {
                    let offset = _start.saturating_sub(280);
                    let start = 280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 280) - offset) as usize;
                    self.0.lock().unwrap().apb0_events_sleepexit118_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1024..=1027, 1025..=1028) => {
                if _start < 1028 && _end > 1024 {
                    let offset = _start.saturating_sub(1024);
                    let start = 1024u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1024) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_resetreas400_write(offset, &_buf[start..end])?;
                }
            }
            (1032..=1039, 1033..=1040) => {
                return Err(MemError::WriteViolation);
            }
            (1044..=1055, 1045..=1056) => {
                return Err(MemError::WriteViolation);
            }
            (1064..=1067, 1065..=1068) => {
                return Err(MemError::WriteViolation);
            }
            (1280..=1283, 1281..=1284) => {
                if _start < 1284 && _end > 1280 {
                    let offset = _start.saturating_sub(1280);
                    let start = 1280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1280) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_systemoff500_write(offset, &_buf[start..end])?;
                }
            }
            (1296..=1299, 1297..=1300) => {
                if _start < 1300 && _end > 1296 {
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_pofcon510_write(offset, &_buf[start..end])?;
                }
            }
            (1304..=1319, 1305..=1320) => {
                if _start < 1308 && _end > 1304 {
                    let offset = _start.saturating_sub(1304);
                    let start = 1304u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1304) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_lfclksrc518_write(offset, &_buf[start..end])?;
                }
                if _start < 1312 && _end > 1308 {
                    let offset = _start.saturating_sub(1308);
                    let start = 1308u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1308) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_gpregret51c_write(offset, &_buf[start..end])?;
                }
                if _start < 1316 && _end > 1312 {
                    let offset = _start.saturating_sub(1312);
                    let start = 1312u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1312) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_gpregret2520_write(offset, &_buf[start..end])?;
                }
                if _start < 1320 && _end > 1316 {
                    let offset = _start.saturating_sub(1316);
                    let start = 1316u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1316) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_ramon524_write(offset, &_buf[start..end])?;
                }
            }
            (1336..=1339, 1337..=1340) => {
                if _start < 1340 && _end > 1336 {
                    let offset = _start.saturating_sub(1336);
                    let start = 1336u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1336) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_ctiv538_write(offset, &_buf[start..end])?;
                }
            }
            (1364..=1367, 1365..=1368) => {
                if _start < 1368 && _end > 1364 {
                    let offset = _start.saturating_sub(1364);
                    let start = 1364u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1364) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_ramonb554_write(offset, &_buf[start..end])?;
                }
            }
            (1372..=1375, 1373..=1376) => {
                if _start < 1376 && _end > 1372 {
                    let offset = _start.saturating_sub(1372);
                    let start = 1372u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1372) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_traceconfig55c_write(offset, &_buf[start..end])?;
                }
            }
            (1400..=1403, 1401..=1404) => {
                if _start < 1404 && _end > 1400 {
                    let offset = _start.saturating_sub(1400);
                    let start = 1400u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1400) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_dcdcen578_write(offset, &_buf[start..end])?;
                }
            }
            (1536..=1559, 1537..=1560) => {
                if _start < 1540 && _end > 1536 {
                    let offset = _start.saturating_sub(1536);
                    let start = 1536u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1536) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_config0600_write(offset, &_buf[start..end])?;
                }
                if _start < 1544 && _end > 1540 {
                    let offset = _start.saturating_sub(1540);
                    let start = 1540u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1540) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_config1604_write(offset, &_buf[start..end])?;
                }
                if _start < 1548 && _end > 1544 {
                    let offset = _start.saturating_sub(1544);
                    let start = 1544u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1544) - offset) as usize;
                    self.0.lock().unwrap().apb0_disableindebug608_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1552 && _end > 1548 {
                    let offset = _start.saturating_sub(1548);
                    let start = 1548u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1548) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_unused060c_write(offset, &_buf[start..end])?;
                }
                if _start < 1556 && _end > 1552 {
                    let offset = _start.saturating_sub(1552);
                    let start = 1552u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1552) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_config2610_write(offset, &_buf[start..end])?;
                }
                if _start < 1560 && _end > 1556 {
                    let offset = _start.saturating_sub(1556);
                    let start = 1556u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1556) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb0_config3614_write(offset, &_buf[start..end])?;
                }
            }
            (2304..=2431, 2305..=2432) => {
                if _start < 2432 && _end > 2304 {
                    for _ramn in 0..8 {
                        let _dim_offset = _ramn * 16;
                        if _start < 2316 + _dim_offset
                            && _end > 2304 + _dim_offset
                        {
                            let _start = 2304u64.saturating_sub(_start);
                            let _end = _end - 2304;
                            let _buf = &_buf[_start as usize..];
                            if _start < 12 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let offset = _start.saturating_sub(0);
                                    let start =
                                        0u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 0) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .apb0_ramn_power0_write(
                                            _ramn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                                if _start < 8 && _end > 4 {
                                    let offset = _start.saturating_sub(4);
                                    let start =
                                        4u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 4) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .apb0_ramn_powerset4_write(
                                            _ramn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                                if _start < 12 && _end > 8 {
                                    let offset = _start.saturating_sub(8);
                                    let start =
                                        8u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 8) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .apb0_ramn_powerclr8_write(
                                            _ramn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                            }
                        }
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Radio(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Radio {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::radio::Radio::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=35, 1..=36) => {
                return Err(MemError::ReadViolation);
            }
            (256..=287, 257..=288) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_events_ready100_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_events_address104_read()?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 268 && _end > 264 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_events_payload108_read()?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                }
                if _start < 272 && _end > 268 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_events_end10c_read()?
                        .to_ne_bytes();
                    if _start <= 268 && _end > 268 {
                        _buf[(268 - _start) as usize] = value[0];
                    }
                    if _start <= 269 && _end > 269 {
                        _buf[(269 - _start) as usize] = value[1];
                    }
                    if _start <= 270 && _end > 270 {
                        _buf[(270 - _start) as usize] = value[2];
                    }
                    if _start <= 271 && _end > 271 {
                        _buf[(271 - _start) as usize] = value[3];
                    }
                }
                if _start < 276 && _end > 272 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_events_disabled110_read()?
                        .to_ne_bytes();
                    if _start <= 272 && _end > 272 {
                        _buf[(272 - _start) as usize] = value[0];
                    }
                    if _start <= 273 && _end > 273 {
                        _buf[(273 - _start) as usize] = value[1];
                    }
                    if _start <= 274 && _end > 274 {
                        _buf[(274 - _start) as usize] = value[2];
                    }
                    if _start <= 275 && _end > 275 {
                        _buf[(275 - _start) as usize] = value[3];
                    }
                }
                if _start < 280 && _end > 276 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_events_devmatch114_read()?
                        .to_ne_bytes();
                    if _start <= 276 && _end > 276 {
                        _buf[(276 - _start) as usize] = value[0];
                    }
                    if _start <= 277 && _end > 277 {
                        _buf[(277 - _start) as usize] = value[1];
                    }
                    if _start <= 278 && _end > 278 {
                        _buf[(278 - _start) as usize] = value[2];
                    }
                    if _start <= 279 && _end > 279 {
                        _buf[(279 - _start) as usize] = value[3];
                    }
                }
                if _start < 284 && _end > 280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_events_devmiss118_read()?
                        .to_ne_bytes();
                    if _start <= 280 && _end > 280 {
                        _buf[(280 - _start) as usize] = value[0];
                    }
                    if _start <= 281 && _end > 281 {
                        _buf[(281 - _start) as usize] = value[1];
                    }
                    if _start <= 282 && _end > 282 {
                        _buf[(282 - _start) as usize] = value[2];
                    }
                    if _start <= 283 && _end > 283 {
                        _buf[(283 - _start) as usize] = value[3];
                    }
                }
                if _start < 288 && _end > 284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_events_rssiend11c_read()?
                        .to_ne_bytes();
                    if _start <= 284 && _end > 284 {
                        _buf[(284 - _start) as usize] = value[0];
                    }
                    if _start <= 285 && _end > 285 {
                        _buf[(285 - _start) as usize] = value[1];
                    }
                    if _start <= 286 && _end > 286 {
                        _buf[(286 - _start) as usize] = value[2];
                    }
                    if _start <= 287 && _end > 287 {
                        _buf[(287 - _start) as usize] = value[3];
                    }
                }
            }
            (296..=299, 297..=300) => {
                if _start < 300 && _end > 296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_events_bcmatch128_read()?
                        .to_ne_bytes();
                    if _start <= 296 && _end > 296 {
                        _buf[(296 - _start) as usize] = value[0];
                    }
                    if _start <= 297 && _end > 297 {
                        _buf[(297 - _start) as usize] = value[1];
                    }
                    if _start <= 298 && _end > 298 {
                        _buf[(298 - _start) as usize] = value[2];
                    }
                    if _start <= 299 && _end > 299 {
                        _buf[(299 - _start) as usize] = value[3];
                    }
                }
            }
            (304..=311, 305..=312) => {
                if _start < 308 && _end > 304 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_events_crcok130_read()?
                        .to_ne_bytes();
                    if _start <= 304 && _end > 304 {
                        _buf[(304 - _start) as usize] = value[0];
                    }
                    if _start <= 305 && _end > 305 {
                        _buf[(305 - _start) as usize] = value[1];
                    }
                    if _start <= 306 && _end > 306 {
                        _buf[(306 - _start) as usize] = value[2];
                    }
                    if _start <= 307 && _end > 307 {
                        _buf[(307 - _start) as usize] = value[3];
                    }
                }
                if _start < 312 && _end > 308 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_events_crcerror134_read()?
                        .to_ne_bytes();
                    if _start <= 308 && _end > 308 {
                        _buf[(308 - _start) as usize] = value[0];
                    }
                    if _start <= 309 && _end > 309 {
                        _buf[(309 - _start) as usize] = value[1];
                    }
                    if _start <= 310 && _end > 310 {
                        _buf[(310 - _start) as usize] = value[2];
                    }
                    if _start <= 311 && _end > 311 {
                        _buf[(311 - _start) as usize] = value[3];
                    }
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_shorts200_read()?
                        .to_ne_bytes();
                    if _start <= 512 && _end > 512 {
                        _buf[(512 - _start) as usize] = value[0];
                    }
                    if _start <= 513 && _end > 513 {
                        _buf[(513 - _start) as usize] = value[1];
                    }
                    if _start <= 514 && _end > 514 {
                        _buf[(514 - _start) as usize] = value[2];
                    }
                    if _start <= 515 && _end > 515 {
                        _buf[(515 - _start) as usize] = value[3];
                    }
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1024..=1027, 1025..=1028) => {
                if _start < 1028 && _end > 1024 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_crcstatus400_read()?
                        .to_ne_bytes();
                    if _start <= 1024 && _end > 1024 {
                        _buf[(1024 - _start) as usize] = value[0];
                    }
                    if _start <= 1025 && _end > 1025 {
                        _buf[(1025 - _start) as usize] = value[1];
                    }
                    if _start <= 1026 && _end > 1026 {
                        _buf[(1026 - _start) as usize] = value[2];
                    }
                    if _start <= 1027 && _end > 1027 {
                        _buf[(1027 - _start) as usize] = value[3];
                    }
                }
            }
            (1032..=1043, 1033..=1044) => {
                if _start < 1036 && _end > 1032 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_rxmatch408_read()?
                        .to_ne_bytes();
                    if _start <= 1032 && _end > 1032 {
                        _buf[(1032 - _start) as usize] = value[0];
                    }
                    if _start <= 1033 && _end > 1033 {
                        _buf[(1033 - _start) as usize] = value[1];
                    }
                    if _start <= 1034 && _end > 1034 {
                        _buf[(1034 - _start) as usize] = value[2];
                    }
                    if _start <= 1035 && _end > 1035 {
                        _buf[(1035 - _start) as usize] = value[3];
                    }
                }
                if _start < 1040 && _end > 1036 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_rxcrc40c_read()?
                        .to_ne_bytes();
                    if _start <= 1036 && _end > 1036 {
                        _buf[(1036 - _start) as usize] = value[0];
                    }
                    if _start <= 1037 && _end > 1037 {
                        _buf[(1037 - _start) as usize] = value[1];
                    }
                    if _start <= 1038 && _end > 1038 {
                        _buf[(1038 - _start) as usize] = value[2];
                    }
                    if _start <= 1039 && _end > 1039 {
                        _buf[(1039 - _start) as usize] = value[3];
                    }
                }
                if _start < 1044 && _end > 1040 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_dai410_read()?
                        .to_ne_bytes();
                    if _start <= 1040 && _end > 1040 {
                        _buf[(1040 - _start) as usize] = value[0];
                    }
                    if _start <= 1041 && _end > 1041 {
                        _buf[(1041 - _start) as usize] = value[1];
                    }
                    if _start <= 1042 && _end > 1042 {
                        _buf[(1042 - _start) as usize] = value[2];
                    }
                    if _start <= 1043 && _end > 1043 {
                        _buf[(1043 - _start) as usize] = value[3];
                    }
                }
            }
            (1284..=1355, 1285..=1356) => {
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_packetptr504_read()?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_frequency508_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
                if _start < 1296 && _end > 1292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_txpower50c_read()?
                        .to_ne_bytes();
                    if _start <= 1292 && _end > 1292 {
                        _buf[(1292 - _start) as usize] = value[0];
                    }
                    if _start <= 1293 && _end > 1293 {
                        _buf[(1293 - _start) as usize] = value[1];
                    }
                    if _start <= 1294 && _end > 1294 {
                        _buf[(1294 - _start) as usize] = value[2];
                    }
                    if _start <= 1295 && _end > 1295 {
                        _buf[(1295 - _start) as usize] = value[3];
                    }
                }
                if _start < 1300 && _end > 1296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_mode510_read()?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
                if _start < 1304 && _end > 1300 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_pcnf0514_read()?
                        .to_ne_bytes();
                    if _start <= 1300 && _end > 1300 {
                        _buf[(1300 - _start) as usize] = value[0];
                    }
                    if _start <= 1301 && _end > 1301 {
                        _buf[(1301 - _start) as usize] = value[1];
                    }
                    if _start <= 1302 && _end > 1302 {
                        _buf[(1302 - _start) as usize] = value[2];
                    }
                    if _start <= 1303 && _end > 1303 {
                        _buf[(1303 - _start) as usize] = value[3];
                    }
                }
                if _start < 1308 && _end > 1304 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_pcnf1518_read()?
                        .to_ne_bytes();
                    if _start <= 1304 && _end > 1304 {
                        _buf[(1304 - _start) as usize] = value[0];
                    }
                    if _start <= 1305 && _end > 1305 {
                        _buf[(1305 - _start) as usize] = value[1];
                    }
                    if _start <= 1306 && _end > 1306 {
                        _buf[(1306 - _start) as usize] = value[2];
                    }
                    if _start <= 1307 && _end > 1307 {
                        _buf[(1307 - _start) as usize] = value[3];
                    }
                }
                if _start < 1312 && _end > 1308 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_base051c_read()?
                        .to_ne_bytes();
                    if _start <= 1308 && _end > 1308 {
                        _buf[(1308 - _start) as usize] = value[0];
                    }
                    if _start <= 1309 && _end > 1309 {
                        _buf[(1309 - _start) as usize] = value[1];
                    }
                    if _start <= 1310 && _end > 1310 {
                        _buf[(1310 - _start) as usize] = value[2];
                    }
                    if _start <= 1311 && _end > 1311 {
                        _buf[(1311 - _start) as usize] = value[3];
                    }
                }
                if _start < 1316 && _end > 1312 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_base1520_read()?
                        .to_ne_bytes();
                    if _start <= 1312 && _end > 1312 {
                        _buf[(1312 - _start) as usize] = value[0];
                    }
                    if _start <= 1313 && _end > 1313 {
                        _buf[(1313 - _start) as usize] = value[1];
                    }
                    if _start <= 1314 && _end > 1314 {
                        _buf[(1314 - _start) as usize] = value[2];
                    }
                    if _start <= 1315 && _end > 1315 {
                        _buf[(1315 - _start) as usize] = value[3];
                    }
                }
                if _start < 1320 && _end > 1316 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_prefix0524_read()?
                        .to_ne_bytes();
                    if _start <= 1316 && _end > 1316 {
                        _buf[(1316 - _start) as usize] = value[0];
                    }
                    if _start <= 1317 && _end > 1317 {
                        _buf[(1317 - _start) as usize] = value[1];
                    }
                    if _start <= 1318 && _end > 1318 {
                        _buf[(1318 - _start) as usize] = value[2];
                    }
                    if _start <= 1319 && _end > 1319 {
                        _buf[(1319 - _start) as usize] = value[3];
                    }
                }
                if _start < 1324 && _end > 1320 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_prefix1528_read()?
                        .to_ne_bytes();
                    if _start <= 1320 && _end > 1320 {
                        _buf[(1320 - _start) as usize] = value[0];
                    }
                    if _start <= 1321 && _end > 1321 {
                        _buf[(1321 - _start) as usize] = value[1];
                    }
                    if _start <= 1322 && _end > 1322 {
                        _buf[(1322 - _start) as usize] = value[2];
                    }
                    if _start <= 1323 && _end > 1323 {
                        _buf[(1323 - _start) as usize] = value[3];
                    }
                }
                if _start < 1328 && _end > 1324 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_txaddress52c_read()?
                        .to_ne_bytes();
                    if _start <= 1324 && _end > 1324 {
                        _buf[(1324 - _start) as usize] = value[0];
                    }
                    if _start <= 1325 && _end > 1325 {
                        _buf[(1325 - _start) as usize] = value[1];
                    }
                    if _start <= 1326 && _end > 1326 {
                        _buf[(1326 - _start) as usize] = value[2];
                    }
                    if _start <= 1327 && _end > 1327 {
                        _buf[(1327 - _start) as usize] = value[3];
                    }
                }
                if _start < 1332 && _end > 1328 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_rxaddresses530_read()?
                        .to_ne_bytes();
                    if _start <= 1328 && _end > 1328 {
                        _buf[(1328 - _start) as usize] = value[0];
                    }
                    if _start <= 1329 && _end > 1329 {
                        _buf[(1329 - _start) as usize] = value[1];
                    }
                    if _start <= 1330 && _end > 1330 {
                        _buf[(1330 - _start) as usize] = value[2];
                    }
                    if _start <= 1331 && _end > 1331 {
                        _buf[(1331 - _start) as usize] = value[3];
                    }
                }
                if _start < 1336 && _end > 1332 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_crccnf534_read()?
                        .to_ne_bytes();
                    if _start <= 1332 && _end > 1332 {
                        _buf[(1332 - _start) as usize] = value[0];
                    }
                    if _start <= 1333 && _end > 1333 {
                        _buf[(1333 - _start) as usize] = value[1];
                    }
                    if _start <= 1334 && _end > 1334 {
                        _buf[(1334 - _start) as usize] = value[2];
                    }
                    if _start <= 1335 && _end > 1335 {
                        _buf[(1335 - _start) as usize] = value[3];
                    }
                }
                if _start < 1340 && _end > 1336 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_crcpoly538_read()?
                        .to_ne_bytes();
                    if _start <= 1336 && _end > 1336 {
                        _buf[(1336 - _start) as usize] = value[0];
                    }
                    if _start <= 1337 && _end > 1337 {
                        _buf[(1337 - _start) as usize] = value[1];
                    }
                    if _start <= 1338 && _end > 1338 {
                        _buf[(1338 - _start) as usize] = value[2];
                    }
                    if _start <= 1339 && _end > 1339 {
                        _buf[(1339 - _start) as usize] = value[3];
                    }
                }
                if _start < 1344 && _end > 1340 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_crcinit53c_read()?
                        .to_ne_bytes();
                    if _start <= 1340 && _end > 1340 {
                        _buf[(1340 - _start) as usize] = value[0];
                    }
                    if _start <= 1341 && _end > 1341 {
                        _buf[(1341 - _start) as usize] = value[1];
                    }
                    if _start <= 1342 && _end > 1342 {
                        _buf[(1342 - _start) as usize] = value[2];
                    }
                    if _start <= 1343 && _end > 1343 {
                        _buf[(1343 - _start) as usize] = value[3];
                    }
                }
                if _start < 1348 && _end > 1344 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_unused0540_read()?
                        .to_ne_bytes();
                    if _start <= 1344 && _end > 1344 {
                        _buf[(1344 - _start) as usize] = value[0];
                    }
                    if _start <= 1345 && _end > 1345 {
                        _buf[(1345 - _start) as usize] = value[1];
                    }
                    if _start <= 1346 && _end > 1346 {
                        _buf[(1346 - _start) as usize] = value[2];
                    }
                    if _start <= 1347 && _end > 1347 {
                        _buf[(1347 - _start) as usize] = value[3];
                    }
                }
                if _start < 1352 && _end > 1348 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_tifs544_read()?
                        .to_ne_bytes();
                    if _start <= 1348 && _end > 1348 {
                        _buf[(1348 - _start) as usize] = value[0];
                    }
                    if _start <= 1349 && _end > 1349 {
                        _buf[(1349 - _start) as usize] = value[1];
                    }
                    if _start <= 1350 && _end > 1350 {
                        _buf[(1350 - _start) as usize] = value[2];
                    }
                    if _start <= 1351 && _end > 1351 {
                        _buf[(1351 - _start) as usize] = value[3];
                    }
                }
                if _start < 1356 && _end > 1352 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_rssisample548_read()?
                        .to_ne_bytes();
                    if _start <= 1352 && _end > 1352 {
                        _buf[(1352 - _start) as usize] = value[0];
                    }
                    if _start <= 1353 && _end > 1353 {
                        _buf[(1353 - _start) as usize] = value[1];
                    }
                    if _start <= 1354 && _end > 1354 {
                        _buf[(1354 - _start) as usize] = value[2];
                    }
                    if _start <= 1355 && _end > 1355 {
                        _buf[(1355 - _start) as usize] = value[3];
                    }
                }
            }
            (1360..=1367, 1361..=1368) => {
                if _start < 1364 && _end > 1360 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_state550_read()?
                        .to_ne_bytes();
                    if _start <= 1360 && _end > 1360 {
                        _buf[(1360 - _start) as usize] = value[0];
                    }
                    if _start <= 1361 && _end > 1361 {
                        _buf[(1361 - _start) as usize] = value[1];
                    }
                    if _start <= 1362 && _end > 1362 {
                        _buf[(1362 - _start) as usize] = value[2];
                    }
                    if _start <= 1363 && _end > 1363 {
                        _buf[(1363 - _start) as usize] = value[3];
                    }
                }
                if _start < 1368 && _end > 1364 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_datawhiteiv554_read()?
                        .to_ne_bytes();
                    if _start <= 1364 && _end > 1364 {
                        _buf[(1364 - _start) as usize] = value[0];
                    }
                    if _start <= 1365 && _end > 1365 {
                        _buf[(1365 - _start) as usize] = value[1];
                    }
                    if _start <= 1366 && _end > 1366 {
                        _buf[(1366 - _start) as usize] = value[2];
                    }
                    if _start <= 1367 && _end > 1367 {
                        _buf[(1367 - _start) as usize] = value[3];
                    }
                }
            }
            (1376..=1379, 1377..=1380) => {
                if _start < 1380 && _end > 1376 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_bcc560_read()?
                        .to_ne_bytes();
                    if _start <= 1376 && _end > 1376 {
                        _buf[(1376 - _start) as usize] = value[0];
                    }
                    if _start <= 1377 && _end > 1377 {
                        _buf[(1377 - _start) as usize] = value[1];
                    }
                    if _start <= 1378 && _end > 1378 {
                        _buf[(1378 - _start) as usize] = value[2];
                    }
                    if _start <= 1379 && _end > 1379 {
                        _buf[(1379 - _start) as usize] = value[3];
                    }
                }
            }
            (1536..=1603, 1537..=1604) => {
                if _start < 1568 && _end > 1536 {
                    let _dim = ((_start - 1536) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_dabn600_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 1536 && _end > 1536 {
                        _buf[(1536 - _start) as usize] = value[0];
                    }
                    if _start <= 1537 && _end > 1537 {
                        _buf[(1537 - _start) as usize] = value[1];
                    }
                    if _start <= 1538 && _end > 1538 {
                        _buf[(1538 - _start) as usize] = value[2];
                    }
                    if _start <= 1539 && _end > 1539 {
                        _buf[(1539 - _start) as usize] = value[3];
                    }
                    if _start <= 1540 && _end > 1540 {
                        _buf[(1540 - _start) as usize] = value[4];
                    }
                    if _start <= 1541 && _end > 1541 {
                        _buf[(1541 - _start) as usize] = value[5];
                    }
                    if _start <= 1542 && _end > 1542 {
                        _buf[(1542 - _start) as usize] = value[6];
                    }
                    if _start <= 1543 && _end > 1543 {
                        _buf[(1543 - _start) as usize] = value[7];
                    }
                    if _start <= 1544 && _end > 1544 {
                        _buf[(1544 - _start) as usize] = value[8];
                    }
                    if _start <= 1545 && _end > 1545 {
                        _buf[(1545 - _start) as usize] = value[9];
                    }
                    if _start <= 1546 && _end > 1546 {
                        _buf[(1546 - _start) as usize] = value[10];
                    }
                    if _start <= 1547 && _end > 1547 {
                        _buf[(1547 - _start) as usize] = value[11];
                    }
                    if _start <= 1548 && _end > 1548 {
                        _buf[(1548 - _start) as usize] = value[12];
                    }
                    if _start <= 1549 && _end > 1549 {
                        _buf[(1549 - _start) as usize] = value[13];
                    }
                    if _start <= 1550 && _end > 1550 {
                        _buf[(1550 - _start) as usize] = value[14];
                    }
                    if _start <= 1551 && _end > 1551 {
                        _buf[(1551 - _start) as usize] = value[15];
                    }
                    if _start <= 1552 && _end > 1552 {
                        _buf[(1552 - _start) as usize] = value[16];
                    }
                    if _start <= 1553 && _end > 1553 {
                        _buf[(1553 - _start) as usize] = value[17];
                    }
                    if _start <= 1554 && _end > 1554 {
                        _buf[(1554 - _start) as usize] = value[18];
                    }
                    if _start <= 1555 && _end > 1555 {
                        _buf[(1555 - _start) as usize] = value[19];
                    }
                    if _start <= 1556 && _end > 1556 {
                        _buf[(1556 - _start) as usize] = value[20];
                    }
                    if _start <= 1557 && _end > 1557 {
                        _buf[(1557 - _start) as usize] = value[21];
                    }
                    if _start <= 1558 && _end > 1558 {
                        _buf[(1558 - _start) as usize] = value[22];
                    }
                    if _start <= 1559 && _end > 1559 {
                        _buf[(1559 - _start) as usize] = value[23];
                    }
                    if _start <= 1560 && _end > 1560 {
                        _buf[(1560 - _start) as usize] = value[24];
                    }
                    if _start <= 1561 && _end > 1561 {
                        _buf[(1561 - _start) as usize] = value[25];
                    }
                    if _start <= 1562 && _end > 1562 {
                        _buf[(1562 - _start) as usize] = value[26];
                    }
                    if _start <= 1563 && _end > 1563 {
                        _buf[(1563 - _start) as usize] = value[27];
                    }
                    if _start <= 1564 && _end > 1564 {
                        _buf[(1564 - _start) as usize] = value[28];
                    }
                    if _start <= 1565 && _end > 1565 {
                        _buf[(1565 - _start) as usize] = value[29];
                    }
                    if _start <= 1566 && _end > 1566 {
                        _buf[(1566 - _start) as usize] = value[30];
                    }
                    if _start <= 1567 && _end > 1567 {
                        _buf[(1567 - _start) as usize] = value[31];
                    }
                }
                if _start < 1600 && _end > 1568 {
                    let _dim = ((_start - 1568) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_dapn620_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 1568 && _end > 1568 {
                        _buf[(1568 - _start) as usize] = value[0];
                    }
                    if _start <= 1569 && _end > 1569 {
                        _buf[(1569 - _start) as usize] = value[1];
                    }
                    if _start <= 1570 && _end > 1570 {
                        _buf[(1570 - _start) as usize] = value[2];
                    }
                    if _start <= 1571 && _end > 1571 {
                        _buf[(1571 - _start) as usize] = value[3];
                    }
                    if _start <= 1572 && _end > 1572 {
                        _buf[(1572 - _start) as usize] = value[4];
                    }
                    if _start <= 1573 && _end > 1573 {
                        _buf[(1573 - _start) as usize] = value[5];
                    }
                    if _start <= 1574 && _end > 1574 {
                        _buf[(1574 - _start) as usize] = value[6];
                    }
                    if _start <= 1575 && _end > 1575 {
                        _buf[(1575 - _start) as usize] = value[7];
                    }
                    if _start <= 1576 && _end > 1576 {
                        _buf[(1576 - _start) as usize] = value[8];
                    }
                    if _start <= 1577 && _end > 1577 {
                        _buf[(1577 - _start) as usize] = value[9];
                    }
                    if _start <= 1578 && _end > 1578 {
                        _buf[(1578 - _start) as usize] = value[10];
                    }
                    if _start <= 1579 && _end > 1579 {
                        _buf[(1579 - _start) as usize] = value[11];
                    }
                    if _start <= 1580 && _end > 1580 {
                        _buf[(1580 - _start) as usize] = value[12];
                    }
                    if _start <= 1581 && _end > 1581 {
                        _buf[(1581 - _start) as usize] = value[13];
                    }
                    if _start <= 1582 && _end > 1582 {
                        _buf[(1582 - _start) as usize] = value[14];
                    }
                    if _start <= 1583 && _end > 1583 {
                        _buf[(1583 - _start) as usize] = value[15];
                    }
                    if _start <= 1584 && _end > 1584 {
                        _buf[(1584 - _start) as usize] = value[16];
                    }
                    if _start <= 1585 && _end > 1585 {
                        _buf[(1585 - _start) as usize] = value[17];
                    }
                    if _start <= 1586 && _end > 1586 {
                        _buf[(1586 - _start) as usize] = value[18];
                    }
                    if _start <= 1587 && _end > 1587 {
                        _buf[(1587 - _start) as usize] = value[19];
                    }
                    if _start <= 1588 && _end > 1588 {
                        _buf[(1588 - _start) as usize] = value[20];
                    }
                    if _start <= 1589 && _end > 1589 {
                        _buf[(1589 - _start) as usize] = value[21];
                    }
                    if _start <= 1590 && _end > 1590 {
                        _buf[(1590 - _start) as usize] = value[22];
                    }
                    if _start <= 1591 && _end > 1591 {
                        _buf[(1591 - _start) as usize] = value[23];
                    }
                    if _start <= 1592 && _end > 1592 {
                        _buf[(1592 - _start) as usize] = value[24];
                    }
                    if _start <= 1593 && _end > 1593 {
                        _buf[(1593 - _start) as usize] = value[25];
                    }
                    if _start <= 1594 && _end > 1594 {
                        _buf[(1594 - _start) as usize] = value[26];
                    }
                    if _start <= 1595 && _end > 1595 {
                        _buf[(1595 - _start) as usize] = value[27];
                    }
                    if _start <= 1596 && _end > 1596 {
                        _buf[(1596 - _start) as usize] = value[28];
                    }
                    if _start <= 1597 && _end > 1597 {
                        _buf[(1597 - _start) as usize] = value[29];
                    }
                    if _start <= 1598 && _end > 1598 {
                        _buf[(1598 - _start) as usize] = value[30];
                    }
                    if _start <= 1599 && _end > 1599 {
                        _buf[(1599 - _start) as usize] = value[31];
                    }
                }
                if _start < 1604 && _end > 1600 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_dacnf640_read()?
                        .to_ne_bytes();
                    if _start <= 1600 && _end > 1600 {
                        _buf[(1600 - _start) as usize] = value[0];
                    }
                    if _start <= 1601 && _end > 1601 {
                        _buf[(1601 - _start) as usize] = value[1];
                    }
                    if _start <= 1602 && _end > 1602 {
                        _buf[(1602 - _start) as usize] = value[2];
                    }
                    if _start <= 1603 && _end > 1603 {
                        _buf[(1603 - _start) as usize] = value[3];
                    }
                }
            }
            (1616..=1619, 1617..=1620) => {
                if _start < 1620 && _end > 1616 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_modecnf0650_read()?
                        .to_ne_bytes();
                    if _start <= 1616 && _end > 1616 {
                        _buf[(1616 - _start) as usize] = value[0];
                    }
                    if _start <= 1617 && _end > 1617 {
                        _buf[(1617 - _start) as usize] = value[1];
                    }
                    if _start <= 1618 && _end > 1618 {
                        _buf[(1618 - _start) as usize] = value[2];
                    }
                    if _start <= 1619 && _end > 1619 {
                        _buf[(1619 - _start) as usize] = value[3];
                    }
                }
            }
            (4092..=4095, 4093..=4096) => {
                if _start < 4096 && _end > 4092 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .radio_powerffc_read()?
                        .to_ne_bytes();
                    if _start <= 4092 && _end > 4092 {
                        _buf[(4092 - _start) as usize] = value[0];
                    }
                    if _start <= 4093 && _end > 4093 {
                        _buf[(4093 - _start) as usize] = value[1];
                    }
                    if _start <= 4094 && _end > 4094 {
                        _buf[(4094 - _start) as usize] = value[2];
                    }
                    if _start <= 4095 && _end > 4095 {
                        _buf[(4095 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::radio::Radio::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=35, 1..=36) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_tasks_txen0_write(offset, &_buf[start..end])?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_tasks_rxen4_write(offset, &_buf[start..end])?;
                }
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_tasks_start8_write(offset, &_buf[start..end])?;
                }
                if _start < 16 && _end > 12 {
                    let offset = _start.saturating_sub(12);
                    let start = 12u64.saturating_sub(_start) as usize;
                    let end = ((_end - 12) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_tasks_stopc_write(offset, &_buf[start..end])?;
                }
                if _start < 20 && _end > 16 {
                    let offset = _start.saturating_sub(16);
                    let start = 16u64.saturating_sub(_start) as usize;
                    let end = ((_end - 16) - offset) as usize;
                    self.0.lock().unwrap().radio_tasks_disable10_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 24 && _end > 20 {
                    let offset = _start.saturating_sub(20);
                    let start = 20u64.saturating_sub(_start) as usize;
                    let end = ((_end - 20) - offset) as usize;
                    self.0.lock().unwrap().radio_tasks_rssistart14_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 28 && _end > 24 {
                    let offset = _start.saturating_sub(24);
                    let start = 24u64.saturating_sub(_start) as usize;
                    let end = ((_end - 24) - offset) as usize;
                    self.0.lock().unwrap().radio_tasks_rssistop18_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 32 && _end > 28 {
                    let offset = _start.saturating_sub(28);
                    let start = 28u64.saturating_sub(_start) as usize;
                    let end = ((_end - 28) - offset) as usize;
                    self.0.lock().unwrap().radio_tasks_bcstart1c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 36 && _end > 32 {
                    let offset = _start.saturating_sub(32);
                    let start = 32u64.saturating_sub(_start) as usize;
                    let end = ((_end - 32) - offset) as usize;
                    self.0.lock().unwrap().radio_tasks_bcstop20_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (256..=287, 257..=288) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().radio_events_ready100_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0.lock().unwrap().radio_events_address104_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 268 && _end > 264 {
                    let offset = _start.saturating_sub(264);
                    let start = 264u64.saturating_sub(_start) as usize;
                    let end = ((_end - 264) - offset) as usize;
                    self.0.lock().unwrap().radio_events_payload108_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 272 && _end > 268 {
                    let offset = _start.saturating_sub(268);
                    let start = 268u64.saturating_sub(_start) as usize;
                    let end = ((_end - 268) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_events_end10c_write(offset, &_buf[start..end])?;
                }
                if _start < 276 && _end > 272 {
                    let offset = _start.saturating_sub(272);
                    let start = 272u64.saturating_sub(_start) as usize;
                    let end = ((_end - 272) - offset) as usize;
                    self.0.lock().unwrap().radio_events_disabled110_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 280 && _end > 276 {
                    let offset = _start.saturating_sub(276);
                    let start = 276u64.saturating_sub(_start) as usize;
                    let end = ((_end - 276) - offset) as usize;
                    self.0.lock().unwrap().radio_events_devmatch114_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 284 && _end > 280 {
                    let offset = _start.saturating_sub(280);
                    let start = 280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 280) - offset) as usize;
                    self.0.lock().unwrap().radio_events_devmiss118_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 288 && _end > 284 {
                    let offset = _start.saturating_sub(284);
                    let start = 284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 284) - offset) as usize;
                    self.0.lock().unwrap().radio_events_rssiend11c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (296..=299, 297..=300) => {
                if _start < 300 && _end > 296 {
                    let offset = _start.saturating_sub(296);
                    let start = 296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 296) - offset) as usize;
                    self.0.lock().unwrap().radio_events_bcmatch128_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (304..=311, 305..=312) => {
                if _start < 308 && _end > 304 {
                    let offset = _start.saturating_sub(304);
                    let start = 304u64.saturating_sub(_start) as usize;
                    let end = ((_end - 304) - offset) as usize;
                    self.0.lock().unwrap().radio_events_crcok130_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 312 && _end > 308 {
                    let offset = _start.saturating_sub(308);
                    let start = 308u64.saturating_sub(_start) as usize;
                    let end = ((_end - 308) - offset) as usize;
                    self.0.lock().unwrap().radio_events_crcerror134_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let offset = _start.saturating_sub(512);
                    let start = 512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 512) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_shorts200_write(offset, &_buf[start..end])?;
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1024..=1027, 1025..=1028) => {
                return Err(MemError::WriteViolation);
            }
            (1032..=1043, 1033..=1044) => {
                return Err(MemError::WriteViolation);
            }
            (1284..=1355, 1285..=1356) => {
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_packetptr504_write(offset, &_buf[start..end])?;
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_frequency508_write(offset, &_buf[start..end])?;
                }
                if _start < 1296 && _end > 1292 {
                    let offset = _start.saturating_sub(1292);
                    let start = 1292u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1292) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_txpower50c_write(offset, &_buf[start..end])?;
                }
                if _start < 1300 && _end > 1296 {
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_mode510_write(offset, &_buf[start..end])?;
                }
                if _start < 1304 && _end > 1300 {
                    let offset = _start.saturating_sub(1300);
                    let start = 1300u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1300) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_pcnf0514_write(offset, &_buf[start..end])?;
                }
                if _start < 1308 && _end > 1304 {
                    let offset = _start.saturating_sub(1304);
                    let start = 1304u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1304) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_pcnf1518_write(offset, &_buf[start..end])?;
                }
                if _start < 1312 && _end > 1308 {
                    let offset = _start.saturating_sub(1308);
                    let start = 1308u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1308) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_base051c_write(offset, &_buf[start..end])?;
                }
                if _start < 1316 && _end > 1312 {
                    let offset = _start.saturating_sub(1312);
                    let start = 1312u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1312) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_base1520_write(offset, &_buf[start..end])?;
                }
                if _start < 1320 && _end > 1316 {
                    let offset = _start.saturating_sub(1316);
                    let start = 1316u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1316) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_prefix0524_write(offset, &_buf[start..end])?;
                }
                if _start < 1324 && _end > 1320 {
                    let offset = _start.saturating_sub(1320);
                    let start = 1320u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1320) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_prefix1528_write(offset, &_buf[start..end])?;
                }
                if _start < 1328 && _end > 1324 {
                    let offset = _start.saturating_sub(1324);
                    let start = 1324u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1324) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_txaddress52c_write(offset, &_buf[start..end])?;
                }
                if _start < 1332 && _end > 1328 {
                    let offset = _start.saturating_sub(1328);
                    let start = 1328u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1328) - offset) as usize;
                    self.0.lock().unwrap().radio_rxaddresses530_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1336 && _end > 1332 {
                    let offset = _start.saturating_sub(1332);
                    let start = 1332u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1332) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_crccnf534_write(offset, &_buf[start..end])?;
                }
                if _start < 1340 && _end > 1336 {
                    let offset = _start.saturating_sub(1336);
                    let start = 1336u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1336) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_crcpoly538_write(offset, &_buf[start..end])?;
                }
                if _start < 1344 && _end > 1340 {
                    let offset = _start.saturating_sub(1340);
                    let start = 1340u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1340) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_crcinit53c_write(offset, &_buf[start..end])?;
                }
                if _start < 1348 && _end > 1344 {
                    let offset = _start.saturating_sub(1344);
                    let start = 1344u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1344) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_unused0540_write(offset, &_buf[start..end])?;
                }
                if _start < 1352 && _end > 1348 {
                    let offset = _start.saturating_sub(1348);
                    let start = 1348u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1348) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_tifs544_write(offset, &_buf[start..end])?;
                }
                if _start < 1356 && _end > 1352 {
                    return Err(MemError::WriteViolation);
                }
            }
            (1360..=1367, 1361..=1368) => {
                if _start < 1364 && _end > 1360 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 1368 && _end > 1364 {
                    let offset = _start.saturating_sub(1364);
                    let start = 1364u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1364) - offset) as usize;
                    self.0.lock().unwrap().radio_datawhiteiv554_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1376..=1379, 1377..=1380) => {
                if _start < 1380 && _end > 1376 {
                    let offset = _start.saturating_sub(1376);
                    let start = 1376u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1376) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_bcc560_write(offset, &_buf[start..end])?;
                }
            }
            (1536..=1603, 1537..=1604) => {
                if _start < 1568 && _end > 1536 {
                    let _dim = ((_start - 1536) % 4) as usize;
                    let offset = _start.saturating_sub(1536);
                    let start = 1536u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1536) - offset) as usize;
                    self.0.lock().unwrap().radio_dabn600_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1600 && _end > 1568 {
                    let _dim = ((_start - 1568) % 4) as usize;
                    let offset = _start.saturating_sub(1568);
                    let start = 1568u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1568) - offset) as usize;
                    self.0.lock().unwrap().radio_dapn620_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1604 && _end > 1600 {
                    let offset = _start.saturating_sub(1600);
                    let start = 1600u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1600) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_dacnf640_write(offset, &_buf[start..end])?;
                }
            }
            (1616..=1619, 1617..=1620) => {
                if _start < 1620 && _end > 1616 {
                    let offset = _start.saturating_sub(1616);
                    let start = 1616u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1616) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_modecnf0650_write(offset, &_buf[start..end])?;
                }
            }
            (4092..=4095, 4093..=4096) => {
                if _start < 4096 && _end > 4092 {
                    let offset = _start.saturating_sub(4092);
                    let start = 4092u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4092) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .radio_powerffc_write(offset, &_buf[start..end])?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Apb2(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Apb2 {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::apb2::Apb2::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=15, 1..=16) => {
                return Err(MemError::ReadViolation);
            }
            (28..=31, 29..=32) => {
                return Err(MemError::ReadViolation);
            }
            (44..=47, 45..=48) => {
                return Err(MemError::ReadViolation);
            }
            (256..=267, 257..=268) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_events_cts100_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_events_ncts104_read()?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 268 && _end > 264 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_events_rxdrdy108_read()?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                }
            }
            (272..=275, 273..=276) => {
                if _start < 276 && _end > 272 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_events_endrx110_read()?
                        .to_ne_bytes();
                    if _start <= 272 && _end > 272 {
                        _buf[(272 - _start) as usize] = value[0];
                    }
                    if _start <= 273 && _end > 273 {
                        _buf[(273 - _start) as usize] = value[1];
                    }
                    if _start <= 274 && _end > 274 {
                        _buf[(274 - _start) as usize] = value[2];
                    }
                    if _start <= 275 && _end > 275 {
                        _buf[(275 - _start) as usize] = value[3];
                    }
                }
            }
            (284..=295, 285..=296) => {
                if _start < 288 && _end > 284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_events_txdrdy11c_read()?
                        .to_ne_bytes();
                    if _start <= 284 && _end > 284 {
                        _buf[(284 - _start) as usize] = value[0];
                    }
                    if _start <= 285 && _end > 285 {
                        _buf[(285 - _start) as usize] = value[1];
                    }
                    if _start <= 286 && _end > 286 {
                        _buf[(286 - _start) as usize] = value[2];
                    }
                    if _start <= 287 && _end > 287 {
                        _buf[(287 - _start) as usize] = value[3];
                    }
                }
                if _start < 292 && _end > 288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_events_endtx120_read()?
                        .to_ne_bytes();
                    if _start <= 288 && _end > 288 {
                        _buf[(288 - _start) as usize] = value[0];
                    }
                    if _start <= 289 && _end > 289 {
                        _buf[(289 - _start) as usize] = value[1];
                    }
                    if _start <= 290 && _end > 290 {
                        _buf[(290 - _start) as usize] = value[2];
                    }
                    if _start <= 291 && _end > 291 {
                        _buf[(291 - _start) as usize] = value[3];
                    }
                }
                if _start < 296 && _end > 292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_events_error124_read()?
                        .to_ne_bytes();
                    if _start <= 292 && _end > 292 {
                        _buf[(292 - _start) as usize] = value[0];
                    }
                    if _start <= 293 && _end > 293 {
                        _buf[(293 - _start) as usize] = value[1];
                    }
                    if _start <= 294 && _end > 294 {
                        _buf[(294 - _start) as usize] = value[2];
                    }
                    if _start <= 295 && _end > 295 {
                        _buf[(295 - _start) as usize] = value[3];
                    }
                }
            }
            (324..=327, 325..=328) => {
                if _start < 328 && _end > 324 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_events_rxto144_read()?
                        .to_ne_bytes();
                    if _start <= 324 && _end > 324 {
                        _buf[(324 - _start) as usize] = value[0];
                    }
                    if _start <= 325 && _end > 325 {
                        _buf[(325 - _start) as usize] = value[1];
                    }
                    if _start <= 326 && _end > 326 {
                        _buf[(326 - _start) as usize] = value[2];
                    }
                    if _start <= 327 && _end > 327 {
                        _buf[(327 - _start) as usize] = value[3];
                    }
                }
            }
            (332..=339, 333..=340) => {
                if _start < 336 && _end > 332 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_events_rxstarted14c_read()?
                        .to_ne_bytes();
                    if _start <= 332 && _end > 332 {
                        _buf[(332 - _start) as usize] = value[0];
                    }
                    if _start <= 333 && _end > 333 {
                        _buf[(333 - _start) as usize] = value[1];
                    }
                    if _start <= 334 && _end > 334 {
                        _buf[(334 - _start) as usize] = value[2];
                    }
                    if _start <= 335 && _end > 335 {
                        _buf[(335 - _start) as usize] = value[3];
                    }
                }
                if _start < 340 && _end > 336 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_events_txstarted150_read()?
                        .to_ne_bytes();
                    if _start <= 336 && _end > 336 {
                        _buf[(336 - _start) as usize] = value[0];
                    }
                    if _start <= 337 && _end > 337 {
                        _buf[(337 - _start) as usize] = value[1];
                    }
                    if _start <= 338 && _end > 338 {
                        _buf[(338 - _start) as usize] = value[2];
                    }
                    if _start <= 339 && _end > 339 {
                        _buf[(339 - _start) as usize] = value[3];
                    }
                }
            }
            (344..=347, 345..=348) => {
                if _start < 348 && _end > 344 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_events_txstopped158_read()?
                        .to_ne_bytes();
                    if _start <= 344 && _end > 344 {
                        _buf[(344 - _start) as usize] = value[0];
                    }
                    if _start <= 345 && _end > 345 {
                        _buf[(345 - _start) as usize] = value[1];
                    }
                    if _start <= 346 && _end > 346 {
                        _buf[(346 - _start) as usize] = value[2];
                    }
                    if _start <= 347 && _end > 347 {
                        _buf[(347 - _start) as usize] = value[3];
                    }
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_shorts200_read()?
                        .to_ne_bytes();
                    if _start <= 512 && _end > 512 {
                        _buf[(512 - _start) as usize] = value[0];
                    }
                    if _start <= 513 && _end > 513 {
                        _buf[(513 - _start) as usize] = value[1];
                    }
                    if _start <= 514 && _end > 514 {
                        _buf[(514 - _start) as usize] = value[2];
                    }
                    if _start <= 515 && _end > 515 {
                        _buf[(515 - _start) as usize] = value[3];
                    }
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_inten300_read()?
                        .to_ne_bytes();
                    if _start <= 768 && _end > 768 {
                        _buf[(768 - _start) as usize] = value[0];
                    }
                    if _start <= 769 && _end > 769 {
                        _buf[(769 - _start) as usize] = value[1];
                    }
                    if _start <= 770 && _end > 770 {
                        _buf[(770 - _start) as usize] = value[2];
                    }
                    if _start <= 771 && _end > 771 {
                        _buf[(771 - _start) as usize] = value[3];
                    }
                }
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1152..=1155, 1153..=1156) => {
                if _start < 1156 && _end > 1152 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_errorsrc480_read()?
                        .to_ne_bytes();
                    if _start <= 1152 && _end > 1152 {
                        _buf[(1152 - _start) as usize] = value[0];
                    }
                    if _start <= 1153 && _end > 1153 {
                        _buf[(1153 - _start) as usize] = value[1];
                    }
                    if _start <= 1154 && _end > 1154 {
                        _buf[(1154 - _start) as usize] = value[2];
                    }
                    if _start <= 1155 && _end > 1155 {
                        _buf[(1155 - _start) as usize] = value[3];
                    }
                }
            }
            (1280..=1283, 1281..=1284) => {
                if _start < 1284 && _end > 1280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_enable500_read()?
                        .to_ne_bytes();
                    if _start <= 1280 && _end > 1280 {
                        _buf[(1280 - _start) as usize] = value[0];
                    }
                    if _start <= 1281 && _end > 1281 {
                        _buf[(1281 - _start) as usize] = value[1];
                    }
                    if _start <= 1282 && _end > 1282 {
                        _buf[(1282 - _start) as usize] = value[2];
                    }
                    if _start <= 1283 && _end > 1283 {
                        _buf[(1283 - _start) as usize] = value[3];
                    }
                }
            }
            (1288..=1311, 1289..=1312) => {
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_psel_rts0_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
                if _start < 1296 && _end > 1292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_psel_txd4_read()?
                        .to_ne_bytes();
                    if _start <= 1292 && _end > 1292 {
                        _buf[(1292 - _start) as usize] = value[0];
                    }
                    if _start <= 1293 && _end > 1293 {
                        _buf[(1293 - _start) as usize] = value[1];
                    }
                    if _start <= 1294 && _end > 1294 {
                        _buf[(1294 - _start) as usize] = value[2];
                    }
                    if _start <= 1295 && _end > 1295 {
                        _buf[(1295 - _start) as usize] = value[3];
                    }
                }
                if _start < 1300 && _end > 1296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_psel_cts8_read()?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
                if _start < 1304 && _end > 1300 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_psel_rxdc_read()?
                        .to_ne_bytes();
                    if _start <= 1300 && _end > 1300 {
                        _buf[(1300 - _start) as usize] = value[0];
                    }
                    if _start <= 1301 && _end > 1301 {
                        _buf[(1301 - _start) as usize] = value[1];
                    }
                    if _start <= 1302 && _end > 1302 {
                        _buf[(1302 - _start) as usize] = value[2];
                    }
                    if _start <= 1303 && _end > 1303 {
                        _buf[(1303 - _start) as usize] = value[3];
                    }
                }
                if _start < 1308 && _end > 1304 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_rxd518_read()?
                        .to_ne_bytes();
                    if _start <= 1304 && _end > 1304 {
                        _buf[(1304 - _start) as usize] = value[0];
                    }
                    if _start <= 1305 && _end > 1305 {
                        _buf[(1305 - _start) as usize] = value[1];
                    }
                    if _start <= 1306 && _end > 1306 {
                        _buf[(1306 - _start) as usize] = value[2];
                    }
                    if _start <= 1307 && _end > 1307 {
                        _buf[(1307 - _start) as usize] = value[3];
                    }
                }
                if _start < 1312 && _end > 1308 {
                    return Err(MemError::ReadViolation);
                }
            }
            (1316..=1319, 1317..=1320) => {
                if _start < 1320 && _end > 1316 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_baudrate524_read()?
                        .to_ne_bytes();
                    if _start <= 1316 && _end > 1316 {
                        _buf[(1316 - _start) as usize] = value[0];
                    }
                    if _start <= 1317 && _end > 1317 {
                        _buf[(1317 - _start) as usize] = value[1];
                    }
                    if _start <= 1318 && _end > 1318 {
                        _buf[(1318 - _start) as usize] = value[2];
                    }
                    if _start <= 1319 && _end > 1319 {
                        _buf[(1319 - _start) as usize] = value[3];
                    }
                }
            }
            (1332..=1343, 1333..=1344) => {
                if _start < 1336 && _end > 1332 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_rxd_ptr0_read()?
                        .to_ne_bytes();
                    if _start <= 1332 && _end > 1332 {
                        _buf[(1332 - _start) as usize] = value[0];
                    }
                    if _start <= 1333 && _end > 1333 {
                        _buf[(1333 - _start) as usize] = value[1];
                    }
                    if _start <= 1334 && _end > 1334 {
                        _buf[(1334 - _start) as usize] = value[2];
                    }
                    if _start <= 1335 && _end > 1335 {
                        _buf[(1335 - _start) as usize] = value[3];
                    }
                }
                if _start < 1340 && _end > 1336 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_rxd_maxcnt4_read()?
                        .to_ne_bytes();
                    if _start <= 1336 && _end > 1336 {
                        _buf[(1336 - _start) as usize] = value[0];
                    }
                    if _start <= 1337 && _end > 1337 {
                        _buf[(1337 - _start) as usize] = value[1];
                    }
                    if _start <= 1338 && _end > 1338 {
                        _buf[(1338 - _start) as usize] = value[2];
                    }
                    if _start <= 1339 && _end > 1339 {
                        _buf[(1339 - _start) as usize] = value[3];
                    }
                }
                if _start < 1344 && _end > 1340 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_rxd_amount8_read()?
                        .to_ne_bytes();
                    if _start <= 1340 && _end > 1340 {
                        _buf[(1340 - _start) as usize] = value[0];
                    }
                    if _start <= 1341 && _end > 1341 {
                        _buf[(1341 - _start) as usize] = value[1];
                    }
                    if _start <= 1342 && _end > 1342 {
                        _buf[(1342 - _start) as usize] = value[2];
                    }
                    if _start <= 1343 && _end > 1343 {
                        _buf[(1343 - _start) as usize] = value[3];
                    }
                }
            }
            (1348..=1359, 1349..=1360) => {
                if _start < 1352 && _end > 1348 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_txd_ptr0_read()?
                        .to_ne_bytes();
                    if _start <= 1348 && _end > 1348 {
                        _buf[(1348 - _start) as usize] = value[0];
                    }
                    if _start <= 1349 && _end > 1349 {
                        _buf[(1349 - _start) as usize] = value[1];
                    }
                    if _start <= 1350 && _end > 1350 {
                        _buf[(1350 - _start) as usize] = value[2];
                    }
                    if _start <= 1351 && _end > 1351 {
                        _buf[(1351 - _start) as usize] = value[3];
                    }
                }
                if _start < 1356 && _end > 1352 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_txd_maxcnt4_read()?
                        .to_ne_bytes();
                    if _start <= 1352 && _end > 1352 {
                        _buf[(1352 - _start) as usize] = value[0];
                    }
                    if _start <= 1353 && _end > 1353 {
                        _buf[(1353 - _start) as usize] = value[1];
                    }
                    if _start <= 1354 && _end > 1354 {
                        _buf[(1354 - _start) as usize] = value[2];
                    }
                    if _start <= 1355 && _end > 1355 {
                        _buf[(1355 - _start) as usize] = value[3];
                    }
                }
                if _start < 1360 && _end > 1356 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_txd_amount8_read()?
                        .to_ne_bytes();
                    if _start <= 1356 && _end > 1356 {
                        _buf[(1356 - _start) as usize] = value[0];
                    }
                    if _start <= 1357 && _end > 1357 {
                        _buf[(1357 - _start) as usize] = value[1];
                    }
                    if _start <= 1358 && _end > 1358 {
                        _buf[(1358 - _start) as usize] = value[2];
                    }
                    if _start <= 1359 && _end > 1359 {
                        _buf[(1359 - _start) as usize] = value[3];
                    }
                }
            }
            (1388..=1391, 1389..=1392) => {
                if _start < 1392 && _end > 1388 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb2_config56c_read()?
                        .to_ne_bytes();
                    if _start <= 1388 && _end > 1388 {
                        _buf[(1388 - _start) as usize] = value[0];
                    }
                    if _start <= 1389 && _end > 1389 {
                        _buf[(1389 - _start) as usize] = value[1];
                    }
                    if _start <= 1390 && _end > 1390 {
                        _buf[(1390 - _start) as usize] = value[2];
                    }
                    if _start <= 1391 && _end > 1391 {
                        _buf[(1391 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::apb2::Apb2::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=15, 1..=16) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_tasks_startrx0_write(offset, &_buf[start..end])?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_tasks_stoprx4_write(offset, &_buf[start..end])?;
                }
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_tasks_starttx8_write(offset, &_buf[start..end])?;
                }
                if _start < 16 && _end > 12 {
                    let offset = _start.saturating_sub(12);
                    let start = 12u64.saturating_sub(_start) as usize;
                    let end = ((_end - 12) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_tasks_stoptxc_write(offset, &_buf[start..end])?;
                }
            }
            (28..=31, 29..=32) => {
                if _start < 32 && _end > 28 {
                    let offset = _start.saturating_sub(28);
                    let start = 28u64.saturating_sub(_start) as usize;
                    let end = ((_end - 28) - offset) as usize;
                    self.0.lock().unwrap().apb2_tasks_suspend1c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (44..=47, 45..=48) => {
                if _start < 48 && _end > 44 {
                    let offset = _start.saturating_sub(44);
                    let start = 44u64.saturating_sub(_start) as usize;
                    let end = ((_end - 44) - offset) as usize;
                    self.0.lock().unwrap().apb2_tasks_flushrx2c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (256..=267, 257..=268) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_events_cts100_write(offset, &_buf[start..end])?;
                }
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_events_ncts104_write(offset, &_buf[start..end])?;
                }
                if _start < 268 && _end > 264 {
                    let offset = _start.saturating_sub(264);
                    let start = 264u64.saturating_sub(_start) as usize;
                    let end = ((_end - 264) - offset) as usize;
                    self.0.lock().unwrap().apb2_events_rxdrdy108_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (272..=275, 273..=276) => {
                if _start < 276 && _end > 272 {
                    let offset = _start.saturating_sub(272);
                    let start = 272u64.saturating_sub(_start) as usize;
                    let end = ((_end - 272) - offset) as usize;
                    self.0.lock().unwrap().apb2_events_endrx110_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (284..=295, 285..=296) => {
                if _start < 288 && _end > 284 {
                    let offset = _start.saturating_sub(284);
                    let start = 284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 284) - offset) as usize;
                    self.0.lock().unwrap().apb2_events_txdrdy11c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 292 && _end > 288 {
                    let offset = _start.saturating_sub(288);
                    let start = 288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 288) - offset) as usize;
                    self.0.lock().unwrap().apb2_events_endtx120_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 296 && _end > 292 {
                    let offset = _start.saturating_sub(292);
                    let start = 292u64.saturating_sub(_start) as usize;
                    let end = ((_end - 292) - offset) as usize;
                    self.0.lock().unwrap().apb2_events_error124_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (324..=327, 325..=328) => {
                if _start < 328 && _end > 324 {
                    let offset = _start.saturating_sub(324);
                    let start = 324u64.saturating_sub(_start) as usize;
                    let end = ((_end - 324) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_events_rxto144_write(offset, &_buf[start..end])?;
                }
            }
            (332..=339, 333..=340) => {
                if _start < 336 && _end > 332 {
                    let offset = _start.saturating_sub(332);
                    let start = 332u64.saturating_sub(_start) as usize;
                    let end = ((_end - 332) - offset) as usize;
                    self.0.lock().unwrap().apb2_events_rxstarted14c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 340 && _end > 336 {
                    let offset = _start.saturating_sub(336);
                    let start = 336u64.saturating_sub(_start) as usize;
                    let end = ((_end - 336) - offset) as usize;
                    self.0.lock().unwrap().apb2_events_txstarted150_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (344..=347, 345..=348) => {
                if _start < 348 && _end > 344 {
                    let offset = _start.saturating_sub(344);
                    let start = 344u64.saturating_sub(_start) as usize;
                    let end = ((_end - 344) - offset) as usize;
                    self.0.lock().unwrap().apb2_events_txstopped158_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let offset = _start.saturating_sub(512);
                    let start = 512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 512) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_shorts200_write(offset, &_buf[start..end])?;
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let offset = _start.saturating_sub(768);
                    let start = 768u64.saturating_sub(_start) as usize;
                    let end = ((_end - 768) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_inten300_write(offset, &_buf[start..end])?;
                }
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1152..=1155, 1153..=1156) => {
                if _start < 1156 && _end > 1152 {
                    let offset = _start.saturating_sub(1152);
                    let start = 1152u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1152) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_errorsrc480_write(offset, &_buf[start..end])?;
                }
            }
            (1280..=1283, 1281..=1284) => {
                if _start < 1284 && _end > 1280 {
                    let offset = _start.saturating_sub(1280);
                    let start = 1280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1280) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_enable500_write(offset, &_buf[start..end])?;
                }
            }
            (1288..=1311, 1289..=1312) => {
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_psel_rts0_write(offset, &_buf[start..end])?;
                }
                if _start < 1296 && _end > 1292 {
                    let offset = _start.saturating_sub(1292);
                    let start = 1292u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1292) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_psel_txd4_write(offset, &_buf[start..end])?;
                }
                if _start < 1300 && _end > 1296 {
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_psel_cts8_write(offset, &_buf[start..end])?;
                }
                if _start < 1304 && _end > 1300 {
                    let offset = _start.saturating_sub(1300);
                    let start = 1300u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1300) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_psel_rxdc_write(offset, &_buf[start..end])?;
                }
                if _start < 1308 && _end > 1304 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 1312 && _end > 1308 {
                    let offset = _start.saturating_sub(1308);
                    let start = 1308u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1308) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_txd51c_write(offset, &_buf[start..end])?;
                }
            }
            (1316..=1319, 1317..=1320) => {
                if _start < 1320 && _end > 1316 {
                    let offset = _start.saturating_sub(1316);
                    let start = 1316u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1316) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_baudrate524_write(offset, &_buf[start..end])?;
                }
            }
            (1332..=1343, 1333..=1344) => {
                if _start < 1336 && _end > 1332 {
                    let offset = _start.saturating_sub(1332);
                    let start = 1332u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1332) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_rxd_ptr0_write(offset, &_buf[start..end])?;
                }
                if _start < 1340 && _end > 1336 {
                    let offset = _start.saturating_sub(1336);
                    let start = 1336u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1336) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_rxd_maxcnt4_write(offset, &_buf[start..end])?;
                }
                if _start < 1344 && _end > 1340 {
                    return Err(MemError::WriteViolation);
                }
            }
            (1348..=1359, 1349..=1360) => {
                if _start < 1352 && _end > 1348 {
                    let offset = _start.saturating_sub(1348);
                    let start = 1348u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1348) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_txd_ptr0_write(offset, &_buf[start..end])?;
                }
                if _start < 1356 && _end > 1352 {
                    let offset = _start.saturating_sub(1352);
                    let start = 1352u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1352) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_txd_maxcnt4_write(offset, &_buf[start..end])?;
                }
                if _start < 1360 && _end > 1356 {
                    return Err(MemError::WriteViolation);
                }
            }
            (1388..=1391, 1389..=1392) => {
                if _start < 1392 && _end > 1388 {
                    let offset = _start.saturating_sub(1388);
                    let start = 1388u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1388) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb2_config56c_write(offset, &_buf[start..end])?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Apb3(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Apb3 {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::apb3::Apb3::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=3, 1..=4) => {
                return Err(MemError::ReadViolation);
            }
            (8..=11, 9..=12) => {
                return Err(MemError::ReadViolation);
            }
            (16..=23, 17..=24) => {
                return Err(MemError::ReadViolation);
            }
            (28..=43, 29..=44) => {
                return Err(MemError::ReadViolation);
            }
            (48..=55, 49..=56) => {
                return Err(MemError::ReadViolation);
            }
            (260..=267, 261..=268) => {
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_stopped104_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 268 && _end > 264 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_ready108_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                }
            }
            (272..=275, 273..=276) => {
                if _start < 276 && _end > 272 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_endrx110_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 272 && _end > 272 {
                        _buf[(272 - _start) as usize] = value[0];
                    }
                    if _start <= 273 && _end > 273 {
                        _buf[(273 - _start) as usize] = value[1];
                    }
                    if _start <= 274 && _end > 274 {
                        _buf[(274 - _start) as usize] = value[2];
                    }
                    if _start <= 275 && _end > 275 {
                        _buf[(275 - _start) as usize] = value[3];
                    }
                }
            }
            (280..=299, 281..=300) => {
                if _start < 284 && _end > 280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_end118_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 280 && _end > 280 {
                        _buf[(280 - _start) as usize] = value[0];
                    }
                    if _start <= 281 && _end > 281 {
                        _buf[(281 - _start) as usize] = value[1];
                    }
                    if _start <= 282 && _end > 282 {
                        _buf[(282 - _start) as usize] = value[2];
                    }
                    if _start <= 283 && _end > 283 {
                        _buf[(283 - _start) as usize] = value[3];
                    }
                }
                if _start < 288 && _end > 284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_txdsent11c_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 284 && _end > 284 {
                        _buf[(284 - _start) as usize] = value[0];
                    }
                    if _start <= 285 && _end > 285 {
                        _buf[(285 - _start) as usize] = value[1];
                    }
                    if _start <= 286 && _end > 286 {
                        _buf[(286 - _start) as usize] = value[2];
                    }
                    if _start <= 287 && _end > 287 {
                        _buf[(287 - _start) as usize] = value[3];
                    }
                }
                if _start < 292 && _end > 288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_endtx120_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 288 && _end > 288 {
                        _buf[(288 - _start) as usize] = value[0];
                    }
                    if _start <= 289 && _end > 289 {
                        _buf[(289 - _start) as usize] = value[1];
                    }
                    if _start <= 290 && _end > 290 {
                        _buf[(290 - _start) as usize] = value[2];
                    }
                    if _start <= 291 && _end > 291 {
                        _buf[(291 - _start) as usize] = value[3];
                    }
                }
                if _start < 296 && _end > 292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_error124_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 292 && _end > 292 {
                        _buf[(292 - _start) as usize] = value[0];
                    }
                    if _start <= 293 && _end > 293 {
                        _buf[(293 - _start) as usize] = value[1];
                    }
                    if _start <= 294 && _end > 294 {
                        _buf[(294 - _start) as usize] = value[2];
                    }
                    if _start <= 295 && _end > 295 {
                        _buf[(295 - _start) as usize] = value[3];
                    }
                }
                if _start < 300 && _end > 296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_acquired128_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 296 && _end > 296 {
                        _buf[(296 - _start) as usize] = value[0];
                    }
                    if _start <= 297 && _end > 297 {
                        _buf[(297 - _start) as usize] = value[1];
                    }
                    if _start <= 298 && _end > 298 {
                        _buf[(298 - _start) as usize] = value[2];
                    }
                    if _start <= 299 && _end > 299 {
                        _buf[(299 - _start) as usize] = value[3];
                    }
                }
            }
            (312..=315, 313..=316) => {
                if _start < 316 && _end > 312 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_bb138_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 312 && _end > 312 {
                        _buf[(312 - _start) as usize] = value[0];
                    }
                    if _start <= 313 && _end > 313 {
                        _buf[(313 - _start) as usize] = value[1];
                    }
                    if _start <= 314 && _end > 314 {
                        _buf[(314 - _start) as usize] = value[2];
                    }
                    if _start <= 315 && _end > 315 {
                        _buf[(315 - _start) as usize] = value[3];
                    }
                }
            }
            (328..=339, 329..=340) => {
                if _start < 332 && _end > 328 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_suspended148_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 328 && _end > 328 {
                        _buf[(328 - _start) as usize] = value[0];
                    }
                    if _start <= 329 && _end > 329 {
                        _buf[(329 - _start) as usize] = value[1];
                    }
                    if _start <= 330 && _end > 330 {
                        _buf[(330 - _start) as usize] = value[2];
                    }
                    if _start <= 331 && _end > 331 {
                        _buf[(331 - _start) as usize] = value[3];
                    }
                }
                if _start < 336 && _end > 332 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_started14c_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 332 && _end > 332 {
                        _buf[(332 - _start) as usize] = value[0];
                    }
                    if _start <= 333 && _end > 333 {
                        _buf[(333 - _start) as usize] = value[1];
                    }
                    if _start <= 334 && _end > 334 {
                        _buf[(334 - _start) as usize] = value[2];
                    }
                    if _start <= 335 && _end > 335 {
                        _buf[(335 - _start) as usize] = value[3];
                    }
                }
                if _start < 340 && _end > 336 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_txstarted150_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 336 && _end > 336 {
                        _buf[(336 - _start) as usize] = value[0];
                    }
                    if _start <= 337 && _end > 337 {
                        _buf[(337 - _start) as usize] = value[1];
                    }
                    if _start <= 338 && _end > 338 {
                        _buf[(338 - _start) as usize] = value[2];
                    }
                    if _start <= 339 && _end > 339 {
                        _buf[(339 - _start) as usize] = value[3];
                    }
                }
            }
            (348..=363, 349..=364) => {
                if _start < 352 && _end > 348 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_lastrx15c_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 348 && _end > 348 {
                        _buf[(348 - _start) as usize] = value[0];
                    }
                    if _start <= 349 && _end > 349 {
                        _buf[(349 - _start) as usize] = value[1];
                    }
                    if _start <= 350 && _end > 350 {
                        _buf[(350 - _start) as usize] = value[2];
                    }
                    if _start <= 351 && _end > 351 {
                        _buf[(351 - _start) as usize] = value[3];
                    }
                }
                if _start < 356 && _end > 352 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_lasttx160_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 352 && _end > 352 {
                        _buf[(352 - _start) as usize] = value[0];
                    }
                    if _start <= 353 && _end > 353 {
                        _buf[(353 - _start) as usize] = value[1];
                    }
                    if _start <= 354 && _end > 354 {
                        _buf[(354 - _start) as usize] = value[2];
                    }
                    if _start <= 355 && _end > 355 {
                        _buf[(355 - _start) as usize] = value[3];
                    }
                }
                if _start < 360 && _end > 356 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_write164_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 356 && _end > 356 {
                        _buf[(356 - _start) as usize] = value[0];
                    }
                    if _start <= 357 && _end > 357 {
                        _buf[(357 - _start) as usize] = value[1];
                    }
                    if _start <= 358 && _end > 358 {
                        _buf[(358 - _start) as usize] = value[2];
                    }
                    if _start <= 359 && _end > 359 {
                        _buf[(359 - _start) as usize] = value[3];
                    }
                }
                if _start < 364 && _end > 360 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_events_read168_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 360 && _end > 360 {
                        _buf[(360 - _start) as usize] = value[0];
                    }
                    if _start <= 361 && _end > 361 {
                        _buf[(361 - _start) as usize] = value[1];
                    }
                    if _start <= 362 && _end > 362 {
                        _buf[(362 - _start) as usize] = value[2];
                    }
                    if _start <= 363 && _end > 363 {
                        _buf[(363 - _start) as usize] = value[3];
                    }
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_shorts200_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 512 && _end > 512 {
                        _buf[(512 - _start) as usize] = value[0];
                    }
                    if _start <= 513 && _end > 513 {
                        _buf[(513 - _start) as usize] = value[1];
                    }
                    if _start <= 514 && _end > 514 {
                        _buf[(514 - _start) as usize] = value[2];
                    }
                    if _start <= 515 && _end > 515 {
                        _buf[(515 - _start) as usize] = value[3];
                    }
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_inten300_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 768 && _end > 768 {
                        _buf[(768 - _start) as usize] = value[0];
                    }
                    if _start <= 769 && _end > 769 {
                        _buf[(769 - _start) as usize] = value[1];
                    }
                    if _start <= 770 && _end > 770 {
                        _buf[(770 - _start) as usize] = value[2];
                    }
                    if _start <= 771 && _end > 771 {
                        _buf[(771 - _start) as usize] = value[3];
                    }
                }
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_intenset304_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_intenclr308_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1024..=1027, 1025..=1028) => {
                if _start < 1028 && _end > 1024 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_semstat400_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1024 && _end > 1024 {
                        _buf[(1024 - _start) as usize] = value[0];
                    }
                    if _start <= 1025 && _end > 1025 {
                        _buf[(1025 - _start) as usize] = value[1];
                    }
                    if _start <= 1026 && _end > 1026 {
                        _buf[(1026 - _start) as usize] = value[2];
                    }
                    if _start <= 1027 && _end > 1027 {
                        _buf[(1027 - _start) as usize] = value[3];
                    }
                }
            }
            (1088..=1091, 1089..=1092) => {
                if _start < 1092 && _end > 1088 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_status440_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1088 && _end > 1088 {
                        _buf[(1088 - _start) as usize] = value[0];
                    }
                    if _start <= 1089 && _end > 1089 {
                        _buf[(1089 - _start) as usize] = value[1];
                    }
                    if _start <= 1090 && _end > 1090 {
                        _buf[(1090 - _start) as usize] = value[2];
                    }
                    if _start <= 1091 && _end > 1091 {
                        _buf[(1091 - _start) as usize] = value[3];
                    }
                }
            }
            (1220..=1223, 1221..=1224) => {
                if _start < 1224 && _end > 1220 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_errorsrc4c4_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1220 && _end > 1220 {
                        _buf[(1220 - _start) as usize] = value[0];
                    }
                    if _start <= 1221 && _end > 1221 {
                        _buf[(1221 - _start) as usize] = value[1];
                    }
                    if _start <= 1222 && _end > 1222 {
                        _buf[(1222 - _start) as usize] = value[2];
                    }
                    if _start <= 1223 && _end > 1223 {
                        _buf[(1223 - _start) as usize] = value[3];
                    }
                }
            }
            (1232..=1239, 1233..=1240) => {
                if _start < 1236 && _end > 1232 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_errorsrc4d0_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1232 && _end > 1232 {
                        _buf[(1232 - _start) as usize] = value[0];
                    }
                    if _start <= 1233 && _end > 1233 {
                        _buf[(1233 - _start) as usize] = value[1];
                    }
                    if _start <= 1234 && _end > 1234 {
                        _buf[(1234 - _start) as usize] = value[2];
                    }
                    if _start <= 1235 && _end > 1235 {
                        _buf[(1235 - _start) as usize] = value[3];
                    }
                }
                if _start < 1240 && _end > 1236 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_match4d4_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1236 && _end > 1236 {
                        _buf[(1236 - _start) as usize] = value[0];
                    }
                    if _start <= 1237 && _end > 1237 {
                        _buf[(1237 - _start) as usize] = value[1];
                    }
                    if _start <= 1238 && _end > 1238 {
                        _buf[(1238 - _start) as usize] = value[2];
                    }
                    if _start <= 1239 && _end > 1239 {
                        _buf[(1239 - _start) as usize] = value[3];
                    }
                }
            }
            (1280..=1283, 1281..=1284) => {
                if _start < 1284 && _end > 1280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_enable500_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1280 && _end > 1280 {
                        _buf[(1280 - _start) as usize] = value[0];
                    }
                    if _start <= 1281 && _end > 1281 {
                        _buf[(1281 - _start) as usize] = value[1];
                    }
                    if _start <= 1282 && _end > 1282 {
                        _buf[(1282 - _start) as usize] = value[2];
                    }
                    if _start <= 1283 && _end > 1283 {
                        _buf[(1283 - _start) as usize] = value[3];
                    }
                }
            }
            (1288..=1311, 1289..=1312) => {
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_psel_sck0_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
                if _start < 1296 && _end > 1292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_psel_miso4_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1292 && _end > 1292 {
                        _buf[(1292 - _start) as usize] = value[0];
                    }
                    if _start <= 1293 && _end > 1293 {
                        _buf[(1293 - _start) as usize] = value[1];
                    }
                    if _start <= 1294 && _end > 1294 {
                        _buf[(1294 - _start) as usize] = value[2];
                    }
                    if _start <= 1295 && _end > 1295 {
                        _buf[(1295 - _start) as usize] = value[3];
                    }
                }
                if _start < 1300 && _end > 1296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_psel_mosi8_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
                if _start < 1304 && _end > 1300 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_psel_csnc_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1300 && _end > 1300 {
                        _buf[(1300 - _start) as usize] = value[0];
                    }
                    if _start <= 1301 && _end > 1301 {
                        _buf[(1301 - _start) as usize] = value[1];
                    }
                    if _start <= 1302 && _end > 1302 {
                        _buf[(1302 - _start) as usize] = value[2];
                    }
                    if _start <= 1303 && _end > 1303 {
                        _buf[(1303 - _start) as usize] = value[3];
                    }
                }
                if _start < 1308 && _end > 1304 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_rxd518_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1304 && _end > 1304 {
                        _buf[(1304 - _start) as usize] = value[0];
                    }
                    if _start <= 1305 && _end > 1305 {
                        _buf[(1305 - _start) as usize] = value[1];
                    }
                    if _start <= 1306 && _end > 1306 {
                        _buf[(1306 - _start) as usize] = value[2];
                    }
                    if _start <= 1307 && _end > 1307 {
                        _buf[(1307 - _start) as usize] = value[3];
                    }
                }
                if _start < 1312 && _end > 1308 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_txd51c_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1308 && _end > 1308 {
                        _buf[(1308 - _start) as usize] = value[0];
                    }
                    if _start <= 1309 && _end > 1309 {
                        _buf[(1309 - _start) as usize] = value[1];
                    }
                    if _start <= 1310 && _end > 1310 {
                        _buf[(1310 - _start) as usize] = value[2];
                    }
                    if _start <= 1311 && _end > 1311 {
                        _buf[(1311 - _start) as usize] = value[3];
                    }
                }
            }
            (1316..=1319, 1317..=1320) => {
                if _start < 1320 && _end > 1316 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_frequency524_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1316 && _end > 1316 {
                        _buf[(1316 - _start) as usize] = value[0];
                    }
                    if _start <= 1317 && _end > 1317 {
                        _buf[(1317 - _start) as usize] = value[1];
                    }
                    if _start <= 1318 && _end > 1318 {
                        _buf[(1318 - _start) as usize] = value[2];
                    }
                    if _start <= 1319 && _end > 1319 {
                        _buf[(1319 - _start) as usize] = value[3];
                    }
                }
            }
            (1332..=1367, 1333..=1368) => {
                if _start < 1336 && _end > 1332 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_rxd_ptr0_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1332 && _end > 1332 {
                        _buf[(1332 - _start) as usize] = value[0];
                    }
                    if _start <= 1333 && _end > 1333 {
                        _buf[(1333 - _start) as usize] = value[1];
                    }
                    if _start <= 1334 && _end > 1334 {
                        _buf[(1334 - _start) as usize] = value[2];
                    }
                    if _start <= 1335 && _end > 1335 {
                        _buf[(1335 - _start) as usize] = value[3];
                    }
                }
                if _start < 1340 && _end > 1336 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_rxd_maxcnt4_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1336 && _end > 1336 {
                        _buf[(1336 - _start) as usize] = value[0];
                    }
                    if _start <= 1337 && _end > 1337 {
                        _buf[(1337 - _start) as usize] = value[1];
                    }
                    if _start <= 1338 && _end > 1338 {
                        _buf[(1338 - _start) as usize] = value[2];
                    }
                    if _start <= 1339 && _end > 1339 {
                        _buf[(1339 - _start) as usize] = value[3];
                    }
                }
                if _start < 1344 && _end > 1340 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_rxd_amount8_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1340 && _end > 1340 {
                        _buf[(1340 - _start) as usize] = value[0];
                    }
                    if _start <= 1341 && _end > 1341 {
                        _buf[(1341 - _start) as usize] = value[1];
                    }
                    if _start <= 1342 && _end > 1342 {
                        _buf[(1342 - _start) as usize] = value[2];
                    }
                    if _start <= 1343 && _end > 1343 {
                        _buf[(1343 - _start) as usize] = value[3];
                    }
                }
                if _start < 1348 && _end > 1344 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_rxd_listc_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1344 && _end > 1344 {
                        _buf[(1344 - _start) as usize] = value[0];
                    }
                    if _start <= 1345 && _end > 1345 {
                        _buf[(1345 - _start) as usize] = value[1];
                    }
                    if _start <= 1346 && _end > 1346 {
                        _buf[(1346 - _start) as usize] = value[2];
                    }
                    if _start <= 1347 && _end > 1347 {
                        _buf[(1347 - _start) as usize] = value[3];
                    }
                }
                if _start < 1352 && _end > 1348 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_txd_ptr0_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1348 && _end > 1348 {
                        _buf[(1348 - _start) as usize] = value[0];
                    }
                    if _start <= 1349 && _end > 1349 {
                        _buf[(1349 - _start) as usize] = value[1];
                    }
                    if _start <= 1350 && _end > 1350 {
                        _buf[(1350 - _start) as usize] = value[2];
                    }
                    if _start <= 1351 && _end > 1351 {
                        _buf[(1351 - _start) as usize] = value[3];
                    }
                }
                if _start < 1356 && _end > 1352 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_txd_maxcnt4_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1352 && _end > 1352 {
                        _buf[(1352 - _start) as usize] = value[0];
                    }
                    if _start <= 1353 && _end > 1353 {
                        _buf[(1353 - _start) as usize] = value[1];
                    }
                    if _start <= 1354 && _end > 1354 {
                        _buf[(1354 - _start) as usize] = value[2];
                    }
                    if _start <= 1355 && _end > 1355 {
                        _buf[(1355 - _start) as usize] = value[3];
                    }
                }
                if _start < 1360 && _end > 1356 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_txd_amount8_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1356 && _end > 1356 {
                        _buf[(1356 - _start) as usize] = value[0];
                    }
                    if _start <= 1357 && _end > 1357 {
                        _buf[(1357 - _start) as usize] = value[1];
                    }
                    if _start <= 1358 && _end > 1358 {
                        _buf[(1358 - _start) as usize] = value[2];
                    }
                    if _start <= 1359 && _end > 1359 {
                        _buf[(1359 - _start) as usize] = value[3];
                    }
                }
                if _start < 1364 && _end > 1360 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_txd_listc_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1360 && _end > 1360 {
                        _buf[(1360 - _start) as usize] = value[0];
                    }
                    if _start <= 1361 && _end > 1361 {
                        _buf[(1361 - _start) as usize] = value[1];
                    }
                    if _start <= 1362 && _end > 1362 {
                        _buf[(1362 - _start) as usize] = value[2];
                    }
                    if _start <= 1363 && _end > 1363 {
                        _buf[(1363 - _start) as usize] = value[3];
                    }
                }
                if _start < 1368 && _end > 1364 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_config554_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1364 && _end > 1364 {
                        _buf[(1364 - _start) as usize] = value[0];
                    }
                    if _start <= 1365 && _end > 1365 {
                        _buf[(1365 - _start) as usize] = value[1];
                    }
                    if _start <= 1366 && _end > 1366 {
                        _buf[(1366 - _start) as usize] = value[2];
                    }
                    if _start <= 1367 && _end > 1367 {
                        _buf[(1367 - _start) as usize] = value[3];
                    }
                }
            }
            (1372..=1375, 1373..=1376) => {
                if _start < 1376 && _end > 1372 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_def55c_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1372 && _end > 1372 {
                        _buf[(1372 - _start) as usize] = value[0];
                    }
                    if _start <= 1373 && _end > 1373 {
                        _buf[(1373 - _start) as usize] = value[1];
                    }
                    if _start <= 1374 && _end > 1374 {
                        _buf[(1374 - _start) as usize] = value[2];
                    }
                    if _start <= 1375 && _end > 1375 {
                        _buf[(1375 - _start) as usize] = value[3];
                    }
                }
            }
            (1416..=1423, 1417..=1424) => {
                if _start < 1424 && _end > 1416 {
                    let _dim = ((_start - 1416) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_addressn588_read(_instance_page, _dim)?
                        .to_ne_bytes();
                    if _start <= 1416 && _end > 1416 {
                        _buf[(1416 - _start) as usize] = value[0];
                    }
                    if _start <= 1417 && _end > 1417 {
                        _buf[(1417 - _start) as usize] = value[1];
                    }
                    if _start <= 1418 && _end > 1418 {
                        _buf[(1418 - _start) as usize] = value[2];
                    }
                    if _start <= 1419 && _end > 1419 {
                        _buf[(1419 - _start) as usize] = value[3];
                    }
                    if _start <= 1420 && _end > 1420 {
                        _buf[(1420 - _start) as usize] = value[4];
                    }
                    if _start <= 1421 && _end > 1421 {
                        _buf[(1421 - _start) as usize] = value[5];
                    }
                    if _start <= 1422 && _end > 1422 {
                        _buf[(1422 - _start) as usize] = value[6];
                    }
                    if _start <= 1423 && _end > 1423 {
                        _buf[(1423 - _start) as usize] = value[7];
                    }
                }
            }
            (1428..=1431, 1429..=1432) => {
                if _start < 1432 && _end > 1428 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_config594_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1428 && _end > 1428 {
                        _buf[(1428 - _start) as usize] = value[0];
                    }
                    if _start <= 1429 && _end > 1429 {
                        _buf[(1429 - _start) as usize] = value[1];
                    }
                    if _start <= 1430 && _end > 1430 {
                        _buf[(1430 - _start) as usize] = value[2];
                    }
                    if _start <= 1431 && _end > 1431 {
                        _buf[(1431 - _start) as usize] = value[3];
                    }
                }
            }
            (1472..=1475, 1473..=1476) => {
                if _start < 1476 && _end > 1472 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb3_orc5c0_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1472 && _end > 1472 {
                        _buf[(1472 - _start) as usize] = value[0];
                    }
                    if _start <= 1473 && _end > 1473 {
                        _buf[(1473 - _start) as usize] = value[1];
                    }
                    if _start <= 1474 && _end > 1474 {
                        _buf[(1474 - _start) as usize] = value[2];
                    }
                    if _start <= 1475 && _end > 1475 {
                        _buf[(1475 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::apb3::Apb3::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=3, 1..=4) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0.lock().unwrap().apb3_tasks_startrx0_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (8..=11, 9..=12) => {
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0.lock().unwrap().apb3_tasks_starttx8_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (16..=23, 17..=24) => {
                if _start < 20 && _end > 16 {
                    let offset = _start.saturating_sub(16);
                    let start = 16u64.saturating_sub(_start) as usize;
                    let end = ((_end - 16) - offset) as usize;
                    self.0.lock().unwrap().apb3_tasks_start10_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 24 && _end > 20 {
                    let offset = _start.saturating_sub(20);
                    let start = 20u64.saturating_sub(_start) as usize;
                    let end = ((_end - 20) - offset) as usize;
                    self.0.lock().unwrap().apb3_tasks_stop14_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (28..=43, 29..=44) => {
                if _start < 32 && _end > 28 {
                    let offset = _start.saturating_sub(28);
                    let start = 28u64.saturating_sub(_start) as usize;
                    let end = ((_end - 28) - offset) as usize;
                    self.0.lock().unwrap().apb3_tasks_suspend1c_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 36 && _end > 32 {
                    let offset = _start.saturating_sub(32);
                    let start = 32u64.saturating_sub(_start) as usize;
                    let end = ((_end - 32) - offset) as usize;
                    self.0.lock().unwrap().apb3_tasks_resume20_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 40 && _end > 36 {
                    let offset = _start.saturating_sub(36);
                    let start = 36u64.saturating_sub(_start) as usize;
                    let end = ((_end - 36) - offset) as usize;
                    self.0.lock().unwrap().apb3_tasks_acquire24_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 44 && _end > 40 {
                    let offset = _start.saturating_sub(40);
                    let start = 40u64.saturating_sub(_start) as usize;
                    let end = ((_end - 40) - offset) as usize;
                    self.0.lock().unwrap().apb3_tasks_release28_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (48..=55, 49..=56) => {
                if _start < 52 && _end > 48 {
                    let offset = _start.saturating_sub(48);
                    let start = 48u64.saturating_sub(_start) as usize;
                    let end = ((_end - 48) - offset) as usize;
                    self.0.lock().unwrap().apb3_tasks_preparerx30_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 56 && _end > 52 {
                    let offset = _start.saturating_sub(52);
                    let start = 52u64.saturating_sub(_start) as usize;
                    let end = ((_end - 52) - offset) as usize;
                    self.0.lock().unwrap().apb3_tasks_preparetx34_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (260..=267, 261..=268) => {
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_stopped104_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 268 && _end > 264 {
                    let offset = _start.saturating_sub(264);
                    let start = 264u64.saturating_sub(_start) as usize;
                    let end = ((_end - 264) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_ready108_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (272..=275, 273..=276) => {
                if _start < 276 && _end > 272 {
                    let offset = _start.saturating_sub(272);
                    let start = 272u64.saturating_sub(_start) as usize;
                    let end = ((_end - 272) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_endrx110_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (280..=299, 281..=300) => {
                if _start < 284 && _end > 280 {
                    let offset = _start.saturating_sub(280);
                    let start = 280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 280) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_end118_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 288 && _end > 284 {
                    let offset = _start.saturating_sub(284);
                    let start = 284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 284) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_txdsent11c_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 292 && _end > 288 {
                    let offset = _start.saturating_sub(288);
                    let start = 288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 288) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_endtx120_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 296 && _end > 292 {
                    let offset = _start.saturating_sub(292);
                    let start = 292u64.saturating_sub(_start) as usize;
                    let end = ((_end - 292) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_error124_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 300 && _end > 296 {
                    let offset = _start.saturating_sub(296);
                    let start = 296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 296) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_acquired128_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (312..=315, 313..=316) => {
                if _start < 316 && _end > 312 {
                    let offset = _start.saturating_sub(312);
                    let start = 312u64.saturating_sub(_start) as usize;
                    let end = ((_end - 312) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_bb138_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (328..=339, 329..=340) => {
                if _start < 332 && _end > 328 {
                    let offset = _start.saturating_sub(328);
                    let start = 328u64.saturating_sub(_start) as usize;
                    let end = ((_end - 328) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_suspended148_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 336 && _end > 332 {
                    let offset = _start.saturating_sub(332);
                    let start = 332u64.saturating_sub(_start) as usize;
                    let end = ((_end - 332) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_started14c_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 340 && _end > 336 {
                    let offset = _start.saturating_sub(336);
                    let start = 336u64.saturating_sub(_start) as usize;
                    let end = ((_end - 336) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_txstarted150_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (348..=363, 349..=364) => {
                if _start < 352 && _end > 348 {
                    let offset = _start.saturating_sub(348);
                    let start = 348u64.saturating_sub(_start) as usize;
                    let end = ((_end - 348) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_lastrx15c_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 356 && _end > 352 {
                    let offset = _start.saturating_sub(352);
                    let start = 352u64.saturating_sub(_start) as usize;
                    let end = ((_end - 352) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_lasttx160_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 360 && _end > 356 {
                    let offset = _start.saturating_sub(356);
                    let start = 356u64.saturating_sub(_start) as usize;
                    let end = ((_end - 356) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_write164_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 364 && _end > 360 {
                    let offset = _start.saturating_sub(360);
                    let start = 360u64.saturating_sub(_start) as usize;
                    let end = ((_end - 360) - offset) as usize;
                    self.0.lock().unwrap().apb3_events_read168_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let offset = _start.saturating_sub(512);
                    let start = 512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 512) - offset) as usize;
                    self.0.lock().unwrap().apb3_shorts200_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let offset = _start.saturating_sub(768);
                    let start = 768u64.saturating_sub(_start) as usize;
                    let end = ((_end - 768) - offset) as usize;
                    self.0.lock().unwrap().apb3_inten300_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0.lock().unwrap().apb3_intenset304_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0.lock().unwrap().apb3_intenclr308_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1024..=1027, 1025..=1028) => {
                return Err(MemError::WriteViolation);
            }
            (1088..=1091, 1089..=1092) => {
                if _start < 1092 && _end > 1088 {
                    let offset = _start.saturating_sub(1088);
                    let start = 1088u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1088) - offset) as usize;
                    self.0.lock().unwrap().apb3_status440_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1220..=1223, 1221..=1224) => {
                if _start < 1224 && _end > 1220 {
                    let offset = _start.saturating_sub(1220);
                    let start = 1220u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1220) - offset) as usize;
                    self.0.lock().unwrap().apb3_errorsrc4c4_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1232..=1239, 1233..=1240) => {
                if _start < 1236 && _end > 1232 {
                    let offset = _start.saturating_sub(1232);
                    let start = 1232u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1232) - offset) as usize;
                    self.0.lock().unwrap().apb3_errorsrc4d0_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1240 && _end > 1236 {
                    return Err(MemError::WriteViolation);
                }
            }
            (1280..=1283, 1281..=1284) => {
                if _start < 1284 && _end > 1280 {
                    let offset = _start.saturating_sub(1280);
                    let start = 1280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1280) - offset) as usize;
                    self.0.lock().unwrap().apb3_enable500_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1288..=1311, 1289..=1312) => {
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0.lock().unwrap().apb3_psel_sck0_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1296 && _end > 1292 {
                    let offset = _start.saturating_sub(1292);
                    let start = 1292u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1292) - offset) as usize;
                    self.0.lock().unwrap().apb3_psel_miso4_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1300 && _end > 1296 {
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0.lock().unwrap().apb3_psel_mosi8_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1304 && _end > 1300 {
                    let offset = _start.saturating_sub(1300);
                    let start = 1300u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1300) - offset) as usize;
                    self.0.lock().unwrap().apb3_psel_csnc_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1308 && _end > 1304 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 1312 && _end > 1308 {
                    let offset = _start.saturating_sub(1308);
                    let start = 1308u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1308) - offset) as usize;
                    self.0.lock().unwrap().apb3_txd51c_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1316..=1319, 1317..=1320) => {
                if _start < 1320 && _end > 1316 {
                    let offset = _start.saturating_sub(1316);
                    let start = 1316u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1316) - offset) as usize;
                    self.0.lock().unwrap().apb3_frequency524_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1332..=1367, 1333..=1368) => {
                if _start < 1336 && _end > 1332 {
                    let offset = _start.saturating_sub(1332);
                    let start = 1332u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1332) - offset) as usize;
                    self.0.lock().unwrap().apb3_rxd_ptr0_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1340 && _end > 1336 {
                    let offset = _start.saturating_sub(1336);
                    let start = 1336u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1336) - offset) as usize;
                    self.0.lock().unwrap().apb3_rxd_maxcnt4_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1344 && _end > 1340 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 1348 && _end > 1344 {
                    let offset = _start.saturating_sub(1344);
                    let start = 1344u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1344) - offset) as usize;
                    self.0.lock().unwrap().apb3_rxd_listc_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1352 && _end > 1348 {
                    let offset = _start.saturating_sub(1348);
                    let start = 1348u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1348) - offset) as usize;
                    self.0.lock().unwrap().apb3_txd_ptr0_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1356 && _end > 1352 {
                    let offset = _start.saturating_sub(1352);
                    let start = 1352u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1352) - offset) as usize;
                    self.0.lock().unwrap().apb3_txd_maxcnt4_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1360 && _end > 1356 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 1364 && _end > 1360 {
                    let offset = _start.saturating_sub(1360);
                    let start = 1360u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1360) - offset) as usize;
                    self.0.lock().unwrap().apb3_txd_listc_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1368 && _end > 1364 {
                    let offset = _start.saturating_sub(1364);
                    let start = 1364u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1364) - offset) as usize;
                    self.0.lock().unwrap().apb3_config554_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1372..=1375, 1373..=1376) => {
                if _start < 1376 && _end > 1372 {
                    let offset = _start.saturating_sub(1372);
                    let start = 1372u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1372) - offset) as usize;
                    self.0.lock().unwrap().apb3_def55c_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1416..=1423, 1417..=1424) => {
                if _start < 1424 && _end > 1416 {
                    let _dim = ((_start - 1416) % 4) as usize;
                    let offset = _start.saturating_sub(1416);
                    let start = 1416u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1416) - offset) as usize;
                    self.0.lock().unwrap().apb3_addressn588_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1428..=1431, 1429..=1432) => {
                if _start < 1432 && _end > 1428 {
                    let offset = _start.saturating_sub(1428);
                    let start = 1428u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1428) - offset) as usize;
                    self.0.lock().unwrap().apb3_config594_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1472..=1475, 1473..=1476) => {
                if _start < 1476 && _end > 1472 {
                    let offset = _start.saturating_sub(1472);
                    let start = 1472u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1472) - offset) as usize;
                    self.0.lock().unwrap().apb3_orc5c0_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Nfct(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Nfct {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::nfct::Nfct::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=15, 1..=16) => {
                return Err(MemError::ReadViolation);
            }
            (28..=31, 29..=32) => {
                return Err(MemError::ReadViolation);
            }
            (36..=43, 37..=44) => {
                return Err(MemError::ReadViolation);
            }
            (256..=287, 257..=288) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_ready100_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_fielddetected104_read()?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 268 && _end > 264 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_fieldlost108_read()?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                }
                if _start < 272 && _end > 268 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_txframestart10c_read()?
                        .to_ne_bytes();
                    if _start <= 268 && _end > 268 {
                        _buf[(268 - _start) as usize] = value[0];
                    }
                    if _start <= 269 && _end > 269 {
                        _buf[(269 - _start) as usize] = value[1];
                    }
                    if _start <= 270 && _end > 270 {
                        _buf[(270 - _start) as usize] = value[2];
                    }
                    if _start <= 271 && _end > 271 {
                        _buf[(271 - _start) as usize] = value[3];
                    }
                }
                if _start < 276 && _end > 272 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_txframeend110_read()?
                        .to_ne_bytes();
                    if _start <= 272 && _end > 272 {
                        _buf[(272 - _start) as usize] = value[0];
                    }
                    if _start <= 273 && _end > 273 {
                        _buf[(273 - _start) as usize] = value[1];
                    }
                    if _start <= 274 && _end > 274 {
                        _buf[(274 - _start) as usize] = value[2];
                    }
                    if _start <= 275 && _end > 275 {
                        _buf[(275 - _start) as usize] = value[3];
                    }
                }
                if _start < 280 && _end > 276 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_rxframestart114_read()?
                        .to_ne_bytes();
                    if _start <= 276 && _end > 276 {
                        _buf[(276 - _start) as usize] = value[0];
                    }
                    if _start <= 277 && _end > 277 {
                        _buf[(277 - _start) as usize] = value[1];
                    }
                    if _start <= 278 && _end > 278 {
                        _buf[(278 - _start) as usize] = value[2];
                    }
                    if _start <= 279 && _end > 279 {
                        _buf[(279 - _start) as usize] = value[3];
                    }
                }
                if _start < 284 && _end > 280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_rxframeend118_read()?
                        .to_ne_bytes();
                    if _start <= 280 && _end > 280 {
                        _buf[(280 - _start) as usize] = value[0];
                    }
                    if _start <= 281 && _end > 281 {
                        _buf[(281 - _start) as usize] = value[1];
                    }
                    if _start <= 282 && _end > 282 {
                        _buf[(282 - _start) as usize] = value[2];
                    }
                    if _start <= 283 && _end > 283 {
                        _buf[(283 - _start) as usize] = value[3];
                    }
                }
                if _start < 288 && _end > 284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_error11c_read()?
                        .to_ne_bytes();
                    if _start <= 284 && _end > 284 {
                        _buf[(284 - _start) as usize] = value[0];
                    }
                    if _start <= 285 && _end > 285 {
                        _buf[(285 - _start) as usize] = value[1];
                    }
                    if _start <= 286 && _end > 286 {
                        _buf[(286 - _start) as usize] = value[2];
                    }
                    if _start <= 287 && _end > 287 {
                        _buf[(287 - _start) as usize] = value[3];
                    }
                }
            }
            (296..=307, 297..=308) => {
                if _start < 300 && _end > 296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_rxerror128_read()?
                        .to_ne_bytes();
                    if _start <= 296 && _end > 296 {
                        _buf[(296 - _start) as usize] = value[0];
                    }
                    if _start <= 297 && _end > 297 {
                        _buf[(297 - _start) as usize] = value[1];
                    }
                    if _start <= 298 && _end > 298 {
                        _buf[(298 - _start) as usize] = value[2];
                    }
                    if _start <= 299 && _end > 299 {
                        _buf[(299 - _start) as usize] = value[3];
                    }
                }
                if _start < 304 && _end > 300 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_endrx12c_read()?
                        .to_ne_bytes();
                    if _start <= 300 && _end > 300 {
                        _buf[(300 - _start) as usize] = value[0];
                    }
                    if _start <= 301 && _end > 301 {
                        _buf[(301 - _start) as usize] = value[1];
                    }
                    if _start <= 302 && _end > 302 {
                        _buf[(302 - _start) as usize] = value[2];
                    }
                    if _start <= 303 && _end > 303 {
                        _buf[(303 - _start) as usize] = value[3];
                    }
                }
                if _start < 308 && _end > 304 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_endtx130_read()?
                        .to_ne_bytes();
                    if _start <= 304 && _end > 304 {
                        _buf[(304 - _start) as usize] = value[0];
                    }
                    if _start <= 305 && _end > 305 {
                        _buf[(305 - _start) as usize] = value[1];
                    }
                    if _start <= 306 && _end > 306 {
                        _buf[(306 - _start) as usize] = value[2];
                    }
                    if _start <= 307 && _end > 307 {
                        _buf[(307 - _start) as usize] = value[3];
                    }
                }
            }
            (312..=315, 313..=316) => {
                if _start < 316 && _end > 312 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_autocolresstarted138_read()?
                        .to_ne_bytes();
                    if _start <= 312 && _end > 312 {
                        _buf[(312 - _start) as usize] = value[0];
                    }
                    if _start <= 313 && _end > 313 {
                        _buf[(313 - _start) as usize] = value[1];
                    }
                    if _start <= 314 && _end > 314 {
                        _buf[(314 - _start) as usize] = value[2];
                    }
                    if _start <= 315 && _end > 315 {
                        _buf[(315 - _start) as usize] = value[3];
                    }
                }
            }
            (328..=339, 329..=340) => {
                if _start < 332 && _end > 328 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_collision148_read()?
                        .to_ne_bytes();
                    if _start <= 328 && _end > 328 {
                        _buf[(328 - _start) as usize] = value[0];
                    }
                    if _start <= 329 && _end > 329 {
                        _buf[(329 - _start) as usize] = value[1];
                    }
                    if _start <= 330 && _end > 330 {
                        _buf[(330 - _start) as usize] = value[2];
                    }
                    if _start <= 331 && _end > 331 {
                        _buf[(331 - _start) as usize] = value[3];
                    }
                }
                if _start < 336 && _end > 332 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_selected14c_read()?
                        .to_ne_bytes();
                    if _start <= 332 && _end > 332 {
                        _buf[(332 - _start) as usize] = value[0];
                    }
                    if _start <= 333 && _end > 333 {
                        _buf[(333 - _start) as usize] = value[1];
                    }
                    if _start <= 334 && _end > 334 {
                        _buf[(334 - _start) as usize] = value[2];
                    }
                    if _start <= 335 && _end > 335 {
                        _buf[(335 - _start) as usize] = value[3];
                    }
                }
                if _start < 340 && _end > 336 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_events_started150_read()?
                        .to_ne_bytes();
                    if _start <= 336 && _end > 336 {
                        _buf[(336 - _start) as usize] = value[0];
                    }
                    if _start <= 337 && _end > 337 {
                        _buf[(337 - _start) as usize] = value[1];
                    }
                    if _start <= 338 && _end > 338 {
                        _buf[(338 - _start) as usize] = value[2];
                    }
                    if _start <= 339 && _end > 339 {
                        _buf[(339 - _start) as usize] = value[3];
                    }
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_shorts200_read()?
                        .to_ne_bytes();
                    if _start <= 512 && _end > 512 {
                        _buf[(512 - _start) as usize] = value[0];
                    }
                    if _start <= 513 && _end > 513 {
                        _buf[(513 - _start) as usize] = value[1];
                    }
                    if _start <= 514 && _end > 514 {
                        _buf[(514 - _start) as usize] = value[2];
                    }
                    if _start <= 515 && _end > 515 {
                        _buf[(515 - _start) as usize] = value[3];
                    }
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_inten300_read()?
                        .to_ne_bytes();
                    if _start <= 768 && _end > 768 {
                        _buf[(768 - _start) as usize] = value[0];
                    }
                    if _start <= 769 && _end > 769 {
                        _buf[(769 - _start) as usize] = value[1];
                    }
                    if _start <= 770 && _end > 770 {
                        _buf[(770 - _start) as usize] = value[2];
                    }
                    if _start <= 771 && _end > 771 {
                        _buf[(771 - _start) as usize] = value[3];
                    }
                }
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1028..=1031, 1029..=1032) => {
                if _start < 1032 && _end > 1028 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_errorstatus404_read()?
                        .to_ne_bytes();
                    if _start <= 1028 && _end > 1028 {
                        _buf[(1028 - _start) as usize] = value[0];
                    }
                    if _start <= 1029 && _end > 1029 {
                        _buf[(1029 - _start) as usize] = value[1];
                    }
                    if _start <= 1030 && _end > 1030 {
                        _buf[(1030 - _start) as usize] = value[2];
                    }
                    if _start <= 1031 && _end > 1031 {
                        _buf[(1031 - _start) as usize] = value[3];
                    }
                }
            }
            (1036..=1039, 1037..=1040) => {
                if _start < 1040 && _end > 1036 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_framestatus_rx0_read()?
                        .to_ne_bytes();
                    if _start <= 1036 && _end > 1036 {
                        _buf[(1036 - _start) as usize] = value[0];
                    }
                    if _start <= 1037 && _end > 1037 {
                        _buf[(1037 - _start) as usize] = value[1];
                    }
                    if _start <= 1038 && _end > 1038 {
                        _buf[(1038 - _start) as usize] = value[2];
                    }
                    if _start <= 1039 && _end > 1039 {
                        _buf[(1039 - _start) as usize] = value[3];
                    }
                }
            }
            (1072..=1075, 1073..=1076) => {
                if _start < 1076 && _end > 1072 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_currentloadctrl430_read()?
                        .to_ne_bytes();
                    if _start <= 1072 && _end > 1072 {
                        _buf[(1072 - _start) as usize] = value[0];
                    }
                    if _start <= 1073 && _end > 1073 {
                        _buf[(1073 - _start) as usize] = value[1];
                    }
                    if _start <= 1074 && _end > 1074 {
                        _buf[(1074 - _start) as usize] = value[2];
                    }
                    if _start <= 1075 && _end > 1075 {
                        _buf[(1075 - _start) as usize] = value[3];
                    }
                }
            }
            (1084..=1087, 1085..=1088) => {
                if _start < 1088 && _end > 1084 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_fieldpresent43c_read()?
                        .to_ne_bytes();
                    if _start <= 1084 && _end > 1084 {
                        _buf[(1084 - _start) as usize] = value[0];
                    }
                    if _start <= 1085 && _end > 1085 {
                        _buf[(1085 - _start) as usize] = value[1];
                    }
                    if _start <= 1086 && _end > 1086 {
                        _buf[(1086 - _start) as usize] = value[2];
                    }
                    if _start <= 1087 && _end > 1087 {
                        _buf[(1087 - _start) as usize] = value[3];
                    }
                }
            }
            (1284..=1319, 1285..=1320) => {
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_framedelaymin504_read()?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_framedelaymax508_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
                if _start < 1296 && _end > 1292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_framedelaymode50c_read()?
                        .to_ne_bytes();
                    if _start <= 1292 && _end > 1292 {
                        _buf[(1292 - _start) as usize] = value[0];
                    }
                    if _start <= 1293 && _end > 1293 {
                        _buf[(1293 - _start) as usize] = value[1];
                    }
                    if _start <= 1294 && _end > 1294 {
                        _buf[(1294 - _start) as usize] = value[2];
                    }
                    if _start <= 1295 && _end > 1295 {
                        _buf[(1295 - _start) as usize] = value[3];
                    }
                }
                if _start < 1300 && _end > 1296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_packetptr510_read()?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
                if _start < 1304 && _end > 1300 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_maxlen514_read()?
                        .to_ne_bytes();
                    if _start <= 1300 && _end > 1300 {
                        _buf[(1300 - _start) as usize] = value[0];
                    }
                    if _start <= 1301 && _end > 1301 {
                        _buf[(1301 - _start) as usize] = value[1];
                    }
                    if _start <= 1302 && _end > 1302 {
                        _buf[(1302 - _start) as usize] = value[2];
                    }
                    if _start <= 1303 && _end > 1303 {
                        _buf[(1303 - _start) as usize] = value[3];
                    }
                }
                if _start < 1308 && _end > 1304 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_txd_frameconfig0_read()?
                        .to_ne_bytes();
                    if _start <= 1304 && _end > 1304 {
                        _buf[(1304 - _start) as usize] = value[0];
                    }
                    if _start <= 1305 && _end > 1305 {
                        _buf[(1305 - _start) as usize] = value[1];
                    }
                    if _start <= 1306 && _end > 1306 {
                        _buf[(1306 - _start) as usize] = value[2];
                    }
                    if _start <= 1307 && _end > 1307 {
                        _buf[(1307 - _start) as usize] = value[3];
                    }
                }
                if _start < 1312 && _end > 1308 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_txd_amount4_read()?
                        .to_ne_bytes();
                    if _start <= 1308 && _end > 1308 {
                        _buf[(1308 - _start) as usize] = value[0];
                    }
                    if _start <= 1309 && _end > 1309 {
                        _buf[(1309 - _start) as usize] = value[1];
                    }
                    if _start <= 1310 && _end > 1310 {
                        _buf[(1310 - _start) as usize] = value[2];
                    }
                    if _start <= 1311 && _end > 1311 {
                        _buf[(1311 - _start) as usize] = value[3];
                    }
                }
                if _start < 1316 && _end > 1312 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_rxd_frameconfig0_read()?
                        .to_ne_bytes();
                    if _start <= 1312 && _end > 1312 {
                        _buf[(1312 - _start) as usize] = value[0];
                    }
                    if _start <= 1313 && _end > 1313 {
                        _buf[(1313 - _start) as usize] = value[1];
                    }
                    if _start <= 1314 && _end > 1314 {
                        _buf[(1314 - _start) as usize] = value[2];
                    }
                    if _start <= 1315 && _end > 1315 {
                        _buf[(1315 - _start) as usize] = value[3];
                    }
                }
                if _start < 1320 && _end > 1316 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_rxd_amount4_read()?
                        .to_ne_bytes();
                    if _start <= 1316 && _end > 1316 {
                        _buf[(1316 - _start) as usize] = value[0];
                    }
                    if _start <= 1317 && _end > 1317 {
                        _buf[(1317 - _start) as usize] = value[1];
                    }
                    if _start <= 1318 && _end > 1318 {
                        _buf[(1318 - _start) as usize] = value[2];
                    }
                    if _start <= 1319 && _end > 1319 {
                        _buf[(1319 - _start) as usize] = value[3];
                    }
                }
            }
            (1424..=1435, 1425..=1436) => {
                if _start < 1428 && _end > 1424 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_nfcid1_last590_read()?
                        .to_ne_bytes();
                    if _start <= 1424 && _end > 1424 {
                        _buf[(1424 - _start) as usize] = value[0];
                    }
                    if _start <= 1425 && _end > 1425 {
                        _buf[(1425 - _start) as usize] = value[1];
                    }
                    if _start <= 1426 && _end > 1426 {
                        _buf[(1426 - _start) as usize] = value[2];
                    }
                    if _start <= 1427 && _end > 1427 {
                        _buf[(1427 - _start) as usize] = value[3];
                    }
                }
                if _start < 1432 && _end > 1428 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_nfcid1_2nd_last594_read()?
                        .to_ne_bytes();
                    if _start <= 1428 && _end > 1428 {
                        _buf[(1428 - _start) as usize] = value[0];
                    }
                    if _start <= 1429 && _end > 1429 {
                        _buf[(1429 - _start) as usize] = value[1];
                    }
                    if _start <= 1430 && _end > 1430 {
                        _buf[(1430 - _start) as usize] = value[2];
                    }
                    if _start <= 1431 && _end > 1431 {
                        _buf[(1431 - _start) as usize] = value[3];
                    }
                }
                if _start < 1436 && _end > 1432 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_nfcid1_3rd_last598_read()?
                        .to_ne_bytes();
                    if _start <= 1432 && _end > 1432 {
                        _buf[(1432 - _start) as usize] = value[0];
                    }
                    if _start <= 1433 && _end > 1433 {
                        _buf[(1433 - _start) as usize] = value[1];
                    }
                    if _start <= 1434 && _end > 1434 {
                        _buf[(1434 - _start) as usize] = value[2];
                    }
                    if _start <= 1435 && _end > 1435 {
                        _buf[(1435 - _start) as usize] = value[3];
                    }
                }
            }
            (1440..=1447, 1441..=1448) => {
                if _start < 1444 && _end > 1440 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_sensres5a0_read()?
                        .to_ne_bytes();
                    if _start <= 1440 && _end > 1440 {
                        _buf[(1440 - _start) as usize] = value[0];
                    }
                    if _start <= 1441 && _end > 1441 {
                        _buf[(1441 - _start) as usize] = value[1];
                    }
                    if _start <= 1442 && _end > 1442 {
                        _buf[(1442 - _start) as usize] = value[2];
                    }
                    if _start <= 1443 && _end > 1443 {
                        _buf[(1443 - _start) as usize] = value[3];
                    }
                }
                if _start < 1448 && _end > 1444 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nfct_selres5a4_read()?
                        .to_ne_bytes();
                    if _start <= 1444 && _end > 1444 {
                        _buf[(1444 - _start) as usize] = value[0];
                    }
                    if _start <= 1445 && _end > 1445 {
                        _buf[(1445 - _start) as usize] = value[1];
                    }
                    if _start <= 1446 && _end > 1446 {
                        _buf[(1446 - _start) as usize] = value[2];
                    }
                    if _start <= 1447 && _end > 1447 {
                        _buf[(1447 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::nfct::Nfct::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=15, 1..=16) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0.lock().unwrap().nfct_tasks_activate0_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_tasks_disable4_write(offset, &_buf[start..end])?;
                }
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_tasks_sense8_write(offset, &_buf[start..end])?;
                }
                if _start < 16 && _end > 12 {
                    let offset = _start.saturating_sub(12);
                    let start = 12u64.saturating_sub(_start) as usize;
                    let end = ((_end - 12) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_tasks_starttxc_write(offset, &_buf[start..end])?;
                }
            }
            (28..=31, 29..=32) => {
                if _start < 32 && _end > 28 {
                    let offset = _start.saturating_sub(28);
                    let start = 28u64.saturating_sub(_start) as usize;
                    let end = ((_end - 28) - offset) as usize;
                    self.0.lock().unwrap().nfct_tasks_enablerxdata1c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (36..=43, 37..=44) => {
                if _start < 40 && _end > 36 {
                    let offset = _start.saturating_sub(36);
                    let start = 36u64.saturating_sub(_start) as usize;
                    let end = ((_end - 36) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_tasks_goidle24_write(offset, &_buf[start..end])?;
                }
                if _start < 44 && _end > 40 {
                    let offset = _start.saturating_sub(40);
                    let start = 40u64.saturating_sub(_start) as usize;
                    let end = ((_end - 40) - offset) as usize;
                    self.0.lock().unwrap().nfct_tasks_gosleep28_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (256..=287, 257..=288) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().nfct_events_ready100_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0.lock().unwrap().nfct_events_fielddetected104_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 268 && _end > 264 {
                    let offset = _start.saturating_sub(264);
                    let start = 264u64.saturating_sub(_start) as usize;
                    let end = ((_end - 264) - offset) as usize;
                    self.0.lock().unwrap().nfct_events_fieldlost108_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 272 && _end > 268 {
                    let offset = _start.saturating_sub(268);
                    let start = 268u64.saturating_sub(_start) as usize;
                    let end = ((_end - 268) - offset) as usize;
                    self.0.lock().unwrap().nfct_events_txframestart10c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 276 && _end > 272 {
                    let offset = _start.saturating_sub(272);
                    let start = 272u64.saturating_sub(_start) as usize;
                    let end = ((_end - 272) - offset) as usize;
                    self.0.lock().unwrap().nfct_events_txframeend110_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 280 && _end > 276 {
                    let offset = _start.saturating_sub(276);
                    let start = 276u64.saturating_sub(_start) as usize;
                    let end = ((_end - 276) - offset) as usize;
                    self.0.lock().unwrap().nfct_events_rxframestart114_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 284 && _end > 280 {
                    let offset = _start.saturating_sub(280);
                    let start = 280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 280) - offset) as usize;
                    self.0.lock().unwrap().nfct_events_rxframeend118_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 288 && _end > 284 {
                    let offset = _start.saturating_sub(284);
                    let start = 284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 284) - offset) as usize;
                    self.0.lock().unwrap().nfct_events_error11c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (296..=307, 297..=308) => {
                if _start < 300 && _end > 296 {
                    let offset = _start.saturating_sub(296);
                    let start = 296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 296) - offset) as usize;
                    self.0.lock().unwrap().nfct_events_rxerror128_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 304 && _end > 300 {
                    let offset = _start.saturating_sub(300);
                    let start = 300u64.saturating_sub(_start) as usize;
                    let end = ((_end - 300) - offset) as usize;
                    self.0.lock().unwrap().nfct_events_endrx12c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 308 && _end > 304 {
                    let offset = _start.saturating_sub(304);
                    let start = 304u64.saturating_sub(_start) as usize;
                    let end = ((_end - 304) - offset) as usize;
                    self.0.lock().unwrap().nfct_events_endtx130_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (312..=315, 313..=316) => {
                if _start < 316 && _end > 312 {
                    let offset = _start.saturating_sub(312);
                    let start = 312u64.saturating_sub(_start) as usize;
                    let end = ((_end - 312) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_events_autocolresstarted138_write(
                            offset,
                            &_buf[start..end],
                        )?;
                }
            }
            (328..=339, 329..=340) => {
                if _start < 332 && _end > 328 {
                    let offset = _start.saturating_sub(328);
                    let start = 328u64.saturating_sub(_start) as usize;
                    let end = ((_end - 328) - offset) as usize;
                    self.0.lock().unwrap().nfct_events_collision148_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 336 && _end > 332 {
                    let offset = _start.saturating_sub(332);
                    let start = 332u64.saturating_sub(_start) as usize;
                    let end = ((_end - 332) - offset) as usize;
                    self.0.lock().unwrap().nfct_events_selected14c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 340 && _end > 336 {
                    let offset = _start.saturating_sub(336);
                    let start = 336u64.saturating_sub(_start) as usize;
                    let end = ((_end - 336) - offset) as usize;
                    self.0.lock().unwrap().nfct_events_started150_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let offset = _start.saturating_sub(512);
                    let start = 512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 512) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_shorts200_write(offset, &_buf[start..end])?;
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let offset = _start.saturating_sub(768);
                    let start = 768u64.saturating_sub(_start) as usize;
                    let end = ((_end - 768) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_inten300_write(offset, &_buf[start..end])?;
                }
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1028..=1031, 1029..=1032) => {
                if _start < 1032 && _end > 1028 {
                    let offset = _start.saturating_sub(1028);
                    let start = 1028u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1028) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_errorstatus404_write(offset, &_buf[start..end])?;
                }
            }
            (1036..=1039, 1037..=1040) => {
                if _start < 1040 && _end > 1036 {
                    let offset = _start.saturating_sub(1036);
                    let start = 1036u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1036) - offset) as usize;
                    self.0.lock().unwrap().nfct_framestatus_rx0_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1072..=1075, 1073..=1076) => {
                return Err(MemError::WriteViolation);
            }
            (1084..=1087, 1085..=1088) => {
                return Err(MemError::WriteViolation);
            }
            (1284..=1319, 1285..=1320) => {
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0.lock().unwrap().nfct_framedelaymin504_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0.lock().unwrap().nfct_framedelaymax508_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1296 && _end > 1292 {
                    let offset = _start.saturating_sub(1292);
                    let start = 1292u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1292) - offset) as usize;
                    self.0.lock().unwrap().nfct_framedelaymode50c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1300 && _end > 1296 {
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_packetptr510_write(offset, &_buf[start..end])?;
                }
                if _start < 1304 && _end > 1300 {
                    let offset = _start.saturating_sub(1300);
                    let start = 1300u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1300) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_maxlen514_write(offset, &_buf[start..end])?;
                }
                if _start < 1308 && _end > 1304 {
                    let offset = _start.saturating_sub(1304);
                    let start = 1304u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1304) - offset) as usize;
                    self.0.lock().unwrap().nfct_txd_frameconfig0_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1312 && _end > 1308 {
                    let offset = _start.saturating_sub(1308);
                    let start = 1308u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1308) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_txd_amount4_write(offset, &_buf[start..end])?;
                }
                if _start < 1316 && _end > 1312 {
                    let offset = _start.saturating_sub(1312);
                    let start = 1312u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1312) - offset) as usize;
                    self.0.lock().unwrap().nfct_rxd_frameconfig0_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1320 && _end > 1316 {
                    return Err(MemError::WriteViolation);
                }
            }
            (1424..=1435, 1425..=1436) => {
                if _start < 1428 && _end > 1424 {
                    let offset = _start.saturating_sub(1424);
                    let start = 1424u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1424) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_nfcid1_last590_write(offset, &_buf[start..end])?;
                }
                if _start < 1432 && _end > 1428 {
                    let offset = _start.saturating_sub(1428);
                    let start = 1428u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1428) - offset) as usize;
                    self.0.lock().unwrap().nfct_nfcid1_2nd_last594_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1436 && _end > 1432 {
                    let offset = _start.saturating_sub(1432);
                    let start = 1432u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1432) - offset) as usize;
                    self.0.lock().unwrap().nfct_nfcid1_3rd_last598_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1440..=1447, 1441..=1448) => {
                if _start < 1444 && _end > 1440 {
                    let offset = _start.saturating_sub(1440);
                    let start = 1440u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1440) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_sensres5a0_write(offset, &_buf[start..end])?;
                }
                if _start < 1448 && _end > 1444 {
                    let offset = _start.saturating_sub(1444);
                    let start = 1444u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1444) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nfct_selres5a4_write(offset, &_buf[start..end])?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Gpiote(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Gpiote {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::p0::P0::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=31, 1..=32) => {
                return Err(MemError::ReadViolation);
            }
            (48..=79, 49..=80) => {
                return Err(MemError::ReadViolation);
            }
            (96..=127, 97..=128) => {
                return Err(MemError::ReadViolation);
            }
            (256..=287, 257..=288) => {
                if _start < 288 && _end > 256 {
                    let _dim = ((_start - 256) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .gpiote_events_inn100_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[4];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[5];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[6];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[7];
                    }
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[8];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[9];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[10];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[11];
                    }
                    if _start <= 268 && _end > 268 {
                        _buf[(268 - _start) as usize] = value[12];
                    }
                    if _start <= 269 && _end > 269 {
                        _buf[(269 - _start) as usize] = value[13];
                    }
                    if _start <= 270 && _end > 270 {
                        _buf[(270 - _start) as usize] = value[14];
                    }
                    if _start <= 271 && _end > 271 {
                        _buf[(271 - _start) as usize] = value[15];
                    }
                    if _start <= 272 && _end > 272 {
                        _buf[(272 - _start) as usize] = value[16];
                    }
                    if _start <= 273 && _end > 273 {
                        _buf[(273 - _start) as usize] = value[17];
                    }
                    if _start <= 274 && _end > 274 {
                        _buf[(274 - _start) as usize] = value[18];
                    }
                    if _start <= 275 && _end > 275 {
                        _buf[(275 - _start) as usize] = value[19];
                    }
                    if _start <= 276 && _end > 276 {
                        _buf[(276 - _start) as usize] = value[20];
                    }
                    if _start <= 277 && _end > 277 {
                        _buf[(277 - _start) as usize] = value[21];
                    }
                    if _start <= 278 && _end > 278 {
                        _buf[(278 - _start) as usize] = value[22];
                    }
                    if _start <= 279 && _end > 279 {
                        _buf[(279 - _start) as usize] = value[23];
                    }
                    if _start <= 280 && _end > 280 {
                        _buf[(280 - _start) as usize] = value[24];
                    }
                    if _start <= 281 && _end > 281 {
                        _buf[(281 - _start) as usize] = value[25];
                    }
                    if _start <= 282 && _end > 282 {
                        _buf[(282 - _start) as usize] = value[26];
                    }
                    if _start <= 283 && _end > 283 {
                        _buf[(283 - _start) as usize] = value[27];
                    }
                    if _start <= 284 && _end > 284 {
                        _buf[(284 - _start) as usize] = value[28];
                    }
                    if _start <= 285 && _end > 285 {
                        _buf[(285 - _start) as usize] = value[29];
                    }
                    if _start <= 286 && _end > 286 {
                        _buf[(286 - _start) as usize] = value[30];
                    }
                    if _start <= 287 && _end > 287 {
                        _buf[(287 - _start) as usize] = value[31];
                    }
                }
            }
            (380..=383, 381..=384) => {
                if _start < 384 && _end > 380 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .gpiote_events_port17c_read()?
                        .to_ne_bytes();
                    if _start <= 380 && _end > 380 {
                        _buf[(380 - _start) as usize] = value[0];
                    }
                    if _start <= 381 && _end > 381 {
                        _buf[(381 - _start) as usize] = value[1];
                    }
                    if _start <= 382 && _end > 382 {
                        _buf[(382 - _start) as usize] = value[2];
                    }
                    if _start <= 383 && _end > 383 {
                        _buf[(383 - _start) as usize] = value[3];
                    }
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .gpiote_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .gpiote_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1296..=1327, 1297..=1328) => {
                if _start < 1328 && _end > 1296 {
                    let _dim = ((_start - 1296) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .gpiote_confign510_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                    if _start <= 1300 && _end > 1300 {
                        _buf[(1300 - _start) as usize] = value[4];
                    }
                    if _start <= 1301 && _end > 1301 {
                        _buf[(1301 - _start) as usize] = value[5];
                    }
                    if _start <= 1302 && _end > 1302 {
                        _buf[(1302 - _start) as usize] = value[6];
                    }
                    if _start <= 1303 && _end > 1303 {
                        _buf[(1303 - _start) as usize] = value[7];
                    }
                    if _start <= 1304 && _end > 1304 {
                        _buf[(1304 - _start) as usize] = value[8];
                    }
                    if _start <= 1305 && _end > 1305 {
                        _buf[(1305 - _start) as usize] = value[9];
                    }
                    if _start <= 1306 && _end > 1306 {
                        _buf[(1306 - _start) as usize] = value[10];
                    }
                    if _start <= 1307 && _end > 1307 {
                        _buf[(1307 - _start) as usize] = value[11];
                    }
                    if _start <= 1308 && _end > 1308 {
                        _buf[(1308 - _start) as usize] = value[12];
                    }
                    if _start <= 1309 && _end > 1309 {
                        _buf[(1309 - _start) as usize] = value[13];
                    }
                    if _start <= 1310 && _end > 1310 {
                        _buf[(1310 - _start) as usize] = value[14];
                    }
                    if _start <= 1311 && _end > 1311 {
                        _buf[(1311 - _start) as usize] = value[15];
                    }
                    if _start <= 1312 && _end > 1312 {
                        _buf[(1312 - _start) as usize] = value[16];
                    }
                    if _start <= 1313 && _end > 1313 {
                        _buf[(1313 - _start) as usize] = value[17];
                    }
                    if _start <= 1314 && _end > 1314 {
                        _buf[(1314 - _start) as usize] = value[18];
                    }
                    if _start <= 1315 && _end > 1315 {
                        _buf[(1315 - _start) as usize] = value[19];
                    }
                    if _start <= 1316 && _end > 1316 {
                        _buf[(1316 - _start) as usize] = value[20];
                    }
                    if _start <= 1317 && _end > 1317 {
                        _buf[(1317 - _start) as usize] = value[21];
                    }
                    if _start <= 1318 && _end > 1318 {
                        _buf[(1318 - _start) as usize] = value[22];
                    }
                    if _start <= 1319 && _end > 1319 {
                        _buf[(1319 - _start) as usize] = value[23];
                    }
                    if _start <= 1320 && _end > 1320 {
                        _buf[(1320 - _start) as usize] = value[24];
                    }
                    if _start <= 1321 && _end > 1321 {
                        _buf[(1321 - _start) as usize] = value[25];
                    }
                    if _start <= 1322 && _end > 1322 {
                        _buf[(1322 - _start) as usize] = value[26];
                    }
                    if _start <= 1323 && _end > 1323 {
                        _buf[(1323 - _start) as usize] = value[27];
                    }
                    if _start <= 1324 && _end > 1324 {
                        _buf[(1324 - _start) as usize] = value[28];
                    }
                    if _start <= 1325 && _end > 1325 {
                        _buf[(1325 - _start) as usize] = value[29];
                    }
                    if _start <= 1326 && _end > 1326 {
                        _buf[(1326 - _start) as usize] = value[30];
                    }
                    if _start <= 1327 && _end > 1327 {
                        _buf[(1327 - _start) as usize] = value[31];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::p0::P0::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=31, 1..=32) => {
                if _start < 32 && _end > 0 {
                    let _dim = ((_start - 0) % 4) as usize;
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0.lock().unwrap().gpiote_tasks_outn0_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (48..=79, 49..=80) => {
                if _start < 80 && _end > 48 {
                    let _dim = ((_start - 48) % 4) as usize;
                    let offset = _start.saturating_sub(48);
                    let start = 48u64.saturating_sub(_start) as usize;
                    let end = ((_end - 48) - offset) as usize;
                    self.0.lock().unwrap().gpiote_tasks_setn30_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (96..=127, 97..=128) => {
                if _start < 128 && _end > 96 {
                    let _dim = ((_start - 96) % 4) as usize;
                    let offset = _start.saturating_sub(96);
                    let start = 96u64.saturating_sub(_start) as usize;
                    let end = ((_end - 96) - offset) as usize;
                    self.0.lock().unwrap().gpiote_tasks_clrn60_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (256..=287, 257..=288) => {
                if _start < 288 && _end > 256 {
                    let _dim = ((_start - 256) % 4) as usize;
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().gpiote_events_inn100_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (380..=383, 381..=384) => {
                if _start < 384 && _end > 380 {
                    let offset = _start.saturating_sub(380);
                    let start = 380u64.saturating_sub(_start) as usize;
                    let end = ((_end - 380) - offset) as usize;
                    self.0.lock().unwrap().gpiote_events_port17c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .gpiote_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .gpiote_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1296..=1327, 1297..=1328) => {
                if _start < 1328 && _end > 1296 {
                    let _dim = ((_start - 1296) % 4) as usize;
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0.lock().unwrap().gpiote_confign510_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Saadc(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Saadc {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::saadc::Saadc::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=15, 1..=16) => {
                return Err(MemError::ReadViolation);
            }
            (256..=343, 257..=344) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_events_started100_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_events_end104_read()?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 268 && _end > 264 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_events_done108_read()?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                }
                if _start < 272 && _end > 268 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_events_resultdone10c_read()?
                        .to_ne_bytes();
                    if _start <= 268 && _end > 268 {
                        _buf[(268 - _start) as usize] = value[0];
                    }
                    if _start <= 269 && _end > 269 {
                        _buf[(269 - _start) as usize] = value[1];
                    }
                    if _start <= 270 && _end > 270 {
                        _buf[(270 - _start) as usize] = value[2];
                    }
                    if _start <= 271 && _end > 271 {
                        _buf[(271 - _start) as usize] = value[3];
                    }
                }
                if _start < 276 && _end > 272 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_events_calibratedone110_read()?
                        .to_ne_bytes();
                    if _start <= 272 && _end > 272 {
                        _buf[(272 - _start) as usize] = value[0];
                    }
                    if _start <= 273 && _end > 273 {
                        _buf[(273 - _start) as usize] = value[1];
                    }
                    if _start <= 274 && _end > 274 {
                        _buf[(274 - _start) as usize] = value[2];
                    }
                    if _start <= 275 && _end > 275 {
                        _buf[(275 - _start) as usize] = value[3];
                    }
                }
                if _start < 280 && _end > 276 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_events_stopped114_read()?
                        .to_ne_bytes();
                    if _start <= 276 && _end > 276 {
                        _buf[(276 - _start) as usize] = value[0];
                    }
                    if _start <= 277 && _end > 277 {
                        _buf[(277 - _start) as usize] = value[1];
                    }
                    if _start <= 278 && _end > 278 {
                        _buf[(278 - _start) as usize] = value[2];
                    }
                    if _start <= 279 && _end > 279 {
                        _buf[(279 - _start) as usize] = value[3];
                    }
                }
                if _start < 344 && _end > 280 {
                    for _events_chn in 0..8 {
                        let _dim_offset = _events_chn * 8;
                        if _start < 288 + _dim_offset
                            && _end > 280 + _dim_offset
                        {
                            let _start = 280u64.saturating_sub(_start);
                            let _end = _end - 280;
                            let _buf = &mut _buf[_start as usize..];
                            if _start < 8 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .saadc_events_chn_limith0_read(
                                            _events_chn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 0 && _end > 0 {
                                        _buf[(0 - _start) as usize] = value[0];
                                    }
                                    if _start <= 1 && _end > 1 {
                                        _buf[(1 - _start) as usize] = value[1];
                                    }
                                    if _start <= 2 && _end > 2 {
                                        _buf[(2 - _start) as usize] = value[2];
                                    }
                                    if _start <= 3 && _end > 3 {
                                        _buf[(3 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 8 && _end > 4 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .saadc_events_chn_limitl4_read(
                                            _events_chn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 4 && _end > 4 {
                                        _buf[(4 - _start) as usize] = value[0];
                                    }
                                    if _start <= 5 && _end > 5 {
                                        _buf[(5 - _start) as usize] = value[1];
                                    }
                                    if _start <= 6 && _end > 6 {
                                        _buf[(6 - _start) as usize] = value[2];
                                    }
                                    if _start <= 7 && _end > 7 {
                                        _buf[(7 - _start) as usize] = value[3];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_inten300_read()?
                        .to_ne_bytes();
                    if _start <= 768 && _end > 768 {
                        _buf[(768 - _start) as usize] = value[0];
                    }
                    if _start <= 769 && _end > 769 {
                        _buf[(769 - _start) as usize] = value[1];
                    }
                    if _start <= 770 && _end > 770 {
                        _buf[(770 - _start) as usize] = value[2];
                    }
                    if _start <= 771 && _end > 771 {
                        _buf[(771 - _start) as usize] = value[3];
                    }
                }
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1024..=1027, 1025..=1028) => {
                if _start < 1028 && _end > 1024 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_status400_read()?
                        .to_ne_bytes();
                    if _start <= 1024 && _end > 1024 {
                        _buf[(1024 - _start) as usize] = value[0];
                    }
                    if _start <= 1025 && _end > 1025 {
                        _buf[(1025 - _start) as usize] = value[1];
                    }
                    if _start <= 1026 && _end > 1026 {
                        _buf[(1026 - _start) as usize] = value[2];
                    }
                    if _start <= 1027 && _end > 1027 {
                        _buf[(1027 - _start) as usize] = value[3];
                    }
                }
            }
            (1280..=1283, 1281..=1284) => {
                if _start < 1284 && _end > 1280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_enable500_read()?
                        .to_ne_bytes();
                    if _start <= 1280 && _end > 1280 {
                        _buf[(1280 - _start) as usize] = value[0];
                    }
                    if _start <= 1281 && _end > 1281 {
                        _buf[(1281 - _start) as usize] = value[1];
                    }
                    if _start <= 1282 && _end > 1282 {
                        _buf[(1282 - _start) as usize] = value[2];
                    }
                    if _start <= 1283 && _end > 1283 {
                        _buf[(1283 - _start) as usize] = value[3];
                    }
                }
            }
            (1296..=1423, 1297..=1424) => {
                if _start < 1424 && _end > 1296 {
                    for _chn in 0..8 {
                        let _dim_offset = _chn * 16;
                        if _start < 1312 + _dim_offset
                            && _end > 1296 + _dim_offset
                        {
                            let _start = 1296u64.saturating_sub(_start);
                            let _end = _end - 1296;
                            let _buf = &mut _buf[_start as usize..];
                            if _start < 16 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .saadc_chn_pselp0_read(_chn as usize)?
                                        .to_ne_bytes();
                                    if _start <= 0 && _end > 0 {
                                        _buf[(0 - _start) as usize] = value[0];
                                    }
                                    if _start <= 1 && _end > 1 {
                                        _buf[(1 - _start) as usize] = value[1];
                                    }
                                    if _start <= 2 && _end > 2 {
                                        _buf[(2 - _start) as usize] = value[2];
                                    }
                                    if _start <= 3 && _end > 3 {
                                        _buf[(3 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 8 && _end > 4 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .saadc_chn_pseln4_read(_chn as usize)?
                                        .to_ne_bytes();
                                    if _start <= 4 && _end > 4 {
                                        _buf[(4 - _start) as usize] = value[0];
                                    }
                                    if _start <= 5 && _end > 5 {
                                        _buf[(5 - _start) as usize] = value[1];
                                    }
                                    if _start <= 6 && _end > 6 {
                                        _buf[(6 - _start) as usize] = value[2];
                                    }
                                    if _start <= 7 && _end > 7 {
                                        _buf[(7 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 12 && _end > 8 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .saadc_chn_config8_read(_chn as usize)?
                                        .to_ne_bytes();
                                    if _start <= 8 && _end > 8 {
                                        _buf[(8 - _start) as usize] = value[0];
                                    }
                                    if _start <= 9 && _end > 9 {
                                        _buf[(9 - _start) as usize] = value[1];
                                    }
                                    if _start <= 10 && _end > 10 {
                                        _buf[(10 - _start) as usize] = value[2];
                                    }
                                    if _start <= 11 && _end > 11 {
                                        _buf[(11 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 16 && _end > 12 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .saadc_chn_limitc_read(_chn as usize)?
                                        .to_ne_bytes();
                                    if _start <= 12 && _end > 12 {
                                        _buf[(12 - _start) as usize] = value[0];
                                    }
                                    if _start <= 13 && _end > 13 {
                                        _buf[(13 - _start) as usize] = value[1];
                                    }
                                    if _start <= 14 && _end > 14 {
                                        _buf[(14 - _start) as usize] = value[2];
                                    }
                                    if _start <= 15 && _end > 15 {
                                        _buf[(15 - _start) as usize] = value[3];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            (1520..=1531, 1521..=1532) => {
                if _start < 1524 && _end > 1520 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_resolution5f0_read()?
                        .to_ne_bytes();
                    if _start <= 1520 && _end > 1520 {
                        _buf[(1520 - _start) as usize] = value[0];
                    }
                    if _start <= 1521 && _end > 1521 {
                        _buf[(1521 - _start) as usize] = value[1];
                    }
                    if _start <= 1522 && _end > 1522 {
                        _buf[(1522 - _start) as usize] = value[2];
                    }
                    if _start <= 1523 && _end > 1523 {
                        _buf[(1523 - _start) as usize] = value[3];
                    }
                }
                if _start < 1528 && _end > 1524 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_oversample5f4_read()?
                        .to_ne_bytes();
                    if _start <= 1524 && _end > 1524 {
                        _buf[(1524 - _start) as usize] = value[0];
                    }
                    if _start <= 1525 && _end > 1525 {
                        _buf[(1525 - _start) as usize] = value[1];
                    }
                    if _start <= 1526 && _end > 1526 {
                        _buf[(1526 - _start) as usize] = value[2];
                    }
                    if _start <= 1527 && _end > 1527 {
                        _buf[(1527 - _start) as usize] = value[3];
                    }
                }
                if _start < 1532 && _end > 1528 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_samplerate5f8_read()?
                        .to_ne_bytes();
                    if _start <= 1528 && _end > 1528 {
                        _buf[(1528 - _start) as usize] = value[0];
                    }
                    if _start <= 1529 && _end > 1529 {
                        _buf[(1529 - _start) as usize] = value[1];
                    }
                    if _start <= 1530 && _end > 1530 {
                        _buf[(1530 - _start) as usize] = value[2];
                    }
                    if _start <= 1531 && _end > 1531 {
                        _buf[(1531 - _start) as usize] = value[3];
                    }
                }
            }
            (1580..=1591, 1581..=1592) => {
                if _start < 1584 && _end > 1580 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_result_ptr0_read()?
                        .to_ne_bytes();
                    if _start <= 1580 && _end > 1580 {
                        _buf[(1580 - _start) as usize] = value[0];
                    }
                    if _start <= 1581 && _end > 1581 {
                        _buf[(1581 - _start) as usize] = value[1];
                    }
                    if _start <= 1582 && _end > 1582 {
                        _buf[(1582 - _start) as usize] = value[2];
                    }
                    if _start <= 1583 && _end > 1583 {
                        _buf[(1583 - _start) as usize] = value[3];
                    }
                }
                if _start < 1588 && _end > 1584 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_result_maxcnt4_read()?
                        .to_ne_bytes();
                    if _start <= 1584 && _end > 1584 {
                        _buf[(1584 - _start) as usize] = value[0];
                    }
                    if _start <= 1585 && _end > 1585 {
                        _buf[(1585 - _start) as usize] = value[1];
                    }
                    if _start <= 1586 && _end > 1586 {
                        _buf[(1586 - _start) as usize] = value[2];
                    }
                    if _start <= 1587 && _end > 1587 {
                        _buf[(1587 - _start) as usize] = value[3];
                    }
                }
                if _start < 1592 && _end > 1588 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .saadc_result_amount8_read()?
                        .to_ne_bytes();
                    if _start <= 1588 && _end > 1588 {
                        _buf[(1588 - _start) as usize] = value[0];
                    }
                    if _start <= 1589 && _end > 1589 {
                        _buf[(1589 - _start) as usize] = value[1];
                    }
                    if _start <= 1590 && _end > 1590 {
                        _buf[(1590 - _start) as usize] = value[2];
                    }
                    if _start <= 1591 && _end > 1591 {
                        _buf[(1591 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::saadc::Saadc::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=15, 1..=16) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .saadc_tasks_start0_write(offset, &_buf[start..end])?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .saadc_tasks_sample4_write(offset, &_buf[start..end])?;
                }
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .saadc_tasks_stop8_write(offset, &_buf[start..end])?;
                }
                if _start < 16 && _end > 12 {
                    let offset = _start.saturating_sub(12);
                    let start = 12u64.saturating_sub(_start) as usize;
                    let end = ((_end - 12) - offset) as usize;
                    self.0.lock().unwrap().saadc_tasks_calibrateoffsetc_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (256..=343, 257..=344) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().saadc_events_started100_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .saadc_events_end104_write(offset, &_buf[start..end])?;
                }
                if _start < 268 && _end > 264 {
                    let offset = _start.saturating_sub(264);
                    let start = 264u64.saturating_sub(_start) as usize;
                    let end = ((_end - 264) - offset) as usize;
                    self.0.lock().unwrap().saadc_events_done108_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 272 && _end > 268 {
                    let offset = _start.saturating_sub(268);
                    let start = 268u64.saturating_sub(_start) as usize;
                    let end = ((_end - 268) - offset) as usize;
                    self.0.lock().unwrap().saadc_events_resultdone10c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 276 && _end > 272 {
                    let offset = _start.saturating_sub(272);
                    let start = 272u64.saturating_sub(_start) as usize;
                    let end = ((_end - 272) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .saadc_events_calibratedone110_write(
                            offset,
                            &_buf[start..end],
                        )?;
                }
                if _start < 280 && _end > 276 {
                    let offset = _start.saturating_sub(276);
                    let start = 276u64.saturating_sub(_start) as usize;
                    let end = ((_end - 276) - offset) as usize;
                    self.0.lock().unwrap().saadc_events_stopped114_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 344 && _end > 280 {
                    for _events_chn in 0..8 {
                        let _dim_offset = _events_chn * 8;
                        if _start < 288 + _dim_offset
                            && _end > 280 + _dim_offset
                        {
                            let _start = 280u64.saturating_sub(_start);
                            let _end = _end - 280;
                            let _buf = &_buf[_start as usize..];
                            if _start < 8 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let offset = _start.saturating_sub(0);
                                    let start =
                                        0u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 0) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .saadc_events_chn_limith0_write(
                                            _events_chn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                                if _start < 8 && _end > 4 {
                                    let offset = _start.saturating_sub(4);
                                    let start =
                                        4u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 4) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .saadc_events_chn_limitl4_write(
                                            _events_chn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                            }
                        }
                    }
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let offset = _start.saturating_sub(768);
                    let start = 768u64.saturating_sub(_start) as usize;
                    let end = ((_end - 768) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .saadc_inten300_write(offset, &_buf[start..end])?;
                }
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .saadc_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .saadc_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1024..=1027, 1025..=1028) => {
                return Err(MemError::WriteViolation);
            }
            (1280..=1283, 1281..=1284) => {
                if _start < 1284 && _end > 1280 {
                    let offset = _start.saturating_sub(1280);
                    let start = 1280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1280) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .saadc_enable500_write(offset, &_buf[start..end])?;
                }
            }
            (1296..=1423, 1297..=1424) => {
                if _start < 1424 && _end > 1296 {
                    for _chn in 0..8 {
                        let _dim_offset = _chn * 16;
                        if _start < 1312 + _dim_offset
                            && _end > 1296 + _dim_offset
                        {
                            let _start = 1296u64.saturating_sub(_start);
                            let _end = _end - 1296;
                            let _buf = &_buf[_start as usize..];
                            if _start < 16 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let offset = _start.saturating_sub(0);
                                    let start =
                                        0u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 0) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .saadc_chn_pselp0_write(
                                            _chn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                                if _start < 8 && _end > 4 {
                                    let offset = _start.saturating_sub(4);
                                    let start =
                                        4u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 4) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .saadc_chn_pseln4_write(
                                            _chn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                                if _start < 12 && _end > 8 {
                                    let offset = _start.saturating_sub(8);
                                    let start =
                                        8u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 8) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .saadc_chn_config8_write(
                                            _chn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                                if _start < 16 && _end > 12 {
                                    let offset = _start.saturating_sub(12);
                                    let start =
                                        12u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 12) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .saadc_chn_limitc_write(
                                            _chn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                            }
                        }
                    }
                }
            }
            (1520..=1531, 1521..=1532) => {
                if _start < 1524 && _end > 1520 {
                    let offset = _start.saturating_sub(1520);
                    let start = 1520u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1520) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .saadc_resolution5f0_write(offset, &_buf[start..end])?;
                }
                if _start < 1528 && _end > 1524 {
                    let offset = _start.saturating_sub(1524);
                    let start = 1524u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1524) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .saadc_oversample5f4_write(offset, &_buf[start..end])?;
                }
                if _start < 1532 && _end > 1528 {
                    let offset = _start.saturating_sub(1528);
                    let start = 1528u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1528) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .saadc_samplerate5f8_write(offset, &_buf[start..end])?;
                }
            }
            (1580..=1591, 1581..=1592) => {
                if _start < 1584 && _end > 1580 {
                    let offset = _start.saturating_sub(1580);
                    let start = 1580u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1580) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .saadc_result_ptr0_write(offset, &_buf[start..end])?;
                }
                if _start < 1588 && _end > 1584 {
                    let offset = _start.saturating_sub(1584);
                    let start = 1584u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1584) - offset) as usize;
                    self.0.lock().unwrap().saadc_result_maxcnt4_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1592 && _end > 1588 {
                    return Err(MemError::WriteViolation);
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Timer0(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Timer0 {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::timer0::Timer0::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=19, 1..=20) => {
                return Err(MemError::ReadViolation);
            }
            (64..=79, 65..=80) => {
                return Err(MemError::ReadViolation);
            }
            (320..=335, 321..=336) => {
                if _start < 336 && _end > 320 {
                    let _dim = ((_start - 320) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer0_events_comparen140_read(_instance_page, _dim)?
                        .to_ne_bytes();
                    if _start <= 320 && _end > 320 {
                        _buf[(320 - _start) as usize] = value[0];
                    }
                    if _start <= 321 && _end > 321 {
                        _buf[(321 - _start) as usize] = value[1];
                    }
                    if _start <= 322 && _end > 322 {
                        _buf[(322 - _start) as usize] = value[2];
                    }
                    if _start <= 323 && _end > 323 {
                        _buf[(323 - _start) as usize] = value[3];
                    }
                    if _start <= 324 && _end > 324 {
                        _buf[(324 - _start) as usize] = value[4];
                    }
                    if _start <= 325 && _end > 325 {
                        _buf[(325 - _start) as usize] = value[5];
                    }
                    if _start <= 326 && _end > 326 {
                        _buf[(326 - _start) as usize] = value[6];
                    }
                    if _start <= 327 && _end > 327 {
                        _buf[(327 - _start) as usize] = value[7];
                    }
                    if _start <= 328 && _end > 328 {
                        _buf[(328 - _start) as usize] = value[8];
                    }
                    if _start <= 329 && _end > 329 {
                        _buf[(329 - _start) as usize] = value[9];
                    }
                    if _start <= 330 && _end > 330 {
                        _buf[(330 - _start) as usize] = value[10];
                    }
                    if _start <= 331 && _end > 331 {
                        _buf[(331 - _start) as usize] = value[11];
                    }
                    if _start <= 332 && _end > 332 {
                        _buf[(332 - _start) as usize] = value[12];
                    }
                    if _start <= 333 && _end > 333 {
                        _buf[(333 - _start) as usize] = value[13];
                    }
                    if _start <= 334 && _end > 334 {
                        _buf[(334 - _start) as usize] = value[14];
                    }
                    if _start <= 335 && _end > 335 {
                        _buf[(335 - _start) as usize] = value[15];
                    }
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer0_shorts200_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 512 && _end > 512 {
                        _buf[(512 - _start) as usize] = value[0];
                    }
                    if _start <= 513 && _end > 513 {
                        _buf[(513 - _start) as usize] = value[1];
                    }
                    if _start <= 514 && _end > 514 {
                        _buf[(514 - _start) as usize] = value[2];
                    }
                    if _start <= 515 && _end > 515 {
                        _buf[(515 - _start) as usize] = value[3];
                    }
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer0_intenset304_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer0_intenclr308_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1284..=1291, 1285..=1292) => {
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer0_mode504_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer0_bitmode508_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
            }
            (1296..=1299, 1297..=1300) => {
                if _start < 1300 && _end > 1296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer0_prescaler510_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
            }
            (1344..=1359, 1345..=1360) => {
                if _start < 1360 && _end > 1344 {
                    let _dim = ((_start - 1344) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer0_ccn540_read(_instance_page, _dim)?
                        .to_ne_bytes();
                    if _start <= 1344 && _end > 1344 {
                        _buf[(1344 - _start) as usize] = value[0];
                    }
                    if _start <= 1345 && _end > 1345 {
                        _buf[(1345 - _start) as usize] = value[1];
                    }
                    if _start <= 1346 && _end > 1346 {
                        _buf[(1346 - _start) as usize] = value[2];
                    }
                    if _start <= 1347 && _end > 1347 {
                        _buf[(1347 - _start) as usize] = value[3];
                    }
                    if _start <= 1348 && _end > 1348 {
                        _buf[(1348 - _start) as usize] = value[4];
                    }
                    if _start <= 1349 && _end > 1349 {
                        _buf[(1349 - _start) as usize] = value[5];
                    }
                    if _start <= 1350 && _end > 1350 {
                        _buf[(1350 - _start) as usize] = value[6];
                    }
                    if _start <= 1351 && _end > 1351 {
                        _buf[(1351 - _start) as usize] = value[7];
                    }
                    if _start <= 1352 && _end > 1352 {
                        _buf[(1352 - _start) as usize] = value[8];
                    }
                    if _start <= 1353 && _end > 1353 {
                        _buf[(1353 - _start) as usize] = value[9];
                    }
                    if _start <= 1354 && _end > 1354 {
                        _buf[(1354 - _start) as usize] = value[10];
                    }
                    if _start <= 1355 && _end > 1355 {
                        _buf[(1355 - _start) as usize] = value[11];
                    }
                    if _start <= 1356 && _end > 1356 {
                        _buf[(1356 - _start) as usize] = value[12];
                    }
                    if _start <= 1357 && _end > 1357 {
                        _buf[(1357 - _start) as usize] = value[13];
                    }
                    if _start <= 1358 && _end > 1358 {
                        _buf[(1358 - _start) as usize] = value[14];
                    }
                    if _start <= 1359 && _end > 1359 {
                        _buf[(1359 - _start) as usize] = value[15];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::timer0::Timer0::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=19, 1..=20) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0.lock().unwrap().timer0_tasks_start0_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0.lock().unwrap().timer0_tasks_stop4_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0.lock().unwrap().timer0_tasks_count8_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 16 && _end > 12 {
                    let offset = _start.saturating_sub(12);
                    let start = 12u64.saturating_sub(_start) as usize;
                    let end = ((_end - 12) - offset) as usize;
                    self.0.lock().unwrap().timer0_tasks_clearc_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 20 && _end > 16 {
                    let offset = _start.saturating_sub(16);
                    let start = 16u64.saturating_sub(_start) as usize;
                    let end = ((_end - 16) - offset) as usize;
                    self.0.lock().unwrap().timer0_tasks_shutdown10_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (64..=79, 65..=80) => {
                if _start < 80 && _end > 64 {
                    let _dim = ((_start - 64) % 4) as usize;
                    let offset = _start.saturating_sub(64);
                    let start = 64u64.saturating_sub(_start) as usize;
                    let end = ((_end - 64) - offset) as usize;
                    self.0.lock().unwrap().timer0_tasks_capturen40_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (320..=335, 321..=336) => {
                if _start < 336 && _end > 320 {
                    let _dim = ((_start - 320) % 4) as usize;
                    let offset = _start.saturating_sub(320);
                    let start = 320u64.saturating_sub(_start) as usize;
                    let end = ((_end - 320) - offset) as usize;
                    self.0.lock().unwrap().timer0_events_comparen140_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let offset = _start.saturating_sub(512);
                    let start = 512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 512) - offset) as usize;
                    self.0.lock().unwrap().timer0_shorts200_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0.lock().unwrap().timer0_intenset304_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0.lock().unwrap().timer0_intenclr308_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1284..=1291, 1285..=1292) => {
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0.lock().unwrap().timer0_mode504_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0.lock().unwrap().timer0_bitmode508_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1296..=1299, 1297..=1300) => {
                if _start < 1300 && _end > 1296 {
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0.lock().unwrap().timer0_prescaler510_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1344..=1359, 1345..=1360) => {
                if _start < 1360 && _end > 1344 {
                    let _dim = ((_start - 1344) % 4) as usize;
                    let offset = _start.saturating_sub(1344);
                    let start = 1344u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1344) - offset) as usize;
                    self.0.lock().unwrap().timer0_ccn540_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Rtc0(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Rtc0 {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::rtc0::Rtc0::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=15, 1..=16) => {
                return Err(MemError::ReadViolation);
            }
            (256..=263, 257..=264) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rtc0_events_tick100_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rtc0_events_ovrflw104_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
            }
            (320..=335, 321..=336) => {
                if _start < 336 && _end > 320 {
                    let _dim = ((_start - 320) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rtc0_events_comparen140_read(_instance_page, _dim)?
                        .to_ne_bytes();
                    if _start <= 320 && _end > 320 {
                        _buf[(320 - _start) as usize] = value[0];
                    }
                    if _start <= 321 && _end > 321 {
                        _buf[(321 - _start) as usize] = value[1];
                    }
                    if _start <= 322 && _end > 322 {
                        _buf[(322 - _start) as usize] = value[2];
                    }
                    if _start <= 323 && _end > 323 {
                        _buf[(323 - _start) as usize] = value[3];
                    }
                    if _start <= 324 && _end > 324 {
                        _buf[(324 - _start) as usize] = value[4];
                    }
                    if _start <= 325 && _end > 325 {
                        _buf[(325 - _start) as usize] = value[5];
                    }
                    if _start <= 326 && _end > 326 {
                        _buf[(326 - _start) as usize] = value[6];
                    }
                    if _start <= 327 && _end > 327 {
                        _buf[(327 - _start) as usize] = value[7];
                    }
                    if _start <= 328 && _end > 328 {
                        _buf[(328 - _start) as usize] = value[8];
                    }
                    if _start <= 329 && _end > 329 {
                        _buf[(329 - _start) as usize] = value[9];
                    }
                    if _start <= 330 && _end > 330 {
                        _buf[(330 - _start) as usize] = value[10];
                    }
                    if _start <= 331 && _end > 331 {
                        _buf[(331 - _start) as usize] = value[11];
                    }
                    if _start <= 332 && _end > 332 {
                        _buf[(332 - _start) as usize] = value[12];
                    }
                    if _start <= 333 && _end > 333 {
                        _buf[(333 - _start) as usize] = value[13];
                    }
                    if _start <= 334 && _end > 334 {
                        _buf[(334 - _start) as usize] = value[14];
                    }
                    if _start <= 335 && _end > 335 {
                        _buf[(335 - _start) as usize] = value[15];
                    }
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rtc0_intenset304_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rtc0_intenclr308_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (832..=843, 833..=844) => {
                if _start < 836 && _end > 832 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rtc0_evten340_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 832 && _end > 832 {
                        _buf[(832 - _start) as usize] = value[0];
                    }
                    if _start <= 833 && _end > 833 {
                        _buf[(833 - _start) as usize] = value[1];
                    }
                    if _start <= 834 && _end > 834 {
                        _buf[(834 - _start) as usize] = value[2];
                    }
                    if _start <= 835 && _end > 835 {
                        _buf[(835 - _start) as usize] = value[3];
                    }
                }
                if _start < 840 && _end > 836 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rtc0_evtenset344_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 836 && _end > 836 {
                        _buf[(836 - _start) as usize] = value[0];
                    }
                    if _start <= 837 && _end > 837 {
                        _buf[(837 - _start) as usize] = value[1];
                    }
                    if _start <= 838 && _end > 838 {
                        _buf[(838 - _start) as usize] = value[2];
                    }
                    if _start <= 839 && _end > 839 {
                        _buf[(839 - _start) as usize] = value[3];
                    }
                }
                if _start < 844 && _end > 840 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rtc0_evtenclr348_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 840 && _end > 840 {
                        _buf[(840 - _start) as usize] = value[0];
                    }
                    if _start <= 841 && _end > 841 {
                        _buf[(841 - _start) as usize] = value[1];
                    }
                    if _start <= 842 && _end > 842 {
                        _buf[(842 - _start) as usize] = value[2];
                    }
                    if _start <= 843 && _end > 843 {
                        _buf[(843 - _start) as usize] = value[3];
                    }
                }
            }
            (1284..=1291, 1285..=1292) => {
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rtc0_counter504_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rtc0_prescaler508_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
            }
            (1344..=1359, 1345..=1360) => {
                if _start < 1360 && _end > 1344 {
                    let _dim = ((_start - 1344) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rtc0_ccn540_read(_instance_page, _dim)?
                        .to_ne_bytes();
                    if _start <= 1344 && _end > 1344 {
                        _buf[(1344 - _start) as usize] = value[0];
                    }
                    if _start <= 1345 && _end > 1345 {
                        _buf[(1345 - _start) as usize] = value[1];
                    }
                    if _start <= 1346 && _end > 1346 {
                        _buf[(1346 - _start) as usize] = value[2];
                    }
                    if _start <= 1347 && _end > 1347 {
                        _buf[(1347 - _start) as usize] = value[3];
                    }
                    if _start <= 1348 && _end > 1348 {
                        _buf[(1348 - _start) as usize] = value[4];
                    }
                    if _start <= 1349 && _end > 1349 {
                        _buf[(1349 - _start) as usize] = value[5];
                    }
                    if _start <= 1350 && _end > 1350 {
                        _buf[(1350 - _start) as usize] = value[6];
                    }
                    if _start <= 1351 && _end > 1351 {
                        _buf[(1351 - _start) as usize] = value[7];
                    }
                    if _start <= 1352 && _end > 1352 {
                        _buf[(1352 - _start) as usize] = value[8];
                    }
                    if _start <= 1353 && _end > 1353 {
                        _buf[(1353 - _start) as usize] = value[9];
                    }
                    if _start <= 1354 && _end > 1354 {
                        _buf[(1354 - _start) as usize] = value[10];
                    }
                    if _start <= 1355 && _end > 1355 {
                        _buf[(1355 - _start) as usize] = value[11];
                    }
                    if _start <= 1356 && _end > 1356 {
                        _buf[(1356 - _start) as usize] = value[12];
                    }
                    if _start <= 1357 && _end > 1357 {
                        _buf[(1357 - _start) as usize] = value[13];
                    }
                    if _start <= 1358 && _end > 1358 {
                        _buf[(1358 - _start) as usize] = value[14];
                    }
                    if _start <= 1359 && _end > 1359 {
                        _buf[(1359 - _start) as usize] = value[15];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::rtc0::Rtc0::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=15, 1..=16) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0.lock().unwrap().rtc0_tasks_start0_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0.lock().unwrap().rtc0_tasks_stop4_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0.lock().unwrap().rtc0_tasks_clear8_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 16 && _end > 12 {
                    let offset = _start.saturating_sub(12);
                    let start = 12u64.saturating_sub(_start) as usize;
                    let end = ((_end - 12) - offset) as usize;
                    self.0.lock().unwrap().rtc0_tasks_trigovrflwc_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (256..=263, 257..=264) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().rtc0_events_tick100_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0.lock().unwrap().rtc0_events_ovrflw104_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (320..=335, 321..=336) => {
                if _start < 336 && _end > 320 {
                    let _dim = ((_start - 320) % 4) as usize;
                    let offset = _start.saturating_sub(320);
                    let start = 320u64.saturating_sub(_start) as usize;
                    let end = ((_end - 320) - offset) as usize;
                    self.0.lock().unwrap().rtc0_events_comparen140_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0.lock().unwrap().rtc0_intenset304_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0.lock().unwrap().rtc0_intenclr308_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (832..=843, 833..=844) => {
                if _start < 836 && _end > 832 {
                    let offset = _start.saturating_sub(832);
                    let start = 832u64.saturating_sub(_start) as usize;
                    let end = ((_end - 832) - offset) as usize;
                    self.0.lock().unwrap().rtc0_evten340_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 840 && _end > 836 {
                    let offset = _start.saturating_sub(836);
                    let start = 836u64.saturating_sub(_start) as usize;
                    let end = ((_end - 836) - offset) as usize;
                    self.0.lock().unwrap().rtc0_evtenset344_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 844 && _end > 840 {
                    let offset = _start.saturating_sub(840);
                    let start = 840u64.saturating_sub(_start) as usize;
                    let end = ((_end - 840) - offset) as usize;
                    self.0.lock().unwrap().rtc0_evtenclr348_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1284..=1291, 1285..=1292) => {
                if _start < 1288 && _end > 1284 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0.lock().unwrap().rtc0_prescaler508_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1344..=1359, 1345..=1360) => {
                if _start < 1360 && _end > 1344 {
                    let _dim = ((_start - 1344) % 4) as usize;
                    let offset = _start.saturating_sub(1344);
                    let start = 1344u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1344) - offset) as usize;
                    self.0.lock().unwrap().rtc0_ccn540_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Temp(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Temp {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::temp::Temp::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=7, 1..=8) => {
                return Err(MemError::ReadViolation);
            }
            (256..=259, 257..=260) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .temp_events_datardy100_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .temp_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .temp_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1288..=1291, 1289..=1292) => {
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .temp_temp508_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
            }
            (1312..=1335, 1313..=1336) => {
                if _start < 1316 && _end > 1312 {
                    let value =
                        self.0.lock().unwrap().temp_a0520_read()?.to_ne_bytes();
                    if _start <= 1312 && _end > 1312 {
                        _buf[(1312 - _start) as usize] = value[0];
                    }
                    if _start <= 1313 && _end > 1313 {
                        _buf[(1313 - _start) as usize] = value[1];
                    }
                    if _start <= 1314 && _end > 1314 {
                        _buf[(1314 - _start) as usize] = value[2];
                    }
                    if _start <= 1315 && _end > 1315 {
                        _buf[(1315 - _start) as usize] = value[3];
                    }
                }
                if _start < 1320 && _end > 1316 {
                    let value =
                        self.0.lock().unwrap().temp_a1524_read()?.to_ne_bytes();
                    if _start <= 1316 && _end > 1316 {
                        _buf[(1316 - _start) as usize] = value[0];
                    }
                    if _start <= 1317 && _end > 1317 {
                        _buf[(1317 - _start) as usize] = value[1];
                    }
                    if _start <= 1318 && _end > 1318 {
                        _buf[(1318 - _start) as usize] = value[2];
                    }
                    if _start <= 1319 && _end > 1319 {
                        _buf[(1319 - _start) as usize] = value[3];
                    }
                }
                if _start < 1324 && _end > 1320 {
                    let value =
                        self.0.lock().unwrap().temp_a2528_read()?.to_ne_bytes();
                    if _start <= 1320 && _end > 1320 {
                        _buf[(1320 - _start) as usize] = value[0];
                    }
                    if _start <= 1321 && _end > 1321 {
                        _buf[(1321 - _start) as usize] = value[1];
                    }
                    if _start <= 1322 && _end > 1322 {
                        _buf[(1322 - _start) as usize] = value[2];
                    }
                    if _start <= 1323 && _end > 1323 {
                        _buf[(1323 - _start) as usize] = value[3];
                    }
                }
                if _start < 1328 && _end > 1324 {
                    let value =
                        self.0.lock().unwrap().temp_a352c_read()?.to_ne_bytes();
                    if _start <= 1324 && _end > 1324 {
                        _buf[(1324 - _start) as usize] = value[0];
                    }
                    if _start <= 1325 && _end > 1325 {
                        _buf[(1325 - _start) as usize] = value[1];
                    }
                    if _start <= 1326 && _end > 1326 {
                        _buf[(1326 - _start) as usize] = value[2];
                    }
                    if _start <= 1327 && _end > 1327 {
                        _buf[(1327 - _start) as usize] = value[3];
                    }
                }
                if _start < 1332 && _end > 1328 {
                    let value =
                        self.0.lock().unwrap().temp_a4530_read()?.to_ne_bytes();
                    if _start <= 1328 && _end > 1328 {
                        _buf[(1328 - _start) as usize] = value[0];
                    }
                    if _start <= 1329 && _end > 1329 {
                        _buf[(1329 - _start) as usize] = value[1];
                    }
                    if _start <= 1330 && _end > 1330 {
                        _buf[(1330 - _start) as usize] = value[2];
                    }
                    if _start <= 1331 && _end > 1331 {
                        _buf[(1331 - _start) as usize] = value[3];
                    }
                }
                if _start < 1336 && _end > 1332 {
                    let value =
                        self.0.lock().unwrap().temp_a5534_read()?.to_ne_bytes();
                    if _start <= 1332 && _end > 1332 {
                        _buf[(1332 - _start) as usize] = value[0];
                    }
                    if _start <= 1333 && _end > 1333 {
                        _buf[(1333 - _start) as usize] = value[1];
                    }
                    if _start <= 1334 && _end > 1334 {
                        _buf[(1334 - _start) as usize] = value[2];
                    }
                    if _start <= 1335 && _end > 1335 {
                        _buf[(1335 - _start) as usize] = value[3];
                    }
                }
            }
            (1344..=1367, 1345..=1368) => {
                if _start < 1348 && _end > 1344 {
                    let value =
                        self.0.lock().unwrap().temp_b0540_read()?.to_ne_bytes();
                    if _start <= 1344 && _end > 1344 {
                        _buf[(1344 - _start) as usize] = value[0];
                    }
                    if _start <= 1345 && _end > 1345 {
                        _buf[(1345 - _start) as usize] = value[1];
                    }
                    if _start <= 1346 && _end > 1346 {
                        _buf[(1346 - _start) as usize] = value[2];
                    }
                    if _start <= 1347 && _end > 1347 {
                        _buf[(1347 - _start) as usize] = value[3];
                    }
                }
                if _start < 1352 && _end > 1348 {
                    let value =
                        self.0.lock().unwrap().temp_b1544_read()?.to_ne_bytes();
                    if _start <= 1348 && _end > 1348 {
                        _buf[(1348 - _start) as usize] = value[0];
                    }
                    if _start <= 1349 && _end > 1349 {
                        _buf[(1349 - _start) as usize] = value[1];
                    }
                    if _start <= 1350 && _end > 1350 {
                        _buf[(1350 - _start) as usize] = value[2];
                    }
                    if _start <= 1351 && _end > 1351 {
                        _buf[(1351 - _start) as usize] = value[3];
                    }
                }
                if _start < 1356 && _end > 1352 {
                    let value =
                        self.0.lock().unwrap().temp_b2548_read()?.to_ne_bytes();
                    if _start <= 1352 && _end > 1352 {
                        _buf[(1352 - _start) as usize] = value[0];
                    }
                    if _start <= 1353 && _end > 1353 {
                        _buf[(1353 - _start) as usize] = value[1];
                    }
                    if _start <= 1354 && _end > 1354 {
                        _buf[(1354 - _start) as usize] = value[2];
                    }
                    if _start <= 1355 && _end > 1355 {
                        _buf[(1355 - _start) as usize] = value[3];
                    }
                }
                if _start < 1360 && _end > 1356 {
                    let value =
                        self.0.lock().unwrap().temp_b354c_read()?.to_ne_bytes();
                    if _start <= 1356 && _end > 1356 {
                        _buf[(1356 - _start) as usize] = value[0];
                    }
                    if _start <= 1357 && _end > 1357 {
                        _buf[(1357 - _start) as usize] = value[1];
                    }
                    if _start <= 1358 && _end > 1358 {
                        _buf[(1358 - _start) as usize] = value[2];
                    }
                    if _start <= 1359 && _end > 1359 {
                        _buf[(1359 - _start) as usize] = value[3];
                    }
                }
                if _start < 1364 && _end > 1360 {
                    let value =
                        self.0.lock().unwrap().temp_b4550_read()?.to_ne_bytes();
                    if _start <= 1360 && _end > 1360 {
                        _buf[(1360 - _start) as usize] = value[0];
                    }
                    if _start <= 1361 && _end > 1361 {
                        _buf[(1361 - _start) as usize] = value[1];
                    }
                    if _start <= 1362 && _end > 1362 {
                        _buf[(1362 - _start) as usize] = value[2];
                    }
                    if _start <= 1363 && _end > 1363 {
                        _buf[(1363 - _start) as usize] = value[3];
                    }
                }
                if _start < 1368 && _end > 1364 {
                    let value =
                        self.0.lock().unwrap().temp_b5554_read()?.to_ne_bytes();
                    if _start <= 1364 && _end > 1364 {
                        _buf[(1364 - _start) as usize] = value[0];
                    }
                    if _start <= 1365 && _end > 1365 {
                        _buf[(1365 - _start) as usize] = value[1];
                    }
                    if _start <= 1366 && _end > 1366 {
                        _buf[(1366 - _start) as usize] = value[2];
                    }
                    if _start <= 1367 && _end > 1367 {
                        _buf[(1367 - _start) as usize] = value[3];
                    }
                }
            }
            (1376..=1395, 1377..=1396) => {
                if _start < 1380 && _end > 1376 {
                    let value =
                        self.0.lock().unwrap().temp_t0560_read()?.to_ne_bytes();
                    if _start <= 1376 && _end > 1376 {
                        _buf[(1376 - _start) as usize] = value[0];
                    }
                    if _start <= 1377 && _end > 1377 {
                        _buf[(1377 - _start) as usize] = value[1];
                    }
                    if _start <= 1378 && _end > 1378 {
                        _buf[(1378 - _start) as usize] = value[2];
                    }
                    if _start <= 1379 && _end > 1379 {
                        _buf[(1379 - _start) as usize] = value[3];
                    }
                }
                if _start < 1384 && _end > 1380 {
                    let value =
                        self.0.lock().unwrap().temp_t1564_read()?.to_ne_bytes();
                    if _start <= 1380 && _end > 1380 {
                        _buf[(1380 - _start) as usize] = value[0];
                    }
                    if _start <= 1381 && _end > 1381 {
                        _buf[(1381 - _start) as usize] = value[1];
                    }
                    if _start <= 1382 && _end > 1382 {
                        _buf[(1382 - _start) as usize] = value[2];
                    }
                    if _start <= 1383 && _end > 1383 {
                        _buf[(1383 - _start) as usize] = value[3];
                    }
                }
                if _start < 1388 && _end > 1384 {
                    let value =
                        self.0.lock().unwrap().temp_t2568_read()?.to_ne_bytes();
                    if _start <= 1384 && _end > 1384 {
                        _buf[(1384 - _start) as usize] = value[0];
                    }
                    if _start <= 1385 && _end > 1385 {
                        _buf[(1385 - _start) as usize] = value[1];
                    }
                    if _start <= 1386 && _end > 1386 {
                        _buf[(1386 - _start) as usize] = value[2];
                    }
                    if _start <= 1387 && _end > 1387 {
                        _buf[(1387 - _start) as usize] = value[3];
                    }
                }
                if _start < 1392 && _end > 1388 {
                    let value =
                        self.0.lock().unwrap().temp_t356c_read()?.to_ne_bytes();
                    if _start <= 1388 && _end > 1388 {
                        _buf[(1388 - _start) as usize] = value[0];
                    }
                    if _start <= 1389 && _end > 1389 {
                        _buf[(1389 - _start) as usize] = value[1];
                    }
                    if _start <= 1390 && _end > 1390 {
                        _buf[(1390 - _start) as usize] = value[2];
                    }
                    if _start <= 1391 && _end > 1391 {
                        _buf[(1391 - _start) as usize] = value[3];
                    }
                }
                if _start < 1396 && _end > 1392 {
                    let value =
                        self.0.lock().unwrap().temp_t4570_read()?.to_ne_bytes();
                    if _start <= 1392 && _end > 1392 {
                        _buf[(1392 - _start) as usize] = value[0];
                    }
                    if _start <= 1393 && _end > 1393 {
                        _buf[(1393 - _start) as usize] = value[1];
                    }
                    if _start <= 1394 && _end > 1394 {
                        _buf[(1394 - _start) as usize] = value[2];
                    }
                    if _start <= 1395 && _end > 1395 {
                        _buf[(1395 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::temp::Temp::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=7, 1..=8) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_tasks_start0_write(offset, &_buf[start..end])?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_tasks_stop4_write(offset, &_buf[start..end])?;
                }
            }
            (256..=259, 257..=260) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().temp_events_datardy100_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1288..=1291, 1289..=1292) => {
                return Err(MemError::WriteViolation);
            }
            (1312..=1335, 1313..=1336) => {
                if _start < 1316 && _end > 1312 {
                    let offset = _start.saturating_sub(1312);
                    let start = 1312u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1312) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_a0520_write(offset, &_buf[start..end])?;
                }
                if _start < 1320 && _end > 1316 {
                    let offset = _start.saturating_sub(1316);
                    let start = 1316u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1316) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_a1524_write(offset, &_buf[start..end])?;
                }
                if _start < 1324 && _end > 1320 {
                    let offset = _start.saturating_sub(1320);
                    let start = 1320u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1320) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_a2528_write(offset, &_buf[start..end])?;
                }
                if _start < 1328 && _end > 1324 {
                    let offset = _start.saturating_sub(1324);
                    let start = 1324u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1324) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_a352c_write(offset, &_buf[start..end])?;
                }
                if _start < 1332 && _end > 1328 {
                    let offset = _start.saturating_sub(1328);
                    let start = 1328u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1328) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_a4530_write(offset, &_buf[start..end])?;
                }
                if _start < 1336 && _end > 1332 {
                    let offset = _start.saturating_sub(1332);
                    let start = 1332u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1332) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_a5534_write(offset, &_buf[start..end])?;
                }
            }
            (1344..=1367, 1345..=1368) => {
                if _start < 1348 && _end > 1344 {
                    let offset = _start.saturating_sub(1344);
                    let start = 1344u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1344) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_b0540_write(offset, &_buf[start..end])?;
                }
                if _start < 1352 && _end > 1348 {
                    let offset = _start.saturating_sub(1348);
                    let start = 1348u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1348) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_b1544_write(offset, &_buf[start..end])?;
                }
                if _start < 1356 && _end > 1352 {
                    let offset = _start.saturating_sub(1352);
                    let start = 1352u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1352) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_b2548_write(offset, &_buf[start..end])?;
                }
                if _start < 1360 && _end > 1356 {
                    let offset = _start.saturating_sub(1356);
                    let start = 1356u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1356) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_b354c_write(offset, &_buf[start..end])?;
                }
                if _start < 1364 && _end > 1360 {
                    let offset = _start.saturating_sub(1360);
                    let start = 1360u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1360) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_b4550_write(offset, &_buf[start..end])?;
                }
                if _start < 1368 && _end > 1364 {
                    let offset = _start.saturating_sub(1364);
                    let start = 1364u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1364) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_b5554_write(offset, &_buf[start..end])?;
                }
            }
            (1376..=1395, 1377..=1396) => {
                if _start < 1380 && _end > 1376 {
                    let offset = _start.saturating_sub(1376);
                    let start = 1376u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1376) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_t0560_write(offset, &_buf[start..end])?;
                }
                if _start < 1384 && _end > 1380 {
                    let offset = _start.saturating_sub(1380);
                    let start = 1380u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1380) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_t1564_write(offset, &_buf[start..end])?;
                }
                if _start < 1388 && _end > 1384 {
                    let offset = _start.saturating_sub(1384);
                    let start = 1384u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1384) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_t2568_write(offset, &_buf[start..end])?;
                }
                if _start < 1392 && _end > 1388 {
                    let offset = _start.saturating_sub(1388);
                    let start = 1388u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1388) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_t356c_write(offset, &_buf[start..end])?;
                }
                if _start < 1396 && _end > 1392 {
                    let offset = _start.saturating_sub(1392);
                    let start = 1392u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1392) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .temp_t4570_write(offset, &_buf[start..end])?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Rng(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Rng {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::rng::Rng::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=7, 1..=8) => {
                return Err(MemError::ReadViolation);
            }
            (256..=259, 257..=260) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rng_events_valrdy100_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rng_shorts200_read()?
                        .to_ne_bytes();
                    if _start <= 512 && _end > 512 {
                        _buf[(512 - _start) as usize] = value[0];
                    }
                    if _start <= 513 && _end > 513 {
                        _buf[(513 - _start) as usize] = value[1];
                    }
                    if _start <= 514 && _end > 514 {
                        _buf[(514 - _start) as usize] = value[2];
                    }
                    if _start <= 515 && _end > 515 {
                        _buf[(515 - _start) as usize] = value[3];
                    }
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rng_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rng_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1284..=1291, 1285..=1292) => {
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rng_config504_read()?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .rng_value508_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::rng::Rng::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=7, 1..=8) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .rng_tasks_start0_write(offset, &_buf[start..end])?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .rng_tasks_stop4_write(offset, &_buf[start..end])?;
                }
            }
            (256..=259, 257..=260) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().rng_events_valrdy100_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let offset = _start.saturating_sub(512);
                    let start = 512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 512) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .rng_shorts200_write(offset, &_buf[start..end])?;
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .rng_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .rng_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1284..=1291, 1285..=1292) => {
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .rng_config504_write(offset, &_buf[start..end])?;
                }
                if _start < 1292 && _end > 1288 {
                    return Err(MemError::WriteViolation);
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Ecb(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Ecb {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::ecb::Ecb::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=7, 1..=8) => {
                return Err(MemError::ReadViolation);
            }
            (256..=263, 257..=264) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ecb_events_endecb100_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ecb_events_errorecb104_read()?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ecb_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ecb_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1284..=1287, 1285..=1288) => {
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ecb_ecbdataptr504_read()?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::ecb::Ecb::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=7, 1..=8) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .ecb_tasks_startecb0_write(offset, &_buf[start..end])?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .ecb_tasks_stopecb4_write(offset, &_buf[start..end])?;
                }
            }
            (256..=263, 257..=264) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().ecb_events_endecb100_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0.lock().unwrap().ecb_events_errorecb104_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .ecb_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .ecb_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1284..=1287, 1285..=1288) => {
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .ecb_ecbdataptr504_write(offset, &_buf[start..end])?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Apb15(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Apb15 {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::apb15::Apb15::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=11, 1..=12) => {
                return Err(MemError::ReadViolation);
            }
            (256..=267, 257..=268) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb15_events_endksgen100_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb15_events_endcrypt104_read()?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 268 && _end > 264 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb15_events_error108_read()?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb15_shorts200_read()?
                        .to_ne_bytes();
                    if _start <= 512 && _end > 512 {
                        _buf[(512 - _start) as usize] = value[0];
                    }
                    if _start <= 513 && _end > 513 {
                        _buf[(513 - _start) as usize] = value[1];
                    }
                    if _start <= 514 && _end > 514 {
                        _buf[(514 - _start) as usize] = value[2];
                    }
                    if _start <= 515 && _end > 515 {
                        _buf[(515 - _start) as usize] = value[3];
                    }
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb15_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb15_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1024..=1027, 1025..=1028) => {
                if _start < 1028 && _end > 1024 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb15_micstatus400_read()?
                        .to_ne_bytes();
                    if _start <= 1024 && _end > 1024 {
                        _buf[(1024 - _start) as usize] = value[0];
                    }
                    if _start <= 1025 && _end > 1025 {
                        _buf[(1025 - _start) as usize] = value[1];
                    }
                    if _start <= 1026 && _end > 1026 {
                        _buf[(1026 - _start) as usize] = value[2];
                    }
                    if _start <= 1027 && _end > 1027 {
                        _buf[(1027 - _start) as usize] = value[3];
                    }
                }
            }
            (1280..=1303, 1281..=1304) => {
                if _start < 1284 && _end > 1280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb15_enable500_read()?
                        .to_ne_bytes();
                    if _start <= 1280 && _end > 1280 {
                        _buf[(1280 - _start) as usize] = value[0];
                    }
                    if _start <= 1281 && _end > 1281 {
                        _buf[(1281 - _start) as usize] = value[1];
                    }
                    if _start <= 1282 && _end > 1282 {
                        _buf[(1282 - _start) as usize] = value[2];
                    }
                    if _start <= 1283 && _end > 1283 {
                        _buf[(1283 - _start) as usize] = value[3];
                    }
                }
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb15_mode504_read()?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb15_cnfptr508_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
                if _start < 1296 && _end > 1292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb15_inptr50c_read()?
                        .to_ne_bytes();
                    if _start <= 1292 && _end > 1292 {
                        _buf[(1292 - _start) as usize] = value[0];
                    }
                    if _start <= 1293 && _end > 1293 {
                        _buf[(1293 - _start) as usize] = value[1];
                    }
                    if _start <= 1294 && _end > 1294 {
                        _buf[(1294 - _start) as usize] = value[2];
                    }
                    if _start <= 1295 && _end > 1295 {
                        _buf[(1295 - _start) as usize] = value[3];
                    }
                }
                if _start < 1300 && _end > 1296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb15_outptr510_read()?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
                if _start < 1304 && _end > 1300 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb15_scratchptr514_read()?
                        .to_ne_bytes();
                    if _start <= 1300 && _end > 1300 {
                        _buf[(1300 - _start) as usize] = value[0];
                    }
                    if _start <= 1301 && _end > 1301 {
                        _buf[(1301 - _start) as usize] = value[1];
                    }
                    if _start <= 1302 && _end > 1302 {
                        _buf[(1302 - _start) as usize] = value[2];
                    }
                    if _start <= 1303 && _end > 1303 {
                        _buf[(1303 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::apb15::Apb15::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=11, 1..=12) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb15_tasks_start0_write(offset, &_buf[start..end])?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb15_tasks_crypt4_write(offset, &_buf[start..end])?;
                }
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb15_tasks_stop8_write(offset, &_buf[start..end])?;
                }
            }
            (256..=267, 257..=268) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().apb15_events_endksgen100_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0.lock().unwrap().apb15_events_endcrypt104_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 268 && _end > 264 {
                    let offset = _start.saturating_sub(264);
                    let start = 264u64.saturating_sub(_start) as usize;
                    let end = ((_end - 264) - offset) as usize;
                    self.0.lock().unwrap().apb15_events_error108_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let offset = _start.saturating_sub(512);
                    let start = 512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 512) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb15_shorts200_write(offset, &_buf[start..end])?;
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb15_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb15_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1024..=1027, 1025..=1028) => {
                return Err(MemError::WriteViolation);
            }
            (1280..=1303, 1281..=1304) => {
                if _start < 1284 && _end > 1280 {
                    let offset = _start.saturating_sub(1280);
                    let start = 1280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1280) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb15_enable500_write(offset, &_buf[start..end])?;
                }
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb15_mode504_write(offset, &_buf[start..end])?;
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb15_cnfptr508_write(offset, &_buf[start..end])?;
                }
                if _start < 1296 && _end > 1292 {
                    let offset = _start.saturating_sub(1292);
                    let start = 1292u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1292) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb15_inptr50c_write(offset, &_buf[start..end])?;
                }
                if _start < 1300 && _end > 1296 {
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb15_outptr510_write(offset, &_buf[start..end])?;
                }
                if _start < 1304 && _end > 1300 {
                    let offset = _start.saturating_sub(1300);
                    let start = 1300u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1300) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb15_scratchptr514_write(offset, &_buf[start..end])?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Wdt(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Wdt {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::wdt::Wdt::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=3, 1..=4) => {
                return Err(MemError::ReadViolation);
            }
            (256..=259, 257..=260) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .wdt_events_timeout100_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .wdt_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .wdt_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1024..=1031, 1025..=1032) => {
                if _start < 1028 && _end > 1024 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .wdt_runstatus400_read()?
                        .to_ne_bytes();
                    if _start <= 1024 && _end > 1024 {
                        _buf[(1024 - _start) as usize] = value[0];
                    }
                    if _start <= 1025 && _end > 1025 {
                        _buf[(1025 - _start) as usize] = value[1];
                    }
                    if _start <= 1026 && _end > 1026 {
                        _buf[(1026 - _start) as usize] = value[2];
                    }
                    if _start <= 1027 && _end > 1027 {
                        _buf[(1027 - _start) as usize] = value[3];
                    }
                }
                if _start < 1032 && _end > 1028 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .wdt_reqstatus404_read()?
                        .to_ne_bytes();
                    if _start <= 1028 && _end > 1028 {
                        _buf[(1028 - _start) as usize] = value[0];
                    }
                    if _start <= 1029 && _end > 1029 {
                        _buf[(1029 - _start) as usize] = value[1];
                    }
                    if _start <= 1030 && _end > 1030 {
                        _buf[(1030 - _start) as usize] = value[2];
                    }
                    if _start <= 1031 && _end > 1031 {
                        _buf[(1031 - _start) as usize] = value[3];
                    }
                }
            }
            (1284..=1295, 1285..=1296) => {
                if _start < 1288 && _end > 1284 {
                    let value =
                        self.0.lock().unwrap().wdt_crv504_read()?.to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .wdt_rren508_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
                if _start < 1296 && _end > 1292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .wdt_config50c_read()?
                        .to_ne_bytes();
                    if _start <= 1292 && _end > 1292 {
                        _buf[(1292 - _start) as usize] = value[0];
                    }
                    if _start <= 1293 && _end > 1293 {
                        _buf[(1293 - _start) as usize] = value[1];
                    }
                    if _start <= 1294 && _end > 1294 {
                        _buf[(1294 - _start) as usize] = value[2];
                    }
                    if _start <= 1295 && _end > 1295 {
                        _buf[(1295 - _start) as usize] = value[3];
                    }
                }
            }
            (1536..=1567, 1537..=1568) => {
                return Err(MemError::ReadViolation);
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::wdt::Wdt::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=3, 1..=4) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .wdt_tasks_start0_write(offset, &_buf[start..end])?;
                }
            }
            (256..=259, 257..=260) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().wdt_events_timeout100_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .wdt_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .wdt_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1024..=1031, 1025..=1032) => {
                return Err(MemError::WriteViolation);
            }
            (1284..=1295, 1285..=1296) => {
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .wdt_crv504_write(offset, &_buf[start..end])?;
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .wdt_rren508_write(offset, &_buf[start..end])?;
                }
                if _start < 1296 && _end > 1292 {
                    let offset = _start.saturating_sub(1292);
                    let start = 1292u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1292) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .wdt_config50c_write(offset, &_buf[start..end])?;
                }
            }
            (1536..=1567, 1537..=1568) => {
                if _start < 1568 && _end > 1536 {
                    let _dim = ((_start - 1536) % 4) as usize;
                    let offset = _start.saturating_sub(1536);
                    let start = 1536u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1536) - offset) as usize;
                    self.0.lock().unwrap().wdt_rrn600_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Qdec(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Qdec {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::qdec::Qdec::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=19, 1..=20) => {
                return Err(MemError::ReadViolation);
            }
            (256..=275, 257..=276) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_events_samplerdy100_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_events_reportrdy104_read()?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 268 && _end > 264 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_events_accof108_read()?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                }
                if _start < 272 && _end > 268 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_events_dblrdy10c_read()?
                        .to_ne_bytes();
                    if _start <= 268 && _end > 268 {
                        _buf[(268 - _start) as usize] = value[0];
                    }
                    if _start <= 269 && _end > 269 {
                        _buf[(269 - _start) as usize] = value[1];
                    }
                    if _start <= 270 && _end > 270 {
                        _buf[(270 - _start) as usize] = value[2];
                    }
                    if _start <= 271 && _end > 271 {
                        _buf[(271 - _start) as usize] = value[3];
                    }
                }
                if _start < 276 && _end > 272 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_events_stopped110_read()?
                        .to_ne_bytes();
                    if _start <= 272 && _end > 272 {
                        _buf[(272 - _start) as usize] = value[0];
                    }
                    if _start <= 273 && _end > 273 {
                        _buf[(273 - _start) as usize] = value[1];
                    }
                    if _start <= 274 && _end > 274 {
                        _buf[(274 - _start) as usize] = value[2];
                    }
                    if _start <= 275 && _end > 275 {
                        _buf[(275 - _start) as usize] = value[3];
                    }
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_shorts200_read()?
                        .to_ne_bytes();
                    if _start <= 512 && _end > 512 {
                        _buf[(512 - _start) as usize] = value[0];
                    }
                    if _start <= 513 && _end > 513 {
                        _buf[(513 - _start) as usize] = value[1];
                    }
                    if _start <= 514 && _end > 514 {
                        _buf[(514 - _start) as usize] = value[2];
                    }
                    if _start <= 515 && _end > 515 {
                        _buf[(515 - _start) as usize] = value[3];
                    }
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1280..=1323, 1281..=1324) => {
                if _start < 1284 && _end > 1280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_enable500_read()?
                        .to_ne_bytes();
                    if _start <= 1280 && _end > 1280 {
                        _buf[(1280 - _start) as usize] = value[0];
                    }
                    if _start <= 1281 && _end > 1281 {
                        _buf[(1281 - _start) as usize] = value[1];
                    }
                    if _start <= 1282 && _end > 1282 {
                        _buf[(1282 - _start) as usize] = value[2];
                    }
                    if _start <= 1283 && _end > 1283 {
                        _buf[(1283 - _start) as usize] = value[3];
                    }
                }
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_ledpol504_read()?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_sampleper508_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
                if _start < 1296 && _end > 1292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_sample50c_read()?
                        .to_ne_bytes();
                    if _start <= 1292 && _end > 1292 {
                        _buf[(1292 - _start) as usize] = value[0];
                    }
                    if _start <= 1293 && _end > 1293 {
                        _buf[(1293 - _start) as usize] = value[1];
                    }
                    if _start <= 1294 && _end > 1294 {
                        _buf[(1294 - _start) as usize] = value[2];
                    }
                    if _start <= 1295 && _end > 1295 {
                        _buf[(1295 - _start) as usize] = value[3];
                    }
                }
                if _start < 1300 && _end > 1296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_reportper510_read()?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
                if _start < 1304 && _end > 1300 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_acc514_read()?
                        .to_ne_bytes();
                    if _start <= 1300 && _end > 1300 {
                        _buf[(1300 - _start) as usize] = value[0];
                    }
                    if _start <= 1301 && _end > 1301 {
                        _buf[(1301 - _start) as usize] = value[1];
                    }
                    if _start <= 1302 && _end > 1302 {
                        _buf[(1302 - _start) as usize] = value[2];
                    }
                    if _start <= 1303 && _end > 1303 {
                        _buf[(1303 - _start) as usize] = value[3];
                    }
                }
                if _start < 1308 && _end > 1304 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_accread518_read()?
                        .to_ne_bytes();
                    if _start <= 1304 && _end > 1304 {
                        _buf[(1304 - _start) as usize] = value[0];
                    }
                    if _start <= 1305 && _end > 1305 {
                        _buf[(1305 - _start) as usize] = value[1];
                    }
                    if _start <= 1306 && _end > 1306 {
                        _buf[(1306 - _start) as usize] = value[2];
                    }
                    if _start <= 1307 && _end > 1307 {
                        _buf[(1307 - _start) as usize] = value[3];
                    }
                }
                if _start < 1312 && _end > 1308 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_psel_led0_read()?
                        .to_ne_bytes();
                    if _start <= 1308 && _end > 1308 {
                        _buf[(1308 - _start) as usize] = value[0];
                    }
                    if _start <= 1309 && _end > 1309 {
                        _buf[(1309 - _start) as usize] = value[1];
                    }
                    if _start <= 1310 && _end > 1310 {
                        _buf[(1310 - _start) as usize] = value[2];
                    }
                    if _start <= 1311 && _end > 1311 {
                        _buf[(1311 - _start) as usize] = value[3];
                    }
                }
                if _start < 1316 && _end > 1312 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_psel_a4_read()?
                        .to_ne_bytes();
                    if _start <= 1312 && _end > 1312 {
                        _buf[(1312 - _start) as usize] = value[0];
                    }
                    if _start <= 1313 && _end > 1313 {
                        _buf[(1313 - _start) as usize] = value[1];
                    }
                    if _start <= 1314 && _end > 1314 {
                        _buf[(1314 - _start) as usize] = value[2];
                    }
                    if _start <= 1315 && _end > 1315 {
                        _buf[(1315 - _start) as usize] = value[3];
                    }
                }
                if _start < 1320 && _end > 1316 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_psel_b8_read()?
                        .to_ne_bytes();
                    if _start <= 1316 && _end > 1316 {
                        _buf[(1316 - _start) as usize] = value[0];
                    }
                    if _start <= 1317 && _end > 1317 {
                        _buf[(1317 - _start) as usize] = value[1];
                    }
                    if _start <= 1318 && _end > 1318 {
                        _buf[(1318 - _start) as usize] = value[2];
                    }
                    if _start <= 1319 && _end > 1319 {
                        _buf[(1319 - _start) as usize] = value[3];
                    }
                }
                if _start < 1324 && _end > 1320 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_dbfen528_read()?
                        .to_ne_bytes();
                    if _start <= 1320 && _end > 1320 {
                        _buf[(1320 - _start) as usize] = value[0];
                    }
                    if _start <= 1321 && _end > 1321 {
                        _buf[(1321 - _start) as usize] = value[1];
                    }
                    if _start <= 1322 && _end > 1322 {
                        _buf[(1322 - _start) as usize] = value[2];
                    }
                    if _start <= 1323 && _end > 1323 {
                        _buf[(1323 - _start) as usize] = value[3];
                    }
                }
            }
            (1344..=1355, 1345..=1356) => {
                if _start < 1348 && _end > 1344 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_ledpre540_read()?
                        .to_ne_bytes();
                    if _start <= 1344 && _end > 1344 {
                        _buf[(1344 - _start) as usize] = value[0];
                    }
                    if _start <= 1345 && _end > 1345 {
                        _buf[(1345 - _start) as usize] = value[1];
                    }
                    if _start <= 1346 && _end > 1346 {
                        _buf[(1346 - _start) as usize] = value[2];
                    }
                    if _start <= 1347 && _end > 1347 {
                        _buf[(1347 - _start) as usize] = value[3];
                    }
                }
                if _start < 1352 && _end > 1348 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_accdbl544_read()?
                        .to_ne_bytes();
                    if _start <= 1348 && _end > 1348 {
                        _buf[(1348 - _start) as usize] = value[0];
                    }
                    if _start <= 1349 && _end > 1349 {
                        _buf[(1349 - _start) as usize] = value[1];
                    }
                    if _start <= 1350 && _end > 1350 {
                        _buf[(1350 - _start) as usize] = value[2];
                    }
                    if _start <= 1351 && _end > 1351 {
                        _buf[(1351 - _start) as usize] = value[3];
                    }
                }
                if _start < 1356 && _end > 1352 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .qdec_accdblread548_read()?
                        .to_ne_bytes();
                    if _start <= 1352 && _end > 1352 {
                        _buf[(1352 - _start) as usize] = value[0];
                    }
                    if _start <= 1353 && _end > 1353 {
                        _buf[(1353 - _start) as usize] = value[1];
                    }
                    if _start <= 1354 && _end > 1354 {
                        _buf[(1354 - _start) as usize] = value[2];
                    }
                    if _start <= 1355 && _end > 1355 {
                        _buf[(1355 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::qdec::Qdec::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=19, 1..=20) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .qdec_tasks_start0_write(offset, &_buf[start..end])?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .qdec_tasks_stop4_write(offset, &_buf[start..end])?;
                }
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0.lock().unwrap().qdec_tasks_readclracc8_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 16 && _end > 12 {
                    let offset = _start.saturating_sub(12);
                    let start = 12u64.saturating_sub(_start) as usize;
                    let end = ((_end - 12) - offset) as usize;
                    self.0.lock().unwrap().qdec_tasks_rdclraccc_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 20 && _end > 16 {
                    let offset = _start.saturating_sub(16);
                    let start = 16u64.saturating_sub(_start) as usize;
                    let end = ((_end - 16) - offset) as usize;
                    self.0.lock().unwrap().qdec_tasks_rdclrdbl10_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (256..=275, 257..=276) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().qdec_events_samplerdy100_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0.lock().unwrap().qdec_events_reportrdy104_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 268 && _end > 264 {
                    let offset = _start.saturating_sub(264);
                    let start = 264u64.saturating_sub(_start) as usize;
                    let end = ((_end - 264) - offset) as usize;
                    self.0.lock().unwrap().qdec_events_accof108_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 272 && _end > 268 {
                    let offset = _start.saturating_sub(268);
                    let start = 268u64.saturating_sub(_start) as usize;
                    let end = ((_end - 268) - offset) as usize;
                    self.0.lock().unwrap().qdec_events_dblrdy10c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 276 && _end > 272 {
                    let offset = _start.saturating_sub(272);
                    let start = 272u64.saturating_sub(_start) as usize;
                    let end = ((_end - 272) - offset) as usize;
                    self.0.lock().unwrap().qdec_events_stopped110_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let offset = _start.saturating_sub(512);
                    let start = 512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 512) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .qdec_shorts200_write(offset, &_buf[start..end])?;
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .qdec_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .qdec_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1280..=1323, 1281..=1324) => {
                if _start < 1284 && _end > 1280 {
                    let offset = _start.saturating_sub(1280);
                    let start = 1280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1280) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .qdec_enable500_write(offset, &_buf[start..end])?;
                }
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .qdec_ledpol504_write(offset, &_buf[start..end])?;
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .qdec_sampleper508_write(offset, &_buf[start..end])?;
                }
                if _start < 1296 && _end > 1292 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 1300 && _end > 1296 {
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .qdec_reportper510_write(offset, &_buf[start..end])?;
                }
                if _start < 1304 && _end > 1300 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 1308 && _end > 1304 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 1312 && _end > 1308 {
                    let offset = _start.saturating_sub(1308);
                    let start = 1308u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1308) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .qdec_psel_led0_write(offset, &_buf[start..end])?;
                }
                if _start < 1316 && _end > 1312 {
                    let offset = _start.saturating_sub(1312);
                    let start = 1312u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1312) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .qdec_psel_a4_write(offset, &_buf[start..end])?;
                }
                if _start < 1320 && _end > 1316 {
                    let offset = _start.saturating_sub(1316);
                    let start = 1316u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1316) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .qdec_psel_b8_write(offset, &_buf[start..end])?;
                }
                if _start < 1324 && _end > 1320 {
                    let offset = _start.saturating_sub(1320);
                    let start = 1320u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1320) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .qdec_dbfen528_write(offset, &_buf[start..end])?;
                }
            }
            (1344..=1355, 1345..=1356) => {
                if _start < 1348 && _end > 1344 {
                    let offset = _start.saturating_sub(1344);
                    let start = 1344u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1344) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .qdec_ledpre540_write(offset, &_buf[start..end])?;
                }
                if _start < 1352 && _end > 1348 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 1356 && _end > 1352 {
                    return Err(MemError::WriteViolation);
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Apb19(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Apb19 {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::apb19::Apb19::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=11, 1..=12) => {
                return Err(MemError::ReadViolation);
            }
            (256..=271, 257..=272) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_events_ready100_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_events_down104_read()?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 268 && _end > 264 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_events_up108_read()?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                }
                if _start < 272 && _end > 268 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_events_cross10c_read()?
                        .to_ne_bytes();
                    if _start <= 268 && _end > 268 {
                        _buf[(268 - _start) as usize] = value[0];
                    }
                    if _start <= 269 && _end > 269 {
                        _buf[(269 - _start) as usize] = value[1];
                    }
                    if _start <= 270 && _end > 270 {
                        _buf[(270 - _start) as usize] = value[2];
                    }
                    if _start <= 271 && _end > 271 {
                        _buf[(271 - _start) as usize] = value[3];
                    }
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_shorts200_read()?
                        .to_ne_bytes();
                    if _start <= 512 && _end > 512 {
                        _buf[(512 - _start) as usize] = value[0];
                    }
                    if _start <= 513 && _end > 513 {
                        _buf[(513 - _start) as usize] = value[1];
                    }
                    if _start <= 514 && _end > 514 {
                        _buf[(514 - _start) as usize] = value[2];
                    }
                    if _start <= 515 && _end > 515 {
                        _buf[(515 - _start) as usize] = value[3];
                    }
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_inten300_read()?
                        .to_ne_bytes();
                    if _start <= 768 && _end > 768 {
                        _buf[(768 - _start) as usize] = value[0];
                    }
                    if _start <= 769 && _end > 769 {
                        _buf[(769 - _start) as usize] = value[1];
                    }
                    if _start <= 770 && _end > 770 {
                        _buf[(770 - _start) as usize] = value[2];
                    }
                    if _start <= 771 && _end > 771 {
                        _buf[(771 - _start) as usize] = value[3];
                    }
                }
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1024..=1027, 1025..=1028) => {
                if _start < 1028 && _end > 1024 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_result400_read()?
                        .to_ne_bytes();
                    if _start <= 1024 && _end > 1024 {
                        _buf[(1024 - _start) as usize] = value[0];
                    }
                    if _start <= 1025 && _end > 1025 {
                        _buf[(1025 - _start) as usize] = value[1];
                    }
                    if _start <= 1026 && _end > 1026 {
                        _buf[(1026 - _start) as usize] = value[2];
                    }
                    if _start <= 1027 && _end > 1027 {
                        _buf[(1027 - _start) as usize] = value[3];
                    }
                }
            }
            (1280..=1295, 1281..=1296) => {
                if _start < 1284 && _end > 1280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_enable500_read()?
                        .to_ne_bytes();
                    if _start <= 1280 && _end > 1280 {
                        _buf[(1280 - _start) as usize] = value[0];
                    }
                    if _start <= 1281 && _end > 1281 {
                        _buf[(1281 - _start) as usize] = value[1];
                    }
                    if _start <= 1282 && _end > 1282 {
                        _buf[(1282 - _start) as usize] = value[2];
                    }
                    if _start <= 1283 && _end > 1283 {
                        _buf[(1283 - _start) as usize] = value[3];
                    }
                }
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_psel504_read()?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_refsel508_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
                if _start < 1296 && _end > 1292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_extrefsel50c_read()?
                        .to_ne_bytes();
                    if _start <= 1292 && _end > 1292 {
                        _buf[(1292 - _start) as usize] = value[0];
                    }
                    if _start <= 1293 && _end > 1293 {
                        _buf[(1293 - _start) as usize] = value[1];
                    }
                    if _start <= 1294 && _end > 1294 {
                        _buf[(1294 - _start) as usize] = value[2];
                    }
                    if _start <= 1295 && _end > 1295 {
                        _buf[(1295 - _start) as usize] = value[3];
                    }
                }
            }
            (1312..=1315, 1313..=1316) => {
                if _start < 1316 && _end > 1312 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_anadetect520_read()?
                        .to_ne_bytes();
                    if _start <= 1312 && _end > 1312 {
                        _buf[(1312 - _start) as usize] = value[0];
                    }
                    if _start <= 1313 && _end > 1313 {
                        _buf[(1313 - _start) as usize] = value[1];
                    }
                    if _start <= 1314 && _end > 1314 {
                        _buf[(1314 - _start) as usize] = value[2];
                    }
                    if _start <= 1315 && _end > 1315 {
                        _buf[(1315 - _start) as usize] = value[3];
                    }
                }
            }
            (1328..=1343, 1329..=1344) => {
                if _start < 1332 && _end > 1328 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_th530_read()?
                        .to_ne_bytes();
                    if _start <= 1328 && _end > 1328 {
                        _buf[(1328 - _start) as usize] = value[0];
                    }
                    if _start <= 1329 && _end > 1329 {
                        _buf[(1329 - _start) as usize] = value[1];
                    }
                    if _start <= 1330 && _end > 1330 {
                        _buf[(1330 - _start) as usize] = value[2];
                    }
                    if _start <= 1331 && _end > 1331 {
                        _buf[(1331 - _start) as usize] = value[3];
                    }
                }
                if _start < 1336 && _end > 1332 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_mode534_read()?
                        .to_ne_bytes();
                    if _start <= 1332 && _end > 1332 {
                        _buf[(1332 - _start) as usize] = value[0];
                    }
                    if _start <= 1333 && _end > 1333 {
                        _buf[(1333 - _start) as usize] = value[1];
                    }
                    if _start <= 1334 && _end > 1334 {
                        _buf[(1334 - _start) as usize] = value[2];
                    }
                    if _start <= 1335 && _end > 1335 {
                        _buf[(1335 - _start) as usize] = value[3];
                    }
                }
                if _start < 1340 && _end > 1336 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_hyst538_read()?
                        .to_ne_bytes();
                    if _start <= 1336 && _end > 1336 {
                        _buf[(1336 - _start) as usize] = value[0];
                    }
                    if _start <= 1337 && _end > 1337 {
                        _buf[(1337 - _start) as usize] = value[1];
                    }
                    if _start <= 1338 && _end > 1338 {
                        _buf[(1338 - _start) as usize] = value[2];
                    }
                    if _start <= 1339 && _end > 1339 {
                        _buf[(1339 - _start) as usize] = value[3];
                    }
                }
                if _start < 1344 && _end > 1340 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb19_isource53c_read()?
                        .to_ne_bytes();
                    if _start <= 1340 && _end > 1340 {
                        _buf[(1340 - _start) as usize] = value[0];
                    }
                    if _start <= 1341 && _end > 1341 {
                        _buf[(1341 - _start) as usize] = value[1];
                    }
                    if _start <= 1342 && _end > 1342 {
                        _buf[(1342 - _start) as usize] = value[2];
                    }
                    if _start <= 1343 && _end > 1343 {
                        _buf[(1343 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::apb19::Apb19::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=11, 1..=12) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_tasks_start0_write(offset, &_buf[start..end])?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_tasks_stop4_write(offset, &_buf[start..end])?;
                }
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_tasks_sample8_write(offset, &_buf[start..end])?;
                }
            }
            (256..=271, 257..=272) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().apb19_events_ready100_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0.lock().unwrap().apb19_events_down104_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 268 && _end > 264 {
                    let offset = _start.saturating_sub(264);
                    let start = 264u64.saturating_sub(_start) as usize;
                    let end = ((_end - 264) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_events_up108_write(offset, &_buf[start..end])?;
                }
                if _start < 272 && _end > 268 {
                    let offset = _start.saturating_sub(268);
                    let start = 268u64.saturating_sub(_start) as usize;
                    let end = ((_end - 268) - offset) as usize;
                    self.0.lock().unwrap().apb19_events_cross10c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let offset = _start.saturating_sub(512);
                    let start = 512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 512) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_shorts200_write(offset, &_buf[start..end])?;
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let offset = _start.saturating_sub(768);
                    let start = 768u64.saturating_sub(_start) as usize;
                    let end = ((_end - 768) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_inten300_write(offset, &_buf[start..end])?;
                }
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1024..=1027, 1025..=1028) => {
                return Err(MemError::WriteViolation);
            }
            (1280..=1295, 1281..=1296) => {
                if _start < 1284 && _end > 1280 {
                    let offset = _start.saturating_sub(1280);
                    let start = 1280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1280) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_enable500_write(offset, &_buf[start..end])?;
                }
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_psel504_write(offset, &_buf[start..end])?;
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_refsel508_write(offset, &_buf[start..end])?;
                }
                if _start < 1296 && _end > 1292 {
                    let offset = _start.saturating_sub(1292);
                    let start = 1292u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1292) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_extrefsel50c_write(offset, &_buf[start..end])?;
                }
            }
            (1312..=1315, 1313..=1316) => {
                if _start < 1316 && _end > 1312 {
                    let offset = _start.saturating_sub(1312);
                    let start = 1312u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1312) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_anadetect520_write(offset, &_buf[start..end])?;
                }
            }
            (1328..=1343, 1329..=1344) => {
                if _start < 1332 && _end > 1328 {
                    let offset = _start.saturating_sub(1328);
                    let start = 1328u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1328) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_th530_write(offset, &_buf[start..end])?;
                }
                if _start < 1336 && _end > 1332 {
                    let offset = _start.saturating_sub(1332);
                    let start = 1332u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1332) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_mode534_write(offset, &_buf[start..end])?;
                }
                if _start < 1340 && _end > 1336 {
                    let offset = _start.saturating_sub(1336);
                    let start = 1336u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1336) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_hyst538_write(offset, &_buf[start..end])?;
                }
                if _start < 1344 && _end > 1340 {
                    let offset = _start.saturating_sub(1340);
                    let start = 1340u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1340) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb19_isource53c_write(offset, &_buf[start..end])?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Apb20(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Apb20 {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::apb20::Apb20::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=63, 1..=64) => {
                return Err(MemError::ReadViolation);
            }
            (256..=319, 257..=320) => {
                if _start < 320 && _end > 256 {
                    let _dim = ((_start - 256) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb20_events_triggeredn100_read(_instance_page, _dim)?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[4];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[5];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[6];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[7];
                    }
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[8];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[9];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[10];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[11];
                    }
                    if _start <= 268 && _end > 268 {
                        _buf[(268 - _start) as usize] = value[12];
                    }
                    if _start <= 269 && _end > 269 {
                        _buf[(269 - _start) as usize] = value[13];
                    }
                    if _start <= 270 && _end > 270 {
                        _buf[(270 - _start) as usize] = value[14];
                    }
                    if _start <= 271 && _end > 271 {
                        _buf[(271 - _start) as usize] = value[15];
                    }
                    if _start <= 272 && _end > 272 {
                        _buf[(272 - _start) as usize] = value[16];
                    }
                    if _start <= 273 && _end > 273 {
                        _buf[(273 - _start) as usize] = value[17];
                    }
                    if _start <= 274 && _end > 274 {
                        _buf[(274 - _start) as usize] = value[18];
                    }
                    if _start <= 275 && _end > 275 {
                        _buf[(275 - _start) as usize] = value[19];
                    }
                    if _start <= 276 && _end > 276 {
                        _buf[(276 - _start) as usize] = value[20];
                    }
                    if _start <= 277 && _end > 277 {
                        _buf[(277 - _start) as usize] = value[21];
                    }
                    if _start <= 278 && _end > 278 {
                        _buf[(278 - _start) as usize] = value[22];
                    }
                    if _start <= 279 && _end > 279 {
                        _buf[(279 - _start) as usize] = value[23];
                    }
                    if _start <= 280 && _end > 280 {
                        _buf[(280 - _start) as usize] = value[24];
                    }
                    if _start <= 281 && _end > 281 {
                        _buf[(281 - _start) as usize] = value[25];
                    }
                    if _start <= 282 && _end > 282 {
                        _buf[(282 - _start) as usize] = value[26];
                    }
                    if _start <= 283 && _end > 283 {
                        _buf[(283 - _start) as usize] = value[27];
                    }
                    if _start <= 284 && _end > 284 {
                        _buf[(284 - _start) as usize] = value[28];
                    }
                    if _start <= 285 && _end > 285 {
                        _buf[(285 - _start) as usize] = value[29];
                    }
                    if _start <= 286 && _end > 286 {
                        _buf[(286 - _start) as usize] = value[30];
                    }
                    if _start <= 287 && _end > 287 {
                        _buf[(287 - _start) as usize] = value[31];
                    }
                    if _start <= 288 && _end > 288 {
                        _buf[(288 - _start) as usize] = value[32];
                    }
                    if _start <= 289 && _end > 289 {
                        _buf[(289 - _start) as usize] = value[33];
                    }
                    if _start <= 290 && _end > 290 {
                        _buf[(290 - _start) as usize] = value[34];
                    }
                    if _start <= 291 && _end > 291 {
                        _buf[(291 - _start) as usize] = value[35];
                    }
                    if _start <= 292 && _end > 292 {
                        _buf[(292 - _start) as usize] = value[36];
                    }
                    if _start <= 293 && _end > 293 {
                        _buf[(293 - _start) as usize] = value[37];
                    }
                    if _start <= 294 && _end > 294 {
                        _buf[(294 - _start) as usize] = value[38];
                    }
                    if _start <= 295 && _end > 295 {
                        _buf[(295 - _start) as usize] = value[39];
                    }
                    if _start <= 296 && _end > 296 {
                        _buf[(296 - _start) as usize] = value[40];
                    }
                    if _start <= 297 && _end > 297 {
                        _buf[(297 - _start) as usize] = value[41];
                    }
                    if _start <= 298 && _end > 298 {
                        _buf[(298 - _start) as usize] = value[42];
                    }
                    if _start <= 299 && _end > 299 {
                        _buf[(299 - _start) as usize] = value[43];
                    }
                    if _start <= 300 && _end > 300 {
                        _buf[(300 - _start) as usize] = value[44];
                    }
                    if _start <= 301 && _end > 301 {
                        _buf[(301 - _start) as usize] = value[45];
                    }
                    if _start <= 302 && _end > 302 {
                        _buf[(302 - _start) as usize] = value[46];
                    }
                    if _start <= 303 && _end > 303 {
                        _buf[(303 - _start) as usize] = value[47];
                    }
                    if _start <= 304 && _end > 304 {
                        _buf[(304 - _start) as usize] = value[48];
                    }
                    if _start <= 305 && _end > 305 {
                        _buf[(305 - _start) as usize] = value[49];
                    }
                    if _start <= 306 && _end > 306 {
                        _buf[(306 - _start) as usize] = value[50];
                    }
                    if _start <= 307 && _end > 307 {
                        _buf[(307 - _start) as usize] = value[51];
                    }
                    if _start <= 308 && _end > 308 {
                        _buf[(308 - _start) as usize] = value[52];
                    }
                    if _start <= 309 && _end > 309 {
                        _buf[(309 - _start) as usize] = value[53];
                    }
                    if _start <= 310 && _end > 310 {
                        _buf[(310 - _start) as usize] = value[54];
                    }
                    if _start <= 311 && _end > 311 {
                        _buf[(311 - _start) as usize] = value[55];
                    }
                    if _start <= 312 && _end > 312 {
                        _buf[(312 - _start) as usize] = value[56];
                    }
                    if _start <= 313 && _end > 313 {
                        _buf[(313 - _start) as usize] = value[57];
                    }
                    if _start <= 314 && _end > 314 {
                        _buf[(314 - _start) as usize] = value[58];
                    }
                    if _start <= 315 && _end > 315 {
                        _buf[(315 - _start) as usize] = value[59];
                    }
                    if _start <= 316 && _end > 316 {
                        _buf[(316 - _start) as usize] = value[60];
                    }
                    if _start <= 317 && _end > 317 {
                        _buf[(317 - _start) as usize] = value[61];
                    }
                    if _start <= 318 && _end > 318 {
                        _buf[(318 - _start) as usize] = value[62];
                    }
                    if _start <= 319 && _end > 319 {
                        _buf[(319 - _start) as usize] = value[63];
                    }
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb20_inten300_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 768 && _end > 768 {
                        _buf[(768 - _start) as usize] = value[0];
                    }
                    if _start <= 769 && _end > 769 {
                        _buf[(769 - _start) as usize] = value[1];
                    }
                    if _start <= 770 && _end > 770 {
                        _buf[(770 - _start) as usize] = value[2];
                    }
                    if _start <= 771 && _end > 771 {
                        _buf[(771 - _start) as usize] = value[3];
                    }
                }
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb20_intenset304_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb20_intenclr308_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::apb20::Apb20::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=63, 1..=64) => {
                if _start < 64 && _end > 0 {
                    let _dim = ((_start - 0) % 4) as usize;
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0.lock().unwrap().apb20_tasks_triggern0_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (256..=319, 257..=320) => {
                if _start < 320 && _end > 256 {
                    let _dim = ((_start - 256) % 4) as usize;
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().apb20_events_triggeredn100_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let offset = _start.saturating_sub(768);
                    let start = 768u64.saturating_sub(_start) as usize;
                    let end = ((_end - 768) - offset) as usize;
                    self.0.lock().unwrap().apb20_inten300_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0.lock().unwrap().apb20_intenset304_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0.lock().unwrap().apb20_intenclr308_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Timer3(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Timer3 {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::timer3::Timer3::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=19, 1..=20) => {
                return Err(MemError::ReadViolation);
            }
            (64..=87, 65..=88) => {
                return Err(MemError::ReadViolation);
            }
            (320..=343, 321..=344) => {
                if _start < 344 && _end > 320 {
                    let _dim = ((_start - 320) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer3_events_comparen140_read(_instance_page, _dim)?
                        .to_ne_bytes();
                    if _start <= 320 && _end > 320 {
                        _buf[(320 - _start) as usize] = value[0];
                    }
                    if _start <= 321 && _end > 321 {
                        _buf[(321 - _start) as usize] = value[1];
                    }
                    if _start <= 322 && _end > 322 {
                        _buf[(322 - _start) as usize] = value[2];
                    }
                    if _start <= 323 && _end > 323 {
                        _buf[(323 - _start) as usize] = value[3];
                    }
                    if _start <= 324 && _end > 324 {
                        _buf[(324 - _start) as usize] = value[4];
                    }
                    if _start <= 325 && _end > 325 {
                        _buf[(325 - _start) as usize] = value[5];
                    }
                    if _start <= 326 && _end > 326 {
                        _buf[(326 - _start) as usize] = value[6];
                    }
                    if _start <= 327 && _end > 327 {
                        _buf[(327 - _start) as usize] = value[7];
                    }
                    if _start <= 328 && _end > 328 {
                        _buf[(328 - _start) as usize] = value[8];
                    }
                    if _start <= 329 && _end > 329 {
                        _buf[(329 - _start) as usize] = value[9];
                    }
                    if _start <= 330 && _end > 330 {
                        _buf[(330 - _start) as usize] = value[10];
                    }
                    if _start <= 331 && _end > 331 {
                        _buf[(331 - _start) as usize] = value[11];
                    }
                    if _start <= 332 && _end > 332 {
                        _buf[(332 - _start) as usize] = value[12];
                    }
                    if _start <= 333 && _end > 333 {
                        _buf[(333 - _start) as usize] = value[13];
                    }
                    if _start <= 334 && _end > 334 {
                        _buf[(334 - _start) as usize] = value[14];
                    }
                    if _start <= 335 && _end > 335 {
                        _buf[(335 - _start) as usize] = value[15];
                    }
                    if _start <= 336 && _end > 336 {
                        _buf[(336 - _start) as usize] = value[16];
                    }
                    if _start <= 337 && _end > 337 {
                        _buf[(337 - _start) as usize] = value[17];
                    }
                    if _start <= 338 && _end > 338 {
                        _buf[(338 - _start) as usize] = value[18];
                    }
                    if _start <= 339 && _end > 339 {
                        _buf[(339 - _start) as usize] = value[19];
                    }
                    if _start <= 340 && _end > 340 {
                        _buf[(340 - _start) as usize] = value[20];
                    }
                    if _start <= 341 && _end > 341 {
                        _buf[(341 - _start) as usize] = value[21];
                    }
                    if _start <= 342 && _end > 342 {
                        _buf[(342 - _start) as usize] = value[22];
                    }
                    if _start <= 343 && _end > 343 {
                        _buf[(343 - _start) as usize] = value[23];
                    }
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer3_shorts200_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 512 && _end > 512 {
                        _buf[(512 - _start) as usize] = value[0];
                    }
                    if _start <= 513 && _end > 513 {
                        _buf[(513 - _start) as usize] = value[1];
                    }
                    if _start <= 514 && _end > 514 {
                        _buf[(514 - _start) as usize] = value[2];
                    }
                    if _start <= 515 && _end > 515 {
                        _buf[(515 - _start) as usize] = value[3];
                    }
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer3_intenset304_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer3_intenclr308_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1284..=1291, 1285..=1292) => {
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer3_mode504_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer3_bitmode508_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
            }
            (1296..=1299, 1297..=1300) => {
                if _start < 1300 && _end > 1296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer3_prescaler510_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
            }
            (1344..=1367, 1345..=1368) => {
                if _start < 1368 && _end > 1344 {
                    let _dim = ((_start - 1344) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .timer3_ccn540_read(_instance_page, _dim)?
                        .to_ne_bytes();
                    if _start <= 1344 && _end > 1344 {
                        _buf[(1344 - _start) as usize] = value[0];
                    }
                    if _start <= 1345 && _end > 1345 {
                        _buf[(1345 - _start) as usize] = value[1];
                    }
                    if _start <= 1346 && _end > 1346 {
                        _buf[(1346 - _start) as usize] = value[2];
                    }
                    if _start <= 1347 && _end > 1347 {
                        _buf[(1347 - _start) as usize] = value[3];
                    }
                    if _start <= 1348 && _end > 1348 {
                        _buf[(1348 - _start) as usize] = value[4];
                    }
                    if _start <= 1349 && _end > 1349 {
                        _buf[(1349 - _start) as usize] = value[5];
                    }
                    if _start <= 1350 && _end > 1350 {
                        _buf[(1350 - _start) as usize] = value[6];
                    }
                    if _start <= 1351 && _end > 1351 {
                        _buf[(1351 - _start) as usize] = value[7];
                    }
                    if _start <= 1352 && _end > 1352 {
                        _buf[(1352 - _start) as usize] = value[8];
                    }
                    if _start <= 1353 && _end > 1353 {
                        _buf[(1353 - _start) as usize] = value[9];
                    }
                    if _start <= 1354 && _end > 1354 {
                        _buf[(1354 - _start) as usize] = value[10];
                    }
                    if _start <= 1355 && _end > 1355 {
                        _buf[(1355 - _start) as usize] = value[11];
                    }
                    if _start <= 1356 && _end > 1356 {
                        _buf[(1356 - _start) as usize] = value[12];
                    }
                    if _start <= 1357 && _end > 1357 {
                        _buf[(1357 - _start) as usize] = value[13];
                    }
                    if _start <= 1358 && _end > 1358 {
                        _buf[(1358 - _start) as usize] = value[14];
                    }
                    if _start <= 1359 && _end > 1359 {
                        _buf[(1359 - _start) as usize] = value[15];
                    }
                    if _start <= 1360 && _end > 1360 {
                        _buf[(1360 - _start) as usize] = value[16];
                    }
                    if _start <= 1361 && _end > 1361 {
                        _buf[(1361 - _start) as usize] = value[17];
                    }
                    if _start <= 1362 && _end > 1362 {
                        _buf[(1362 - _start) as usize] = value[18];
                    }
                    if _start <= 1363 && _end > 1363 {
                        _buf[(1363 - _start) as usize] = value[19];
                    }
                    if _start <= 1364 && _end > 1364 {
                        _buf[(1364 - _start) as usize] = value[20];
                    }
                    if _start <= 1365 && _end > 1365 {
                        _buf[(1365 - _start) as usize] = value[21];
                    }
                    if _start <= 1366 && _end > 1366 {
                        _buf[(1366 - _start) as usize] = value[22];
                    }
                    if _start <= 1367 && _end > 1367 {
                        _buf[(1367 - _start) as usize] = value[23];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::timer3::Timer3::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=19, 1..=20) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0.lock().unwrap().timer3_tasks_start0_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0.lock().unwrap().timer3_tasks_stop4_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0.lock().unwrap().timer3_tasks_count8_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 16 && _end > 12 {
                    let offset = _start.saturating_sub(12);
                    let start = 12u64.saturating_sub(_start) as usize;
                    let end = ((_end - 12) - offset) as usize;
                    self.0.lock().unwrap().timer3_tasks_clearc_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 20 && _end > 16 {
                    let offset = _start.saturating_sub(16);
                    let start = 16u64.saturating_sub(_start) as usize;
                    let end = ((_end - 16) - offset) as usize;
                    self.0.lock().unwrap().timer3_tasks_shutdown10_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (64..=87, 65..=88) => {
                if _start < 88 && _end > 64 {
                    let _dim = ((_start - 64) % 4) as usize;
                    let offset = _start.saturating_sub(64);
                    let start = 64u64.saturating_sub(_start) as usize;
                    let end = ((_end - 64) - offset) as usize;
                    self.0.lock().unwrap().timer3_tasks_capturen40_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (320..=343, 321..=344) => {
                if _start < 344 && _end > 320 {
                    let _dim = ((_start - 320) % 4) as usize;
                    let offset = _start.saturating_sub(320);
                    let start = 320u64.saturating_sub(_start) as usize;
                    let end = ((_end - 320) - offset) as usize;
                    self.0.lock().unwrap().timer3_events_comparen140_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let offset = _start.saturating_sub(512);
                    let start = 512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 512) - offset) as usize;
                    self.0.lock().unwrap().timer3_shorts200_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0.lock().unwrap().timer3_intenset304_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0.lock().unwrap().timer3_intenclr308_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1284..=1291, 1285..=1292) => {
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0.lock().unwrap().timer3_mode504_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0.lock().unwrap().timer3_bitmode508_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1296..=1299, 1297..=1300) => {
                if _start < 1300 && _end > 1296 {
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0.lock().unwrap().timer3_prescaler510_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1344..=1367, 1345..=1368) => {
                if _start < 1368 && _end > 1344 {
                    let _dim = ((_start - 1344) % 4) as usize;
                    let offset = _start.saturating_sub(1344);
                    let start = 1344u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1344) - offset) as usize;
                    self.0.lock().unwrap().timer3_ccn540_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Pwm0(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Pwm0 {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::pwm0::Pwm0::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (4..=19, 5..=20) => {
                return Err(MemError::ReadViolation);
            }
            (260..=287, 261..=288) => {
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_events_stopped104_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 272 && _end > 264 {
                    let _dim = ((_start - 264) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_events_seqstartedn108_read(_instance_page, _dim)?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                    if _start <= 268 && _end > 268 {
                        _buf[(268 - _start) as usize] = value[4];
                    }
                    if _start <= 269 && _end > 269 {
                        _buf[(269 - _start) as usize] = value[5];
                    }
                    if _start <= 270 && _end > 270 {
                        _buf[(270 - _start) as usize] = value[6];
                    }
                    if _start <= 271 && _end > 271 {
                        _buf[(271 - _start) as usize] = value[7];
                    }
                }
                if _start < 280 && _end > 272 {
                    let _dim = ((_start - 272) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_events_seqendn110_read(_instance_page, _dim)?
                        .to_ne_bytes();
                    if _start <= 272 && _end > 272 {
                        _buf[(272 - _start) as usize] = value[0];
                    }
                    if _start <= 273 && _end > 273 {
                        _buf[(273 - _start) as usize] = value[1];
                    }
                    if _start <= 274 && _end > 274 {
                        _buf[(274 - _start) as usize] = value[2];
                    }
                    if _start <= 275 && _end > 275 {
                        _buf[(275 - _start) as usize] = value[3];
                    }
                    if _start <= 276 && _end > 276 {
                        _buf[(276 - _start) as usize] = value[4];
                    }
                    if _start <= 277 && _end > 277 {
                        _buf[(277 - _start) as usize] = value[5];
                    }
                    if _start <= 278 && _end > 278 {
                        _buf[(278 - _start) as usize] = value[6];
                    }
                    if _start <= 279 && _end > 279 {
                        _buf[(279 - _start) as usize] = value[7];
                    }
                }
                if _start < 284 && _end > 280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_events_pwmperiodend118_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 280 && _end > 280 {
                        _buf[(280 - _start) as usize] = value[0];
                    }
                    if _start <= 281 && _end > 281 {
                        _buf[(281 - _start) as usize] = value[1];
                    }
                    if _start <= 282 && _end > 282 {
                        _buf[(282 - _start) as usize] = value[2];
                    }
                    if _start <= 283 && _end > 283 {
                        _buf[(283 - _start) as usize] = value[3];
                    }
                }
                if _start < 288 && _end > 284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_events_loopsdone11c_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 284 && _end > 284 {
                        _buf[(284 - _start) as usize] = value[0];
                    }
                    if _start <= 285 && _end > 285 {
                        _buf[(285 - _start) as usize] = value[1];
                    }
                    if _start <= 286 && _end > 286 {
                        _buf[(286 - _start) as usize] = value[2];
                    }
                    if _start <= 287 && _end > 287 {
                        _buf[(287 - _start) as usize] = value[3];
                    }
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_shorts200_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 512 && _end > 512 {
                        _buf[(512 - _start) as usize] = value[0];
                    }
                    if _start <= 513 && _end > 513 {
                        _buf[(513 - _start) as usize] = value[1];
                    }
                    if _start <= 514 && _end > 514 {
                        _buf[(514 - _start) as usize] = value[2];
                    }
                    if _start <= 515 && _end > 515 {
                        _buf[(515 - _start) as usize] = value[3];
                    }
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_inten300_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 768 && _end > 768 {
                        _buf[(768 - _start) as usize] = value[0];
                    }
                    if _start <= 769 && _end > 769 {
                        _buf[(769 - _start) as usize] = value[1];
                    }
                    if _start <= 770 && _end > 770 {
                        _buf[(770 - _start) as usize] = value[2];
                    }
                    if _start <= 771 && _end > 771 {
                        _buf[(771 - _start) as usize] = value[3];
                    }
                }
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_intenset304_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_intenclr308_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1280..=1303, 1281..=1304) => {
                if _start < 1284 && _end > 1280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_enable500_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1280 && _end > 1280 {
                        _buf[(1280 - _start) as usize] = value[0];
                    }
                    if _start <= 1281 && _end > 1281 {
                        _buf[(1281 - _start) as usize] = value[1];
                    }
                    if _start <= 1282 && _end > 1282 {
                        _buf[(1282 - _start) as usize] = value[2];
                    }
                    if _start <= 1283 && _end > 1283 {
                        _buf[(1283 - _start) as usize] = value[3];
                    }
                }
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_mode504_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_countertop508_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
                if _start < 1296 && _end > 1292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_prescaler50c_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1292 && _end > 1292 {
                        _buf[(1292 - _start) as usize] = value[0];
                    }
                    if _start <= 1293 && _end > 1293 {
                        _buf[(1293 - _start) as usize] = value[1];
                    }
                    if _start <= 1294 && _end > 1294 {
                        _buf[(1294 - _start) as usize] = value[2];
                    }
                    if _start <= 1295 && _end > 1295 {
                        _buf[(1295 - _start) as usize] = value[3];
                    }
                }
                if _start < 1300 && _end > 1296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_decoder510_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
                if _start < 1304 && _end > 1300 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_loop514_read(_instance_page)?
                        .to_ne_bytes();
                    if _start <= 1300 && _end > 1300 {
                        _buf[(1300 - _start) as usize] = value[0];
                    }
                    if _start <= 1301 && _end > 1301 {
                        _buf[(1301 - _start) as usize] = value[1];
                    }
                    if _start <= 1302 && _end > 1302 {
                        _buf[(1302 - _start) as usize] = value[2];
                    }
                    if _start <= 1303 && _end > 1303 {
                        _buf[(1303 - _start) as usize] = value[3];
                    }
                }
            }
            (1312..=1391, 1313..=1392) => {
                if _start < 1376 && _end > 1312 {
                    for _seqn in 0..2 {
                        let _dim_offset = _seqn * 32;
                        if _start < 1328 + _dim_offset
                            && _end > 1312 + _dim_offset
                        {
                            let _start = 1312u64.saturating_sub(_start);
                            let _end = _end - 1312;
                            let _buf = &mut _buf[_start as usize..];
                            if _start < 16 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .pwm0_seqn_ptr0_read(
                                            _instance_page,
                                            _seqn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 0 && _end > 0 {
                                        _buf[(0 - _start) as usize] = value[0];
                                    }
                                    if _start <= 1 && _end > 1 {
                                        _buf[(1 - _start) as usize] = value[1];
                                    }
                                    if _start <= 2 && _end > 2 {
                                        _buf[(2 - _start) as usize] = value[2];
                                    }
                                    if _start <= 3 && _end > 3 {
                                        _buf[(3 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 8 && _end > 4 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .pwm0_seqn_cnt4_read(
                                            _instance_page,
                                            _seqn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 4 && _end > 4 {
                                        _buf[(4 - _start) as usize] = value[0];
                                    }
                                    if _start <= 5 && _end > 5 {
                                        _buf[(5 - _start) as usize] = value[1];
                                    }
                                    if _start <= 6 && _end > 6 {
                                        _buf[(6 - _start) as usize] = value[2];
                                    }
                                    if _start <= 7 && _end > 7 {
                                        _buf[(7 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 12 && _end > 8 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .pwm0_seqn_refresh8_read(
                                            _instance_page,
                                            _seqn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 8 && _end > 8 {
                                        _buf[(8 - _start) as usize] = value[0];
                                    }
                                    if _start <= 9 && _end > 9 {
                                        _buf[(9 - _start) as usize] = value[1];
                                    }
                                    if _start <= 10 && _end > 10 {
                                        _buf[(10 - _start) as usize] = value[2];
                                    }
                                    if _start <= 11 && _end > 11 {
                                        _buf[(11 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 16 && _end > 12 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .pwm0_seqn_enddelayc_read(
                                            _instance_page,
                                            _seqn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 12 && _end > 12 {
                                        _buf[(12 - _start) as usize] = value[0];
                                    }
                                    if _start <= 13 && _end > 13 {
                                        _buf[(13 - _start) as usize] = value[1];
                                    }
                                    if _start <= 14 && _end > 14 {
                                        _buf[(14 - _start) as usize] = value[2];
                                    }
                                    if _start <= 15 && _end > 15 {
                                        _buf[(15 - _start) as usize] = value[3];
                                    }
                                }
                            }
                        }
                    }
                }
                if _start < 1392 && _end > 1376 {
                    let _dim = ((_start - 1376) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pwm0_psel_outn0_read(_instance_page, _dim)?
                        .to_ne_bytes();
                    if _start <= 1376 && _end > 1376 {
                        _buf[(1376 - _start) as usize] = value[0];
                    }
                    if _start <= 1377 && _end > 1377 {
                        _buf[(1377 - _start) as usize] = value[1];
                    }
                    if _start <= 1378 && _end > 1378 {
                        _buf[(1378 - _start) as usize] = value[2];
                    }
                    if _start <= 1379 && _end > 1379 {
                        _buf[(1379 - _start) as usize] = value[3];
                    }
                    if _start <= 1380 && _end > 1380 {
                        _buf[(1380 - _start) as usize] = value[4];
                    }
                    if _start <= 1381 && _end > 1381 {
                        _buf[(1381 - _start) as usize] = value[5];
                    }
                    if _start <= 1382 && _end > 1382 {
                        _buf[(1382 - _start) as usize] = value[6];
                    }
                    if _start <= 1383 && _end > 1383 {
                        _buf[(1383 - _start) as usize] = value[7];
                    }
                    if _start <= 1384 && _end > 1384 {
                        _buf[(1384 - _start) as usize] = value[8];
                    }
                    if _start <= 1385 && _end > 1385 {
                        _buf[(1385 - _start) as usize] = value[9];
                    }
                    if _start <= 1386 && _end > 1386 {
                        _buf[(1386 - _start) as usize] = value[10];
                    }
                    if _start <= 1387 && _end > 1387 {
                        _buf[(1387 - _start) as usize] = value[11];
                    }
                    if _start <= 1388 && _end > 1388 {
                        _buf[(1388 - _start) as usize] = value[12];
                    }
                    if _start <= 1389 && _end > 1389 {
                        _buf[(1389 - _start) as usize] = value[13];
                    }
                    if _start <= 1390 && _end > 1390 {
                        _buf[(1390 - _start) as usize] = value[14];
                    }
                    if _start <= 1391 && _end > 1391 {
                        _buf[(1391 - _start) as usize] = value[15];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::pwm0::Pwm0::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (4..=19, 5..=20) => {
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0.lock().unwrap().pwm0_tasks_stop4_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 16 && _end > 8 {
                    let _dim = ((_start - 8) % 4) as usize;
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0.lock().unwrap().pwm0_tasks_seqstartn8_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 20 && _end > 16 {
                    let offset = _start.saturating_sub(16);
                    let start = 16u64.saturating_sub(_start) as usize;
                    let end = ((_end - 16) - offset) as usize;
                    self.0.lock().unwrap().pwm0_tasks_nextstep10_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (260..=287, 261..=288) => {
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0.lock().unwrap().pwm0_events_stopped104_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 272 && _end > 264 {
                    let _dim = ((_start - 264) % 4) as usize;
                    let offset = _start.saturating_sub(264);
                    let start = 264u64.saturating_sub(_start) as usize;
                    let end = ((_end - 264) - offset) as usize;
                    self.0.lock().unwrap().pwm0_events_seqstartedn108_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 280 && _end > 272 {
                    let _dim = ((_start - 272) % 4) as usize;
                    let offset = _start.saturating_sub(272);
                    let start = 272u64.saturating_sub(_start) as usize;
                    let end = ((_end - 272) - offset) as usize;
                    self.0.lock().unwrap().pwm0_events_seqendn110_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 284 && _end > 280 {
                    let offset = _start.saturating_sub(280);
                    let start = 280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 280) - offset) as usize;
                    self.0.lock().unwrap().pwm0_events_pwmperiodend118_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 288 && _end > 284 {
                    let offset = _start.saturating_sub(284);
                    let start = 284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 284) - offset) as usize;
                    self.0.lock().unwrap().pwm0_events_loopsdone11c_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let offset = _start.saturating_sub(512);
                    let start = 512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 512) - offset) as usize;
                    self.0.lock().unwrap().pwm0_shorts200_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let offset = _start.saturating_sub(768);
                    let start = 768u64.saturating_sub(_start) as usize;
                    let end = ((_end - 768) - offset) as usize;
                    self.0.lock().unwrap().pwm0_inten300_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0.lock().unwrap().pwm0_intenset304_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0.lock().unwrap().pwm0_intenclr308_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1280..=1303, 1281..=1304) => {
                if _start < 1284 && _end > 1280 {
                    let offset = _start.saturating_sub(1280);
                    let start = 1280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1280) - offset) as usize;
                    self.0.lock().unwrap().pwm0_enable500_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0.lock().unwrap().pwm0_mode504_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0.lock().unwrap().pwm0_countertop508_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1296 && _end > 1292 {
                    let offset = _start.saturating_sub(1292);
                    let start = 1292u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1292) - offset) as usize;
                    self.0.lock().unwrap().pwm0_prescaler50c_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1300 && _end > 1296 {
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0.lock().unwrap().pwm0_decoder510_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1304 && _end > 1300 {
                    let offset = _start.saturating_sub(1300);
                    let start = 1300u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1300) - offset) as usize;
                    self.0.lock().unwrap().pwm0_loop514_write(
                        _instance_page,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1312..=1391, 1313..=1392) => {
                if _start < 1376 && _end > 1312 {
                    for _seqn in 0..2 {
                        let _dim_offset = _seqn * 32;
                        if _start < 1328 + _dim_offset
                            && _end > 1312 + _dim_offset
                        {
                            let _start = 1312u64.saturating_sub(_start);
                            let _end = _end - 1312;
                            let _buf = &_buf[_start as usize..];
                            if _start < 16 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let offset = _start.saturating_sub(0);
                                    let start =
                                        0u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 0) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .pwm0_seqn_ptr0_write(
                                            _instance_page,
                                            _seqn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                                if _start < 8 && _end > 4 {
                                    let offset = _start.saturating_sub(4);
                                    let start =
                                        4u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 4) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .pwm0_seqn_cnt4_write(
                                            _instance_page,
                                            _seqn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                                if _start < 12 && _end > 8 {
                                    let offset = _start.saturating_sub(8);
                                    let start =
                                        8u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 8) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .pwm0_seqn_refresh8_write(
                                            _instance_page,
                                            _seqn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                                if _start < 16 && _end > 12 {
                                    let offset = _start.saturating_sub(12);
                                    let start =
                                        12u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 12) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .pwm0_seqn_enddelayc_write(
                                            _instance_page,
                                            _seqn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                            }
                        }
                    }
                }
                if _start < 1392 && _end > 1376 {
                    let _dim = ((_start - 1376) % 4) as usize;
                    let offset = _start.saturating_sub(1376);
                    let start = 1376u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1376) - offset) as usize;
                    self.0.lock().unwrap().pwm0_psel_outn0_write(
                        _instance_page,
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Pdm(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Pdm {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::pdm::Pdm::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=7, 1..=8) => {
                return Err(MemError::ReadViolation);
            }
            (256..=267, 257..=268) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_events_started100_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_events_stopped104_read()?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 268 && _end > 264 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_events_end108_read()?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_inten300_read()?
                        .to_ne_bytes();
                    if _start <= 768 && _end > 768 {
                        _buf[(768 - _start) as usize] = value[0];
                    }
                    if _start <= 769 && _end > 769 {
                        _buf[(769 - _start) as usize] = value[1];
                    }
                    if _start <= 770 && _end > 770 {
                        _buf[(770 - _start) as usize] = value[2];
                    }
                    if _start <= 771 && _end > 771 {
                        _buf[(771 - _start) as usize] = value[3];
                    }
                }
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1280..=1291, 1281..=1292) => {
                if _start < 1284 && _end > 1280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_enable500_read()?
                        .to_ne_bytes();
                    if _start <= 1280 && _end > 1280 {
                        _buf[(1280 - _start) as usize] = value[0];
                    }
                    if _start <= 1281 && _end > 1281 {
                        _buf[(1281 - _start) as usize] = value[1];
                    }
                    if _start <= 1282 && _end > 1282 {
                        _buf[(1282 - _start) as usize] = value[2];
                    }
                    if _start <= 1283 && _end > 1283 {
                        _buf[(1283 - _start) as usize] = value[3];
                    }
                }
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_pdmclkctrl504_read()?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_mode508_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
            }
            (1304..=1311, 1305..=1312) => {
                if _start < 1308 && _end > 1304 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_gainl518_read()?
                        .to_ne_bytes();
                    if _start <= 1304 && _end > 1304 {
                        _buf[(1304 - _start) as usize] = value[0];
                    }
                    if _start <= 1305 && _end > 1305 {
                        _buf[(1305 - _start) as usize] = value[1];
                    }
                    if _start <= 1306 && _end > 1306 {
                        _buf[(1306 - _start) as usize] = value[2];
                    }
                    if _start <= 1307 && _end > 1307 {
                        _buf[(1307 - _start) as usize] = value[3];
                    }
                }
                if _start < 1312 && _end > 1308 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_gainr51c_read()?
                        .to_ne_bytes();
                    if _start <= 1308 && _end > 1308 {
                        _buf[(1308 - _start) as usize] = value[0];
                    }
                    if _start <= 1309 && _end > 1309 {
                        _buf[(1309 - _start) as usize] = value[1];
                    }
                    if _start <= 1310 && _end > 1310 {
                        _buf[(1310 - _start) as usize] = value[2];
                    }
                    if _start <= 1311 && _end > 1311 {
                        _buf[(1311 - _start) as usize] = value[3];
                    }
                }
            }
            (1344..=1351, 1345..=1352) => {
                if _start < 1348 && _end > 1344 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_psel_clk0_read()?
                        .to_ne_bytes();
                    if _start <= 1344 && _end > 1344 {
                        _buf[(1344 - _start) as usize] = value[0];
                    }
                    if _start <= 1345 && _end > 1345 {
                        _buf[(1345 - _start) as usize] = value[1];
                    }
                    if _start <= 1346 && _end > 1346 {
                        _buf[(1346 - _start) as usize] = value[2];
                    }
                    if _start <= 1347 && _end > 1347 {
                        _buf[(1347 - _start) as usize] = value[3];
                    }
                }
                if _start < 1352 && _end > 1348 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_psel_din4_read()?
                        .to_ne_bytes();
                    if _start <= 1348 && _end > 1348 {
                        _buf[(1348 - _start) as usize] = value[0];
                    }
                    if _start <= 1349 && _end > 1349 {
                        _buf[(1349 - _start) as usize] = value[1];
                    }
                    if _start <= 1350 && _end > 1350 {
                        _buf[(1350 - _start) as usize] = value[2];
                    }
                    if _start <= 1351 && _end > 1351 {
                        _buf[(1351 - _start) as usize] = value[3];
                    }
                }
            }
            (1376..=1383, 1377..=1384) => {
                if _start < 1380 && _end > 1376 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_sample_ptr0_read()?
                        .to_ne_bytes();
                    if _start <= 1376 && _end > 1376 {
                        _buf[(1376 - _start) as usize] = value[0];
                    }
                    if _start <= 1377 && _end > 1377 {
                        _buf[(1377 - _start) as usize] = value[1];
                    }
                    if _start <= 1378 && _end > 1378 {
                        _buf[(1378 - _start) as usize] = value[2];
                    }
                    if _start <= 1379 && _end > 1379 {
                        _buf[(1379 - _start) as usize] = value[3];
                    }
                }
                if _start < 1384 && _end > 1380 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .pdm_sample_maxcnt4_read()?
                        .to_ne_bytes();
                    if _start <= 1380 && _end > 1380 {
                        _buf[(1380 - _start) as usize] = value[0];
                    }
                    if _start <= 1381 && _end > 1381 {
                        _buf[(1381 - _start) as usize] = value[1];
                    }
                    if _start <= 1382 && _end > 1382 {
                        _buf[(1382 - _start) as usize] = value[2];
                    }
                    if _start <= 1383 && _end > 1383 {
                        _buf[(1383 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::pdm::Pdm::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=7, 1..=8) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_tasks_start0_write(offset, &_buf[start..end])?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_tasks_stop4_write(offset, &_buf[start..end])?;
                }
            }
            (256..=267, 257..=268) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0.lock().unwrap().pdm_events_started100_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0.lock().unwrap().pdm_events_stopped104_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 268 && _end > 264 {
                    let offset = _start.saturating_sub(264);
                    let start = 264u64.saturating_sub(_start) as usize;
                    let end = ((_end - 264) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_events_end108_write(offset, &_buf[start..end])?;
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let offset = _start.saturating_sub(768);
                    let start = 768u64.saturating_sub(_start) as usize;
                    let end = ((_end - 768) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_inten300_write(offset, &_buf[start..end])?;
                }
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1280..=1291, 1281..=1292) => {
                if _start < 1284 && _end > 1280 {
                    let offset = _start.saturating_sub(1280);
                    let start = 1280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1280) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_enable500_write(offset, &_buf[start..end])?;
                }
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_pdmclkctrl504_write(offset, &_buf[start..end])?;
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_mode508_write(offset, &_buf[start..end])?;
                }
            }
            (1304..=1311, 1305..=1312) => {
                if _start < 1308 && _end > 1304 {
                    let offset = _start.saturating_sub(1304);
                    let start = 1304u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1304) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_gainl518_write(offset, &_buf[start..end])?;
                }
                if _start < 1312 && _end > 1308 {
                    let offset = _start.saturating_sub(1308);
                    let start = 1308u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1308) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_gainr51c_write(offset, &_buf[start..end])?;
                }
            }
            (1344..=1351, 1345..=1352) => {
                if _start < 1348 && _end > 1344 {
                    let offset = _start.saturating_sub(1344);
                    let start = 1344u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1344) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_psel_clk0_write(offset, &_buf[start..end])?;
                }
                if _start < 1352 && _end > 1348 {
                    let offset = _start.saturating_sub(1348);
                    let start = 1348u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1348) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_psel_din4_write(offset, &_buf[start..end])?;
                }
            }
            (1376..=1383, 1377..=1384) => {
                if _start < 1380 && _end > 1376 {
                    let offset = _start.saturating_sub(1376);
                    let start = 1376u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1376) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_sample_ptr0_write(offset, &_buf[start..end])?;
                }
                if _start < 1384 && _end > 1380 {
                    let offset = _start.saturating_sub(1380);
                    let start = 1380u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1380) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .pdm_sample_maxcnt4_write(offset, &_buf[start..end])?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Nvmc(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Nvmc {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::nvmc::Nvmc::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (1024..=1027, 1025..=1028) => {
                if _start < 1028 && _end > 1024 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nvmc_ready400_read()?
                        .to_ne_bytes();
                    if _start <= 1024 && _end > 1024 {
                        _buf[(1024 - _start) as usize] = value[0];
                    }
                    if _start <= 1025 && _end > 1025 {
                        _buf[(1025 - _start) as usize] = value[1];
                    }
                    if _start <= 1026 && _end > 1026 {
                        _buf[(1026 - _start) as usize] = value[2];
                    }
                    if _start <= 1027 && _end > 1027 {
                        _buf[(1027 - _start) as usize] = value[3];
                    }
                }
            }
            (1284..=1303, 1285..=1304) => {
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nvmc_config504_read()?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nvmc_erasepage508_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
                if _start < 1296 && _end > 1292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nvmc_eraseall50c_read()?
                        .to_ne_bytes();
                    if _start <= 1292 && _end > 1292 {
                        _buf[(1292 - _start) as usize] = value[0];
                    }
                    if _start <= 1293 && _end > 1293 {
                        _buf[(1293 - _start) as usize] = value[1];
                    }
                    if _start <= 1294 && _end > 1294 {
                        _buf[(1294 - _start) as usize] = value[2];
                    }
                    if _start <= 1295 && _end > 1295 {
                        _buf[(1295 - _start) as usize] = value[3];
                    }
                }
                if _start < 1300 && _end > 1296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nvmc_erasepcr0510_read()?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
                if _start < 1304 && _end > 1300 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nvmc_eraseuicr514_read()?
                        .to_ne_bytes();
                    if _start <= 1300 && _end > 1300 {
                        _buf[(1300 - _start) as usize] = value[0];
                    }
                    if _start <= 1301 && _end > 1301 {
                        _buf[(1301 - _start) as usize] = value[1];
                    }
                    if _start <= 1302 && _end > 1302 {
                        _buf[(1302 - _start) as usize] = value[2];
                    }
                    if _start <= 1303 && _end > 1303 {
                        _buf[(1303 - _start) as usize] = value[3];
                    }
                }
            }
            (1344..=1347, 1345..=1348) => {
                if _start < 1348 && _end > 1344 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nvmc_icachecnf540_read()?
                        .to_ne_bytes();
                    if _start <= 1344 && _end > 1344 {
                        _buf[(1344 - _start) as usize] = value[0];
                    }
                    if _start <= 1345 && _end > 1345 {
                        _buf[(1345 - _start) as usize] = value[1];
                    }
                    if _start <= 1346 && _end > 1346 {
                        _buf[(1346 - _start) as usize] = value[2];
                    }
                    if _start <= 1347 && _end > 1347 {
                        _buf[(1347 - _start) as usize] = value[3];
                    }
                }
            }
            (1352..=1359, 1353..=1360) => {
                if _start < 1356 && _end > 1352 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nvmc_ihit548_read()?
                        .to_ne_bytes();
                    if _start <= 1352 && _end > 1352 {
                        _buf[(1352 - _start) as usize] = value[0];
                    }
                    if _start <= 1353 && _end > 1353 {
                        _buf[(1353 - _start) as usize] = value[1];
                    }
                    if _start <= 1354 && _end > 1354 {
                        _buf[(1354 - _start) as usize] = value[2];
                    }
                    if _start <= 1355 && _end > 1355 {
                        _buf[(1355 - _start) as usize] = value[3];
                    }
                }
                if _start < 1360 && _end > 1356 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .nvmc_imiss54c_read()?
                        .to_ne_bytes();
                    if _start <= 1356 && _end > 1356 {
                        _buf[(1356 - _start) as usize] = value[0];
                    }
                    if _start <= 1357 && _end > 1357 {
                        _buf[(1357 - _start) as usize] = value[1];
                    }
                    if _start <= 1358 && _end > 1358 {
                        _buf[(1358 - _start) as usize] = value[2];
                    }
                    if _start <= 1359 && _end > 1359 {
                        _buf[(1359 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::nvmc::Nvmc::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (1024..=1027, 1025..=1028) => {
                return Err(MemError::WriteViolation);
            }
            (1284..=1303, 1285..=1304) => {
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nvmc_config504_write(offset, &_buf[start..end])?;
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nvmc_erasepage508_write(offset, &_buf[start..end])?;
                }
                if _start < 1296 && _end > 1292 {
                    let offset = _start.saturating_sub(1292);
                    let start = 1292u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1292) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nvmc_eraseall50c_write(offset, &_buf[start..end])?;
                }
                if _start < 1300 && _end > 1296 {
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nvmc_erasepcr0510_write(offset, &_buf[start..end])?;
                }
                if _start < 1304 && _end > 1300 {
                    let offset = _start.saturating_sub(1300);
                    let start = 1300u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1300) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nvmc_eraseuicr514_write(offset, &_buf[start..end])?;
                }
            }
            (1344..=1347, 1345..=1348) => {
                if _start < 1348 && _end > 1344 {
                    let offset = _start.saturating_sub(1344);
                    let start = 1344u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1344) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nvmc_icachecnf540_write(offset, &_buf[start..end])?;
                }
            }
            (1352..=1359, 1353..=1360) => {
                if _start < 1356 && _end > 1352 {
                    let offset = _start.saturating_sub(1352);
                    let start = 1352u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1352) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nvmc_ihit548_write(offset, &_buf[start..end])?;
                }
                if _start < 1360 && _end > 1356 {
                    let offset = _start.saturating_sub(1356);
                    let start = 1356u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1356) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .nvmc_imiss54c_write(offset, &_buf[start..end])?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Ppi(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Ppi {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::ppi::Ppi::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=47, 1..=48) => {
                return Err(MemError::ReadViolation);
            }
            (1280..=1291, 1281..=1292) => {
                if _start < 1284 && _end > 1280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ppi_chen500_read()?
                        .to_ne_bytes();
                    if _start <= 1280 && _end > 1280 {
                        _buf[(1280 - _start) as usize] = value[0];
                    }
                    if _start <= 1281 && _end > 1281 {
                        _buf[(1281 - _start) as usize] = value[1];
                    }
                    if _start <= 1282 && _end > 1282 {
                        _buf[(1282 - _start) as usize] = value[2];
                    }
                    if _start <= 1283 && _end > 1283 {
                        _buf[(1283 - _start) as usize] = value[3];
                    }
                }
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ppi_chenset504_read()?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ppi_chenclr508_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
            }
            (1296..=1455, 1297..=1456) => {
                if _start < 1456 && _end > 1296 {
                    for _chn in 0..20 {
                        let _dim_offset = _chn * 8;
                        if _start < 1304 + _dim_offset
                            && _end > 1296 + _dim_offset
                        {
                            let _start = 1296u64.saturating_sub(_start);
                            let _end = _end - 1296;
                            let _buf = &mut _buf[_start as usize..];
                            if _start < 8 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .ppi_chn_eep0_read(_chn as usize)?
                                        .to_ne_bytes();
                                    if _start <= 0 && _end > 0 {
                                        _buf[(0 - _start) as usize] = value[0];
                                    }
                                    if _start <= 1 && _end > 1 {
                                        _buf[(1 - _start) as usize] = value[1];
                                    }
                                    if _start <= 2 && _end > 2 {
                                        _buf[(2 - _start) as usize] = value[2];
                                    }
                                    if _start <= 3 && _end > 3 {
                                        _buf[(3 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 8 && _end > 4 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .ppi_chn_tep4_read(_chn as usize)?
                                        .to_ne_bytes();
                                    if _start <= 4 && _end > 4 {
                                        _buf[(4 - _start) as usize] = value[0];
                                    }
                                    if _start <= 5 && _end > 5 {
                                        _buf[(5 - _start) as usize] = value[1];
                                    }
                                    if _start <= 6 && _end > 6 {
                                        _buf[(6 - _start) as usize] = value[2];
                                    }
                                    if _start <= 7 && _end > 7 {
                                        _buf[(7 - _start) as usize] = value[3];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            (2048..=2071, 2049..=2072) => {
                if _start < 2072 && _end > 2048 {
                    let _dim = ((_start - 2048) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .ppi_chgn800_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 2048 && _end > 2048 {
                        _buf[(2048 - _start) as usize] = value[0];
                    }
                    if _start <= 2049 && _end > 2049 {
                        _buf[(2049 - _start) as usize] = value[1];
                    }
                    if _start <= 2050 && _end > 2050 {
                        _buf[(2050 - _start) as usize] = value[2];
                    }
                    if _start <= 2051 && _end > 2051 {
                        _buf[(2051 - _start) as usize] = value[3];
                    }
                    if _start <= 2052 && _end > 2052 {
                        _buf[(2052 - _start) as usize] = value[4];
                    }
                    if _start <= 2053 && _end > 2053 {
                        _buf[(2053 - _start) as usize] = value[5];
                    }
                    if _start <= 2054 && _end > 2054 {
                        _buf[(2054 - _start) as usize] = value[6];
                    }
                    if _start <= 2055 && _end > 2055 {
                        _buf[(2055 - _start) as usize] = value[7];
                    }
                    if _start <= 2056 && _end > 2056 {
                        _buf[(2056 - _start) as usize] = value[8];
                    }
                    if _start <= 2057 && _end > 2057 {
                        _buf[(2057 - _start) as usize] = value[9];
                    }
                    if _start <= 2058 && _end > 2058 {
                        _buf[(2058 - _start) as usize] = value[10];
                    }
                    if _start <= 2059 && _end > 2059 {
                        _buf[(2059 - _start) as usize] = value[11];
                    }
                    if _start <= 2060 && _end > 2060 {
                        _buf[(2060 - _start) as usize] = value[12];
                    }
                    if _start <= 2061 && _end > 2061 {
                        _buf[(2061 - _start) as usize] = value[13];
                    }
                    if _start <= 2062 && _end > 2062 {
                        _buf[(2062 - _start) as usize] = value[14];
                    }
                    if _start <= 2063 && _end > 2063 {
                        _buf[(2063 - _start) as usize] = value[15];
                    }
                    if _start <= 2064 && _end > 2064 {
                        _buf[(2064 - _start) as usize] = value[16];
                    }
                    if _start <= 2065 && _end > 2065 {
                        _buf[(2065 - _start) as usize] = value[17];
                    }
                    if _start <= 2066 && _end > 2066 {
                        _buf[(2066 - _start) as usize] = value[18];
                    }
                    if _start <= 2067 && _end > 2067 {
                        _buf[(2067 - _start) as usize] = value[19];
                    }
                    if _start <= 2068 && _end > 2068 {
                        _buf[(2068 - _start) as usize] = value[20];
                    }
                    if _start <= 2069 && _end > 2069 {
                        _buf[(2069 - _start) as usize] = value[21];
                    }
                    if _start <= 2070 && _end > 2070 {
                        _buf[(2070 - _start) as usize] = value[22];
                    }
                    if _start <= 2071 && _end > 2071 {
                        _buf[(2071 - _start) as usize] = value[23];
                    }
                }
            }
            (2320..=2447, 2321..=2448) => {
                if _start < 2448 && _end > 2320 {
                    for _forkn in 0..32 {
                        let _dim_offset = _forkn * 4;
                        if _start < 2324 + _dim_offset
                            && _end > 2320 + _dim_offset
                        {
                            let _start = 2320u64.saturating_sub(_start);
                            let _end = _end - 2320;
                            let _buf = &mut _buf[_start as usize..];
                            if _start < 4 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .ppi_forkn_tep0_read(_forkn as usize)?
                                        .to_ne_bytes();
                                    if _start <= 0 && _end > 0 {
                                        _buf[(0 - _start) as usize] = value[0];
                                    }
                                    if _start <= 1 && _end > 1 {
                                        _buf[(1 - _start) as usize] = value[1];
                                    }
                                    if _start <= 2 && _end > 2 {
                                        _buf[(2 - _start) as usize] = value[2];
                                    }
                                    if _start <= 3 && _end > 3 {
                                        _buf[(3 - _start) as usize] = value[3];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::ppi::Ppi::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=47, 1..=48) => {
                if _start < 48 && _end > 0 {
                    for _tasks_chgn in 0..6 {
                        let _dim_offset = _tasks_chgn * 8;
                        if _start < 8 + _dim_offset && _end > 0 + _dim_offset {
                            let _start = 0u64.saturating_sub(_start);
                            let _end = _end - 0;
                            let _buf = &_buf[_start as usize..];
                            if _start < 8 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let offset = _start.saturating_sub(0);
                                    let start =
                                        0u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 0) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .ppi_tasks_chgn_en0_write(
                                            _tasks_chgn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                                if _start < 8 && _end > 4 {
                                    let offset = _start.saturating_sub(4);
                                    let start =
                                        4u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 4) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .ppi_tasks_chgn_dis4_write(
                                            _tasks_chgn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                            }
                        }
                    }
                }
            }
            (1280..=1291, 1281..=1292) => {
                if _start < 1284 && _end > 1280 {
                    let offset = _start.saturating_sub(1280);
                    let start = 1280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1280) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .ppi_chen500_write(offset, &_buf[start..end])?;
                }
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .ppi_chenset504_write(offset, &_buf[start..end])?;
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .ppi_chenclr508_write(offset, &_buf[start..end])?;
                }
            }
            (1296..=1455, 1297..=1456) => {
                if _start < 1456 && _end > 1296 {
                    for _chn in 0..20 {
                        let _dim_offset = _chn * 8;
                        if _start < 1304 + _dim_offset
                            && _end > 1296 + _dim_offset
                        {
                            let _start = 1296u64.saturating_sub(_start);
                            let _end = _end - 1296;
                            let _buf = &_buf[_start as usize..];
                            if _start < 8 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let offset = _start.saturating_sub(0);
                                    let start =
                                        0u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 0) - offset) as usize;
                                    self.0.lock().unwrap().ppi_chn_eep0_write(
                                        _chn as usize,
                                        offset,
                                        &_buf[start..end],
                                    )?;
                                }
                                if _start < 8 && _end > 4 {
                                    let offset = _start.saturating_sub(4);
                                    let start =
                                        4u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 4) - offset) as usize;
                                    self.0.lock().unwrap().ppi_chn_tep4_write(
                                        _chn as usize,
                                        offset,
                                        &_buf[start..end],
                                    )?;
                                }
                            }
                        }
                    }
                }
            }
            (2048..=2071, 2049..=2072) => {
                if _start < 2072 && _end > 2048 {
                    let _dim = ((_start - 2048) % 4) as usize;
                    let offset = _start.saturating_sub(2048);
                    let start = 2048u64.saturating_sub(_start) as usize;
                    let end = ((_end - 2048) - offset) as usize;
                    self.0.lock().unwrap().ppi_chgn800_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (2320..=2447, 2321..=2448) => {
                if _start < 2448 && _end > 2320 {
                    for _forkn in 0..32 {
                        let _dim_offset = _forkn * 4;
                        if _start < 2324 + _dim_offset
                            && _end > 2320 + _dim_offset
                        {
                            let _start = 2320u64.saturating_sub(_start);
                            let _end = _end - 2320;
                            let _buf = &_buf[_start as usize..];
                            if _start < 4 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let offset = _start.saturating_sub(0);
                                    let start =
                                        0u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 0) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .ppi_forkn_tep0_write(
                                            _forkn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                            }
                        }
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Mwu(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Mwu {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::mwu::Mwu::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (256..=287, 257..=288) => {
                if _start < 288 && _end > 256 {
                    for _events_regionn in 0..4 {
                        let _dim_offset = _events_regionn * 8;
                        if _start < 264 + _dim_offset
                            && _end > 256 + _dim_offset
                        {
                            let _start = 256u64.saturating_sub(_start);
                            let _end = _end - 256;
                            let _buf = &mut _buf[_start as usize..];
                            if _start < 8 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .mwu_events_regionn_wa0_read(
                                            _events_regionn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 0 && _end > 0 {
                                        _buf[(0 - _start) as usize] = value[0];
                                    }
                                    if _start <= 1 && _end > 1 {
                                        _buf[(1 - _start) as usize] = value[1];
                                    }
                                    if _start <= 2 && _end > 2 {
                                        _buf[(2 - _start) as usize] = value[2];
                                    }
                                    if _start <= 3 && _end > 3 {
                                        _buf[(3 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 8 && _end > 4 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .mwu_events_regionn_ra4_read(
                                            _events_regionn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 4 && _end > 4 {
                                        _buf[(4 - _start) as usize] = value[0];
                                    }
                                    if _start <= 5 && _end > 5 {
                                        _buf[(5 - _start) as usize] = value[1];
                                    }
                                    if _start <= 6 && _end > 6 {
                                        _buf[(6 - _start) as usize] = value[2];
                                    }
                                    if _start <= 7 && _end > 7 {
                                        _buf[(7 - _start) as usize] = value[3];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            (352..=367, 353..=368) => {
                if _start < 368 && _end > 352 {
                    for _events_pregionn in 0..2 {
                        let _dim_offset = _events_pregionn * 8;
                        if _start < 360 + _dim_offset
                            && _end > 352 + _dim_offset
                        {
                            let _start = 352u64.saturating_sub(_start);
                            let _end = _end - 352;
                            let _buf = &mut _buf[_start as usize..];
                            if _start < 8 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .mwu_events_pregionn_wa0_read(
                                            _events_pregionn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 0 && _end > 0 {
                                        _buf[(0 - _start) as usize] = value[0];
                                    }
                                    if _start <= 1 && _end > 1 {
                                        _buf[(1 - _start) as usize] = value[1];
                                    }
                                    if _start <= 2 && _end > 2 {
                                        _buf[(2 - _start) as usize] = value[2];
                                    }
                                    if _start <= 3 && _end > 3 {
                                        _buf[(3 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 8 && _end > 4 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .mwu_events_pregionn_ra4_read(
                                            _events_pregionn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 4 && _end > 4 {
                                        _buf[(4 - _start) as usize] = value[0];
                                    }
                                    if _start <= 5 && _end > 5 {
                                        _buf[(5 - _start) as usize] = value[1];
                                    }
                                    if _start <= 6 && _end > 6 {
                                        _buf[(6 - _start) as usize] = value[2];
                                    }
                                    if _start <= 7 && _end > 7 {
                                        _buf[(7 - _start) as usize] = value[3];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .mwu_inten300_read()?
                        .to_ne_bytes();
                    if _start <= 768 && _end > 768 {
                        _buf[(768 - _start) as usize] = value[0];
                    }
                    if _start <= 769 && _end > 769 {
                        _buf[(769 - _start) as usize] = value[1];
                    }
                    if _start <= 770 && _end > 770 {
                        _buf[(770 - _start) as usize] = value[2];
                    }
                    if _start <= 771 && _end > 771 {
                        _buf[(771 - _start) as usize] = value[3];
                    }
                }
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .mwu_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .mwu_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (800..=811, 801..=812) => {
                if _start < 804 && _end > 800 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .mwu_nmien320_read()?
                        .to_ne_bytes();
                    if _start <= 800 && _end > 800 {
                        _buf[(800 - _start) as usize] = value[0];
                    }
                    if _start <= 801 && _end > 801 {
                        _buf[(801 - _start) as usize] = value[1];
                    }
                    if _start <= 802 && _end > 802 {
                        _buf[(802 - _start) as usize] = value[2];
                    }
                    if _start <= 803 && _end > 803 {
                        _buf[(803 - _start) as usize] = value[3];
                    }
                }
                if _start < 808 && _end > 804 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .mwu_nmienset324_read()?
                        .to_ne_bytes();
                    if _start <= 804 && _end > 804 {
                        _buf[(804 - _start) as usize] = value[0];
                    }
                    if _start <= 805 && _end > 805 {
                        _buf[(805 - _start) as usize] = value[1];
                    }
                    if _start <= 806 && _end > 806 {
                        _buf[(806 - _start) as usize] = value[2];
                    }
                    if _start <= 807 && _end > 807 {
                        _buf[(807 - _start) as usize] = value[3];
                    }
                }
                if _start < 812 && _end > 808 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .mwu_nmienclr328_read()?
                        .to_ne_bytes();
                    if _start <= 808 && _end > 808 {
                        _buf[(808 - _start) as usize] = value[0];
                    }
                    if _start <= 809 && _end > 809 {
                        _buf[(809 - _start) as usize] = value[1];
                    }
                    if _start <= 810 && _end > 810 {
                        _buf[(810 - _start) as usize] = value[2];
                    }
                    if _start <= 811 && _end > 811 {
                        _buf[(811 - _start) as usize] = value[3];
                    }
                }
            }
            (1024..=1039, 1025..=1040) => {
                if _start < 1040 && _end > 1024 {
                    for _perregionn in 0..2 {
                        let _dim_offset = _perregionn * 8;
                        if _start < 1032 + _dim_offset
                            && _end > 1024 + _dim_offset
                        {
                            let _start = 1024u64.saturating_sub(_start);
                            let _end = _end - 1024;
                            let _buf = &mut _buf[_start as usize..];
                            if _start < 8 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .mwu_perregionn_substatwa0_read(
                                            _perregionn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 0 && _end > 0 {
                                        _buf[(0 - _start) as usize] = value[0];
                                    }
                                    if _start <= 1 && _end > 1 {
                                        _buf[(1 - _start) as usize] = value[1];
                                    }
                                    if _start <= 2 && _end > 2 {
                                        _buf[(2 - _start) as usize] = value[2];
                                    }
                                    if _start <= 3 && _end > 3 {
                                        _buf[(3 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 8 && _end > 4 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .mwu_perregionn_substatra4_read(
                                            _perregionn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 4 && _end > 4 {
                                        _buf[(4 - _start) as usize] = value[0];
                                    }
                                    if _start <= 5 && _end > 5 {
                                        _buf[(5 - _start) as usize] = value[1];
                                    }
                                    if _start <= 6 && _end > 6 {
                                        _buf[(6 - _start) as usize] = value[2];
                                    }
                                    if _start <= 7 && _end > 7 {
                                        _buf[(7 - _start) as usize] = value[3];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            (1296..=1307, 1297..=1308) => {
                if _start < 1300 && _end > 1296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .mwu_regionen510_read()?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
                if _start < 1304 && _end > 1300 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .mwu_regionenset514_read()?
                        .to_ne_bytes();
                    if _start <= 1300 && _end > 1300 {
                        _buf[(1300 - _start) as usize] = value[0];
                    }
                    if _start <= 1301 && _end > 1301 {
                        _buf[(1301 - _start) as usize] = value[1];
                    }
                    if _start <= 1302 && _end > 1302 {
                        _buf[(1302 - _start) as usize] = value[2];
                    }
                    if _start <= 1303 && _end > 1303 {
                        _buf[(1303 - _start) as usize] = value[3];
                    }
                }
                if _start < 1308 && _end > 1304 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .mwu_regionenclr518_read()?
                        .to_ne_bytes();
                    if _start <= 1304 && _end > 1304 {
                        _buf[(1304 - _start) as usize] = value[0];
                    }
                    if _start <= 1305 && _end > 1305 {
                        _buf[(1305 - _start) as usize] = value[1];
                    }
                    if _start <= 1306 && _end > 1306 {
                        _buf[(1306 - _start) as usize] = value[2];
                    }
                    if _start <= 1307 && _end > 1307 {
                        _buf[(1307 - _start) as usize] = value[3];
                    }
                }
            }
            (1536..=1599, 1537..=1600) => {
                if _start < 1600 && _end > 1536 {
                    for _regionn in 0..4 {
                        let _dim_offset = _regionn * 16;
                        if _start < 1544 + _dim_offset
                            && _end > 1536 + _dim_offset
                        {
                            let _start = 1536u64.saturating_sub(_start);
                            let _end = _end - 1536;
                            let _buf = &mut _buf[_start as usize..];
                            if _start < 8 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .mwu_regionn_start0_read(
                                            _regionn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 0 && _end > 0 {
                                        _buf[(0 - _start) as usize] = value[0];
                                    }
                                    if _start <= 1 && _end > 1 {
                                        _buf[(1 - _start) as usize] = value[1];
                                    }
                                    if _start <= 2 && _end > 2 {
                                        _buf[(2 - _start) as usize] = value[2];
                                    }
                                    if _start <= 3 && _end > 3 {
                                        _buf[(3 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 8 && _end > 4 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .mwu_regionn_end4_read(
                                            _regionn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 4 && _end > 4 {
                                        _buf[(4 - _start) as usize] = value[0];
                                    }
                                    if _start <= 5 && _end > 5 {
                                        _buf[(5 - _start) as usize] = value[1];
                                    }
                                    if _start <= 6 && _end > 6 {
                                        _buf[(6 - _start) as usize] = value[2];
                                    }
                                    if _start <= 7 && _end > 7 {
                                        _buf[(7 - _start) as usize] = value[3];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            (1728..=1759, 1729..=1760) => {
                if _start < 1760 && _end > 1728 {
                    for _pregionn in 0..2 {
                        let _dim_offset = _pregionn * 16;
                        if _start < 1740 + _dim_offset
                            && _end > 1728 + _dim_offset
                        {
                            let _start = 1728u64.saturating_sub(_start);
                            let _end = _end - 1728;
                            let _buf = &mut _buf[_start as usize..];
                            if _start < 12 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .mwu_pregionn_start0_read(
                                            _pregionn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 0 && _end > 0 {
                                        _buf[(0 - _start) as usize] = value[0];
                                    }
                                    if _start <= 1 && _end > 1 {
                                        _buf[(1 - _start) as usize] = value[1];
                                    }
                                    if _start <= 2 && _end > 2 {
                                        _buf[(2 - _start) as usize] = value[2];
                                    }
                                    if _start <= 3 && _end > 3 {
                                        _buf[(3 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 8 && _end > 4 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .mwu_pregionn_end4_read(
                                            _pregionn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 4 && _end > 4 {
                                        _buf[(4 - _start) as usize] = value[0];
                                    }
                                    if _start <= 5 && _end > 5 {
                                        _buf[(5 - _start) as usize] = value[1];
                                    }
                                    if _start <= 6 && _end > 6 {
                                        _buf[(6 - _start) as usize] = value[2];
                                    }
                                    if _start <= 7 && _end > 7 {
                                        _buf[(7 - _start) as usize] = value[3];
                                    }
                                }
                                if _start < 12 && _end > 8 {
                                    let value = self
                                        .0
                                        .lock()
                                        .unwrap()
                                        .mwu_pregionn_subs8_read(
                                            _pregionn as usize,
                                        )?
                                        .to_ne_bytes();
                                    if _start <= 8 && _end > 8 {
                                        _buf[(8 - _start) as usize] = value[0];
                                    }
                                    if _start <= 9 && _end > 9 {
                                        _buf[(9 - _start) as usize] = value[1];
                                    }
                                    if _start <= 10 && _end > 10 {
                                        _buf[(10 - _start) as usize] = value[2];
                                    }
                                    if _start <= 11 && _end > 11 {
                                        _buf[(11 - _start) as usize] = value[3];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::mwu::Mwu::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (256..=287, 257..=288) => {
                if _start < 288 && _end > 256 {
                    for _events_regionn in 0..4 {
                        let _dim_offset = _events_regionn * 8;
                        if _start < 264 + _dim_offset
                            && _end > 256 + _dim_offset
                        {
                            let _start = 256u64.saturating_sub(_start);
                            let _end = _end - 256;
                            let _buf = &_buf[_start as usize..];
                            if _start < 8 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let offset = _start.saturating_sub(0);
                                    let start =
                                        0u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 0) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .mwu_events_regionn_wa0_write(
                                            _events_regionn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                                if _start < 8 && _end > 4 {
                                    let offset = _start.saturating_sub(4);
                                    let start =
                                        4u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 4) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .mwu_events_regionn_ra4_write(
                                            _events_regionn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                            }
                        }
                    }
                }
            }
            (352..=367, 353..=368) => {
                if _start < 368 && _end > 352 {
                    for _events_pregionn in 0..2 {
                        let _dim_offset = _events_pregionn * 8;
                        if _start < 360 + _dim_offset
                            && _end > 352 + _dim_offset
                        {
                            let _start = 352u64.saturating_sub(_start);
                            let _end = _end - 352;
                            let _buf = &_buf[_start as usize..];
                            if _start < 8 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let offset = _start.saturating_sub(0);
                                    let start =
                                        0u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 0) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .mwu_events_pregionn_wa0_write(
                                            _events_pregionn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                                if _start < 8 && _end > 4 {
                                    let offset = _start.saturating_sub(4);
                                    let start =
                                        4u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 4) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .mwu_events_pregionn_ra4_write(
                                            _events_pregionn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                            }
                        }
                    }
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let offset = _start.saturating_sub(768);
                    let start = 768u64.saturating_sub(_start) as usize;
                    let end = ((_end - 768) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .mwu_inten300_write(offset, &_buf[start..end])?;
                }
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .mwu_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .mwu_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (800..=811, 801..=812) => {
                if _start < 804 && _end > 800 {
                    let offset = _start.saturating_sub(800);
                    let start = 800u64.saturating_sub(_start) as usize;
                    let end = ((_end - 800) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .mwu_nmien320_write(offset, &_buf[start..end])?;
                }
                if _start < 808 && _end > 804 {
                    let offset = _start.saturating_sub(804);
                    let start = 804u64.saturating_sub(_start) as usize;
                    let end = ((_end - 804) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .mwu_nmienset324_write(offset, &_buf[start..end])?;
                }
                if _start < 812 && _end > 808 {
                    let offset = _start.saturating_sub(808);
                    let start = 808u64.saturating_sub(_start) as usize;
                    let end = ((_end - 808) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .mwu_nmienclr328_write(offset, &_buf[start..end])?;
                }
            }
            (1024..=1039, 1025..=1040) => {
                if _start < 1040 && _end > 1024 {
                    for _perregionn in 0..2 {
                        let _dim_offset = _perregionn * 8;
                        if _start < 1032 + _dim_offset
                            && _end > 1024 + _dim_offset
                        {
                            let _start = 1024u64.saturating_sub(_start);
                            let _end = _end - 1024;
                            let _buf = &_buf[_start as usize..];
                            if _start < 8 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let offset = _start.saturating_sub(0);
                                    let start =
                                        0u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 0) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .mwu_perregionn_substatwa0_write(
                                            _perregionn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                                if _start < 8 && _end > 4 {
                                    let offset = _start.saturating_sub(4);
                                    let start =
                                        4u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 4) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .mwu_perregionn_substatra4_write(
                                            _perregionn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                            }
                        }
                    }
                }
            }
            (1296..=1307, 1297..=1308) => {
                if _start < 1300 && _end > 1296 {
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .mwu_regionen510_write(offset, &_buf[start..end])?;
                }
                if _start < 1304 && _end > 1300 {
                    let offset = _start.saturating_sub(1300);
                    let start = 1300u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1300) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .mwu_regionenset514_write(offset, &_buf[start..end])?;
                }
                if _start < 1308 && _end > 1304 {
                    let offset = _start.saturating_sub(1304);
                    let start = 1304u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1304) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .mwu_regionenclr518_write(offset, &_buf[start..end])?;
                }
            }
            (1536..=1599, 1537..=1600) => {
                if _start < 1600 && _end > 1536 {
                    for _regionn in 0..4 {
                        let _dim_offset = _regionn * 16;
                        if _start < 1544 + _dim_offset
                            && _end > 1536 + _dim_offset
                        {
                            let _start = 1536u64.saturating_sub(_start);
                            let _end = _end - 1536;
                            let _buf = &_buf[_start as usize..];
                            if _start < 8 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    let offset = _start.saturating_sub(0);
                                    let start =
                                        0u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 0) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .mwu_regionn_start0_write(
                                            _regionn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                                if _start < 8 && _end > 4 {
                                    let offset = _start.saturating_sub(4);
                                    let start =
                                        4u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 4) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .mwu_regionn_end4_write(
                                            _regionn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                            }
                        }
                    }
                }
            }
            (1728..=1759, 1729..=1760) => {
                if _start < 1760 && _end > 1728 {
                    for _pregionn in 0..2 {
                        let _dim_offset = _pregionn * 16;
                        if _start < 1740 + _dim_offset
                            && _end > 1728 + _dim_offset
                        {
                            let _start = 1728u64.saturating_sub(_start);
                            let _end = _end - 1728;
                            let _buf = &_buf[_start as usize..];
                            if _start < 12 && _end > 0 {
                                if _start < 4 && _end > 0 {
                                    return Err(MemError::WriteViolation);
                                }
                                if _start < 8 && _end > 4 {
                                    return Err(MemError::WriteViolation);
                                }
                                if _start < 12 && _end > 8 {
                                    let offset = _start.saturating_sub(8);
                                    let start =
                                        8u64.saturating_sub(_start) as usize;
                                    let end = ((_end - 8) - offset) as usize;
                                    self.0
                                        .lock()
                                        .unwrap()
                                        .mwu_pregionn_subs8_write(
                                            _pregionn as usize,
                                            offset,
                                            &_buf[start..end],
                                        )?;
                                }
                            }
                        }
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct I2s(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for I2s {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::i2s::I2s::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=7, 1..=8) => {
                return Err(MemError::ReadViolation);
            }
            (260..=267, 261..=268) => {
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_events_rxptrupd104_read()?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 268 && _end > 264 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_events_stopped108_read()?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                }
            }
            (276..=279, 277..=280) => {
                if _start < 280 && _end > 276 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_events_txptrupd114_read()?
                        .to_ne_bytes();
                    if _start <= 276 && _end > 276 {
                        _buf[(276 - _start) as usize] = value[0];
                    }
                    if _start <= 277 && _end > 277 {
                        _buf[(277 - _start) as usize] = value[1];
                    }
                    if _start <= 278 && _end > 278 {
                        _buf[(278 - _start) as usize] = value[2];
                    }
                    if _start <= 279 && _end > 279 {
                        _buf[(279 - _start) as usize] = value[3];
                    }
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_inten300_read()?
                        .to_ne_bytes();
                    if _start <= 768 && _end > 768 {
                        _buf[(768 - _start) as usize] = value[0];
                    }
                    if _start <= 769 && _end > 769 {
                        _buf[(769 - _start) as usize] = value[1];
                    }
                    if _start <= 770 && _end > 770 {
                        _buf[(770 - _start) as usize] = value[2];
                    }
                    if _start <= 771 && _end > 771 {
                        _buf[(771 - _start) as usize] = value[3];
                    }
                }
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1280..=1323, 1281..=1324) => {
                if _start < 1284 && _end > 1280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_enable500_read()?
                        .to_ne_bytes();
                    if _start <= 1280 && _end > 1280 {
                        _buf[(1280 - _start) as usize] = value[0];
                    }
                    if _start <= 1281 && _end > 1281 {
                        _buf[(1281 - _start) as usize] = value[1];
                    }
                    if _start <= 1282 && _end > 1282 {
                        _buf[(1282 - _start) as usize] = value[2];
                    }
                    if _start <= 1283 && _end > 1283 {
                        _buf[(1283 - _start) as usize] = value[3];
                    }
                }
                if _start < 1288 && _end > 1284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_config_mode0_read()?
                        .to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_config_rxen4_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
                if _start < 1296 && _end > 1292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_config_txen8_read()?
                        .to_ne_bytes();
                    if _start <= 1292 && _end > 1292 {
                        _buf[(1292 - _start) as usize] = value[0];
                    }
                    if _start <= 1293 && _end > 1293 {
                        _buf[(1293 - _start) as usize] = value[1];
                    }
                    if _start <= 1294 && _end > 1294 {
                        _buf[(1294 - _start) as usize] = value[2];
                    }
                    if _start <= 1295 && _end > 1295 {
                        _buf[(1295 - _start) as usize] = value[3];
                    }
                }
                if _start < 1300 && _end > 1296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_config_mckenc_read()?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
                if _start < 1304 && _end > 1300 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_config_mckfreq10_read()?
                        .to_ne_bytes();
                    if _start <= 1300 && _end > 1300 {
                        _buf[(1300 - _start) as usize] = value[0];
                    }
                    if _start <= 1301 && _end > 1301 {
                        _buf[(1301 - _start) as usize] = value[1];
                    }
                    if _start <= 1302 && _end > 1302 {
                        _buf[(1302 - _start) as usize] = value[2];
                    }
                    if _start <= 1303 && _end > 1303 {
                        _buf[(1303 - _start) as usize] = value[3];
                    }
                }
                if _start < 1308 && _end > 1304 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_config_ratio14_read()?
                        .to_ne_bytes();
                    if _start <= 1304 && _end > 1304 {
                        _buf[(1304 - _start) as usize] = value[0];
                    }
                    if _start <= 1305 && _end > 1305 {
                        _buf[(1305 - _start) as usize] = value[1];
                    }
                    if _start <= 1306 && _end > 1306 {
                        _buf[(1306 - _start) as usize] = value[2];
                    }
                    if _start <= 1307 && _end > 1307 {
                        _buf[(1307 - _start) as usize] = value[3];
                    }
                }
                if _start < 1312 && _end > 1308 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_config_swidth18_read()?
                        .to_ne_bytes();
                    if _start <= 1308 && _end > 1308 {
                        _buf[(1308 - _start) as usize] = value[0];
                    }
                    if _start <= 1309 && _end > 1309 {
                        _buf[(1309 - _start) as usize] = value[1];
                    }
                    if _start <= 1310 && _end > 1310 {
                        _buf[(1310 - _start) as usize] = value[2];
                    }
                    if _start <= 1311 && _end > 1311 {
                        _buf[(1311 - _start) as usize] = value[3];
                    }
                }
                if _start < 1316 && _end > 1312 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_config_align1c_read()?
                        .to_ne_bytes();
                    if _start <= 1312 && _end > 1312 {
                        _buf[(1312 - _start) as usize] = value[0];
                    }
                    if _start <= 1313 && _end > 1313 {
                        _buf[(1313 - _start) as usize] = value[1];
                    }
                    if _start <= 1314 && _end > 1314 {
                        _buf[(1314 - _start) as usize] = value[2];
                    }
                    if _start <= 1315 && _end > 1315 {
                        _buf[(1315 - _start) as usize] = value[3];
                    }
                }
                if _start < 1320 && _end > 1316 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_config_format20_read()?
                        .to_ne_bytes();
                    if _start <= 1316 && _end > 1316 {
                        _buf[(1316 - _start) as usize] = value[0];
                    }
                    if _start <= 1317 && _end > 1317 {
                        _buf[(1317 - _start) as usize] = value[1];
                    }
                    if _start <= 1318 && _end > 1318 {
                        _buf[(1318 - _start) as usize] = value[2];
                    }
                    if _start <= 1319 && _end > 1319 {
                        _buf[(1319 - _start) as usize] = value[3];
                    }
                }
                if _start < 1324 && _end > 1320 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_config_channels24_read()?
                        .to_ne_bytes();
                    if _start <= 1320 && _end > 1320 {
                        _buf[(1320 - _start) as usize] = value[0];
                    }
                    if _start <= 1321 && _end > 1321 {
                        _buf[(1321 - _start) as usize] = value[1];
                    }
                    if _start <= 1322 && _end > 1322 {
                        _buf[(1322 - _start) as usize] = value[2];
                    }
                    if _start <= 1323 && _end > 1323 {
                        _buf[(1323 - _start) as usize] = value[3];
                    }
                }
            }
            (1336..=1339, 1337..=1340) => {
                if _start < 1340 && _end > 1336 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_rxd_ptr0_read()?
                        .to_ne_bytes();
                    if _start <= 1336 && _end > 1336 {
                        _buf[(1336 - _start) as usize] = value[0];
                    }
                    if _start <= 1337 && _end > 1337 {
                        _buf[(1337 - _start) as usize] = value[1];
                    }
                    if _start <= 1338 && _end > 1338 {
                        _buf[(1338 - _start) as usize] = value[2];
                    }
                    if _start <= 1339 && _end > 1339 {
                        _buf[(1339 - _start) as usize] = value[3];
                    }
                }
            }
            (1344..=1347, 1345..=1348) => {
                if _start < 1348 && _end > 1344 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_txd_ptr0_read()?
                        .to_ne_bytes();
                    if _start <= 1344 && _end > 1344 {
                        _buf[(1344 - _start) as usize] = value[0];
                    }
                    if _start <= 1345 && _end > 1345 {
                        _buf[(1345 - _start) as usize] = value[1];
                    }
                    if _start <= 1346 && _end > 1346 {
                        _buf[(1346 - _start) as usize] = value[2];
                    }
                    if _start <= 1347 && _end > 1347 {
                        _buf[(1347 - _start) as usize] = value[3];
                    }
                }
            }
            (1360..=1363, 1361..=1364) => {
                if _start < 1364 && _end > 1360 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_rxtxd_maxcnt0_read()?
                        .to_ne_bytes();
                    if _start <= 1360 && _end > 1360 {
                        _buf[(1360 - _start) as usize] = value[0];
                    }
                    if _start <= 1361 && _end > 1361 {
                        _buf[(1361 - _start) as usize] = value[1];
                    }
                    if _start <= 1362 && _end > 1362 {
                        _buf[(1362 - _start) as usize] = value[2];
                    }
                    if _start <= 1363 && _end > 1363 {
                        _buf[(1363 - _start) as usize] = value[3];
                    }
                }
            }
            (1376..=1395, 1377..=1396) => {
                if _start < 1380 && _end > 1376 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_psel_mck0_read()?
                        .to_ne_bytes();
                    if _start <= 1376 && _end > 1376 {
                        _buf[(1376 - _start) as usize] = value[0];
                    }
                    if _start <= 1377 && _end > 1377 {
                        _buf[(1377 - _start) as usize] = value[1];
                    }
                    if _start <= 1378 && _end > 1378 {
                        _buf[(1378 - _start) as usize] = value[2];
                    }
                    if _start <= 1379 && _end > 1379 {
                        _buf[(1379 - _start) as usize] = value[3];
                    }
                }
                if _start < 1384 && _end > 1380 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_psel_sck4_read()?
                        .to_ne_bytes();
                    if _start <= 1380 && _end > 1380 {
                        _buf[(1380 - _start) as usize] = value[0];
                    }
                    if _start <= 1381 && _end > 1381 {
                        _buf[(1381 - _start) as usize] = value[1];
                    }
                    if _start <= 1382 && _end > 1382 {
                        _buf[(1382 - _start) as usize] = value[2];
                    }
                    if _start <= 1383 && _end > 1383 {
                        _buf[(1383 - _start) as usize] = value[3];
                    }
                }
                if _start < 1388 && _end > 1384 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_psel_lrck8_read()?
                        .to_ne_bytes();
                    if _start <= 1384 && _end > 1384 {
                        _buf[(1384 - _start) as usize] = value[0];
                    }
                    if _start <= 1385 && _end > 1385 {
                        _buf[(1385 - _start) as usize] = value[1];
                    }
                    if _start <= 1386 && _end > 1386 {
                        _buf[(1386 - _start) as usize] = value[2];
                    }
                    if _start <= 1387 && _end > 1387 {
                        _buf[(1387 - _start) as usize] = value[3];
                    }
                }
                if _start < 1392 && _end > 1388 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_psel_sdinc_read()?
                        .to_ne_bytes();
                    if _start <= 1388 && _end > 1388 {
                        _buf[(1388 - _start) as usize] = value[0];
                    }
                    if _start <= 1389 && _end > 1389 {
                        _buf[(1389 - _start) as usize] = value[1];
                    }
                    if _start <= 1390 && _end > 1390 {
                        _buf[(1390 - _start) as usize] = value[2];
                    }
                    if _start <= 1391 && _end > 1391 {
                        _buf[(1391 - _start) as usize] = value[3];
                    }
                }
                if _start < 1396 && _end > 1392 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .i2s_psel_sdout10_read()?
                        .to_ne_bytes();
                    if _start <= 1392 && _end > 1392 {
                        _buf[(1392 - _start) as usize] = value[0];
                    }
                    if _start <= 1393 && _end > 1393 {
                        _buf[(1393 - _start) as usize] = value[1];
                    }
                    if _start <= 1394 && _end > 1394 {
                        _buf[(1394 - _start) as usize] = value[2];
                    }
                    if _start <= 1395 && _end > 1395 {
                        _buf[(1395 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::i2s::I2s::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=7, 1..=8) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_tasks_start0_write(offset, &_buf[start..end])?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_tasks_stop4_write(offset, &_buf[start..end])?;
                }
            }
            (260..=267, 261..=268) => {
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0.lock().unwrap().i2s_events_rxptrupd104_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 268 && _end > 264 {
                    let offset = _start.saturating_sub(264);
                    let start = 264u64.saturating_sub(_start) as usize;
                    let end = ((_end - 264) - offset) as usize;
                    self.0.lock().unwrap().i2s_events_stopped108_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (276..=279, 277..=280) => {
                if _start < 280 && _end > 276 {
                    let offset = _start.saturating_sub(276);
                    let start = 276u64.saturating_sub(_start) as usize;
                    let end = ((_end - 276) - offset) as usize;
                    self.0.lock().unwrap().i2s_events_txptrupd114_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (768..=779, 769..=780) => {
                if _start < 772 && _end > 768 {
                    let offset = _start.saturating_sub(768);
                    let start = 768u64.saturating_sub(_start) as usize;
                    let end = ((_end - 768) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_inten300_write(offset, &_buf[start..end])?;
                }
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1280..=1323, 1281..=1324) => {
                if _start < 1284 && _end > 1280 {
                    let offset = _start.saturating_sub(1280);
                    let start = 1280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1280) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_enable500_write(offset, &_buf[start..end])?;
                }
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_config_mode0_write(offset, &_buf[start..end])?;
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_config_rxen4_write(offset, &_buf[start..end])?;
                }
                if _start < 1296 && _end > 1292 {
                    let offset = _start.saturating_sub(1292);
                    let start = 1292u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1292) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_config_txen8_write(offset, &_buf[start..end])?;
                }
                if _start < 1300 && _end > 1296 {
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_config_mckenc_write(offset, &_buf[start..end])?;
                }
                if _start < 1304 && _end > 1300 {
                    let offset = _start.saturating_sub(1300);
                    let start = 1300u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1300) - offset) as usize;
                    self.0.lock().unwrap().i2s_config_mckfreq10_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 1308 && _end > 1304 {
                    let offset = _start.saturating_sub(1304);
                    let start = 1304u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1304) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_config_ratio14_write(offset, &_buf[start..end])?;
                }
                if _start < 1312 && _end > 1308 {
                    let offset = _start.saturating_sub(1308);
                    let start = 1308u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1308) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_config_swidth18_write(offset, &_buf[start..end])?;
                }
                if _start < 1316 && _end > 1312 {
                    let offset = _start.saturating_sub(1312);
                    let start = 1312u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1312) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_config_align1c_write(offset, &_buf[start..end])?;
                }
                if _start < 1320 && _end > 1316 {
                    let offset = _start.saturating_sub(1316);
                    let start = 1316u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1316) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_config_format20_write(offset, &_buf[start..end])?;
                }
                if _start < 1324 && _end > 1320 {
                    let offset = _start.saturating_sub(1320);
                    let start = 1320u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1320) - offset) as usize;
                    self.0.lock().unwrap().i2s_config_channels24_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (1336..=1339, 1337..=1340) => {
                if _start < 1340 && _end > 1336 {
                    let offset = _start.saturating_sub(1336);
                    let start = 1336u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1336) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_rxd_ptr0_write(offset, &_buf[start..end])?;
                }
            }
            (1344..=1347, 1345..=1348) => {
                if _start < 1348 && _end > 1344 {
                    let offset = _start.saturating_sub(1344);
                    let start = 1344u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1344) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_txd_ptr0_write(offset, &_buf[start..end])?;
                }
            }
            (1360..=1363, 1361..=1364) => {
                if _start < 1364 && _end > 1360 {
                    let offset = _start.saturating_sub(1360);
                    let start = 1360u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1360) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_rxtxd_maxcnt0_write(offset, &_buf[start..end])?;
                }
            }
            (1376..=1395, 1377..=1396) => {
                if _start < 1380 && _end > 1376 {
                    let offset = _start.saturating_sub(1376);
                    let start = 1376u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1376) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_psel_mck0_write(offset, &_buf[start..end])?;
                }
                if _start < 1384 && _end > 1380 {
                    let offset = _start.saturating_sub(1380);
                    let start = 1380u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1380) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_psel_sck4_write(offset, &_buf[start..end])?;
                }
                if _start < 1388 && _end > 1384 {
                    let offset = _start.saturating_sub(1384);
                    let start = 1384u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1384) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_psel_lrck8_write(offset, &_buf[start..end])?;
                }
                if _start < 1392 && _end > 1388 {
                    let offset = _start.saturating_sub(1388);
                    let start = 1388u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1388) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_psel_sdinc_write(offset, &_buf[start..end])?;
                }
                if _start < 1396 && _end > 1392 {
                    let offset = _start.saturating_sub(1392);
                    let start = 1392u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1392) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .i2s_psel_sdout10_write(offset, &_buf[start..end])?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Fpu(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Fpu {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::fpu::Fpu::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=3, 1..=4) => {
                if _start < 4 && _end > 0 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .fpu_unused0_read()?
                        .to_ne_bytes();
                    if _start <= 0 && _end > 0 {
                        _buf[(0 - _start) as usize] = value[0];
                    }
                    if _start <= 1 && _end > 1 {
                        _buf[(1 - _start) as usize] = value[1];
                    }
                    if _start <= 2 && _end > 2 {
                        _buf[(2 - _start) as usize] = value[2];
                    }
                    if _start <= 3 && _end > 3 {
                        _buf[(3 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::fpu::Fpu::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=3, 1..=4) => {
                return Err(MemError::WriteViolation);
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct P0(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for P0 {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::p0::P0::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (1284..=1319, 1285..=1320) => {
                if _start < 1288 && _end > 1284 {
                    let value =
                        self.0.lock().unwrap().p0_out504_read()?.to_ne_bytes();
                    if _start <= 1284 && _end > 1284 {
                        _buf[(1284 - _start) as usize] = value[0];
                    }
                    if _start <= 1285 && _end > 1285 {
                        _buf[(1285 - _start) as usize] = value[1];
                    }
                    if _start <= 1286 && _end > 1286 {
                        _buf[(1286 - _start) as usize] = value[2];
                    }
                    if _start <= 1287 && _end > 1287 {
                        _buf[(1287 - _start) as usize] = value[3];
                    }
                }
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .p0_outset508_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
                if _start < 1296 && _end > 1292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .p0_outclr50c_read()?
                        .to_ne_bytes();
                    if _start <= 1292 && _end > 1292 {
                        _buf[(1292 - _start) as usize] = value[0];
                    }
                    if _start <= 1293 && _end > 1293 {
                        _buf[(1293 - _start) as usize] = value[1];
                    }
                    if _start <= 1294 && _end > 1294 {
                        _buf[(1294 - _start) as usize] = value[2];
                    }
                    if _start <= 1295 && _end > 1295 {
                        _buf[(1295 - _start) as usize] = value[3];
                    }
                }
                if _start < 1300 && _end > 1296 {
                    let value =
                        self.0.lock().unwrap().p0_in510_read()?.to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
                if _start < 1304 && _end > 1300 {
                    let value =
                        self.0.lock().unwrap().p0_dir514_read()?.to_ne_bytes();
                    if _start <= 1300 && _end > 1300 {
                        _buf[(1300 - _start) as usize] = value[0];
                    }
                    if _start <= 1301 && _end > 1301 {
                        _buf[(1301 - _start) as usize] = value[1];
                    }
                    if _start <= 1302 && _end > 1302 {
                        _buf[(1302 - _start) as usize] = value[2];
                    }
                    if _start <= 1303 && _end > 1303 {
                        _buf[(1303 - _start) as usize] = value[3];
                    }
                }
                if _start < 1308 && _end > 1304 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .p0_dirset518_read()?
                        .to_ne_bytes();
                    if _start <= 1304 && _end > 1304 {
                        _buf[(1304 - _start) as usize] = value[0];
                    }
                    if _start <= 1305 && _end > 1305 {
                        _buf[(1305 - _start) as usize] = value[1];
                    }
                    if _start <= 1306 && _end > 1306 {
                        _buf[(1306 - _start) as usize] = value[2];
                    }
                    if _start <= 1307 && _end > 1307 {
                        _buf[(1307 - _start) as usize] = value[3];
                    }
                }
                if _start < 1312 && _end > 1308 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .p0_dirclr51c_read()?
                        .to_ne_bytes();
                    if _start <= 1308 && _end > 1308 {
                        _buf[(1308 - _start) as usize] = value[0];
                    }
                    if _start <= 1309 && _end > 1309 {
                        _buf[(1309 - _start) as usize] = value[1];
                    }
                    if _start <= 1310 && _end > 1310 {
                        _buf[(1310 - _start) as usize] = value[2];
                    }
                    if _start <= 1311 && _end > 1311 {
                        _buf[(1311 - _start) as usize] = value[3];
                    }
                }
                if _start < 1316 && _end > 1312 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .p0_latch520_read()?
                        .to_ne_bytes();
                    if _start <= 1312 && _end > 1312 {
                        _buf[(1312 - _start) as usize] = value[0];
                    }
                    if _start <= 1313 && _end > 1313 {
                        _buf[(1313 - _start) as usize] = value[1];
                    }
                    if _start <= 1314 && _end > 1314 {
                        _buf[(1314 - _start) as usize] = value[2];
                    }
                    if _start <= 1315 && _end > 1315 {
                        _buf[(1315 - _start) as usize] = value[3];
                    }
                }
                if _start < 1320 && _end > 1316 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .p0_detectmode524_read()?
                        .to_ne_bytes();
                    if _start <= 1316 && _end > 1316 {
                        _buf[(1316 - _start) as usize] = value[0];
                    }
                    if _start <= 1317 && _end > 1317 {
                        _buf[(1317 - _start) as usize] = value[1];
                    }
                    if _start <= 1318 && _end > 1318 {
                        _buf[(1318 - _start) as usize] = value[2];
                    }
                    if _start <= 1319 && _end > 1319 {
                        _buf[(1319 - _start) as usize] = value[3];
                    }
                }
            }
            (1792..=1919, 1793..=1920) => {
                if _start < 1920 && _end > 1792 {
                    let _dim = ((_start - 1792) % 4) as usize;
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .p0_pin_cnfn700_read(_dim)?
                        .to_ne_bytes();
                    if _start <= 1792 && _end > 1792 {
                        _buf[(1792 - _start) as usize] = value[0];
                    }
                    if _start <= 1793 && _end > 1793 {
                        _buf[(1793 - _start) as usize] = value[1];
                    }
                    if _start <= 1794 && _end > 1794 {
                        _buf[(1794 - _start) as usize] = value[2];
                    }
                    if _start <= 1795 && _end > 1795 {
                        _buf[(1795 - _start) as usize] = value[3];
                    }
                    if _start <= 1796 && _end > 1796 {
                        _buf[(1796 - _start) as usize] = value[4];
                    }
                    if _start <= 1797 && _end > 1797 {
                        _buf[(1797 - _start) as usize] = value[5];
                    }
                    if _start <= 1798 && _end > 1798 {
                        _buf[(1798 - _start) as usize] = value[6];
                    }
                    if _start <= 1799 && _end > 1799 {
                        _buf[(1799 - _start) as usize] = value[7];
                    }
                    if _start <= 1800 && _end > 1800 {
                        _buf[(1800 - _start) as usize] = value[8];
                    }
                    if _start <= 1801 && _end > 1801 {
                        _buf[(1801 - _start) as usize] = value[9];
                    }
                    if _start <= 1802 && _end > 1802 {
                        _buf[(1802 - _start) as usize] = value[10];
                    }
                    if _start <= 1803 && _end > 1803 {
                        _buf[(1803 - _start) as usize] = value[11];
                    }
                    if _start <= 1804 && _end > 1804 {
                        _buf[(1804 - _start) as usize] = value[12];
                    }
                    if _start <= 1805 && _end > 1805 {
                        _buf[(1805 - _start) as usize] = value[13];
                    }
                    if _start <= 1806 && _end > 1806 {
                        _buf[(1806 - _start) as usize] = value[14];
                    }
                    if _start <= 1807 && _end > 1807 {
                        _buf[(1807 - _start) as usize] = value[15];
                    }
                    if _start <= 1808 && _end > 1808 {
                        _buf[(1808 - _start) as usize] = value[16];
                    }
                    if _start <= 1809 && _end > 1809 {
                        _buf[(1809 - _start) as usize] = value[17];
                    }
                    if _start <= 1810 && _end > 1810 {
                        _buf[(1810 - _start) as usize] = value[18];
                    }
                    if _start <= 1811 && _end > 1811 {
                        _buf[(1811 - _start) as usize] = value[19];
                    }
                    if _start <= 1812 && _end > 1812 {
                        _buf[(1812 - _start) as usize] = value[20];
                    }
                    if _start <= 1813 && _end > 1813 {
                        _buf[(1813 - _start) as usize] = value[21];
                    }
                    if _start <= 1814 && _end > 1814 {
                        _buf[(1814 - _start) as usize] = value[22];
                    }
                    if _start <= 1815 && _end > 1815 {
                        _buf[(1815 - _start) as usize] = value[23];
                    }
                    if _start <= 1816 && _end > 1816 {
                        _buf[(1816 - _start) as usize] = value[24];
                    }
                    if _start <= 1817 && _end > 1817 {
                        _buf[(1817 - _start) as usize] = value[25];
                    }
                    if _start <= 1818 && _end > 1818 {
                        _buf[(1818 - _start) as usize] = value[26];
                    }
                    if _start <= 1819 && _end > 1819 {
                        _buf[(1819 - _start) as usize] = value[27];
                    }
                    if _start <= 1820 && _end > 1820 {
                        _buf[(1820 - _start) as usize] = value[28];
                    }
                    if _start <= 1821 && _end > 1821 {
                        _buf[(1821 - _start) as usize] = value[29];
                    }
                    if _start <= 1822 && _end > 1822 {
                        _buf[(1822 - _start) as usize] = value[30];
                    }
                    if _start <= 1823 && _end > 1823 {
                        _buf[(1823 - _start) as usize] = value[31];
                    }
                    if _start <= 1824 && _end > 1824 {
                        _buf[(1824 - _start) as usize] = value[32];
                    }
                    if _start <= 1825 && _end > 1825 {
                        _buf[(1825 - _start) as usize] = value[33];
                    }
                    if _start <= 1826 && _end > 1826 {
                        _buf[(1826 - _start) as usize] = value[34];
                    }
                    if _start <= 1827 && _end > 1827 {
                        _buf[(1827 - _start) as usize] = value[35];
                    }
                    if _start <= 1828 && _end > 1828 {
                        _buf[(1828 - _start) as usize] = value[36];
                    }
                    if _start <= 1829 && _end > 1829 {
                        _buf[(1829 - _start) as usize] = value[37];
                    }
                    if _start <= 1830 && _end > 1830 {
                        _buf[(1830 - _start) as usize] = value[38];
                    }
                    if _start <= 1831 && _end > 1831 {
                        _buf[(1831 - _start) as usize] = value[39];
                    }
                    if _start <= 1832 && _end > 1832 {
                        _buf[(1832 - _start) as usize] = value[40];
                    }
                    if _start <= 1833 && _end > 1833 {
                        _buf[(1833 - _start) as usize] = value[41];
                    }
                    if _start <= 1834 && _end > 1834 {
                        _buf[(1834 - _start) as usize] = value[42];
                    }
                    if _start <= 1835 && _end > 1835 {
                        _buf[(1835 - _start) as usize] = value[43];
                    }
                    if _start <= 1836 && _end > 1836 {
                        _buf[(1836 - _start) as usize] = value[44];
                    }
                    if _start <= 1837 && _end > 1837 {
                        _buf[(1837 - _start) as usize] = value[45];
                    }
                    if _start <= 1838 && _end > 1838 {
                        _buf[(1838 - _start) as usize] = value[46];
                    }
                    if _start <= 1839 && _end > 1839 {
                        _buf[(1839 - _start) as usize] = value[47];
                    }
                    if _start <= 1840 && _end > 1840 {
                        _buf[(1840 - _start) as usize] = value[48];
                    }
                    if _start <= 1841 && _end > 1841 {
                        _buf[(1841 - _start) as usize] = value[49];
                    }
                    if _start <= 1842 && _end > 1842 {
                        _buf[(1842 - _start) as usize] = value[50];
                    }
                    if _start <= 1843 && _end > 1843 {
                        _buf[(1843 - _start) as usize] = value[51];
                    }
                    if _start <= 1844 && _end > 1844 {
                        _buf[(1844 - _start) as usize] = value[52];
                    }
                    if _start <= 1845 && _end > 1845 {
                        _buf[(1845 - _start) as usize] = value[53];
                    }
                    if _start <= 1846 && _end > 1846 {
                        _buf[(1846 - _start) as usize] = value[54];
                    }
                    if _start <= 1847 && _end > 1847 {
                        _buf[(1847 - _start) as usize] = value[55];
                    }
                    if _start <= 1848 && _end > 1848 {
                        _buf[(1848 - _start) as usize] = value[56];
                    }
                    if _start <= 1849 && _end > 1849 {
                        _buf[(1849 - _start) as usize] = value[57];
                    }
                    if _start <= 1850 && _end > 1850 {
                        _buf[(1850 - _start) as usize] = value[58];
                    }
                    if _start <= 1851 && _end > 1851 {
                        _buf[(1851 - _start) as usize] = value[59];
                    }
                    if _start <= 1852 && _end > 1852 {
                        _buf[(1852 - _start) as usize] = value[60];
                    }
                    if _start <= 1853 && _end > 1853 {
                        _buf[(1853 - _start) as usize] = value[61];
                    }
                    if _start <= 1854 && _end > 1854 {
                        _buf[(1854 - _start) as usize] = value[62];
                    }
                    if _start <= 1855 && _end > 1855 {
                        _buf[(1855 - _start) as usize] = value[63];
                    }
                    if _start <= 1856 && _end > 1856 {
                        _buf[(1856 - _start) as usize] = value[64];
                    }
                    if _start <= 1857 && _end > 1857 {
                        _buf[(1857 - _start) as usize] = value[65];
                    }
                    if _start <= 1858 && _end > 1858 {
                        _buf[(1858 - _start) as usize] = value[66];
                    }
                    if _start <= 1859 && _end > 1859 {
                        _buf[(1859 - _start) as usize] = value[67];
                    }
                    if _start <= 1860 && _end > 1860 {
                        _buf[(1860 - _start) as usize] = value[68];
                    }
                    if _start <= 1861 && _end > 1861 {
                        _buf[(1861 - _start) as usize] = value[69];
                    }
                    if _start <= 1862 && _end > 1862 {
                        _buf[(1862 - _start) as usize] = value[70];
                    }
                    if _start <= 1863 && _end > 1863 {
                        _buf[(1863 - _start) as usize] = value[71];
                    }
                    if _start <= 1864 && _end > 1864 {
                        _buf[(1864 - _start) as usize] = value[72];
                    }
                    if _start <= 1865 && _end > 1865 {
                        _buf[(1865 - _start) as usize] = value[73];
                    }
                    if _start <= 1866 && _end > 1866 {
                        _buf[(1866 - _start) as usize] = value[74];
                    }
                    if _start <= 1867 && _end > 1867 {
                        _buf[(1867 - _start) as usize] = value[75];
                    }
                    if _start <= 1868 && _end > 1868 {
                        _buf[(1868 - _start) as usize] = value[76];
                    }
                    if _start <= 1869 && _end > 1869 {
                        _buf[(1869 - _start) as usize] = value[77];
                    }
                    if _start <= 1870 && _end > 1870 {
                        _buf[(1870 - _start) as usize] = value[78];
                    }
                    if _start <= 1871 && _end > 1871 {
                        _buf[(1871 - _start) as usize] = value[79];
                    }
                    if _start <= 1872 && _end > 1872 {
                        _buf[(1872 - _start) as usize] = value[80];
                    }
                    if _start <= 1873 && _end > 1873 {
                        _buf[(1873 - _start) as usize] = value[81];
                    }
                    if _start <= 1874 && _end > 1874 {
                        _buf[(1874 - _start) as usize] = value[82];
                    }
                    if _start <= 1875 && _end > 1875 {
                        _buf[(1875 - _start) as usize] = value[83];
                    }
                    if _start <= 1876 && _end > 1876 {
                        _buf[(1876 - _start) as usize] = value[84];
                    }
                    if _start <= 1877 && _end > 1877 {
                        _buf[(1877 - _start) as usize] = value[85];
                    }
                    if _start <= 1878 && _end > 1878 {
                        _buf[(1878 - _start) as usize] = value[86];
                    }
                    if _start <= 1879 && _end > 1879 {
                        _buf[(1879 - _start) as usize] = value[87];
                    }
                    if _start <= 1880 && _end > 1880 {
                        _buf[(1880 - _start) as usize] = value[88];
                    }
                    if _start <= 1881 && _end > 1881 {
                        _buf[(1881 - _start) as usize] = value[89];
                    }
                    if _start <= 1882 && _end > 1882 {
                        _buf[(1882 - _start) as usize] = value[90];
                    }
                    if _start <= 1883 && _end > 1883 {
                        _buf[(1883 - _start) as usize] = value[91];
                    }
                    if _start <= 1884 && _end > 1884 {
                        _buf[(1884 - _start) as usize] = value[92];
                    }
                    if _start <= 1885 && _end > 1885 {
                        _buf[(1885 - _start) as usize] = value[93];
                    }
                    if _start <= 1886 && _end > 1886 {
                        _buf[(1886 - _start) as usize] = value[94];
                    }
                    if _start <= 1887 && _end > 1887 {
                        _buf[(1887 - _start) as usize] = value[95];
                    }
                    if _start <= 1888 && _end > 1888 {
                        _buf[(1888 - _start) as usize] = value[96];
                    }
                    if _start <= 1889 && _end > 1889 {
                        _buf[(1889 - _start) as usize] = value[97];
                    }
                    if _start <= 1890 && _end > 1890 {
                        _buf[(1890 - _start) as usize] = value[98];
                    }
                    if _start <= 1891 && _end > 1891 {
                        _buf[(1891 - _start) as usize] = value[99];
                    }
                    if _start <= 1892 && _end > 1892 {
                        _buf[(1892 - _start) as usize] = value[100];
                    }
                    if _start <= 1893 && _end > 1893 {
                        _buf[(1893 - _start) as usize] = value[101];
                    }
                    if _start <= 1894 && _end > 1894 {
                        _buf[(1894 - _start) as usize] = value[102];
                    }
                    if _start <= 1895 && _end > 1895 {
                        _buf[(1895 - _start) as usize] = value[103];
                    }
                    if _start <= 1896 && _end > 1896 {
                        _buf[(1896 - _start) as usize] = value[104];
                    }
                    if _start <= 1897 && _end > 1897 {
                        _buf[(1897 - _start) as usize] = value[105];
                    }
                    if _start <= 1898 && _end > 1898 {
                        _buf[(1898 - _start) as usize] = value[106];
                    }
                    if _start <= 1899 && _end > 1899 {
                        _buf[(1899 - _start) as usize] = value[107];
                    }
                    if _start <= 1900 && _end > 1900 {
                        _buf[(1900 - _start) as usize] = value[108];
                    }
                    if _start <= 1901 && _end > 1901 {
                        _buf[(1901 - _start) as usize] = value[109];
                    }
                    if _start <= 1902 && _end > 1902 {
                        _buf[(1902 - _start) as usize] = value[110];
                    }
                    if _start <= 1903 && _end > 1903 {
                        _buf[(1903 - _start) as usize] = value[111];
                    }
                    if _start <= 1904 && _end > 1904 {
                        _buf[(1904 - _start) as usize] = value[112];
                    }
                    if _start <= 1905 && _end > 1905 {
                        _buf[(1905 - _start) as usize] = value[113];
                    }
                    if _start <= 1906 && _end > 1906 {
                        _buf[(1906 - _start) as usize] = value[114];
                    }
                    if _start <= 1907 && _end > 1907 {
                        _buf[(1907 - _start) as usize] = value[115];
                    }
                    if _start <= 1908 && _end > 1908 {
                        _buf[(1908 - _start) as usize] = value[116];
                    }
                    if _start <= 1909 && _end > 1909 {
                        _buf[(1909 - _start) as usize] = value[117];
                    }
                    if _start <= 1910 && _end > 1910 {
                        _buf[(1910 - _start) as usize] = value[118];
                    }
                    if _start <= 1911 && _end > 1911 {
                        _buf[(1911 - _start) as usize] = value[119];
                    }
                    if _start <= 1912 && _end > 1912 {
                        _buf[(1912 - _start) as usize] = value[120];
                    }
                    if _start <= 1913 && _end > 1913 {
                        _buf[(1913 - _start) as usize] = value[121];
                    }
                    if _start <= 1914 && _end > 1914 {
                        _buf[(1914 - _start) as usize] = value[122];
                    }
                    if _start <= 1915 && _end > 1915 {
                        _buf[(1915 - _start) as usize] = value[123];
                    }
                    if _start <= 1916 && _end > 1916 {
                        _buf[(1916 - _start) as usize] = value[124];
                    }
                    if _start <= 1917 && _end > 1917 {
                        _buf[(1917 - _start) as usize] = value[125];
                    }
                    if _start <= 1918 && _end > 1918 {
                        _buf[(1918 - _start) as usize] = value[126];
                    }
                    if _start <= 1919 && _end > 1919 {
                        _buf[(1919 - _start) as usize] = value[127];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::p0::P0::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (1284..=1319, 1285..=1320) => {
                if _start < 1288 && _end > 1284 {
                    let offset = _start.saturating_sub(1284);
                    let start = 1284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1284) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .p0_out504_write(offset, &_buf[start..end])?;
                }
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .p0_outset508_write(offset, &_buf[start..end])?;
                }
                if _start < 1296 && _end > 1292 {
                    let offset = _start.saturating_sub(1292);
                    let start = 1292u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1292) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .p0_outclr50c_write(offset, &_buf[start..end])?;
                }
                if _start < 1300 && _end > 1296 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 1304 && _end > 1300 {
                    let offset = _start.saturating_sub(1300);
                    let start = 1300u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1300) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .p0_dir514_write(offset, &_buf[start..end])?;
                }
                if _start < 1308 && _end > 1304 {
                    let offset = _start.saturating_sub(1304);
                    let start = 1304u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1304) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .p0_dirset518_write(offset, &_buf[start..end])?;
                }
                if _start < 1312 && _end > 1308 {
                    let offset = _start.saturating_sub(1308);
                    let start = 1308u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1308) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .p0_dirclr51c_write(offset, &_buf[start..end])?;
                }
                if _start < 1316 && _end > 1312 {
                    let offset = _start.saturating_sub(1312);
                    let start = 1312u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1312) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .p0_latch520_write(offset, &_buf[start..end])?;
                }
                if _start < 1320 && _end > 1316 {
                    let offset = _start.saturating_sub(1316);
                    let start = 1316u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1316) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .p0_detectmode524_write(offset, &_buf[start..end])?;
                }
            }
            (1792..=1919, 1793..=1920) => {
                if _start < 1920 && _end > 1792 {
                    let _dim = ((_start - 1792) % 4) as usize;
                    let offset = _start.saturating_sub(1792);
                    let start = 1792u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1792) - offset) as usize;
                    self.0.lock().unwrap().p0_pin_cnfn700_write(
                        _dim,
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Dwt(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Dwt {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::dwt::Dwt::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=43, 1..=44) => {
                if _start < 4 && _end > 0 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_ctrl0_read()?
                        .to_ne_bytes();
                    if _start <= 0 && _end > 0 {
                        _buf[(0 - _start) as usize] = value[0];
                    }
                    if _start <= 1 && _end > 1 {
                        _buf[(1 - _start) as usize] = value[1];
                    }
                    if _start <= 2 && _end > 2 {
                        _buf[(2 - _start) as usize] = value[2];
                    }
                    if _start <= 3 && _end > 3 {
                        _buf[(3 - _start) as usize] = value[3];
                    }
                }
                if _start < 8 && _end > 4 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_cyccnt4_read()?
                        .to_ne_bytes();
                    if _start <= 4 && _end > 4 {
                        _buf[(4 - _start) as usize] = value[0];
                    }
                    if _start <= 5 && _end > 5 {
                        _buf[(5 - _start) as usize] = value[1];
                    }
                    if _start <= 6 && _end > 6 {
                        _buf[(6 - _start) as usize] = value[2];
                    }
                    if _start <= 7 && _end > 7 {
                        _buf[(7 - _start) as usize] = value[3];
                    }
                }
                if _start < 12 && _end > 8 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_cpicnt8_read()?
                        .to_ne_bytes();
                    if _start <= 8 && _end > 8 {
                        _buf[(8 - _start) as usize] = value[0];
                    }
                    if _start <= 9 && _end > 9 {
                        _buf[(9 - _start) as usize] = value[1];
                    }
                    if _start <= 10 && _end > 10 {
                        _buf[(10 - _start) as usize] = value[2];
                    }
                    if _start <= 11 && _end > 11 {
                        _buf[(11 - _start) as usize] = value[3];
                    }
                }
                if _start < 16 && _end > 12 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_exccntc_read()?
                        .to_ne_bytes();
                    if _start <= 12 && _end > 12 {
                        _buf[(12 - _start) as usize] = value[0];
                    }
                    if _start <= 13 && _end > 13 {
                        _buf[(13 - _start) as usize] = value[1];
                    }
                    if _start <= 14 && _end > 14 {
                        _buf[(14 - _start) as usize] = value[2];
                    }
                    if _start <= 15 && _end > 15 {
                        _buf[(15 - _start) as usize] = value[3];
                    }
                }
                if _start < 20 && _end > 16 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_sleepcnt10_read()?
                        .to_ne_bytes();
                    if _start <= 16 && _end > 16 {
                        _buf[(16 - _start) as usize] = value[0];
                    }
                    if _start <= 17 && _end > 17 {
                        _buf[(17 - _start) as usize] = value[1];
                    }
                    if _start <= 18 && _end > 18 {
                        _buf[(18 - _start) as usize] = value[2];
                    }
                    if _start <= 19 && _end > 19 {
                        _buf[(19 - _start) as usize] = value[3];
                    }
                }
                if _start < 24 && _end > 20 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_lsucnt14_read()?
                        .to_ne_bytes();
                    if _start <= 20 && _end > 20 {
                        _buf[(20 - _start) as usize] = value[0];
                    }
                    if _start <= 21 && _end > 21 {
                        _buf[(21 - _start) as usize] = value[1];
                    }
                    if _start <= 22 && _end > 22 {
                        _buf[(22 - _start) as usize] = value[2];
                    }
                    if _start <= 23 && _end > 23 {
                        _buf[(23 - _start) as usize] = value[3];
                    }
                }
                if _start < 28 && _end > 24 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_foldcnt18_read()?
                        .to_ne_bytes();
                    if _start <= 24 && _end > 24 {
                        _buf[(24 - _start) as usize] = value[0];
                    }
                    if _start <= 25 && _end > 25 {
                        _buf[(25 - _start) as usize] = value[1];
                    }
                    if _start <= 26 && _end > 26 {
                        _buf[(26 - _start) as usize] = value[2];
                    }
                    if _start <= 27 && _end > 27 {
                        _buf[(27 - _start) as usize] = value[3];
                    }
                }
                if _start < 32 && _end > 28 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_pcsr1c_read()?
                        .to_ne_bytes();
                    if _start <= 28 && _end > 28 {
                        _buf[(28 - _start) as usize] = value[0];
                    }
                    if _start <= 29 && _end > 29 {
                        _buf[(29 - _start) as usize] = value[1];
                    }
                    if _start <= 30 && _end > 30 {
                        _buf[(30 - _start) as usize] = value[2];
                    }
                    if _start <= 31 && _end > 31 {
                        _buf[(31 - _start) as usize] = value[3];
                    }
                }
                if _start < 36 && _end > 32 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_comp020_read()?
                        .to_ne_bytes();
                    if _start <= 32 && _end > 32 {
                        _buf[(32 - _start) as usize] = value[0];
                    }
                    if _start <= 33 && _end > 33 {
                        _buf[(33 - _start) as usize] = value[1];
                    }
                    if _start <= 34 && _end > 34 {
                        _buf[(34 - _start) as usize] = value[2];
                    }
                    if _start <= 35 && _end > 35 {
                        _buf[(35 - _start) as usize] = value[3];
                    }
                }
                if _start < 40 && _end > 36 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_mask024_read()?
                        .to_ne_bytes();
                    if _start <= 36 && _end > 36 {
                        _buf[(36 - _start) as usize] = value[0];
                    }
                    if _start <= 37 && _end > 37 {
                        _buf[(37 - _start) as usize] = value[1];
                    }
                    if _start <= 38 && _end > 38 {
                        _buf[(38 - _start) as usize] = value[2];
                    }
                    if _start <= 39 && _end > 39 {
                        _buf[(39 - _start) as usize] = value[3];
                    }
                }
                if _start < 44 && _end > 40 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_function028_read()?
                        .to_ne_bytes();
                    if _start <= 40 && _end > 40 {
                        _buf[(40 - _start) as usize] = value[0];
                    }
                    if _start <= 41 && _end > 41 {
                        _buf[(41 - _start) as usize] = value[1];
                    }
                    if _start <= 42 && _end > 42 {
                        _buf[(42 - _start) as usize] = value[2];
                    }
                    if _start <= 43 && _end > 43 {
                        _buf[(43 - _start) as usize] = value[3];
                    }
                }
            }
            (48..=59, 49..=60) => {
                if _start < 52 && _end > 48 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_comp130_read()?
                        .to_ne_bytes();
                    if _start <= 48 && _end > 48 {
                        _buf[(48 - _start) as usize] = value[0];
                    }
                    if _start <= 49 && _end > 49 {
                        _buf[(49 - _start) as usize] = value[1];
                    }
                    if _start <= 50 && _end > 50 {
                        _buf[(50 - _start) as usize] = value[2];
                    }
                    if _start <= 51 && _end > 51 {
                        _buf[(51 - _start) as usize] = value[3];
                    }
                }
                if _start < 56 && _end > 52 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_mask134_read()?
                        .to_ne_bytes();
                    if _start <= 52 && _end > 52 {
                        _buf[(52 - _start) as usize] = value[0];
                    }
                    if _start <= 53 && _end > 53 {
                        _buf[(53 - _start) as usize] = value[1];
                    }
                    if _start <= 54 && _end > 54 {
                        _buf[(54 - _start) as usize] = value[2];
                    }
                    if _start <= 55 && _end > 55 {
                        _buf[(55 - _start) as usize] = value[3];
                    }
                }
                if _start < 60 && _end > 56 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_function138_read()?
                        .to_ne_bytes();
                    if _start <= 56 && _end > 56 {
                        _buf[(56 - _start) as usize] = value[0];
                    }
                    if _start <= 57 && _end > 57 {
                        _buf[(57 - _start) as usize] = value[1];
                    }
                    if _start <= 58 && _end > 58 {
                        _buf[(58 - _start) as usize] = value[2];
                    }
                    if _start <= 59 && _end > 59 {
                        _buf[(59 - _start) as usize] = value[3];
                    }
                }
            }
            (64..=75, 65..=76) => {
                if _start < 68 && _end > 64 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_comp240_read()?
                        .to_ne_bytes();
                    if _start <= 64 && _end > 64 {
                        _buf[(64 - _start) as usize] = value[0];
                    }
                    if _start <= 65 && _end > 65 {
                        _buf[(65 - _start) as usize] = value[1];
                    }
                    if _start <= 66 && _end > 66 {
                        _buf[(66 - _start) as usize] = value[2];
                    }
                    if _start <= 67 && _end > 67 {
                        _buf[(67 - _start) as usize] = value[3];
                    }
                }
                if _start < 72 && _end > 68 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_mask244_read()?
                        .to_ne_bytes();
                    if _start <= 68 && _end > 68 {
                        _buf[(68 - _start) as usize] = value[0];
                    }
                    if _start <= 69 && _end > 69 {
                        _buf[(69 - _start) as usize] = value[1];
                    }
                    if _start <= 70 && _end > 70 {
                        _buf[(70 - _start) as usize] = value[2];
                    }
                    if _start <= 71 && _end > 71 {
                        _buf[(71 - _start) as usize] = value[3];
                    }
                }
                if _start < 76 && _end > 72 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_function248_read()?
                        .to_ne_bytes();
                    if _start <= 72 && _end > 72 {
                        _buf[(72 - _start) as usize] = value[0];
                    }
                    if _start <= 73 && _end > 73 {
                        _buf[(73 - _start) as usize] = value[1];
                    }
                    if _start <= 74 && _end > 74 {
                        _buf[(74 - _start) as usize] = value[2];
                    }
                    if _start <= 75 && _end > 75 {
                        _buf[(75 - _start) as usize] = value[3];
                    }
                }
            }
            (80..=91, 81..=92) => {
                if _start < 84 && _end > 80 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_comp350_read()?
                        .to_ne_bytes();
                    if _start <= 80 && _end > 80 {
                        _buf[(80 - _start) as usize] = value[0];
                    }
                    if _start <= 81 && _end > 81 {
                        _buf[(81 - _start) as usize] = value[1];
                    }
                    if _start <= 82 && _end > 82 {
                        _buf[(82 - _start) as usize] = value[2];
                    }
                    if _start <= 83 && _end > 83 {
                        _buf[(83 - _start) as usize] = value[3];
                    }
                }
                if _start < 88 && _end > 84 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_mask354_read()?
                        .to_ne_bytes();
                    if _start <= 84 && _end > 84 {
                        _buf[(84 - _start) as usize] = value[0];
                    }
                    if _start <= 85 && _end > 85 {
                        _buf[(85 - _start) as usize] = value[1];
                    }
                    if _start <= 86 && _end > 86 {
                        _buf[(86 - _start) as usize] = value[2];
                    }
                    if _start <= 87 && _end > 87 {
                        _buf[(87 - _start) as usize] = value[3];
                    }
                }
                if _start < 92 && _end > 88 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .dwt_dwt_function358_read()?
                        .to_ne_bytes();
                    if _start <= 88 && _end > 88 {
                        _buf[(88 - _start) as usize] = value[0];
                    }
                    if _start <= 89 && _end > 89 {
                        _buf[(89 - _start) as usize] = value[1];
                    }
                    if _start <= 90 && _end > 90 {
                        _buf[(90 - _start) as usize] = value[2];
                    }
                    if _start <= 91 && _end > 91 {
                        _buf[(91 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::dwt::Dwt::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (..=43, 1..=44) => {
                if _start < 4 && _end > 0 {
                    let offset = _start.saturating_sub(0);
                    let start = 0u64.saturating_sub(_start) as usize;
                    let end = ((_end - 0) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_ctrl0_write(offset, &_buf[start..end])?;
                }
                if _start < 8 && _end > 4 {
                    let offset = _start.saturating_sub(4);
                    let start = 4u64.saturating_sub(_start) as usize;
                    let end = ((_end - 4) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_cyccnt4_write(offset, &_buf[start..end])?;
                }
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_cpicnt8_write(offset, &_buf[start..end])?;
                }
                if _start < 16 && _end > 12 {
                    let offset = _start.saturating_sub(12);
                    let start = 12u64.saturating_sub(_start) as usize;
                    let end = ((_end - 12) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_exccntc_write(offset, &_buf[start..end])?;
                }
                if _start < 20 && _end > 16 {
                    let offset = _start.saturating_sub(16);
                    let start = 16u64.saturating_sub(_start) as usize;
                    let end = ((_end - 16) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_sleepcnt10_write(offset, &_buf[start..end])?;
                }
                if _start < 24 && _end > 20 {
                    let offset = _start.saturating_sub(20);
                    let start = 20u64.saturating_sub(_start) as usize;
                    let end = ((_end - 20) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_lsucnt14_write(offset, &_buf[start..end])?;
                }
                if _start < 28 && _end > 24 {
                    let offset = _start.saturating_sub(24);
                    let start = 24u64.saturating_sub(_start) as usize;
                    let end = ((_end - 24) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_foldcnt18_write(offset, &_buf[start..end])?;
                }
                if _start < 32 && _end > 28 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 36 && _end > 32 {
                    let offset = _start.saturating_sub(32);
                    let start = 32u64.saturating_sub(_start) as usize;
                    let end = ((_end - 32) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_comp020_write(offset, &_buf[start..end])?;
                }
                if _start < 40 && _end > 36 {
                    let offset = _start.saturating_sub(36);
                    let start = 36u64.saturating_sub(_start) as usize;
                    let end = ((_end - 36) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_mask024_write(offset, &_buf[start..end])?;
                }
                if _start < 44 && _end > 40 {
                    let offset = _start.saturating_sub(40);
                    let start = 40u64.saturating_sub(_start) as usize;
                    let end = ((_end - 40) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_function028_write(offset, &_buf[start..end])?;
                }
            }
            (48..=59, 49..=60) => {
                if _start < 52 && _end > 48 {
                    let offset = _start.saturating_sub(48);
                    let start = 48u64.saturating_sub(_start) as usize;
                    let end = ((_end - 48) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_comp130_write(offset, &_buf[start..end])?;
                }
                if _start < 56 && _end > 52 {
                    let offset = _start.saturating_sub(52);
                    let start = 52u64.saturating_sub(_start) as usize;
                    let end = ((_end - 52) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_mask134_write(offset, &_buf[start..end])?;
                }
                if _start < 60 && _end > 56 {
                    let offset = _start.saturating_sub(56);
                    let start = 56u64.saturating_sub(_start) as usize;
                    let end = ((_end - 56) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_function138_write(offset, &_buf[start..end])?;
                }
            }
            (64..=75, 65..=76) => {
                if _start < 68 && _end > 64 {
                    let offset = _start.saturating_sub(64);
                    let start = 64u64.saturating_sub(_start) as usize;
                    let end = ((_end - 64) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_comp240_write(offset, &_buf[start..end])?;
                }
                if _start < 72 && _end > 68 {
                    let offset = _start.saturating_sub(68);
                    let start = 68u64.saturating_sub(_start) as usize;
                    let end = ((_end - 68) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_mask244_write(offset, &_buf[start..end])?;
                }
                if _start < 76 && _end > 72 {
                    let offset = _start.saturating_sub(72);
                    let start = 72u64.saturating_sub(_start) as usize;
                    let end = ((_end - 72) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_function248_write(offset, &_buf[start..end])?;
                }
            }
            (80..=91, 81..=92) => {
                if _start < 84 && _end > 80 {
                    let offset = _start.saturating_sub(80);
                    let start = 80u64.saturating_sub(_start) as usize;
                    let end = ((_end - 80) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_comp350_write(offset, &_buf[start..end])?;
                }
                if _start < 88 && _end > 84 {
                    let offset = _start.saturating_sub(84);
                    let start = 84u64.saturating_sub(_start) as usize;
                    let end = ((_end - 84) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_mask354_write(offset, &_buf[start..end])?;
                }
                if _start < 92 && _end > 88 {
                    let offset = _start.saturating_sub(88);
                    let start = 88u64.saturating_sub(_start) as usize;
                    let end = ((_end - 88) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .dwt_dwt_function358_write(offset, &_buf[start..end])?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Scs(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Scs {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::scs::Scs::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (4..=11, 5..=12) => {
                if _start < 8 && _end > 4 {
                    let value =
                        self.0.lock().unwrap().scs_ictr4_read()?.to_ne_bytes();
                    if _start <= 4 && _end > 4 {
                        _buf[(4 - _start) as usize] = value[0];
                    }
                    if _start <= 5 && _end > 5 {
                        _buf[(5 - _start) as usize] = value[1];
                    }
                    if _start <= 6 && _end > 6 {
                        _buf[(6 - _start) as usize] = value[2];
                    }
                    if _start <= 7 && _end > 7 {
                        _buf[(7 - _start) as usize] = value[3];
                    }
                }
                if _start < 12 && _end > 8 {
                    let value =
                        self.0.lock().unwrap().scs_actlr8_read()?.to_ne_bytes();
                    if _start <= 8 && _end > 8 {
                        _buf[(8 - _start) as usize] = value[0];
                    }
                    if _start <= 9 && _end > 9 {
                        _buf[(9 - _start) as usize] = value[1];
                    }
                    if _start <= 10 && _end > 10 {
                        _buf[(10 - _start) as usize] = value[2];
                    }
                    if _start <= 11 && _end > 11 {
                        _buf[(11 - _start) as usize] = value[3];
                    }
                }
            }
            (16..=31, 17..=32) => {
                if _start < 20 && _end > 16 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_stcsr10_read()?
                        .to_ne_bytes();
                    if _start <= 16 && _end > 16 {
                        _buf[(16 - _start) as usize] = value[0];
                    }
                    if _start <= 17 && _end > 17 {
                        _buf[(17 - _start) as usize] = value[1];
                    }
                    if _start <= 18 && _end > 18 {
                        _buf[(18 - _start) as usize] = value[2];
                    }
                    if _start <= 19 && _end > 19 {
                        _buf[(19 - _start) as usize] = value[3];
                    }
                }
                if _start < 24 && _end > 20 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_strvr14_read()?
                        .to_ne_bytes();
                    if _start <= 20 && _end > 20 {
                        _buf[(20 - _start) as usize] = value[0];
                    }
                    if _start <= 21 && _end > 21 {
                        _buf[(21 - _start) as usize] = value[1];
                    }
                    if _start <= 22 && _end > 22 {
                        _buf[(22 - _start) as usize] = value[2];
                    }
                    if _start <= 23 && _end > 23 {
                        _buf[(23 - _start) as usize] = value[3];
                    }
                }
                if _start < 28 && _end > 24 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_stcvr18_read()?
                        .to_ne_bytes();
                    if _start <= 24 && _end > 24 {
                        _buf[(24 - _start) as usize] = value[0];
                    }
                    if _start <= 25 && _end > 25 {
                        _buf[(25 - _start) as usize] = value[1];
                    }
                    if _start <= 26 && _end > 26 {
                        _buf[(26 - _start) as usize] = value[2];
                    }
                    if _start <= 27 && _end > 27 {
                        _buf[(27 - _start) as usize] = value[3];
                    }
                }
                if _start < 32 && _end > 28 {
                    let value =
                        self.0.lock().unwrap().scs_stcr1c_read()?.to_ne_bytes();
                    if _start <= 28 && _end > 28 {
                        _buf[(28 - _start) as usize] = value[0];
                    }
                    if _start <= 29 && _end > 29 {
                        _buf[(29 - _start) as usize] = value[1];
                    }
                    if _start <= 30 && _end > 30 {
                        _buf[(30 - _start) as usize] = value[2];
                    }
                    if _start <= 31 && _end > 31 {
                        _buf[(31 - _start) as usize] = value[3];
                    }
                }
            }
            (256..=287, 257..=288) => {
                if _start < 260 && _end > 256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser0100_read()?
                        .to_ne_bytes();
                    if _start <= 256 && _end > 256 {
                        _buf[(256 - _start) as usize] = value[0];
                    }
                    if _start <= 257 && _end > 257 {
                        _buf[(257 - _start) as usize] = value[1];
                    }
                    if _start <= 258 && _end > 258 {
                        _buf[(258 - _start) as usize] = value[2];
                    }
                    if _start <= 259 && _end > 259 {
                        _buf[(259 - _start) as usize] = value[3];
                    }
                }
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser1104_read()?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 268 && _end > 264 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser2108_read()?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                }
                if _start < 272 && _end > 268 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser310c_read()?
                        .to_ne_bytes();
                    if _start <= 268 && _end > 268 {
                        _buf[(268 - _start) as usize] = value[0];
                    }
                    if _start <= 269 && _end > 269 {
                        _buf[(269 - _start) as usize] = value[1];
                    }
                    if _start <= 270 && _end > 270 {
                        _buf[(270 - _start) as usize] = value[2];
                    }
                    if _start <= 271 && _end > 271 {
                        _buf[(271 - _start) as usize] = value[3];
                    }
                }
                if _start < 276 && _end > 272 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser4110_read()?
                        .to_ne_bytes();
                    if _start <= 272 && _end > 272 {
                        _buf[(272 - _start) as usize] = value[0];
                    }
                    if _start <= 273 && _end > 273 {
                        _buf[(273 - _start) as usize] = value[1];
                    }
                    if _start <= 274 && _end > 274 {
                        _buf[(274 - _start) as usize] = value[2];
                    }
                    if _start <= 275 && _end > 275 {
                        _buf[(275 - _start) as usize] = value[3];
                    }
                }
                if _start < 280 && _end > 276 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser5114_read()?
                        .to_ne_bytes();
                    if _start <= 276 && _end > 276 {
                        _buf[(276 - _start) as usize] = value[0];
                    }
                    if _start <= 277 && _end > 277 {
                        _buf[(277 - _start) as usize] = value[1];
                    }
                    if _start <= 278 && _end > 278 {
                        _buf[(278 - _start) as usize] = value[2];
                    }
                    if _start <= 279 && _end > 279 {
                        _buf[(279 - _start) as usize] = value[3];
                    }
                }
                if _start < 284 && _end > 280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser6118_read()?
                        .to_ne_bytes();
                    if _start <= 280 && _end > 280 {
                        _buf[(280 - _start) as usize] = value[0];
                    }
                    if _start <= 281 && _end > 281 {
                        _buf[(281 - _start) as usize] = value[1];
                    }
                    if _start <= 282 && _end > 282 {
                        _buf[(282 - _start) as usize] = value[2];
                    }
                    if _start <= 283 && _end > 283 {
                        _buf[(283 - _start) as usize] = value[3];
                    }
                }
                if _start < 288 && _end > 284 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser711c_read()?
                        .to_ne_bytes();
                    if _start <= 284 && _end > 284 {
                        _buf[(284 - _start) as usize] = value[0];
                    }
                    if _start <= 285 && _end > 285 {
                        _buf[(285 - _start) as usize] = value[1];
                    }
                    if _start <= 286 && _end > 286 {
                        _buf[(286 - _start) as usize] = value[2];
                    }
                    if _start <= 287 && _end > 287 {
                        _buf[(287 - _start) as usize] = value[3];
                    }
                }
            }
            (384..=415, 385..=416) => {
                if _start < 388 && _end > 384 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer0180_read()?
                        .to_ne_bytes();
                    if _start <= 384 && _end > 384 {
                        _buf[(384 - _start) as usize] = value[0];
                    }
                    if _start <= 385 && _end > 385 {
                        _buf[(385 - _start) as usize] = value[1];
                    }
                    if _start <= 386 && _end > 386 {
                        _buf[(386 - _start) as usize] = value[2];
                    }
                    if _start <= 387 && _end > 387 {
                        _buf[(387 - _start) as usize] = value[3];
                    }
                }
                if _start < 392 && _end > 388 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer1184_read()?
                        .to_ne_bytes();
                    if _start <= 388 && _end > 388 {
                        _buf[(388 - _start) as usize] = value[0];
                    }
                    if _start <= 389 && _end > 389 {
                        _buf[(389 - _start) as usize] = value[1];
                    }
                    if _start <= 390 && _end > 390 {
                        _buf[(390 - _start) as usize] = value[2];
                    }
                    if _start <= 391 && _end > 391 {
                        _buf[(391 - _start) as usize] = value[3];
                    }
                }
                if _start < 396 && _end > 392 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer2188_read()?
                        .to_ne_bytes();
                    if _start <= 392 && _end > 392 {
                        _buf[(392 - _start) as usize] = value[0];
                    }
                    if _start <= 393 && _end > 393 {
                        _buf[(393 - _start) as usize] = value[1];
                    }
                    if _start <= 394 && _end > 394 {
                        _buf[(394 - _start) as usize] = value[2];
                    }
                    if _start <= 395 && _end > 395 {
                        _buf[(395 - _start) as usize] = value[3];
                    }
                }
                if _start < 400 && _end > 396 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer318c_read()?
                        .to_ne_bytes();
                    if _start <= 396 && _end > 396 {
                        _buf[(396 - _start) as usize] = value[0];
                    }
                    if _start <= 397 && _end > 397 {
                        _buf[(397 - _start) as usize] = value[1];
                    }
                    if _start <= 398 && _end > 398 {
                        _buf[(398 - _start) as usize] = value[2];
                    }
                    if _start <= 399 && _end > 399 {
                        _buf[(399 - _start) as usize] = value[3];
                    }
                }
                if _start < 404 && _end > 400 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer4190_read()?
                        .to_ne_bytes();
                    if _start <= 400 && _end > 400 {
                        _buf[(400 - _start) as usize] = value[0];
                    }
                    if _start <= 401 && _end > 401 {
                        _buf[(401 - _start) as usize] = value[1];
                    }
                    if _start <= 402 && _end > 402 {
                        _buf[(402 - _start) as usize] = value[2];
                    }
                    if _start <= 403 && _end > 403 {
                        _buf[(403 - _start) as usize] = value[3];
                    }
                }
                if _start < 408 && _end > 404 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer5194_read()?
                        .to_ne_bytes();
                    if _start <= 404 && _end > 404 {
                        _buf[(404 - _start) as usize] = value[0];
                    }
                    if _start <= 405 && _end > 405 {
                        _buf[(405 - _start) as usize] = value[1];
                    }
                    if _start <= 406 && _end > 406 {
                        _buf[(406 - _start) as usize] = value[2];
                    }
                    if _start <= 407 && _end > 407 {
                        _buf[(407 - _start) as usize] = value[3];
                    }
                }
                if _start < 412 && _end > 408 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer6198_read()?
                        .to_ne_bytes();
                    if _start <= 408 && _end > 408 {
                        _buf[(408 - _start) as usize] = value[0];
                    }
                    if _start <= 409 && _end > 409 {
                        _buf[(409 - _start) as usize] = value[1];
                    }
                    if _start <= 410 && _end > 410 {
                        _buf[(410 - _start) as usize] = value[2];
                    }
                    if _start <= 411 && _end > 411 {
                        _buf[(411 - _start) as usize] = value[3];
                    }
                }
                if _start < 416 && _end > 412 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer719c_read()?
                        .to_ne_bytes();
                    if _start <= 412 && _end > 412 {
                        _buf[(412 - _start) as usize] = value[0];
                    }
                    if _start <= 413 && _end > 413 {
                        _buf[(413 - _start) as usize] = value[1];
                    }
                    if _start <= 414 && _end > 414 {
                        _buf[(414 - _start) as usize] = value[2];
                    }
                    if _start <= 415 && _end > 415 {
                        _buf[(415 - _start) as usize] = value[3];
                    }
                }
            }
            (512..=543, 513..=544) => {
                if _start < 516 && _end > 512 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr0200_read()?
                        .to_ne_bytes();
                    if _start <= 512 && _end > 512 {
                        _buf[(512 - _start) as usize] = value[0];
                    }
                    if _start <= 513 && _end > 513 {
                        _buf[(513 - _start) as usize] = value[1];
                    }
                    if _start <= 514 && _end > 514 {
                        _buf[(514 - _start) as usize] = value[2];
                    }
                    if _start <= 515 && _end > 515 {
                        _buf[(515 - _start) as usize] = value[3];
                    }
                }
                if _start < 520 && _end > 516 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr1204_read()?
                        .to_ne_bytes();
                    if _start <= 516 && _end > 516 {
                        _buf[(516 - _start) as usize] = value[0];
                    }
                    if _start <= 517 && _end > 517 {
                        _buf[(517 - _start) as usize] = value[1];
                    }
                    if _start <= 518 && _end > 518 {
                        _buf[(518 - _start) as usize] = value[2];
                    }
                    if _start <= 519 && _end > 519 {
                        _buf[(519 - _start) as usize] = value[3];
                    }
                }
                if _start < 524 && _end > 520 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr2208_read()?
                        .to_ne_bytes();
                    if _start <= 520 && _end > 520 {
                        _buf[(520 - _start) as usize] = value[0];
                    }
                    if _start <= 521 && _end > 521 {
                        _buf[(521 - _start) as usize] = value[1];
                    }
                    if _start <= 522 && _end > 522 {
                        _buf[(522 - _start) as usize] = value[2];
                    }
                    if _start <= 523 && _end > 523 {
                        _buf[(523 - _start) as usize] = value[3];
                    }
                }
                if _start < 528 && _end > 524 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr320c_read()?
                        .to_ne_bytes();
                    if _start <= 524 && _end > 524 {
                        _buf[(524 - _start) as usize] = value[0];
                    }
                    if _start <= 525 && _end > 525 {
                        _buf[(525 - _start) as usize] = value[1];
                    }
                    if _start <= 526 && _end > 526 {
                        _buf[(526 - _start) as usize] = value[2];
                    }
                    if _start <= 527 && _end > 527 {
                        _buf[(527 - _start) as usize] = value[3];
                    }
                }
                if _start < 532 && _end > 528 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr4210_read()?
                        .to_ne_bytes();
                    if _start <= 528 && _end > 528 {
                        _buf[(528 - _start) as usize] = value[0];
                    }
                    if _start <= 529 && _end > 529 {
                        _buf[(529 - _start) as usize] = value[1];
                    }
                    if _start <= 530 && _end > 530 {
                        _buf[(530 - _start) as usize] = value[2];
                    }
                    if _start <= 531 && _end > 531 {
                        _buf[(531 - _start) as usize] = value[3];
                    }
                }
                if _start < 536 && _end > 532 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr5214_read()?
                        .to_ne_bytes();
                    if _start <= 532 && _end > 532 {
                        _buf[(532 - _start) as usize] = value[0];
                    }
                    if _start <= 533 && _end > 533 {
                        _buf[(533 - _start) as usize] = value[1];
                    }
                    if _start <= 534 && _end > 534 {
                        _buf[(534 - _start) as usize] = value[2];
                    }
                    if _start <= 535 && _end > 535 {
                        _buf[(535 - _start) as usize] = value[3];
                    }
                }
                if _start < 540 && _end > 536 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr6218_read()?
                        .to_ne_bytes();
                    if _start <= 536 && _end > 536 {
                        _buf[(536 - _start) as usize] = value[0];
                    }
                    if _start <= 537 && _end > 537 {
                        _buf[(537 - _start) as usize] = value[1];
                    }
                    if _start <= 538 && _end > 538 {
                        _buf[(538 - _start) as usize] = value[2];
                    }
                    if _start <= 539 && _end > 539 {
                        _buf[(539 - _start) as usize] = value[3];
                    }
                }
                if _start < 544 && _end > 540 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr721c_read()?
                        .to_ne_bytes();
                    if _start <= 540 && _end > 540 {
                        _buf[(540 - _start) as usize] = value[0];
                    }
                    if _start <= 541 && _end > 541 {
                        _buf[(541 - _start) as usize] = value[1];
                    }
                    if _start <= 542 && _end > 542 {
                        _buf[(542 - _start) as usize] = value[2];
                    }
                    if _start <= 543 && _end > 543 {
                        _buf[(543 - _start) as usize] = value[3];
                    }
                }
            }
            (640..=671, 641..=672) => {
                if _start < 644 && _end > 640 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr0280_read()?
                        .to_ne_bytes();
                    if _start <= 640 && _end > 640 {
                        _buf[(640 - _start) as usize] = value[0];
                    }
                    if _start <= 641 && _end > 641 {
                        _buf[(641 - _start) as usize] = value[1];
                    }
                    if _start <= 642 && _end > 642 {
                        _buf[(642 - _start) as usize] = value[2];
                    }
                    if _start <= 643 && _end > 643 {
                        _buf[(643 - _start) as usize] = value[3];
                    }
                }
                if _start < 648 && _end > 644 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr1284_read()?
                        .to_ne_bytes();
                    if _start <= 644 && _end > 644 {
                        _buf[(644 - _start) as usize] = value[0];
                    }
                    if _start <= 645 && _end > 645 {
                        _buf[(645 - _start) as usize] = value[1];
                    }
                    if _start <= 646 && _end > 646 {
                        _buf[(646 - _start) as usize] = value[2];
                    }
                    if _start <= 647 && _end > 647 {
                        _buf[(647 - _start) as usize] = value[3];
                    }
                }
                if _start < 652 && _end > 648 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr2288_read()?
                        .to_ne_bytes();
                    if _start <= 648 && _end > 648 {
                        _buf[(648 - _start) as usize] = value[0];
                    }
                    if _start <= 649 && _end > 649 {
                        _buf[(649 - _start) as usize] = value[1];
                    }
                    if _start <= 650 && _end > 650 {
                        _buf[(650 - _start) as usize] = value[2];
                    }
                    if _start <= 651 && _end > 651 {
                        _buf[(651 - _start) as usize] = value[3];
                    }
                }
                if _start < 656 && _end > 652 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr328c_read()?
                        .to_ne_bytes();
                    if _start <= 652 && _end > 652 {
                        _buf[(652 - _start) as usize] = value[0];
                    }
                    if _start <= 653 && _end > 653 {
                        _buf[(653 - _start) as usize] = value[1];
                    }
                    if _start <= 654 && _end > 654 {
                        _buf[(654 - _start) as usize] = value[2];
                    }
                    if _start <= 655 && _end > 655 {
                        _buf[(655 - _start) as usize] = value[3];
                    }
                }
                if _start < 660 && _end > 656 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr4290_read()?
                        .to_ne_bytes();
                    if _start <= 656 && _end > 656 {
                        _buf[(656 - _start) as usize] = value[0];
                    }
                    if _start <= 657 && _end > 657 {
                        _buf[(657 - _start) as usize] = value[1];
                    }
                    if _start <= 658 && _end > 658 {
                        _buf[(658 - _start) as usize] = value[2];
                    }
                    if _start <= 659 && _end > 659 {
                        _buf[(659 - _start) as usize] = value[3];
                    }
                }
                if _start < 664 && _end > 660 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr5294_read()?
                        .to_ne_bytes();
                    if _start <= 660 && _end > 660 {
                        _buf[(660 - _start) as usize] = value[0];
                    }
                    if _start <= 661 && _end > 661 {
                        _buf[(661 - _start) as usize] = value[1];
                    }
                    if _start <= 662 && _end > 662 {
                        _buf[(662 - _start) as usize] = value[2];
                    }
                    if _start <= 663 && _end > 663 {
                        _buf[(663 - _start) as usize] = value[3];
                    }
                }
                if _start < 668 && _end > 664 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr6298_read()?
                        .to_ne_bytes();
                    if _start <= 664 && _end > 664 {
                        _buf[(664 - _start) as usize] = value[0];
                    }
                    if _start <= 665 && _end > 665 {
                        _buf[(665 - _start) as usize] = value[1];
                    }
                    if _start <= 666 && _end > 666 {
                        _buf[(666 - _start) as usize] = value[2];
                    }
                    if _start <= 667 && _end > 667 {
                        _buf[(667 - _start) as usize] = value[3];
                    }
                }
                if _start < 672 && _end > 668 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr729c_read()?
                        .to_ne_bytes();
                    if _start <= 668 && _end > 668 {
                        _buf[(668 - _start) as usize] = value[0];
                    }
                    if _start <= 669 && _end > 669 {
                        _buf[(669 - _start) as usize] = value[1];
                    }
                    if _start <= 670 && _end > 670 {
                        _buf[(670 - _start) as usize] = value[2];
                    }
                    if _start <= 671 && _end > 671 {
                        _buf[(671 - _start) as usize] = value[3];
                    }
                }
            }
            (768..=799, 769..=800) => {
                if _start < 772 && _end > 768 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr0300_read()?
                        .to_ne_bytes();
                    if _start <= 768 && _end > 768 {
                        _buf[(768 - _start) as usize] = value[0];
                    }
                    if _start <= 769 && _end > 769 {
                        _buf[(769 - _start) as usize] = value[1];
                    }
                    if _start <= 770 && _end > 770 {
                        _buf[(770 - _start) as usize] = value[2];
                    }
                    if _start <= 771 && _end > 771 {
                        _buf[(771 - _start) as usize] = value[3];
                    }
                }
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr1304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr2308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
                if _start < 784 && _end > 780 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr330c_read()?
                        .to_ne_bytes();
                    if _start <= 780 && _end > 780 {
                        _buf[(780 - _start) as usize] = value[0];
                    }
                    if _start <= 781 && _end > 781 {
                        _buf[(781 - _start) as usize] = value[1];
                    }
                    if _start <= 782 && _end > 782 {
                        _buf[(782 - _start) as usize] = value[2];
                    }
                    if _start <= 783 && _end > 783 {
                        _buf[(783 - _start) as usize] = value[3];
                    }
                }
                if _start < 788 && _end > 784 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr4310_read()?
                        .to_ne_bytes();
                    if _start <= 784 && _end > 784 {
                        _buf[(784 - _start) as usize] = value[0];
                    }
                    if _start <= 785 && _end > 785 {
                        _buf[(785 - _start) as usize] = value[1];
                    }
                    if _start <= 786 && _end > 786 {
                        _buf[(786 - _start) as usize] = value[2];
                    }
                    if _start <= 787 && _end > 787 {
                        _buf[(787 - _start) as usize] = value[3];
                    }
                }
                if _start < 792 && _end > 788 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr5314_read()?
                        .to_ne_bytes();
                    if _start <= 788 && _end > 788 {
                        _buf[(788 - _start) as usize] = value[0];
                    }
                    if _start <= 789 && _end > 789 {
                        _buf[(789 - _start) as usize] = value[1];
                    }
                    if _start <= 790 && _end > 790 {
                        _buf[(790 - _start) as usize] = value[2];
                    }
                    if _start <= 791 && _end > 791 {
                        _buf[(791 - _start) as usize] = value[3];
                    }
                }
                if _start < 796 && _end > 792 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr6318_read()?
                        .to_ne_bytes();
                    if _start <= 792 && _end > 792 {
                        _buf[(792 - _start) as usize] = value[0];
                    }
                    if _start <= 793 && _end > 793 {
                        _buf[(793 - _start) as usize] = value[1];
                    }
                    if _start <= 794 && _end > 794 {
                        _buf[(794 - _start) as usize] = value[2];
                    }
                    if _start <= 795 && _end > 795 {
                        _buf[(795 - _start) as usize] = value[3];
                    }
                }
                if _start < 800 && _end > 796 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr731c_read()?
                        .to_ne_bytes();
                    if _start <= 796 && _end > 796 {
                        _buf[(796 - _start) as usize] = value[0];
                    }
                    if _start <= 797 && _end > 797 {
                        _buf[(797 - _start) as usize] = value[1];
                    }
                    if _start <= 798 && _end > 798 {
                        _buf[(798 - _start) as usize] = value[2];
                    }
                    if _start <= 799 && _end > 799 {
                        _buf[(799 - _start) as usize] = value[3];
                    }
                }
            }
            (1024..=1263, 1025..=1264) => {
                if _start < 1028 && _end > 1024 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr0400_read()?
                        .to_ne_bytes();
                    if _start <= 1024 && _end > 1024 {
                        _buf[(1024 - _start) as usize] = value[0];
                    }
                    if _start <= 1025 && _end > 1025 {
                        _buf[(1025 - _start) as usize] = value[1];
                    }
                    if _start <= 1026 && _end > 1026 {
                        _buf[(1026 - _start) as usize] = value[2];
                    }
                    if _start <= 1027 && _end > 1027 {
                        _buf[(1027 - _start) as usize] = value[3];
                    }
                }
                if _start < 1032 && _end > 1028 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr1404_read()?
                        .to_ne_bytes();
                    if _start <= 1028 && _end > 1028 {
                        _buf[(1028 - _start) as usize] = value[0];
                    }
                    if _start <= 1029 && _end > 1029 {
                        _buf[(1029 - _start) as usize] = value[1];
                    }
                    if _start <= 1030 && _end > 1030 {
                        _buf[(1030 - _start) as usize] = value[2];
                    }
                    if _start <= 1031 && _end > 1031 {
                        _buf[(1031 - _start) as usize] = value[3];
                    }
                }
                if _start < 1036 && _end > 1032 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr2408_read()?
                        .to_ne_bytes();
                    if _start <= 1032 && _end > 1032 {
                        _buf[(1032 - _start) as usize] = value[0];
                    }
                    if _start <= 1033 && _end > 1033 {
                        _buf[(1033 - _start) as usize] = value[1];
                    }
                    if _start <= 1034 && _end > 1034 {
                        _buf[(1034 - _start) as usize] = value[2];
                    }
                    if _start <= 1035 && _end > 1035 {
                        _buf[(1035 - _start) as usize] = value[3];
                    }
                }
                if _start < 1040 && _end > 1036 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr340c_read()?
                        .to_ne_bytes();
                    if _start <= 1036 && _end > 1036 {
                        _buf[(1036 - _start) as usize] = value[0];
                    }
                    if _start <= 1037 && _end > 1037 {
                        _buf[(1037 - _start) as usize] = value[1];
                    }
                    if _start <= 1038 && _end > 1038 {
                        _buf[(1038 - _start) as usize] = value[2];
                    }
                    if _start <= 1039 && _end > 1039 {
                        _buf[(1039 - _start) as usize] = value[3];
                    }
                }
                if _start < 1044 && _end > 1040 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr4410_read()?
                        .to_ne_bytes();
                    if _start <= 1040 && _end > 1040 {
                        _buf[(1040 - _start) as usize] = value[0];
                    }
                    if _start <= 1041 && _end > 1041 {
                        _buf[(1041 - _start) as usize] = value[1];
                    }
                    if _start <= 1042 && _end > 1042 {
                        _buf[(1042 - _start) as usize] = value[2];
                    }
                    if _start <= 1043 && _end > 1043 {
                        _buf[(1043 - _start) as usize] = value[3];
                    }
                }
                if _start < 1048 && _end > 1044 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr5414_read()?
                        .to_ne_bytes();
                    if _start <= 1044 && _end > 1044 {
                        _buf[(1044 - _start) as usize] = value[0];
                    }
                    if _start <= 1045 && _end > 1045 {
                        _buf[(1045 - _start) as usize] = value[1];
                    }
                    if _start <= 1046 && _end > 1046 {
                        _buf[(1046 - _start) as usize] = value[2];
                    }
                    if _start <= 1047 && _end > 1047 {
                        _buf[(1047 - _start) as usize] = value[3];
                    }
                }
                if _start < 1052 && _end > 1048 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr6418_read()?
                        .to_ne_bytes();
                    if _start <= 1048 && _end > 1048 {
                        _buf[(1048 - _start) as usize] = value[0];
                    }
                    if _start <= 1049 && _end > 1049 {
                        _buf[(1049 - _start) as usize] = value[1];
                    }
                    if _start <= 1050 && _end > 1050 {
                        _buf[(1050 - _start) as usize] = value[2];
                    }
                    if _start <= 1051 && _end > 1051 {
                        _buf[(1051 - _start) as usize] = value[3];
                    }
                }
                if _start < 1056 && _end > 1052 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr741c_read()?
                        .to_ne_bytes();
                    if _start <= 1052 && _end > 1052 {
                        _buf[(1052 - _start) as usize] = value[0];
                    }
                    if _start <= 1053 && _end > 1053 {
                        _buf[(1053 - _start) as usize] = value[1];
                    }
                    if _start <= 1054 && _end > 1054 {
                        _buf[(1054 - _start) as usize] = value[2];
                    }
                    if _start <= 1055 && _end > 1055 {
                        _buf[(1055 - _start) as usize] = value[3];
                    }
                }
                if _start < 1060 && _end > 1056 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr8420_read()?
                        .to_ne_bytes();
                    if _start <= 1056 && _end > 1056 {
                        _buf[(1056 - _start) as usize] = value[0];
                    }
                    if _start <= 1057 && _end > 1057 {
                        _buf[(1057 - _start) as usize] = value[1];
                    }
                    if _start <= 1058 && _end > 1058 {
                        _buf[(1058 - _start) as usize] = value[2];
                    }
                    if _start <= 1059 && _end > 1059 {
                        _buf[(1059 - _start) as usize] = value[3];
                    }
                }
                if _start < 1064 && _end > 1060 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr9424_read()?
                        .to_ne_bytes();
                    if _start <= 1060 && _end > 1060 {
                        _buf[(1060 - _start) as usize] = value[0];
                    }
                    if _start <= 1061 && _end > 1061 {
                        _buf[(1061 - _start) as usize] = value[1];
                    }
                    if _start <= 1062 && _end > 1062 {
                        _buf[(1062 - _start) as usize] = value[2];
                    }
                    if _start <= 1063 && _end > 1063 {
                        _buf[(1063 - _start) as usize] = value[3];
                    }
                }
                if _start < 1068 && _end > 1064 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr10428_read()?
                        .to_ne_bytes();
                    if _start <= 1064 && _end > 1064 {
                        _buf[(1064 - _start) as usize] = value[0];
                    }
                    if _start <= 1065 && _end > 1065 {
                        _buf[(1065 - _start) as usize] = value[1];
                    }
                    if _start <= 1066 && _end > 1066 {
                        _buf[(1066 - _start) as usize] = value[2];
                    }
                    if _start <= 1067 && _end > 1067 {
                        _buf[(1067 - _start) as usize] = value[3];
                    }
                }
                if _start < 1072 && _end > 1068 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr1142c_read()?
                        .to_ne_bytes();
                    if _start <= 1068 && _end > 1068 {
                        _buf[(1068 - _start) as usize] = value[0];
                    }
                    if _start <= 1069 && _end > 1069 {
                        _buf[(1069 - _start) as usize] = value[1];
                    }
                    if _start <= 1070 && _end > 1070 {
                        _buf[(1070 - _start) as usize] = value[2];
                    }
                    if _start <= 1071 && _end > 1071 {
                        _buf[(1071 - _start) as usize] = value[3];
                    }
                }
                if _start < 1076 && _end > 1072 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr12430_read()?
                        .to_ne_bytes();
                    if _start <= 1072 && _end > 1072 {
                        _buf[(1072 - _start) as usize] = value[0];
                    }
                    if _start <= 1073 && _end > 1073 {
                        _buf[(1073 - _start) as usize] = value[1];
                    }
                    if _start <= 1074 && _end > 1074 {
                        _buf[(1074 - _start) as usize] = value[2];
                    }
                    if _start <= 1075 && _end > 1075 {
                        _buf[(1075 - _start) as usize] = value[3];
                    }
                }
                if _start < 1080 && _end > 1076 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr13434_read()?
                        .to_ne_bytes();
                    if _start <= 1076 && _end > 1076 {
                        _buf[(1076 - _start) as usize] = value[0];
                    }
                    if _start <= 1077 && _end > 1077 {
                        _buf[(1077 - _start) as usize] = value[1];
                    }
                    if _start <= 1078 && _end > 1078 {
                        _buf[(1078 - _start) as usize] = value[2];
                    }
                    if _start <= 1079 && _end > 1079 {
                        _buf[(1079 - _start) as usize] = value[3];
                    }
                }
                if _start < 1084 && _end > 1080 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr14438_read()?
                        .to_ne_bytes();
                    if _start <= 1080 && _end > 1080 {
                        _buf[(1080 - _start) as usize] = value[0];
                    }
                    if _start <= 1081 && _end > 1081 {
                        _buf[(1081 - _start) as usize] = value[1];
                    }
                    if _start <= 1082 && _end > 1082 {
                        _buf[(1082 - _start) as usize] = value[2];
                    }
                    if _start <= 1083 && _end > 1083 {
                        _buf[(1083 - _start) as usize] = value[3];
                    }
                }
                if _start < 1088 && _end > 1084 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr1543c_read()?
                        .to_ne_bytes();
                    if _start <= 1084 && _end > 1084 {
                        _buf[(1084 - _start) as usize] = value[0];
                    }
                    if _start <= 1085 && _end > 1085 {
                        _buf[(1085 - _start) as usize] = value[1];
                    }
                    if _start <= 1086 && _end > 1086 {
                        _buf[(1086 - _start) as usize] = value[2];
                    }
                    if _start <= 1087 && _end > 1087 {
                        _buf[(1087 - _start) as usize] = value[3];
                    }
                }
                if _start < 1092 && _end > 1088 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr16440_read()?
                        .to_ne_bytes();
                    if _start <= 1088 && _end > 1088 {
                        _buf[(1088 - _start) as usize] = value[0];
                    }
                    if _start <= 1089 && _end > 1089 {
                        _buf[(1089 - _start) as usize] = value[1];
                    }
                    if _start <= 1090 && _end > 1090 {
                        _buf[(1090 - _start) as usize] = value[2];
                    }
                    if _start <= 1091 && _end > 1091 {
                        _buf[(1091 - _start) as usize] = value[3];
                    }
                }
                if _start < 1096 && _end > 1092 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr17444_read()?
                        .to_ne_bytes();
                    if _start <= 1092 && _end > 1092 {
                        _buf[(1092 - _start) as usize] = value[0];
                    }
                    if _start <= 1093 && _end > 1093 {
                        _buf[(1093 - _start) as usize] = value[1];
                    }
                    if _start <= 1094 && _end > 1094 {
                        _buf[(1094 - _start) as usize] = value[2];
                    }
                    if _start <= 1095 && _end > 1095 {
                        _buf[(1095 - _start) as usize] = value[3];
                    }
                }
                if _start < 1100 && _end > 1096 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr18448_read()?
                        .to_ne_bytes();
                    if _start <= 1096 && _end > 1096 {
                        _buf[(1096 - _start) as usize] = value[0];
                    }
                    if _start <= 1097 && _end > 1097 {
                        _buf[(1097 - _start) as usize] = value[1];
                    }
                    if _start <= 1098 && _end > 1098 {
                        _buf[(1098 - _start) as usize] = value[2];
                    }
                    if _start <= 1099 && _end > 1099 {
                        _buf[(1099 - _start) as usize] = value[3];
                    }
                }
                if _start < 1104 && _end > 1100 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr1944c_read()?
                        .to_ne_bytes();
                    if _start <= 1100 && _end > 1100 {
                        _buf[(1100 - _start) as usize] = value[0];
                    }
                    if _start <= 1101 && _end > 1101 {
                        _buf[(1101 - _start) as usize] = value[1];
                    }
                    if _start <= 1102 && _end > 1102 {
                        _buf[(1102 - _start) as usize] = value[2];
                    }
                    if _start <= 1103 && _end > 1103 {
                        _buf[(1103 - _start) as usize] = value[3];
                    }
                }
                if _start < 1108 && _end > 1104 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr20450_read()?
                        .to_ne_bytes();
                    if _start <= 1104 && _end > 1104 {
                        _buf[(1104 - _start) as usize] = value[0];
                    }
                    if _start <= 1105 && _end > 1105 {
                        _buf[(1105 - _start) as usize] = value[1];
                    }
                    if _start <= 1106 && _end > 1106 {
                        _buf[(1106 - _start) as usize] = value[2];
                    }
                    if _start <= 1107 && _end > 1107 {
                        _buf[(1107 - _start) as usize] = value[3];
                    }
                }
                if _start < 1112 && _end > 1108 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr21454_read()?
                        .to_ne_bytes();
                    if _start <= 1108 && _end > 1108 {
                        _buf[(1108 - _start) as usize] = value[0];
                    }
                    if _start <= 1109 && _end > 1109 {
                        _buf[(1109 - _start) as usize] = value[1];
                    }
                    if _start <= 1110 && _end > 1110 {
                        _buf[(1110 - _start) as usize] = value[2];
                    }
                    if _start <= 1111 && _end > 1111 {
                        _buf[(1111 - _start) as usize] = value[3];
                    }
                }
                if _start < 1116 && _end > 1112 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr22458_read()?
                        .to_ne_bytes();
                    if _start <= 1112 && _end > 1112 {
                        _buf[(1112 - _start) as usize] = value[0];
                    }
                    if _start <= 1113 && _end > 1113 {
                        _buf[(1113 - _start) as usize] = value[1];
                    }
                    if _start <= 1114 && _end > 1114 {
                        _buf[(1114 - _start) as usize] = value[2];
                    }
                    if _start <= 1115 && _end > 1115 {
                        _buf[(1115 - _start) as usize] = value[3];
                    }
                }
                if _start < 1120 && _end > 1116 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr2345c_read()?
                        .to_ne_bytes();
                    if _start <= 1116 && _end > 1116 {
                        _buf[(1116 - _start) as usize] = value[0];
                    }
                    if _start <= 1117 && _end > 1117 {
                        _buf[(1117 - _start) as usize] = value[1];
                    }
                    if _start <= 1118 && _end > 1118 {
                        _buf[(1118 - _start) as usize] = value[2];
                    }
                    if _start <= 1119 && _end > 1119 {
                        _buf[(1119 - _start) as usize] = value[3];
                    }
                }
                if _start < 1124 && _end > 1120 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr24460_read()?
                        .to_ne_bytes();
                    if _start <= 1120 && _end > 1120 {
                        _buf[(1120 - _start) as usize] = value[0];
                    }
                    if _start <= 1121 && _end > 1121 {
                        _buf[(1121 - _start) as usize] = value[1];
                    }
                    if _start <= 1122 && _end > 1122 {
                        _buf[(1122 - _start) as usize] = value[2];
                    }
                    if _start <= 1123 && _end > 1123 {
                        _buf[(1123 - _start) as usize] = value[3];
                    }
                }
                if _start < 1128 && _end > 1124 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr25464_read()?
                        .to_ne_bytes();
                    if _start <= 1124 && _end > 1124 {
                        _buf[(1124 - _start) as usize] = value[0];
                    }
                    if _start <= 1125 && _end > 1125 {
                        _buf[(1125 - _start) as usize] = value[1];
                    }
                    if _start <= 1126 && _end > 1126 {
                        _buf[(1126 - _start) as usize] = value[2];
                    }
                    if _start <= 1127 && _end > 1127 {
                        _buf[(1127 - _start) as usize] = value[3];
                    }
                }
                if _start < 1132 && _end > 1128 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr26468_read()?
                        .to_ne_bytes();
                    if _start <= 1128 && _end > 1128 {
                        _buf[(1128 - _start) as usize] = value[0];
                    }
                    if _start <= 1129 && _end > 1129 {
                        _buf[(1129 - _start) as usize] = value[1];
                    }
                    if _start <= 1130 && _end > 1130 {
                        _buf[(1130 - _start) as usize] = value[2];
                    }
                    if _start <= 1131 && _end > 1131 {
                        _buf[(1131 - _start) as usize] = value[3];
                    }
                }
                if _start < 1136 && _end > 1132 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr2746c_read()?
                        .to_ne_bytes();
                    if _start <= 1132 && _end > 1132 {
                        _buf[(1132 - _start) as usize] = value[0];
                    }
                    if _start <= 1133 && _end > 1133 {
                        _buf[(1133 - _start) as usize] = value[1];
                    }
                    if _start <= 1134 && _end > 1134 {
                        _buf[(1134 - _start) as usize] = value[2];
                    }
                    if _start <= 1135 && _end > 1135 {
                        _buf[(1135 - _start) as usize] = value[3];
                    }
                }
                if _start < 1140 && _end > 1136 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr28470_read()?
                        .to_ne_bytes();
                    if _start <= 1136 && _end > 1136 {
                        _buf[(1136 - _start) as usize] = value[0];
                    }
                    if _start <= 1137 && _end > 1137 {
                        _buf[(1137 - _start) as usize] = value[1];
                    }
                    if _start <= 1138 && _end > 1138 {
                        _buf[(1138 - _start) as usize] = value[2];
                    }
                    if _start <= 1139 && _end > 1139 {
                        _buf[(1139 - _start) as usize] = value[3];
                    }
                }
                if _start < 1144 && _end > 1140 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr29474_read()?
                        .to_ne_bytes();
                    if _start <= 1140 && _end > 1140 {
                        _buf[(1140 - _start) as usize] = value[0];
                    }
                    if _start <= 1141 && _end > 1141 {
                        _buf[(1141 - _start) as usize] = value[1];
                    }
                    if _start <= 1142 && _end > 1142 {
                        _buf[(1142 - _start) as usize] = value[2];
                    }
                    if _start <= 1143 && _end > 1143 {
                        _buf[(1143 - _start) as usize] = value[3];
                    }
                }
                if _start < 1148 && _end > 1144 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr30478_read()?
                        .to_ne_bytes();
                    if _start <= 1144 && _end > 1144 {
                        _buf[(1144 - _start) as usize] = value[0];
                    }
                    if _start <= 1145 && _end > 1145 {
                        _buf[(1145 - _start) as usize] = value[1];
                    }
                    if _start <= 1146 && _end > 1146 {
                        _buf[(1146 - _start) as usize] = value[2];
                    }
                    if _start <= 1147 && _end > 1147 {
                        _buf[(1147 - _start) as usize] = value[3];
                    }
                }
                if _start < 1152 && _end > 1148 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr3147c_read()?
                        .to_ne_bytes();
                    if _start <= 1148 && _end > 1148 {
                        _buf[(1148 - _start) as usize] = value[0];
                    }
                    if _start <= 1149 && _end > 1149 {
                        _buf[(1149 - _start) as usize] = value[1];
                    }
                    if _start <= 1150 && _end > 1150 {
                        _buf[(1150 - _start) as usize] = value[2];
                    }
                    if _start <= 1151 && _end > 1151 {
                        _buf[(1151 - _start) as usize] = value[3];
                    }
                }
                if _start < 1156 && _end > 1152 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr32480_read()?
                        .to_ne_bytes();
                    if _start <= 1152 && _end > 1152 {
                        _buf[(1152 - _start) as usize] = value[0];
                    }
                    if _start <= 1153 && _end > 1153 {
                        _buf[(1153 - _start) as usize] = value[1];
                    }
                    if _start <= 1154 && _end > 1154 {
                        _buf[(1154 - _start) as usize] = value[2];
                    }
                    if _start <= 1155 && _end > 1155 {
                        _buf[(1155 - _start) as usize] = value[3];
                    }
                }
                if _start < 1160 && _end > 1156 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr33484_read()?
                        .to_ne_bytes();
                    if _start <= 1156 && _end > 1156 {
                        _buf[(1156 - _start) as usize] = value[0];
                    }
                    if _start <= 1157 && _end > 1157 {
                        _buf[(1157 - _start) as usize] = value[1];
                    }
                    if _start <= 1158 && _end > 1158 {
                        _buf[(1158 - _start) as usize] = value[2];
                    }
                    if _start <= 1159 && _end > 1159 {
                        _buf[(1159 - _start) as usize] = value[3];
                    }
                }
                if _start < 1164 && _end > 1160 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr34488_read()?
                        .to_ne_bytes();
                    if _start <= 1160 && _end > 1160 {
                        _buf[(1160 - _start) as usize] = value[0];
                    }
                    if _start <= 1161 && _end > 1161 {
                        _buf[(1161 - _start) as usize] = value[1];
                    }
                    if _start <= 1162 && _end > 1162 {
                        _buf[(1162 - _start) as usize] = value[2];
                    }
                    if _start <= 1163 && _end > 1163 {
                        _buf[(1163 - _start) as usize] = value[3];
                    }
                }
                if _start < 1168 && _end > 1164 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr3548c_read()?
                        .to_ne_bytes();
                    if _start <= 1164 && _end > 1164 {
                        _buf[(1164 - _start) as usize] = value[0];
                    }
                    if _start <= 1165 && _end > 1165 {
                        _buf[(1165 - _start) as usize] = value[1];
                    }
                    if _start <= 1166 && _end > 1166 {
                        _buf[(1166 - _start) as usize] = value[2];
                    }
                    if _start <= 1167 && _end > 1167 {
                        _buf[(1167 - _start) as usize] = value[3];
                    }
                }
                if _start < 1172 && _end > 1168 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr36490_read()?
                        .to_ne_bytes();
                    if _start <= 1168 && _end > 1168 {
                        _buf[(1168 - _start) as usize] = value[0];
                    }
                    if _start <= 1169 && _end > 1169 {
                        _buf[(1169 - _start) as usize] = value[1];
                    }
                    if _start <= 1170 && _end > 1170 {
                        _buf[(1170 - _start) as usize] = value[2];
                    }
                    if _start <= 1171 && _end > 1171 {
                        _buf[(1171 - _start) as usize] = value[3];
                    }
                }
                if _start < 1176 && _end > 1172 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr37494_read()?
                        .to_ne_bytes();
                    if _start <= 1172 && _end > 1172 {
                        _buf[(1172 - _start) as usize] = value[0];
                    }
                    if _start <= 1173 && _end > 1173 {
                        _buf[(1173 - _start) as usize] = value[1];
                    }
                    if _start <= 1174 && _end > 1174 {
                        _buf[(1174 - _start) as usize] = value[2];
                    }
                    if _start <= 1175 && _end > 1175 {
                        _buf[(1175 - _start) as usize] = value[3];
                    }
                }
                if _start < 1180 && _end > 1176 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr38498_read()?
                        .to_ne_bytes();
                    if _start <= 1176 && _end > 1176 {
                        _buf[(1176 - _start) as usize] = value[0];
                    }
                    if _start <= 1177 && _end > 1177 {
                        _buf[(1177 - _start) as usize] = value[1];
                    }
                    if _start <= 1178 && _end > 1178 {
                        _buf[(1178 - _start) as usize] = value[2];
                    }
                    if _start <= 1179 && _end > 1179 {
                        _buf[(1179 - _start) as usize] = value[3];
                    }
                }
                if _start < 1184 && _end > 1180 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr3949c_read()?
                        .to_ne_bytes();
                    if _start <= 1180 && _end > 1180 {
                        _buf[(1180 - _start) as usize] = value[0];
                    }
                    if _start <= 1181 && _end > 1181 {
                        _buf[(1181 - _start) as usize] = value[1];
                    }
                    if _start <= 1182 && _end > 1182 {
                        _buf[(1182 - _start) as usize] = value[2];
                    }
                    if _start <= 1183 && _end > 1183 {
                        _buf[(1183 - _start) as usize] = value[3];
                    }
                }
                if _start < 1188 && _end > 1184 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr404a0_read()?
                        .to_ne_bytes();
                    if _start <= 1184 && _end > 1184 {
                        _buf[(1184 - _start) as usize] = value[0];
                    }
                    if _start <= 1185 && _end > 1185 {
                        _buf[(1185 - _start) as usize] = value[1];
                    }
                    if _start <= 1186 && _end > 1186 {
                        _buf[(1186 - _start) as usize] = value[2];
                    }
                    if _start <= 1187 && _end > 1187 {
                        _buf[(1187 - _start) as usize] = value[3];
                    }
                }
                if _start < 1192 && _end > 1188 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr414a4_read()?
                        .to_ne_bytes();
                    if _start <= 1188 && _end > 1188 {
                        _buf[(1188 - _start) as usize] = value[0];
                    }
                    if _start <= 1189 && _end > 1189 {
                        _buf[(1189 - _start) as usize] = value[1];
                    }
                    if _start <= 1190 && _end > 1190 {
                        _buf[(1190 - _start) as usize] = value[2];
                    }
                    if _start <= 1191 && _end > 1191 {
                        _buf[(1191 - _start) as usize] = value[3];
                    }
                }
                if _start < 1196 && _end > 1192 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr424a8_read()?
                        .to_ne_bytes();
                    if _start <= 1192 && _end > 1192 {
                        _buf[(1192 - _start) as usize] = value[0];
                    }
                    if _start <= 1193 && _end > 1193 {
                        _buf[(1193 - _start) as usize] = value[1];
                    }
                    if _start <= 1194 && _end > 1194 {
                        _buf[(1194 - _start) as usize] = value[2];
                    }
                    if _start <= 1195 && _end > 1195 {
                        _buf[(1195 - _start) as usize] = value[3];
                    }
                }
                if _start < 1200 && _end > 1196 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr434ac_read()?
                        .to_ne_bytes();
                    if _start <= 1196 && _end > 1196 {
                        _buf[(1196 - _start) as usize] = value[0];
                    }
                    if _start <= 1197 && _end > 1197 {
                        _buf[(1197 - _start) as usize] = value[1];
                    }
                    if _start <= 1198 && _end > 1198 {
                        _buf[(1198 - _start) as usize] = value[2];
                    }
                    if _start <= 1199 && _end > 1199 {
                        _buf[(1199 - _start) as usize] = value[3];
                    }
                }
                if _start < 1204 && _end > 1200 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr444b0_read()?
                        .to_ne_bytes();
                    if _start <= 1200 && _end > 1200 {
                        _buf[(1200 - _start) as usize] = value[0];
                    }
                    if _start <= 1201 && _end > 1201 {
                        _buf[(1201 - _start) as usize] = value[1];
                    }
                    if _start <= 1202 && _end > 1202 {
                        _buf[(1202 - _start) as usize] = value[2];
                    }
                    if _start <= 1203 && _end > 1203 {
                        _buf[(1203 - _start) as usize] = value[3];
                    }
                }
                if _start < 1208 && _end > 1204 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr454b4_read()?
                        .to_ne_bytes();
                    if _start <= 1204 && _end > 1204 {
                        _buf[(1204 - _start) as usize] = value[0];
                    }
                    if _start <= 1205 && _end > 1205 {
                        _buf[(1205 - _start) as usize] = value[1];
                    }
                    if _start <= 1206 && _end > 1206 {
                        _buf[(1206 - _start) as usize] = value[2];
                    }
                    if _start <= 1207 && _end > 1207 {
                        _buf[(1207 - _start) as usize] = value[3];
                    }
                }
                if _start < 1212 && _end > 1208 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr464b8_read()?
                        .to_ne_bytes();
                    if _start <= 1208 && _end > 1208 {
                        _buf[(1208 - _start) as usize] = value[0];
                    }
                    if _start <= 1209 && _end > 1209 {
                        _buf[(1209 - _start) as usize] = value[1];
                    }
                    if _start <= 1210 && _end > 1210 {
                        _buf[(1210 - _start) as usize] = value[2];
                    }
                    if _start <= 1211 && _end > 1211 {
                        _buf[(1211 - _start) as usize] = value[3];
                    }
                }
                if _start < 1216 && _end > 1212 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr474bc_read()?
                        .to_ne_bytes();
                    if _start <= 1212 && _end > 1212 {
                        _buf[(1212 - _start) as usize] = value[0];
                    }
                    if _start <= 1213 && _end > 1213 {
                        _buf[(1213 - _start) as usize] = value[1];
                    }
                    if _start <= 1214 && _end > 1214 {
                        _buf[(1214 - _start) as usize] = value[2];
                    }
                    if _start <= 1215 && _end > 1215 {
                        _buf[(1215 - _start) as usize] = value[3];
                    }
                }
                if _start < 1220 && _end > 1216 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr484c0_read()?
                        .to_ne_bytes();
                    if _start <= 1216 && _end > 1216 {
                        _buf[(1216 - _start) as usize] = value[0];
                    }
                    if _start <= 1217 && _end > 1217 {
                        _buf[(1217 - _start) as usize] = value[1];
                    }
                    if _start <= 1218 && _end > 1218 {
                        _buf[(1218 - _start) as usize] = value[2];
                    }
                    if _start <= 1219 && _end > 1219 {
                        _buf[(1219 - _start) as usize] = value[3];
                    }
                }
                if _start < 1224 && _end > 1220 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr494c4_read()?
                        .to_ne_bytes();
                    if _start <= 1220 && _end > 1220 {
                        _buf[(1220 - _start) as usize] = value[0];
                    }
                    if _start <= 1221 && _end > 1221 {
                        _buf[(1221 - _start) as usize] = value[1];
                    }
                    if _start <= 1222 && _end > 1222 {
                        _buf[(1222 - _start) as usize] = value[2];
                    }
                    if _start <= 1223 && _end > 1223 {
                        _buf[(1223 - _start) as usize] = value[3];
                    }
                }
                if _start < 1228 && _end > 1224 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr504c8_read()?
                        .to_ne_bytes();
                    if _start <= 1224 && _end > 1224 {
                        _buf[(1224 - _start) as usize] = value[0];
                    }
                    if _start <= 1225 && _end > 1225 {
                        _buf[(1225 - _start) as usize] = value[1];
                    }
                    if _start <= 1226 && _end > 1226 {
                        _buf[(1226 - _start) as usize] = value[2];
                    }
                    if _start <= 1227 && _end > 1227 {
                        _buf[(1227 - _start) as usize] = value[3];
                    }
                }
                if _start < 1232 && _end > 1228 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr514cc_read()?
                        .to_ne_bytes();
                    if _start <= 1228 && _end > 1228 {
                        _buf[(1228 - _start) as usize] = value[0];
                    }
                    if _start <= 1229 && _end > 1229 {
                        _buf[(1229 - _start) as usize] = value[1];
                    }
                    if _start <= 1230 && _end > 1230 {
                        _buf[(1230 - _start) as usize] = value[2];
                    }
                    if _start <= 1231 && _end > 1231 {
                        _buf[(1231 - _start) as usize] = value[3];
                    }
                }
                if _start < 1236 && _end > 1232 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr524d0_read()?
                        .to_ne_bytes();
                    if _start <= 1232 && _end > 1232 {
                        _buf[(1232 - _start) as usize] = value[0];
                    }
                    if _start <= 1233 && _end > 1233 {
                        _buf[(1233 - _start) as usize] = value[1];
                    }
                    if _start <= 1234 && _end > 1234 {
                        _buf[(1234 - _start) as usize] = value[2];
                    }
                    if _start <= 1235 && _end > 1235 {
                        _buf[(1235 - _start) as usize] = value[3];
                    }
                }
                if _start < 1240 && _end > 1236 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr534d4_read()?
                        .to_ne_bytes();
                    if _start <= 1236 && _end > 1236 {
                        _buf[(1236 - _start) as usize] = value[0];
                    }
                    if _start <= 1237 && _end > 1237 {
                        _buf[(1237 - _start) as usize] = value[1];
                    }
                    if _start <= 1238 && _end > 1238 {
                        _buf[(1238 - _start) as usize] = value[2];
                    }
                    if _start <= 1239 && _end > 1239 {
                        _buf[(1239 - _start) as usize] = value[3];
                    }
                }
                if _start < 1244 && _end > 1240 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr544d8_read()?
                        .to_ne_bytes();
                    if _start <= 1240 && _end > 1240 {
                        _buf[(1240 - _start) as usize] = value[0];
                    }
                    if _start <= 1241 && _end > 1241 {
                        _buf[(1241 - _start) as usize] = value[1];
                    }
                    if _start <= 1242 && _end > 1242 {
                        _buf[(1242 - _start) as usize] = value[2];
                    }
                    if _start <= 1243 && _end > 1243 {
                        _buf[(1243 - _start) as usize] = value[3];
                    }
                }
                if _start < 1248 && _end > 1244 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr554dc_read()?
                        .to_ne_bytes();
                    if _start <= 1244 && _end > 1244 {
                        _buf[(1244 - _start) as usize] = value[0];
                    }
                    if _start <= 1245 && _end > 1245 {
                        _buf[(1245 - _start) as usize] = value[1];
                    }
                    if _start <= 1246 && _end > 1246 {
                        _buf[(1246 - _start) as usize] = value[2];
                    }
                    if _start <= 1247 && _end > 1247 {
                        _buf[(1247 - _start) as usize] = value[3];
                    }
                }
                if _start < 1252 && _end > 1248 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr564e0_read()?
                        .to_ne_bytes();
                    if _start <= 1248 && _end > 1248 {
                        _buf[(1248 - _start) as usize] = value[0];
                    }
                    if _start <= 1249 && _end > 1249 {
                        _buf[(1249 - _start) as usize] = value[1];
                    }
                    if _start <= 1250 && _end > 1250 {
                        _buf[(1250 - _start) as usize] = value[2];
                    }
                    if _start <= 1251 && _end > 1251 {
                        _buf[(1251 - _start) as usize] = value[3];
                    }
                }
                if _start < 1256 && _end > 1252 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr574e4_read()?
                        .to_ne_bytes();
                    if _start <= 1252 && _end > 1252 {
                        _buf[(1252 - _start) as usize] = value[0];
                    }
                    if _start <= 1253 && _end > 1253 {
                        _buf[(1253 - _start) as usize] = value[1];
                    }
                    if _start <= 1254 && _end > 1254 {
                        _buf[(1254 - _start) as usize] = value[2];
                    }
                    if _start <= 1255 && _end > 1255 {
                        _buf[(1255 - _start) as usize] = value[3];
                    }
                }
                if _start < 1260 && _end > 1256 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr584e8_read()?
                        .to_ne_bytes();
                    if _start <= 1256 && _end > 1256 {
                        _buf[(1256 - _start) as usize] = value[0];
                    }
                    if _start <= 1257 && _end > 1257 {
                        _buf[(1257 - _start) as usize] = value[1];
                    }
                    if _start <= 1258 && _end > 1258 {
                        _buf[(1258 - _start) as usize] = value[2];
                    }
                    if _start <= 1259 && _end > 1259 {
                        _buf[(1259 - _start) as usize] = value[3];
                    }
                }
                if _start < 1264 && _end > 1260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr594ec_read()?
                        .to_ne_bytes();
                    if _start <= 1260 && _end > 1260 {
                        _buf[(1260 - _start) as usize] = value[0];
                    }
                    if _start <= 1261 && _end > 1261 {
                        _buf[(1261 - _start) as usize] = value[1];
                    }
                    if _start <= 1262 && _end > 1262 {
                        _buf[(1262 - _start) as usize] = value[2];
                    }
                    if _start <= 1263 && _end > 1263 {
                        _buf[(1263 - _start) as usize] = value[3];
                    }
                }
            }
            (3328..=3443, 3329..=3444) => {
                if _start < 3332 && _end > 3328 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_cpuidd00_read()?
                        .to_ne_bytes();
                    if _start <= 3328 && _end > 3328 {
                        _buf[(3328 - _start) as usize] = value[0];
                    }
                    if _start <= 3329 && _end > 3329 {
                        _buf[(3329 - _start) as usize] = value[1];
                    }
                    if _start <= 3330 && _end > 3330 {
                        _buf[(3330 - _start) as usize] = value[2];
                    }
                    if _start <= 3331 && _end > 3331 {
                        _buf[(3331 - _start) as usize] = value[3];
                    }
                }
                if _start < 3336 && _end > 3332 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_icsrd04_read()?
                        .to_ne_bytes();
                    if _start <= 3332 && _end > 3332 {
                        _buf[(3332 - _start) as usize] = value[0];
                    }
                    if _start <= 3333 && _end > 3333 {
                        _buf[(3333 - _start) as usize] = value[1];
                    }
                    if _start <= 3334 && _end > 3334 {
                        _buf[(3334 - _start) as usize] = value[2];
                    }
                    if _start <= 3335 && _end > 3335 {
                        _buf[(3335 - _start) as usize] = value[3];
                    }
                }
                if _start < 3340 && _end > 3336 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_vtord08_read()?
                        .to_ne_bytes();
                    if _start <= 3336 && _end > 3336 {
                        _buf[(3336 - _start) as usize] = value[0];
                    }
                    if _start <= 3337 && _end > 3337 {
                        _buf[(3337 - _start) as usize] = value[1];
                    }
                    if _start <= 3338 && _end > 3338 {
                        _buf[(3338 - _start) as usize] = value[2];
                    }
                    if _start <= 3339 && _end > 3339 {
                        _buf[(3339 - _start) as usize] = value[3];
                    }
                }
                if _start < 3344 && _end > 3340 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_aircrd0c_read()?
                        .to_ne_bytes();
                    if _start <= 3340 && _end > 3340 {
                        _buf[(3340 - _start) as usize] = value[0];
                    }
                    if _start <= 3341 && _end > 3341 {
                        _buf[(3341 - _start) as usize] = value[1];
                    }
                    if _start <= 3342 && _end > 3342 {
                        _buf[(3342 - _start) as usize] = value[2];
                    }
                    if _start <= 3343 && _end > 3343 {
                        _buf[(3343 - _start) as usize] = value[3];
                    }
                }
                if _start < 3348 && _end > 3344 {
                    let value =
                        self.0.lock().unwrap().scs_scrd10_read()?.to_ne_bytes();
                    if _start <= 3344 && _end > 3344 {
                        _buf[(3344 - _start) as usize] = value[0];
                    }
                    if _start <= 3345 && _end > 3345 {
                        _buf[(3345 - _start) as usize] = value[1];
                    }
                    if _start <= 3346 && _end > 3346 {
                        _buf[(3346 - _start) as usize] = value[2];
                    }
                    if _start <= 3347 && _end > 3347 {
                        _buf[(3347 - _start) as usize] = value[3];
                    }
                }
                if _start < 3352 && _end > 3348 {
                    let value =
                        self.0.lock().unwrap().scs_ccrd14_read()?.to_ne_bytes();
                    if _start <= 3348 && _end > 3348 {
                        _buf[(3348 - _start) as usize] = value[0];
                    }
                    if _start <= 3349 && _end > 3349 {
                        _buf[(3349 - _start) as usize] = value[1];
                    }
                    if _start <= 3350 && _end > 3350 {
                        _buf[(3350 - _start) as usize] = value[2];
                    }
                    if _start <= 3351 && _end > 3351 {
                        _buf[(3351 - _start) as usize] = value[3];
                    }
                }
                if _start < 3356 && _end > 3352 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_shpr1d18_read()?
                        .to_ne_bytes();
                    if _start <= 3352 && _end > 3352 {
                        _buf[(3352 - _start) as usize] = value[0];
                    }
                    if _start <= 3353 && _end > 3353 {
                        _buf[(3353 - _start) as usize] = value[1];
                    }
                    if _start <= 3354 && _end > 3354 {
                        _buf[(3354 - _start) as usize] = value[2];
                    }
                    if _start <= 3355 && _end > 3355 {
                        _buf[(3355 - _start) as usize] = value[3];
                    }
                }
                if _start < 3360 && _end > 3356 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_shpr2d1c_read()?
                        .to_ne_bytes();
                    if _start <= 3356 && _end > 3356 {
                        _buf[(3356 - _start) as usize] = value[0];
                    }
                    if _start <= 3357 && _end > 3357 {
                        _buf[(3357 - _start) as usize] = value[1];
                    }
                    if _start <= 3358 && _end > 3358 {
                        _buf[(3358 - _start) as usize] = value[2];
                    }
                    if _start <= 3359 && _end > 3359 {
                        _buf[(3359 - _start) as usize] = value[3];
                    }
                }
                if _start < 3364 && _end > 3360 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_shpr3d20_read()?
                        .to_ne_bytes();
                    if _start <= 3360 && _end > 3360 {
                        _buf[(3360 - _start) as usize] = value[0];
                    }
                    if _start <= 3361 && _end > 3361 {
                        _buf[(3361 - _start) as usize] = value[1];
                    }
                    if _start <= 3362 && _end > 3362 {
                        _buf[(3362 - _start) as usize] = value[2];
                    }
                    if _start <= 3363 && _end > 3363 {
                        _buf[(3363 - _start) as usize] = value[3];
                    }
                }
                if _start < 3368 && _end > 3364 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_shcsrd24_read()?
                        .to_ne_bytes();
                    if _start <= 3364 && _end > 3364 {
                        _buf[(3364 - _start) as usize] = value[0];
                    }
                    if _start <= 3365 && _end > 3365 {
                        _buf[(3365 - _start) as usize] = value[1];
                    }
                    if _start <= 3366 && _end > 3366 {
                        _buf[(3366 - _start) as usize] = value[2];
                    }
                    if _start <= 3367 && _end > 3367 {
                        _buf[(3367 - _start) as usize] = value[3];
                    }
                }
                if _start < 3372 && _end > 3368 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_cfsrd28_read()?
                        .to_ne_bytes();
                    if _start <= 3368 && _end > 3368 {
                        _buf[(3368 - _start) as usize] = value[0];
                    }
                    if _start <= 3369 && _end > 3369 {
                        _buf[(3369 - _start) as usize] = value[1];
                    }
                    if _start <= 3370 && _end > 3370 {
                        _buf[(3370 - _start) as usize] = value[2];
                    }
                    if _start <= 3371 && _end > 3371 {
                        _buf[(3371 - _start) as usize] = value[3];
                    }
                }
                if _start < 3376 && _end > 3372 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_hfsrd2c_read()?
                        .to_ne_bytes();
                    if _start <= 3372 && _end > 3372 {
                        _buf[(3372 - _start) as usize] = value[0];
                    }
                    if _start <= 3373 && _end > 3373 {
                        _buf[(3373 - _start) as usize] = value[1];
                    }
                    if _start <= 3374 && _end > 3374 {
                        _buf[(3374 - _start) as usize] = value[2];
                    }
                    if _start <= 3375 && _end > 3375 {
                        _buf[(3375 - _start) as usize] = value[3];
                    }
                }
                if _start < 3380 && _end > 3376 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_dfsrd30_read()?
                        .to_ne_bytes();
                    if _start <= 3376 && _end > 3376 {
                        _buf[(3376 - _start) as usize] = value[0];
                    }
                    if _start <= 3377 && _end > 3377 {
                        _buf[(3377 - _start) as usize] = value[1];
                    }
                    if _start <= 3378 && _end > 3378 {
                        _buf[(3378 - _start) as usize] = value[2];
                    }
                    if _start <= 3379 && _end > 3379 {
                        _buf[(3379 - _start) as usize] = value[3];
                    }
                }
                if _start < 3384 && _end > 3380 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_mmfard34_read()?
                        .to_ne_bytes();
                    if _start <= 3380 && _end > 3380 {
                        _buf[(3380 - _start) as usize] = value[0];
                    }
                    if _start <= 3381 && _end > 3381 {
                        _buf[(3381 - _start) as usize] = value[1];
                    }
                    if _start <= 3382 && _end > 3382 {
                        _buf[(3382 - _start) as usize] = value[2];
                    }
                    if _start <= 3383 && _end > 3383 {
                        _buf[(3383 - _start) as usize] = value[3];
                    }
                }
                if _start < 3388 && _end > 3384 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_bfard38_read()?
                        .to_ne_bytes();
                    if _start <= 3384 && _end > 3384 {
                        _buf[(3384 - _start) as usize] = value[0];
                    }
                    if _start <= 3385 && _end > 3385 {
                        _buf[(3385 - _start) as usize] = value[1];
                    }
                    if _start <= 3386 && _end > 3386 {
                        _buf[(3386 - _start) as usize] = value[2];
                    }
                    if _start <= 3387 && _end > 3387 {
                        _buf[(3387 - _start) as usize] = value[3];
                    }
                }
                if _start < 3392 && _end > 3388 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_afsrd3c_read()?
                        .to_ne_bytes();
                    if _start <= 3388 && _end > 3388 {
                        _buf[(3388 - _start) as usize] = value[0];
                    }
                    if _start <= 3389 && _end > 3389 {
                        _buf[(3389 - _start) as usize] = value[1];
                    }
                    if _start <= 3390 && _end > 3390 {
                        _buf[(3390 - _start) as usize] = value[2];
                    }
                    if _start <= 3391 && _end > 3391 {
                        _buf[(3391 - _start) as usize] = value[3];
                    }
                }
                if _start < 3396 && _end > 3392 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_id_pfr0d40_read()?
                        .to_ne_bytes();
                    if _start <= 3392 && _end > 3392 {
                        _buf[(3392 - _start) as usize] = value[0];
                    }
                    if _start <= 3393 && _end > 3393 {
                        _buf[(3393 - _start) as usize] = value[1];
                    }
                    if _start <= 3394 && _end > 3394 {
                        _buf[(3394 - _start) as usize] = value[2];
                    }
                    if _start <= 3395 && _end > 3395 {
                        _buf[(3395 - _start) as usize] = value[3];
                    }
                }
                if _start < 3400 && _end > 3396 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_id_pfr1d44_read()?
                        .to_ne_bytes();
                    if _start <= 3396 && _end > 3396 {
                        _buf[(3396 - _start) as usize] = value[0];
                    }
                    if _start <= 3397 && _end > 3397 {
                        _buf[(3397 - _start) as usize] = value[1];
                    }
                    if _start <= 3398 && _end > 3398 {
                        _buf[(3398 - _start) as usize] = value[2];
                    }
                    if _start <= 3399 && _end > 3399 {
                        _buf[(3399 - _start) as usize] = value[3];
                    }
                }
                if _start < 3404 && _end > 3400 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_id_dfr0d48_read()?
                        .to_ne_bytes();
                    if _start <= 3400 && _end > 3400 {
                        _buf[(3400 - _start) as usize] = value[0];
                    }
                    if _start <= 3401 && _end > 3401 {
                        _buf[(3401 - _start) as usize] = value[1];
                    }
                    if _start <= 3402 && _end > 3402 {
                        _buf[(3402 - _start) as usize] = value[2];
                    }
                    if _start <= 3403 && _end > 3403 {
                        _buf[(3403 - _start) as usize] = value[3];
                    }
                }
                if _start < 3408 && _end > 3404 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_id_afr0d4c_read()?
                        .to_ne_bytes();
                    if _start <= 3404 && _end > 3404 {
                        _buf[(3404 - _start) as usize] = value[0];
                    }
                    if _start <= 3405 && _end > 3405 {
                        _buf[(3405 - _start) as usize] = value[1];
                    }
                    if _start <= 3406 && _end > 3406 {
                        _buf[(3406 - _start) as usize] = value[2];
                    }
                    if _start <= 3407 && _end > 3407 {
                        _buf[(3407 - _start) as usize] = value[3];
                    }
                }
                if _start < 3412 && _end > 3408 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_id_mmfr0d50_read()?
                        .to_ne_bytes();
                    if _start <= 3408 && _end > 3408 {
                        _buf[(3408 - _start) as usize] = value[0];
                    }
                    if _start <= 3409 && _end > 3409 {
                        _buf[(3409 - _start) as usize] = value[1];
                    }
                    if _start <= 3410 && _end > 3410 {
                        _buf[(3410 - _start) as usize] = value[2];
                    }
                    if _start <= 3411 && _end > 3411 {
                        _buf[(3411 - _start) as usize] = value[3];
                    }
                }
                if _start < 3416 && _end > 3412 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_id_mmfr1d54_read()?
                        .to_ne_bytes();
                    if _start <= 3412 && _end > 3412 {
                        _buf[(3412 - _start) as usize] = value[0];
                    }
                    if _start <= 3413 && _end > 3413 {
                        _buf[(3413 - _start) as usize] = value[1];
                    }
                    if _start <= 3414 && _end > 3414 {
                        _buf[(3414 - _start) as usize] = value[2];
                    }
                    if _start <= 3415 && _end > 3415 {
                        _buf[(3415 - _start) as usize] = value[3];
                    }
                }
                if _start < 3420 && _end > 3416 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_id_mmfr2d58_read()?
                        .to_ne_bytes();
                    if _start <= 3416 && _end > 3416 {
                        _buf[(3416 - _start) as usize] = value[0];
                    }
                    if _start <= 3417 && _end > 3417 {
                        _buf[(3417 - _start) as usize] = value[1];
                    }
                    if _start <= 3418 && _end > 3418 {
                        _buf[(3418 - _start) as usize] = value[2];
                    }
                    if _start <= 3419 && _end > 3419 {
                        _buf[(3419 - _start) as usize] = value[3];
                    }
                }
                if _start < 3424 && _end > 3420 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_id_mmfr3d5c_read()?
                        .to_ne_bytes();
                    if _start <= 3420 && _end > 3420 {
                        _buf[(3420 - _start) as usize] = value[0];
                    }
                    if _start <= 3421 && _end > 3421 {
                        _buf[(3421 - _start) as usize] = value[1];
                    }
                    if _start <= 3422 && _end > 3422 {
                        _buf[(3422 - _start) as usize] = value[2];
                    }
                    if _start <= 3423 && _end > 3423 {
                        _buf[(3423 - _start) as usize] = value[3];
                    }
                }
                if _start < 3428 && _end > 3424 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_id_isar0d60_read()?
                        .to_ne_bytes();
                    if _start <= 3424 && _end > 3424 {
                        _buf[(3424 - _start) as usize] = value[0];
                    }
                    if _start <= 3425 && _end > 3425 {
                        _buf[(3425 - _start) as usize] = value[1];
                    }
                    if _start <= 3426 && _end > 3426 {
                        _buf[(3426 - _start) as usize] = value[2];
                    }
                    if _start <= 3427 && _end > 3427 {
                        _buf[(3427 - _start) as usize] = value[3];
                    }
                }
                if _start < 3432 && _end > 3428 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_id_isar1d64_read()?
                        .to_ne_bytes();
                    if _start <= 3428 && _end > 3428 {
                        _buf[(3428 - _start) as usize] = value[0];
                    }
                    if _start <= 3429 && _end > 3429 {
                        _buf[(3429 - _start) as usize] = value[1];
                    }
                    if _start <= 3430 && _end > 3430 {
                        _buf[(3430 - _start) as usize] = value[2];
                    }
                    if _start <= 3431 && _end > 3431 {
                        _buf[(3431 - _start) as usize] = value[3];
                    }
                }
                if _start < 3436 && _end > 3432 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_id_isar2d68_read()?
                        .to_ne_bytes();
                    if _start <= 3432 && _end > 3432 {
                        _buf[(3432 - _start) as usize] = value[0];
                    }
                    if _start <= 3433 && _end > 3433 {
                        _buf[(3433 - _start) as usize] = value[1];
                    }
                    if _start <= 3434 && _end > 3434 {
                        _buf[(3434 - _start) as usize] = value[2];
                    }
                    if _start <= 3435 && _end > 3435 {
                        _buf[(3435 - _start) as usize] = value[3];
                    }
                }
                if _start < 3440 && _end > 3436 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_id_isar3d6c_read()?
                        .to_ne_bytes();
                    if _start <= 3436 && _end > 3436 {
                        _buf[(3436 - _start) as usize] = value[0];
                    }
                    if _start <= 3437 && _end > 3437 {
                        _buf[(3437 - _start) as usize] = value[1];
                    }
                    if _start <= 3438 && _end > 3438 {
                        _buf[(3438 - _start) as usize] = value[2];
                    }
                    if _start <= 3439 && _end > 3439 {
                        _buf[(3439 - _start) as usize] = value[3];
                    }
                }
                if _start < 3444 && _end > 3440 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_id_isar4d70_read()?
                        .to_ne_bytes();
                    if _start <= 3440 && _end > 3440 {
                        _buf[(3440 - _start) as usize] = value[0];
                    }
                    if _start <= 3441 && _end > 3441 {
                        _buf[(3441 - _start) as usize] = value[1];
                    }
                    if _start <= 3442 && _end > 3442 {
                        _buf[(3442 - _start) as usize] = value[2];
                    }
                    if _start <= 3443 && _end > 3443 {
                        _buf[(3443 - _start) as usize] = value[3];
                    }
                }
            }
            (3464..=3467, 3465..=3468) => {
                if _start < 3468 && _end > 3464 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_cpacrd88_read()?
                        .to_ne_bytes();
                    if _start <= 3464 && _end > 3464 {
                        _buf[(3464 - _start) as usize] = value[0];
                    }
                    if _start <= 3465 && _end > 3465 {
                        _buf[(3465 - _start) as usize] = value[1];
                    }
                    if _start <= 3466 && _end > 3466 {
                        _buf[(3466 - _start) as usize] = value[2];
                    }
                    if _start <= 3467 && _end > 3467 {
                        _buf[(3467 - _start) as usize] = value[3];
                    }
                }
            }
            (3472..=3515, 3473..=3516) => {
                if _start < 3476 && _end > 3472 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_mpu_typed90_read()?
                        .to_ne_bytes();
                    if _start <= 3472 && _end > 3472 {
                        _buf[(3472 - _start) as usize] = value[0];
                    }
                    if _start <= 3473 && _end > 3473 {
                        _buf[(3473 - _start) as usize] = value[1];
                    }
                    if _start <= 3474 && _end > 3474 {
                        _buf[(3474 - _start) as usize] = value[2];
                    }
                    if _start <= 3475 && _end > 3475 {
                        _buf[(3475 - _start) as usize] = value[3];
                    }
                }
                if _start < 3480 && _end > 3476 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_mpu_ctrld94_read()?
                        .to_ne_bytes();
                    if _start <= 3476 && _end > 3476 {
                        _buf[(3476 - _start) as usize] = value[0];
                    }
                    if _start <= 3477 && _end > 3477 {
                        _buf[(3477 - _start) as usize] = value[1];
                    }
                    if _start <= 3478 && _end > 3478 {
                        _buf[(3478 - _start) as usize] = value[2];
                    }
                    if _start <= 3479 && _end > 3479 {
                        _buf[(3479 - _start) as usize] = value[3];
                    }
                }
                if _start < 3484 && _end > 3480 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_mpu_rnrd98_read()?
                        .to_ne_bytes();
                    if _start <= 3480 && _end > 3480 {
                        _buf[(3480 - _start) as usize] = value[0];
                    }
                    if _start <= 3481 && _end > 3481 {
                        _buf[(3481 - _start) as usize] = value[1];
                    }
                    if _start <= 3482 && _end > 3482 {
                        _buf[(3482 - _start) as usize] = value[2];
                    }
                    if _start <= 3483 && _end > 3483 {
                        _buf[(3483 - _start) as usize] = value[3];
                    }
                }
                if _start < 3488 && _end > 3484 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_mpu_rbard9c_read()?
                        .to_ne_bytes();
                    if _start <= 3484 && _end > 3484 {
                        _buf[(3484 - _start) as usize] = value[0];
                    }
                    if _start <= 3485 && _end > 3485 {
                        _buf[(3485 - _start) as usize] = value[1];
                    }
                    if _start <= 3486 && _end > 3486 {
                        _buf[(3486 - _start) as usize] = value[2];
                    }
                    if _start <= 3487 && _end > 3487 {
                        _buf[(3487 - _start) as usize] = value[3];
                    }
                }
                if _start < 3492 && _end > 3488 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_mpu_rasrda0_read()?
                        .to_ne_bytes();
                    if _start <= 3488 && _end > 3488 {
                        _buf[(3488 - _start) as usize] = value[0];
                    }
                    if _start <= 3489 && _end > 3489 {
                        _buf[(3489 - _start) as usize] = value[1];
                    }
                    if _start <= 3490 && _end > 3490 {
                        _buf[(3490 - _start) as usize] = value[2];
                    }
                    if _start <= 3491 && _end > 3491 {
                        _buf[(3491 - _start) as usize] = value[3];
                    }
                }
                if _start < 3496 && _end > 3492 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_mpu_rbar_a1da4_read()?
                        .to_ne_bytes();
                    if _start <= 3492 && _end > 3492 {
                        _buf[(3492 - _start) as usize] = value[0];
                    }
                    if _start <= 3493 && _end > 3493 {
                        _buf[(3493 - _start) as usize] = value[1];
                    }
                    if _start <= 3494 && _end > 3494 {
                        _buf[(3494 - _start) as usize] = value[2];
                    }
                    if _start <= 3495 && _end > 3495 {
                        _buf[(3495 - _start) as usize] = value[3];
                    }
                }
                if _start < 3500 && _end > 3496 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_mpu_rasr_a1da8_read()?
                        .to_ne_bytes();
                    if _start <= 3496 && _end > 3496 {
                        _buf[(3496 - _start) as usize] = value[0];
                    }
                    if _start <= 3497 && _end > 3497 {
                        _buf[(3497 - _start) as usize] = value[1];
                    }
                    if _start <= 3498 && _end > 3498 {
                        _buf[(3498 - _start) as usize] = value[2];
                    }
                    if _start <= 3499 && _end > 3499 {
                        _buf[(3499 - _start) as usize] = value[3];
                    }
                }
                if _start < 3504 && _end > 3500 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_mpu_rbar_a2dac_read()?
                        .to_ne_bytes();
                    if _start <= 3500 && _end > 3500 {
                        _buf[(3500 - _start) as usize] = value[0];
                    }
                    if _start <= 3501 && _end > 3501 {
                        _buf[(3501 - _start) as usize] = value[1];
                    }
                    if _start <= 3502 && _end > 3502 {
                        _buf[(3502 - _start) as usize] = value[2];
                    }
                    if _start <= 3503 && _end > 3503 {
                        _buf[(3503 - _start) as usize] = value[3];
                    }
                }
                if _start < 3508 && _end > 3504 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_mpu_rasr_a2db0_read()?
                        .to_ne_bytes();
                    if _start <= 3504 && _end > 3504 {
                        _buf[(3504 - _start) as usize] = value[0];
                    }
                    if _start <= 3505 && _end > 3505 {
                        _buf[(3505 - _start) as usize] = value[1];
                    }
                    if _start <= 3506 && _end > 3506 {
                        _buf[(3506 - _start) as usize] = value[2];
                    }
                    if _start <= 3507 && _end > 3507 {
                        _buf[(3507 - _start) as usize] = value[3];
                    }
                }
                if _start < 3512 && _end > 3508 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_mpu_rbar_a3db4_read()?
                        .to_ne_bytes();
                    if _start <= 3508 && _end > 3508 {
                        _buf[(3508 - _start) as usize] = value[0];
                    }
                    if _start <= 3509 && _end > 3509 {
                        _buf[(3509 - _start) as usize] = value[1];
                    }
                    if _start <= 3510 && _end > 3510 {
                        _buf[(3510 - _start) as usize] = value[2];
                    }
                    if _start <= 3511 && _end > 3511 {
                        _buf[(3511 - _start) as usize] = value[3];
                    }
                }
                if _start < 3516 && _end > 3512 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_mpu_rasr_a3db8_read()?
                        .to_ne_bytes();
                    if _start <= 3512 && _end > 3512 {
                        _buf[(3512 - _start) as usize] = value[0];
                    }
                    if _start <= 3513 && _end > 3513 {
                        _buf[(3513 - _start) as usize] = value[1];
                    }
                    if _start <= 3514 && _end > 3514 {
                        _buf[(3514 - _start) as usize] = value[2];
                    }
                    if _start <= 3515 && _end > 3515 {
                        _buf[(3515 - _start) as usize] = value[3];
                    }
                }
            }
            (3580..=3583, 3581..=3584) => {
                if _start < 3584 && _end > 3580 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_demcrdfc_read()?
                        .to_ne_bytes();
                    if _start <= 3580 && _end > 3580 {
                        _buf[(3580 - _start) as usize] = value[0];
                    }
                    if _start <= 3581 && _end > 3581 {
                        _buf[(3581 - _start) as usize] = value[1];
                    }
                    if _start <= 3582 && _end > 3582 {
                        _buf[(3582 - _start) as usize] = value[2];
                    }
                    if _start <= 3583 && _end > 3583 {
                        _buf[(3583 - _start) as usize] = value[3];
                    }
                }
            }
            (3840..=3843, 3841..=3844) => {
                return Err(MemError::ReadViolation);
            }
            (3892..=3911, 3893..=3912) => {
                if _start < 3896 && _end > 3892 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_fpccrf34_read()?
                        .to_ne_bytes();
                    if _start <= 3892 && _end > 3892 {
                        _buf[(3892 - _start) as usize] = value[0];
                    }
                    if _start <= 3893 && _end > 3893 {
                        _buf[(3893 - _start) as usize] = value[1];
                    }
                    if _start <= 3894 && _end > 3894 {
                        _buf[(3894 - _start) as usize] = value[2];
                    }
                    if _start <= 3895 && _end > 3895 {
                        _buf[(3895 - _start) as usize] = value[3];
                    }
                }
                if _start < 3900 && _end > 3896 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_fpcarf38_read()?
                        .to_ne_bytes();
                    if _start <= 3896 && _end > 3896 {
                        _buf[(3896 - _start) as usize] = value[0];
                    }
                    if _start <= 3897 && _end > 3897 {
                        _buf[(3897 - _start) as usize] = value[1];
                    }
                    if _start <= 3898 && _end > 3898 {
                        _buf[(3898 - _start) as usize] = value[2];
                    }
                    if _start <= 3899 && _end > 3899 {
                        _buf[(3899 - _start) as usize] = value[3];
                    }
                }
                if _start < 3904 && _end > 3900 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_fpdscrf3c_read()?
                        .to_ne_bytes();
                    if _start <= 3900 && _end > 3900 {
                        _buf[(3900 - _start) as usize] = value[0];
                    }
                    if _start <= 3901 && _end > 3901 {
                        _buf[(3901 - _start) as usize] = value[1];
                    }
                    if _start <= 3902 && _end > 3902 {
                        _buf[(3902 - _start) as usize] = value[2];
                    }
                    if _start <= 3903 && _end > 3903 {
                        _buf[(3903 - _start) as usize] = value[3];
                    }
                }
                if _start < 3908 && _end > 3904 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_mvfr0f40_read()?
                        .to_ne_bytes();
                    if _start <= 3904 && _end > 3904 {
                        _buf[(3904 - _start) as usize] = value[0];
                    }
                    if _start <= 3905 && _end > 3905 {
                        _buf[(3905 - _start) as usize] = value[1];
                    }
                    if _start <= 3906 && _end > 3906 {
                        _buf[(3906 - _start) as usize] = value[2];
                    }
                    if _start <= 3907 && _end > 3907 {
                        _buf[(3907 - _start) as usize] = value[3];
                    }
                }
                if _start < 3912 && _end > 3908 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .scs_mvfr1f44_read()?
                        .to_ne_bytes();
                    if _start <= 3908 && _end > 3908 {
                        _buf[(3908 - _start) as usize] = value[0];
                    }
                    if _start <= 3909 && _end > 3909 {
                        _buf[(3909 - _start) as usize] = value[1];
                    }
                    if _start <= 3910 && _end > 3910 {
                        _buf[(3910 - _start) as usize] = value[2];
                    }
                    if _start <= 3911 && _end > 3911 {
                        _buf[(3911 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::scs::Scs::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (4..=11, 5..=12) => {
                if _start < 8 && _end > 4 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 12 && _end > 8 {
                    let offset = _start.saturating_sub(8);
                    let start = 8u64.saturating_sub(_start) as usize;
                    let end = ((_end - 8) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_actlr8_write(offset, &_buf[start..end])?;
                }
            }
            (16..=31, 17..=32) => {
                if _start < 20 && _end > 16 {
                    let offset = _start.saturating_sub(16);
                    let start = 16u64.saturating_sub(_start) as usize;
                    let end = ((_end - 16) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_stcsr10_write(offset, &_buf[start..end])?;
                }
                if _start < 24 && _end > 20 {
                    let offset = _start.saturating_sub(20);
                    let start = 20u64.saturating_sub(_start) as usize;
                    let end = ((_end - 20) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_strvr14_write(offset, &_buf[start..end])?;
                }
                if _start < 28 && _end > 24 {
                    let offset = _start.saturating_sub(24);
                    let start = 24u64.saturating_sub(_start) as usize;
                    let end = ((_end - 24) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_stcvr18_write(offset, &_buf[start..end])?;
                }
                if _start < 32 && _end > 28 {
                    return Err(MemError::WriteViolation);
                }
            }
            (256..=287, 257..=288) => {
                if _start < 260 && _end > 256 {
                    let offset = _start.saturating_sub(256);
                    let start = 256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 256) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser0100_write(offset, &_buf[start..end])?;
                }
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser1104_write(offset, &_buf[start..end])?;
                }
                if _start < 268 && _end > 264 {
                    let offset = _start.saturating_sub(264);
                    let start = 264u64.saturating_sub(_start) as usize;
                    let end = ((_end - 264) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser2108_write(offset, &_buf[start..end])?;
                }
                if _start < 272 && _end > 268 {
                    let offset = _start.saturating_sub(268);
                    let start = 268u64.saturating_sub(_start) as usize;
                    let end = ((_end - 268) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser310c_write(offset, &_buf[start..end])?;
                }
                if _start < 276 && _end > 272 {
                    let offset = _start.saturating_sub(272);
                    let start = 272u64.saturating_sub(_start) as usize;
                    let end = ((_end - 272) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser4110_write(offset, &_buf[start..end])?;
                }
                if _start < 280 && _end > 276 {
                    let offset = _start.saturating_sub(276);
                    let start = 276u64.saturating_sub(_start) as usize;
                    let end = ((_end - 276) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser5114_write(offset, &_buf[start..end])?;
                }
                if _start < 284 && _end > 280 {
                    let offset = _start.saturating_sub(280);
                    let start = 280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 280) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser6118_write(offset, &_buf[start..end])?;
                }
                if _start < 288 && _end > 284 {
                    let offset = _start.saturating_sub(284);
                    let start = 284u64.saturating_sub(_start) as usize;
                    let end = ((_end - 284) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iser711c_write(offset, &_buf[start..end])?;
                }
            }
            (384..=415, 385..=416) => {
                if _start < 388 && _end > 384 {
                    let offset = _start.saturating_sub(384);
                    let start = 384u64.saturating_sub(_start) as usize;
                    let end = ((_end - 384) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer0180_write(offset, &_buf[start..end])?;
                }
                if _start < 392 && _end > 388 {
                    let offset = _start.saturating_sub(388);
                    let start = 388u64.saturating_sub(_start) as usize;
                    let end = ((_end - 388) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer1184_write(offset, &_buf[start..end])?;
                }
                if _start < 396 && _end > 392 {
                    let offset = _start.saturating_sub(392);
                    let start = 392u64.saturating_sub(_start) as usize;
                    let end = ((_end - 392) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer2188_write(offset, &_buf[start..end])?;
                }
                if _start < 400 && _end > 396 {
                    let offset = _start.saturating_sub(396);
                    let start = 396u64.saturating_sub(_start) as usize;
                    let end = ((_end - 396) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer318c_write(offset, &_buf[start..end])?;
                }
                if _start < 404 && _end > 400 {
                    let offset = _start.saturating_sub(400);
                    let start = 400u64.saturating_sub(_start) as usize;
                    let end = ((_end - 400) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer4190_write(offset, &_buf[start..end])?;
                }
                if _start < 408 && _end > 404 {
                    let offset = _start.saturating_sub(404);
                    let start = 404u64.saturating_sub(_start) as usize;
                    let end = ((_end - 404) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer5194_write(offset, &_buf[start..end])?;
                }
                if _start < 412 && _end > 408 {
                    let offset = _start.saturating_sub(408);
                    let start = 408u64.saturating_sub(_start) as usize;
                    let end = ((_end - 408) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer6198_write(offset, &_buf[start..end])?;
                }
                if _start < 416 && _end > 412 {
                    let offset = _start.saturating_sub(412);
                    let start = 412u64.saturating_sub(_start) as usize;
                    let end = ((_end - 412) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icer719c_write(offset, &_buf[start..end])?;
                }
            }
            (512..=543, 513..=544) => {
                if _start < 516 && _end > 512 {
                    let offset = _start.saturating_sub(512);
                    let start = 512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 512) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr0200_write(offset, &_buf[start..end])?;
                }
                if _start < 520 && _end > 516 {
                    let offset = _start.saturating_sub(516);
                    let start = 516u64.saturating_sub(_start) as usize;
                    let end = ((_end - 516) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr1204_write(offset, &_buf[start..end])?;
                }
                if _start < 524 && _end > 520 {
                    let offset = _start.saturating_sub(520);
                    let start = 520u64.saturating_sub(_start) as usize;
                    let end = ((_end - 520) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr2208_write(offset, &_buf[start..end])?;
                }
                if _start < 528 && _end > 524 {
                    let offset = _start.saturating_sub(524);
                    let start = 524u64.saturating_sub(_start) as usize;
                    let end = ((_end - 524) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr320c_write(offset, &_buf[start..end])?;
                }
                if _start < 532 && _end > 528 {
                    let offset = _start.saturating_sub(528);
                    let start = 528u64.saturating_sub(_start) as usize;
                    let end = ((_end - 528) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr4210_write(offset, &_buf[start..end])?;
                }
                if _start < 536 && _end > 532 {
                    let offset = _start.saturating_sub(532);
                    let start = 532u64.saturating_sub(_start) as usize;
                    let end = ((_end - 532) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr5214_write(offset, &_buf[start..end])?;
                }
                if _start < 540 && _end > 536 {
                    let offset = _start.saturating_sub(536);
                    let start = 536u64.saturating_sub(_start) as usize;
                    let end = ((_end - 536) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr6218_write(offset, &_buf[start..end])?;
                }
                if _start < 544 && _end > 540 {
                    let offset = _start.saturating_sub(540);
                    let start = 540u64.saturating_sub(_start) as usize;
                    let end = ((_end - 540) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ispr721c_write(offset, &_buf[start..end])?;
                }
            }
            (640..=671, 641..=672) => {
                if _start < 644 && _end > 640 {
                    let offset = _start.saturating_sub(640);
                    let start = 640u64.saturating_sub(_start) as usize;
                    let end = ((_end - 640) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr0280_write(offset, &_buf[start..end])?;
                }
                if _start < 648 && _end > 644 {
                    let offset = _start.saturating_sub(644);
                    let start = 644u64.saturating_sub(_start) as usize;
                    let end = ((_end - 644) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr1284_write(offset, &_buf[start..end])?;
                }
                if _start < 652 && _end > 648 {
                    let offset = _start.saturating_sub(648);
                    let start = 648u64.saturating_sub(_start) as usize;
                    let end = ((_end - 648) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr2288_write(offset, &_buf[start..end])?;
                }
                if _start < 656 && _end > 652 {
                    let offset = _start.saturating_sub(652);
                    let start = 652u64.saturating_sub(_start) as usize;
                    let end = ((_end - 652) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr328c_write(offset, &_buf[start..end])?;
                }
                if _start < 660 && _end > 656 {
                    let offset = _start.saturating_sub(656);
                    let start = 656u64.saturating_sub(_start) as usize;
                    let end = ((_end - 656) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr4290_write(offset, &_buf[start..end])?;
                }
                if _start < 664 && _end > 660 {
                    let offset = _start.saturating_sub(660);
                    let start = 660u64.saturating_sub(_start) as usize;
                    let end = ((_end - 660) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr5294_write(offset, &_buf[start..end])?;
                }
                if _start < 668 && _end > 664 {
                    let offset = _start.saturating_sub(664);
                    let start = 664u64.saturating_sub(_start) as usize;
                    let end = ((_end - 664) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr6298_write(offset, &_buf[start..end])?;
                }
                if _start < 672 && _end > 668 {
                    let offset = _start.saturating_sub(668);
                    let start = 668u64.saturating_sub(_start) as usize;
                    let end = ((_end - 668) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_icpr729c_write(offset, &_buf[start..end])?;
                }
            }
            (768..=799, 769..=800) => {
                if _start < 772 && _end > 768 {
                    let offset = _start.saturating_sub(768);
                    let start = 768u64.saturating_sub(_start) as usize;
                    let end = ((_end - 768) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr0300_write(offset, &_buf[start..end])?;
                }
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr1304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr2308_write(offset, &_buf[start..end])?;
                }
                if _start < 784 && _end > 780 {
                    let offset = _start.saturating_sub(780);
                    let start = 780u64.saturating_sub(_start) as usize;
                    let end = ((_end - 780) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr330c_write(offset, &_buf[start..end])?;
                }
                if _start < 788 && _end > 784 {
                    let offset = _start.saturating_sub(784);
                    let start = 784u64.saturating_sub(_start) as usize;
                    let end = ((_end - 784) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr4310_write(offset, &_buf[start..end])?;
                }
                if _start < 792 && _end > 788 {
                    let offset = _start.saturating_sub(788);
                    let start = 788u64.saturating_sub(_start) as usize;
                    let end = ((_end - 788) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr5314_write(offset, &_buf[start..end])?;
                }
                if _start < 796 && _end > 792 {
                    let offset = _start.saturating_sub(792);
                    let start = 792u64.saturating_sub(_start) as usize;
                    let end = ((_end - 792) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr6318_write(offset, &_buf[start..end])?;
                }
                if _start < 800 && _end > 796 {
                    let offset = _start.saturating_sub(796);
                    let start = 796u64.saturating_sub(_start) as usize;
                    let end = ((_end - 796) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_iabr731c_write(offset, &_buf[start..end])?;
                }
            }
            (1024..=1263, 1025..=1264) => {
                if _start < 1028 && _end > 1024 {
                    let offset = _start.saturating_sub(1024);
                    let start = 1024u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1024) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr0400_write(offset, &_buf[start..end])?;
                }
                if _start < 1032 && _end > 1028 {
                    let offset = _start.saturating_sub(1028);
                    let start = 1028u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1028) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr1404_write(offset, &_buf[start..end])?;
                }
                if _start < 1036 && _end > 1032 {
                    let offset = _start.saturating_sub(1032);
                    let start = 1032u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1032) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr2408_write(offset, &_buf[start..end])?;
                }
                if _start < 1040 && _end > 1036 {
                    let offset = _start.saturating_sub(1036);
                    let start = 1036u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1036) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr340c_write(offset, &_buf[start..end])?;
                }
                if _start < 1044 && _end > 1040 {
                    let offset = _start.saturating_sub(1040);
                    let start = 1040u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1040) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr4410_write(offset, &_buf[start..end])?;
                }
                if _start < 1048 && _end > 1044 {
                    let offset = _start.saturating_sub(1044);
                    let start = 1044u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1044) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr5414_write(offset, &_buf[start..end])?;
                }
                if _start < 1052 && _end > 1048 {
                    let offset = _start.saturating_sub(1048);
                    let start = 1048u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1048) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr6418_write(offset, &_buf[start..end])?;
                }
                if _start < 1056 && _end > 1052 {
                    let offset = _start.saturating_sub(1052);
                    let start = 1052u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1052) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr741c_write(offset, &_buf[start..end])?;
                }
                if _start < 1060 && _end > 1056 {
                    let offset = _start.saturating_sub(1056);
                    let start = 1056u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1056) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr8420_write(offset, &_buf[start..end])?;
                }
                if _start < 1064 && _end > 1060 {
                    let offset = _start.saturating_sub(1060);
                    let start = 1060u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1060) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr9424_write(offset, &_buf[start..end])?;
                }
                if _start < 1068 && _end > 1064 {
                    let offset = _start.saturating_sub(1064);
                    let start = 1064u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1064) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr10428_write(offset, &_buf[start..end])?;
                }
                if _start < 1072 && _end > 1068 {
                    let offset = _start.saturating_sub(1068);
                    let start = 1068u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1068) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr1142c_write(offset, &_buf[start..end])?;
                }
                if _start < 1076 && _end > 1072 {
                    let offset = _start.saturating_sub(1072);
                    let start = 1072u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1072) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr12430_write(offset, &_buf[start..end])?;
                }
                if _start < 1080 && _end > 1076 {
                    let offset = _start.saturating_sub(1076);
                    let start = 1076u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1076) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr13434_write(offset, &_buf[start..end])?;
                }
                if _start < 1084 && _end > 1080 {
                    let offset = _start.saturating_sub(1080);
                    let start = 1080u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1080) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr14438_write(offset, &_buf[start..end])?;
                }
                if _start < 1088 && _end > 1084 {
                    let offset = _start.saturating_sub(1084);
                    let start = 1084u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1084) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr1543c_write(offset, &_buf[start..end])?;
                }
                if _start < 1092 && _end > 1088 {
                    let offset = _start.saturating_sub(1088);
                    let start = 1088u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1088) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr16440_write(offset, &_buf[start..end])?;
                }
                if _start < 1096 && _end > 1092 {
                    let offset = _start.saturating_sub(1092);
                    let start = 1092u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1092) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr17444_write(offset, &_buf[start..end])?;
                }
                if _start < 1100 && _end > 1096 {
                    let offset = _start.saturating_sub(1096);
                    let start = 1096u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1096) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr18448_write(offset, &_buf[start..end])?;
                }
                if _start < 1104 && _end > 1100 {
                    let offset = _start.saturating_sub(1100);
                    let start = 1100u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1100) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr1944c_write(offset, &_buf[start..end])?;
                }
                if _start < 1108 && _end > 1104 {
                    let offset = _start.saturating_sub(1104);
                    let start = 1104u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1104) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr20450_write(offset, &_buf[start..end])?;
                }
                if _start < 1112 && _end > 1108 {
                    let offset = _start.saturating_sub(1108);
                    let start = 1108u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1108) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr21454_write(offset, &_buf[start..end])?;
                }
                if _start < 1116 && _end > 1112 {
                    let offset = _start.saturating_sub(1112);
                    let start = 1112u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1112) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr22458_write(offset, &_buf[start..end])?;
                }
                if _start < 1120 && _end > 1116 {
                    let offset = _start.saturating_sub(1116);
                    let start = 1116u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1116) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr2345c_write(offset, &_buf[start..end])?;
                }
                if _start < 1124 && _end > 1120 {
                    let offset = _start.saturating_sub(1120);
                    let start = 1120u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1120) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr24460_write(offset, &_buf[start..end])?;
                }
                if _start < 1128 && _end > 1124 {
                    let offset = _start.saturating_sub(1124);
                    let start = 1124u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1124) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr25464_write(offset, &_buf[start..end])?;
                }
                if _start < 1132 && _end > 1128 {
                    let offset = _start.saturating_sub(1128);
                    let start = 1128u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1128) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr26468_write(offset, &_buf[start..end])?;
                }
                if _start < 1136 && _end > 1132 {
                    let offset = _start.saturating_sub(1132);
                    let start = 1132u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1132) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr2746c_write(offset, &_buf[start..end])?;
                }
                if _start < 1140 && _end > 1136 {
                    let offset = _start.saturating_sub(1136);
                    let start = 1136u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1136) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr28470_write(offset, &_buf[start..end])?;
                }
                if _start < 1144 && _end > 1140 {
                    let offset = _start.saturating_sub(1140);
                    let start = 1140u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1140) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr29474_write(offset, &_buf[start..end])?;
                }
                if _start < 1148 && _end > 1144 {
                    let offset = _start.saturating_sub(1144);
                    let start = 1144u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1144) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr30478_write(offset, &_buf[start..end])?;
                }
                if _start < 1152 && _end > 1148 {
                    let offset = _start.saturating_sub(1148);
                    let start = 1148u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1148) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr3147c_write(offset, &_buf[start..end])?;
                }
                if _start < 1156 && _end > 1152 {
                    let offset = _start.saturating_sub(1152);
                    let start = 1152u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1152) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr32480_write(offset, &_buf[start..end])?;
                }
                if _start < 1160 && _end > 1156 {
                    let offset = _start.saturating_sub(1156);
                    let start = 1156u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1156) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr33484_write(offset, &_buf[start..end])?;
                }
                if _start < 1164 && _end > 1160 {
                    let offset = _start.saturating_sub(1160);
                    let start = 1160u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1160) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr34488_write(offset, &_buf[start..end])?;
                }
                if _start < 1168 && _end > 1164 {
                    let offset = _start.saturating_sub(1164);
                    let start = 1164u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1164) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr3548c_write(offset, &_buf[start..end])?;
                }
                if _start < 1172 && _end > 1168 {
                    let offset = _start.saturating_sub(1168);
                    let start = 1168u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1168) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr36490_write(offset, &_buf[start..end])?;
                }
                if _start < 1176 && _end > 1172 {
                    let offset = _start.saturating_sub(1172);
                    let start = 1172u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1172) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr37494_write(offset, &_buf[start..end])?;
                }
                if _start < 1180 && _end > 1176 {
                    let offset = _start.saturating_sub(1176);
                    let start = 1176u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1176) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr38498_write(offset, &_buf[start..end])?;
                }
                if _start < 1184 && _end > 1180 {
                    let offset = _start.saturating_sub(1180);
                    let start = 1180u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1180) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr3949c_write(offset, &_buf[start..end])?;
                }
                if _start < 1188 && _end > 1184 {
                    let offset = _start.saturating_sub(1184);
                    let start = 1184u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1184) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr404a0_write(offset, &_buf[start..end])?;
                }
                if _start < 1192 && _end > 1188 {
                    let offset = _start.saturating_sub(1188);
                    let start = 1188u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1188) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr414a4_write(offset, &_buf[start..end])?;
                }
                if _start < 1196 && _end > 1192 {
                    let offset = _start.saturating_sub(1192);
                    let start = 1192u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1192) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr424a8_write(offset, &_buf[start..end])?;
                }
                if _start < 1200 && _end > 1196 {
                    let offset = _start.saturating_sub(1196);
                    let start = 1196u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1196) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr434ac_write(offset, &_buf[start..end])?;
                }
                if _start < 1204 && _end > 1200 {
                    let offset = _start.saturating_sub(1200);
                    let start = 1200u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1200) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr444b0_write(offset, &_buf[start..end])?;
                }
                if _start < 1208 && _end > 1204 {
                    let offset = _start.saturating_sub(1204);
                    let start = 1204u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1204) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr454b4_write(offset, &_buf[start..end])?;
                }
                if _start < 1212 && _end > 1208 {
                    let offset = _start.saturating_sub(1208);
                    let start = 1208u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1208) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr464b8_write(offset, &_buf[start..end])?;
                }
                if _start < 1216 && _end > 1212 {
                    let offset = _start.saturating_sub(1212);
                    let start = 1212u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1212) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr474bc_write(offset, &_buf[start..end])?;
                }
                if _start < 1220 && _end > 1216 {
                    let offset = _start.saturating_sub(1216);
                    let start = 1216u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1216) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr484c0_write(offset, &_buf[start..end])?;
                }
                if _start < 1224 && _end > 1220 {
                    let offset = _start.saturating_sub(1220);
                    let start = 1220u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1220) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr494c4_write(offset, &_buf[start..end])?;
                }
                if _start < 1228 && _end > 1224 {
                    let offset = _start.saturating_sub(1224);
                    let start = 1224u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1224) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr504c8_write(offset, &_buf[start..end])?;
                }
                if _start < 1232 && _end > 1228 {
                    let offset = _start.saturating_sub(1228);
                    let start = 1228u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1228) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr514cc_write(offset, &_buf[start..end])?;
                }
                if _start < 1236 && _end > 1232 {
                    let offset = _start.saturating_sub(1232);
                    let start = 1232u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1232) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr524d0_write(offset, &_buf[start..end])?;
                }
                if _start < 1240 && _end > 1236 {
                    let offset = _start.saturating_sub(1236);
                    let start = 1236u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1236) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr534d4_write(offset, &_buf[start..end])?;
                }
                if _start < 1244 && _end > 1240 {
                    let offset = _start.saturating_sub(1240);
                    let start = 1240u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1240) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr544d8_write(offset, &_buf[start..end])?;
                }
                if _start < 1248 && _end > 1244 {
                    let offset = _start.saturating_sub(1244);
                    let start = 1244u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1244) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr554dc_write(offset, &_buf[start..end])?;
                }
                if _start < 1252 && _end > 1248 {
                    let offset = _start.saturating_sub(1248);
                    let start = 1248u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1248) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr564e0_write(offset, &_buf[start..end])?;
                }
                if _start < 1256 && _end > 1252 {
                    let offset = _start.saturating_sub(1252);
                    let start = 1252u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1252) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr574e4_write(offset, &_buf[start..end])?;
                }
                if _start < 1260 && _end > 1256 {
                    let offset = _start.saturating_sub(1256);
                    let start = 1256u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1256) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr584e8_write(offset, &_buf[start..end])?;
                }
                if _start < 1264 && _end > 1260 {
                    let offset = _start.saturating_sub(1260);
                    let start = 1260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1260) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_nvic_ipr594ec_write(offset, &_buf[start..end])?;
                }
            }
            (3328..=3443, 3329..=3444) => {
                if _start < 3332 && _end > 3328 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3336 && _end > 3332 {
                    let offset = _start.saturating_sub(3332);
                    let start = 3332u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3332) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_icsrd04_write(offset, &_buf[start..end])?;
                }
                if _start < 3340 && _end > 3336 {
                    let offset = _start.saturating_sub(3336);
                    let start = 3336u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3336) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_vtord08_write(offset, &_buf[start..end])?;
                }
                if _start < 3344 && _end > 3340 {
                    let offset = _start.saturating_sub(3340);
                    let start = 3340u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3340) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_aircrd0c_write(offset, &_buf[start..end])?;
                }
                if _start < 3348 && _end > 3344 {
                    let offset = _start.saturating_sub(3344);
                    let start = 3344u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3344) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_scrd10_write(offset, &_buf[start..end])?;
                }
                if _start < 3352 && _end > 3348 {
                    let offset = _start.saturating_sub(3348);
                    let start = 3348u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3348) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_ccrd14_write(offset, &_buf[start..end])?;
                }
                if _start < 3356 && _end > 3352 {
                    let offset = _start.saturating_sub(3352);
                    let start = 3352u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3352) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_shpr1d18_write(offset, &_buf[start..end])?;
                }
                if _start < 3360 && _end > 3356 {
                    let offset = _start.saturating_sub(3356);
                    let start = 3356u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3356) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_shpr2d1c_write(offset, &_buf[start..end])?;
                }
                if _start < 3364 && _end > 3360 {
                    let offset = _start.saturating_sub(3360);
                    let start = 3360u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3360) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_shpr3d20_write(offset, &_buf[start..end])?;
                }
                if _start < 3368 && _end > 3364 {
                    let offset = _start.saturating_sub(3364);
                    let start = 3364u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3364) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_shcsrd24_write(offset, &_buf[start..end])?;
                }
                if _start < 3372 && _end > 3368 {
                    let offset = _start.saturating_sub(3368);
                    let start = 3368u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3368) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_cfsrd28_write(offset, &_buf[start..end])?;
                }
                if _start < 3376 && _end > 3372 {
                    let offset = _start.saturating_sub(3372);
                    let start = 3372u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3372) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_hfsrd2c_write(offset, &_buf[start..end])?;
                }
                if _start < 3380 && _end > 3376 {
                    let offset = _start.saturating_sub(3376);
                    let start = 3376u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3376) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_dfsrd30_write(offset, &_buf[start..end])?;
                }
                if _start < 3384 && _end > 3380 {
                    let offset = _start.saturating_sub(3380);
                    let start = 3380u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3380) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_mmfard34_write(offset, &_buf[start..end])?;
                }
                if _start < 3388 && _end > 3384 {
                    let offset = _start.saturating_sub(3384);
                    let start = 3384u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3384) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_bfard38_write(offset, &_buf[start..end])?;
                }
                if _start < 3392 && _end > 3388 {
                    let offset = _start.saturating_sub(3388);
                    let start = 3388u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3388) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_afsrd3c_write(offset, &_buf[start..end])?;
                }
                if _start < 3396 && _end > 3392 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3400 && _end > 3396 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3404 && _end > 3400 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3408 && _end > 3404 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3412 && _end > 3408 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3416 && _end > 3412 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3420 && _end > 3416 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3424 && _end > 3420 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3428 && _end > 3424 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3432 && _end > 3428 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3436 && _end > 3432 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3440 && _end > 3436 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3444 && _end > 3440 {
                    return Err(MemError::WriteViolation);
                }
            }
            (3464..=3467, 3465..=3468) => {
                if _start < 3468 && _end > 3464 {
                    let offset = _start.saturating_sub(3464);
                    let start = 3464u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3464) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_cpacrd88_write(offset, &_buf[start..end])?;
                }
            }
            (3472..=3515, 3473..=3516) => {
                if _start < 3476 && _end > 3472 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3480 && _end > 3476 {
                    let offset = _start.saturating_sub(3476);
                    let start = 3476u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3476) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_mpu_ctrld94_write(offset, &_buf[start..end])?;
                }
                if _start < 3484 && _end > 3480 {
                    let offset = _start.saturating_sub(3480);
                    let start = 3480u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3480) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_mpu_rnrd98_write(offset, &_buf[start..end])?;
                }
                if _start < 3488 && _end > 3484 {
                    let offset = _start.saturating_sub(3484);
                    let start = 3484u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3484) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_mpu_rbard9c_write(offset, &_buf[start..end])?;
                }
                if _start < 3492 && _end > 3488 {
                    let offset = _start.saturating_sub(3488);
                    let start = 3488u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3488) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_mpu_rasrda0_write(offset, &_buf[start..end])?;
                }
                if _start < 3496 && _end > 3492 {
                    let offset = _start.saturating_sub(3492);
                    let start = 3492u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3492) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_mpu_rbar_a1da4_write(offset, &_buf[start..end])?;
                }
                if _start < 3500 && _end > 3496 {
                    let offset = _start.saturating_sub(3496);
                    let start = 3496u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3496) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_mpu_rasr_a1da8_write(offset, &_buf[start..end])?;
                }
                if _start < 3504 && _end > 3500 {
                    let offset = _start.saturating_sub(3500);
                    let start = 3500u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3500) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_mpu_rbar_a2dac_write(offset, &_buf[start..end])?;
                }
                if _start < 3508 && _end > 3504 {
                    let offset = _start.saturating_sub(3504);
                    let start = 3504u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3504) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_mpu_rasr_a2db0_write(offset, &_buf[start..end])?;
                }
                if _start < 3512 && _end > 3508 {
                    let offset = _start.saturating_sub(3508);
                    let start = 3508u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3508) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_mpu_rbar_a3db4_write(offset, &_buf[start..end])?;
                }
                if _start < 3516 && _end > 3512 {
                    let offset = _start.saturating_sub(3512);
                    let start = 3512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3512) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_mpu_rasr_a3db8_write(offset, &_buf[start..end])?;
                }
            }
            (3580..=3583, 3581..=3584) => {
                if _start < 3584 && _end > 3580 {
                    let offset = _start.saturating_sub(3580);
                    let start = 3580u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3580) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_demcrdfc_write(offset, &_buf[start..end])?;
                }
            }
            (3840..=3843, 3841..=3844) => {
                if _start < 3844 && _end > 3840 {
                    let offset = _start.saturating_sub(3840);
                    let start = 3840u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3840) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_stirf00_write(offset, &_buf[start..end])?;
                }
            }
            (3892..=3911, 3893..=3912) => {
                if _start < 3896 && _end > 3892 {
                    let offset = _start.saturating_sub(3892);
                    let start = 3892u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3892) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_fpccrf34_write(offset, &_buf[start..end])?;
                }
                if _start < 3900 && _end > 3896 {
                    let offset = _start.saturating_sub(3896);
                    let start = 3896u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3896) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_fpcarf38_write(offset, &_buf[start..end])?;
                }
                if _start < 3904 && _end > 3900 {
                    let offset = _start.saturating_sub(3900);
                    let start = 3900u64.saturating_sub(_start) as usize;
                    let end = ((_end - 3900) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .scs_fpdscrf3c_write(offset, &_buf[start..end])?;
                }
                if _start < 3908 && _end > 3904 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 3912 && _end > 3908 {
                    return Err(MemError::WriteViolation);
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
pub(crate) struct Apb35(
    pub std::sync::Arc<std::sync::Mutex<super::peripheral::Peripherals>>,
);
impl icicle_vm::cpu::mem::IoMemory for Apb35 {
    fn read(&mut self, _addr: u64, _buf: &mut [u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::apb35::Apb35::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (16..=23, 17..=24) => {
                return Err(MemError::ReadViolation);
            }
            (28..=43, 29..=44) => {
                return Err(MemError::ReadViolation);
            }
            (260..=267, 261..=268) => {
                if _start < 264 && _end > 260 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_events_stopped104_read()?
                        .to_ne_bytes();
                    if _start <= 260 && _end > 260 {
                        _buf[(260 - _start) as usize] = value[0];
                    }
                    if _start <= 261 && _end > 261 {
                        _buf[(261 - _start) as usize] = value[1];
                    }
                    if _start <= 262 && _end > 262 {
                        _buf[(262 - _start) as usize] = value[2];
                    }
                    if _start <= 263 && _end > 263 {
                        _buf[(263 - _start) as usize] = value[3];
                    }
                }
                if _start < 268 && _end > 264 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_events_ready108_read()?
                        .to_ne_bytes();
                    if _start <= 264 && _end > 264 {
                        _buf[(264 - _start) as usize] = value[0];
                    }
                    if _start <= 265 && _end > 265 {
                        _buf[(265 - _start) as usize] = value[1];
                    }
                    if _start <= 266 && _end > 266 {
                        _buf[(266 - _start) as usize] = value[2];
                    }
                    if _start <= 267 && _end > 267 {
                        _buf[(267 - _start) as usize] = value[3];
                    }
                }
            }
            (272..=275, 273..=276) => {
                if _start < 276 && _end > 272 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_events_endrx110_read()?
                        .to_ne_bytes();
                    if _start <= 272 && _end > 272 {
                        _buf[(272 - _start) as usize] = value[0];
                    }
                    if _start <= 273 && _end > 273 {
                        _buf[(273 - _start) as usize] = value[1];
                    }
                    if _start <= 274 && _end > 274 {
                        _buf[(274 - _start) as usize] = value[2];
                    }
                    if _start <= 275 && _end > 275 {
                        _buf[(275 - _start) as usize] = value[3];
                    }
                }
            }
            (280..=283, 281..=284) => {
                if _start < 284 && _end > 280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_events_end118_read()?
                        .to_ne_bytes();
                    if _start <= 280 && _end > 280 {
                        _buf[(280 - _start) as usize] = value[0];
                    }
                    if _start <= 281 && _end > 281 {
                        _buf[(281 - _start) as usize] = value[1];
                    }
                    if _start <= 282 && _end > 282 {
                        _buf[(282 - _start) as usize] = value[2];
                    }
                    if _start <= 283 && _end > 283 {
                        _buf[(283 - _start) as usize] = value[3];
                    }
                }
            }
            (288..=291, 289..=292) => {
                if _start < 292 && _end > 288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_events_endtx120_read()?
                        .to_ne_bytes();
                    if _start <= 288 && _end > 288 {
                        _buf[(288 - _start) as usize] = value[0];
                    }
                    if _start <= 289 && _end > 289 {
                        _buf[(289 - _start) as usize] = value[1];
                    }
                    if _start <= 290 && _end > 290 {
                        _buf[(290 - _start) as usize] = value[2];
                    }
                    if _start <= 291 && _end > 291 {
                        _buf[(291 - _start) as usize] = value[3];
                    }
                }
            }
            (296..=299, 297..=300) => {
                if _start < 300 && _end > 296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_events_acquired128_read()?
                        .to_ne_bytes();
                    if _start <= 296 && _end > 296 {
                        _buf[(296 - _start) as usize] = value[0];
                    }
                    if _start <= 297 && _end > 297 {
                        _buf[(297 - _start) as usize] = value[1];
                    }
                    if _start <= 298 && _end > 298 {
                        _buf[(298 - _start) as usize] = value[2];
                    }
                    if _start <= 299 && _end > 299 {
                        _buf[(299 - _start) as usize] = value[3];
                    }
                }
            }
            (332..=335, 333..=336) => {
                if _start < 336 && _end > 332 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_events_started14c_read()?
                        .to_ne_bytes();
                    if _start <= 332 && _end > 332 {
                        _buf[(332 - _start) as usize] = value[0];
                    }
                    if _start <= 333 && _end > 333 {
                        _buf[(333 - _start) as usize] = value[1];
                    }
                    if _start <= 334 && _end > 334 {
                        _buf[(334 - _start) as usize] = value[2];
                    }
                    if _start <= 335 && _end > 335 {
                        _buf[(335 - _start) as usize] = value[3];
                    }
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_shorts200_read()?
                        .to_ne_bytes();
                    if _start <= 512 && _end > 512 {
                        _buf[(512 - _start) as usize] = value[0];
                    }
                    if _start <= 513 && _end > 513 {
                        _buf[(513 - _start) as usize] = value[1];
                    }
                    if _start <= 514 && _end > 514 {
                        _buf[(514 - _start) as usize] = value[2];
                    }
                    if _start <= 515 && _end > 515 {
                        _buf[(515 - _start) as usize] = value[3];
                    }
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_intenset304_read()?
                        .to_ne_bytes();
                    if _start <= 772 && _end > 772 {
                        _buf[(772 - _start) as usize] = value[0];
                    }
                    if _start <= 773 && _end > 773 {
                        _buf[(773 - _start) as usize] = value[1];
                    }
                    if _start <= 774 && _end > 774 {
                        _buf[(774 - _start) as usize] = value[2];
                    }
                    if _start <= 775 && _end > 775 {
                        _buf[(775 - _start) as usize] = value[3];
                    }
                }
                if _start < 780 && _end > 776 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_intenclr308_read()?
                        .to_ne_bytes();
                    if _start <= 776 && _end > 776 {
                        _buf[(776 - _start) as usize] = value[0];
                    }
                    if _start <= 777 && _end > 777 {
                        _buf[(777 - _start) as usize] = value[1];
                    }
                    if _start <= 778 && _end > 778 {
                        _buf[(778 - _start) as usize] = value[2];
                    }
                    if _start <= 779 && _end > 779 {
                        _buf[(779 - _start) as usize] = value[3];
                    }
                }
            }
            (1024..=1027, 1025..=1028) => {
                if _start < 1028 && _end > 1024 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_semstat400_read()?
                        .to_ne_bytes();
                    if _start <= 1024 && _end > 1024 {
                        _buf[(1024 - _start) as usize] = value[0];
                    }
                    if _start <= 1025 && _end > 1025 {
                        _buf[(1025 - _start) as usize] = value[1];
                    }
                    if _start <= 1026 && _end > 1026 {
                        _buf[(1026 - _start) as usize] = value[2];
                    }
                    if _start <= 1027 && _end > 1027 {
                        _buf[(1027 - _start) as usize] = value[3];
                    }
                }
            }
            (1088..=1091, 1089..=1092) => {
                if _start < 1092 && _end > 1088 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_status440_read()?
                        .to_ne_bytes();
                    if _start <= 1088 && _end > 1088 {
                        _buf[(1088 - _start) as usize] = value[0];
                    }
                    if _start <= 1089 && _end > 1089 {
                        _buf[(1089 - _start) as usize] = value[1];
                    }
                    if _start <= 1090 && _end > 1090 {
                        _buf[(1090 - _start) as usize] = value[2];
                    }
                    if _start <= 1091 && _end > 1091 {
                        _buf[(1091 - _start) as usize] = value[3];
                    }
                }
            }
            (1280..=1283, 1281..=1284) => {
                if _start < 1284 && _end > 1280 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_enable500_read()?
                        .to_ne_bytes();
                    if _start <= 1280 && _end > 1280 {
                        _buf[(1280 - _start) as usize] = value[0];
                    }
                    if _start <= 1281 && _end > 1281 {
                        _buf[(1281 - _start) as usize] = value[1];
                    }
                    if _start <= 1282 && _end > 1282 {
                        _buf[(1282 - _start) as usize] = value[2];
                    }
                    if _start <= 1283 && _end > 1283 {
                        _buf[(1283 - _start) as usize] = value[3];
                    }
                }
            }
            (1288..=1311, 1289..=1312) => {
                if _start < 1292 && _end > 1288 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_psel_sck0_read()?
                        .to_ne_bytes();
                    if _start <= 1288 && _end > 1288 {
                        _buf[(1288 - _start) as usize] = value[0];
                    }
                    if _start <= 1289 && _end > 1289 {
                        _buf[(1289 - _start) as usize] = value[1];
                    }
                    if _start <= 1290 && _end > 1290 {
                        _buf[(1290 - _start) as usize] = value[2];
                    }
                    if _start <= 1291 && _end > 1291 {
                        _buf[(1291 - _start) as usize] = value[3];
                    }
                }
                if _start < 1296 && _end > 1292 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_psel_miso4_read()?
                        .to_ne_bytes();
                    if _start <= 1292 && _end > 1292 {
                        _buf[(1292 - _start) as usize] = value[0];
                    }
                    if _start <= 1293 && _end > 1293 {
                        _buf[(1293 - _start) as usize] = value[1];
                    }
                    if _start <= 1294 && _end > 1294 {
                        _buf[(1294 - _start) as usize] = value[2];
                    }
                    if _start <= 1295 && _end > 1295 {
                        _buf[(1295 - _start) as usize] = value[3];
                    }
                }
                if _start < 1300 && _end > 1296 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_psel_mosi8_read()?
                        .to_ne_bytes();
                    if _start <= 1296 && _end > 1296 {
                        _buf[(1296 - _start) as usize] = value[0];
                    }
                    if _start <= 1297 && _end > 1297 {
                        _buf[(1297 - _start) as usize] = value[1];
                    }
                    if _start <= 1298 && _end > 1298 {
                        _buf[(1298 - _start) as usize] = value[2];
                    }
                    if _start <= 1299 && _end > 1299 {
                        _buf[(1299 - _start) as usize] = value[3];
                    }
                }
                if _start < 1304 && _end > 1300 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_psel_csnc_read()?
                        .to_ne_bytes();
                    if _start <= 1300 && _end > 1300 {
                        _buf[(1300 - _start) as usize] = value[0];
                    }
                    if _start <= 1301 && _end > 1301 {
                        _buf[(1301 - _start) as usize] = value[1];
                    }
                    if _start <= 1302 && _end > 1302 {
                        _buf[(1302 - _start) as usize] = value[2];
                    }
                    if _start <= 1303 && _end > 1303 {
                        _buf[(1303 - _start) as usize] = value[3];
                    }
                }
                if _start < 1308 && _end > 1304 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_rxd518_read()?
                        .to_ne_bytes();
                    if _start <= 1304 && _end > 1304 {
                        _buf[(1304 - _start) as usize] = value[0];
                    }
                    if _start <= 1305 && _end > 1305 {
                        _buf[(1305 - _start) as usize] = value[1];
                    }
                    if _start <= 1306 && _end > 1306 {
                        _buf[(1306 - _start) as usize] = value[2];
                    }
                    if _start <= 1307 && _end > 1307 {
                        _buf[(1307 - _start) as usize] = value[3];
                    }
                }
                if _start < 1312 && _end > 1308 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_txd51c_read()?
                        .to_ne_bytes();
                    if _start <= 1308 && _end > 1308 {
                        _buf[(1308 - _start) as usize] = value[0];
                    }
                    if _start <= 1309 && _end > 1309 {
                        _buf[(1309 - _start) as usize] = value[1];
                    }
                    if _start <= 1310 && _end > 1310 {
                        _buf[(1310 - _start) as usize] = value[2];
                    }
                    if _start <= 1311 && _end > 1311 {
                        _buf[(1311 - _start) as usize] = value[3];
                    }
                }
            }
            (1316..=1319, 1317..=1320) => {
                if _start < 1320 && _end > 1316 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_frequency524_read()?
                        .to_ne_bytes();
                    if _start <= 1316 && _end > 1316 {
                        _buf[(1316 - _start) as usize] = value[0];
                    }
                    if _start <= 1317 && _end > 1317 {
                        _buf[(1317 - _start) as usize] = value[1];
                    }
                    if _start <= 1318 && _end > 1318 {
                        _buf[(1318 - _start) as usize] = value[2];
                    }
                    if _start <= 1319 && _end > 1319 {
                        _buf[(1319 - _start) as usize] = value[3];
                    }
                }
            }
            (1332..=1367, 1333..=1368) => {
                if _start < 1336 && _end > 1332 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_rxd_ptr0_read()?
                        .to_ne_bytes();
                    if _start <= 1332 && _end > 1332 {
                        _buf[(1332 - _start) as usize] = value[0];
                    }
                    if _start <= 1333 && _end > 1333 {
                        _buf[(1333 - _start) as usize] = value[1];
                    }
                    if _start <= 1334 && _end > 1334 {
                        _buf[(1334 - _start) as usize] = value[2];
                    }
                    if _start <= 1335 && _end > 1335 {
                        _buf[(1335 - _start) as usize] = value[3];
                    }
                }
                if _start < 1340 && _end > 1336 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_rxd_maxcnt4_read()?
                        .to_ne_bytes();
                    if _start <= 1336 && _end > 1336 {
                        _buf[(1336 - _start) as usize] = value[0];
                    }
                    if _start <= 1337 && _end > 1337 {
                        _buf[(1337 - _start) as usize] = value[1];
                    }
                    if _start <= 1338 && _end > 1338 {
                        _buf[(1338 - _start) as usize] = value[2];
                    }
                    if _start <= 1339 && _end > 1339 {
                        _buf[(1339 - _start) as usize] = value[3];
                    }
                }
                if _start < 1344 && _end > 1340 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_rxd_amount8_read()?
                        .to_ne_bytes();
                    if _start <= 1340 && _end > 1340 {
                        _buf[(1340 - _start) as usize] = value[0];
                    }
                    if _start <= 1341 && _end > 1341 {
                        _buf[(1341 - _start) as usize] = value[1];
                    }
                    if _start <= 1342 && _end > 1342 {
                        _buf[(1342 - _start) as usize] = value[2];
                    }
                    if _start <= 1343 && _end > 1343 {
                        _buf[(1343 - _start) as usize] = value[3];
                    }
                }
                if _start < 1348 && _end > 1344 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_rxd_listc_read()?
                        .to_ne_bytes();
                    if _start <= 1344 && _end > 1344 {
                        _buf[(1344 - _start) as usize] = value[0];
                    }
                    if _start <= 1345 && _end > 1345 {
                        _buf[(1345 - _start) as usize] = value[1];
                    }
                    if _start <= 1346 && _end > 1346 {
                        _buf[(1346 - _start) as usize] = value[2];
                    }
                    if _start <= 1347 && _end > 1347 {
                        _buf[(1347 - _start) as usize] = value[3];
                    }
                }
                if _start < 1352 && _end > 1348 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_txd_ptr0_read()?
                        .to_ne_bytes();
                    if _start <= 1348 && _end > 1348 {
                        _buf[(1348 - _start) as usize] = value[0];
                    }
                    if _start <= 1349 && _end > 1349 {
                        _buf[(1349 - _start) as usize] = value[1];
                    }
                    if _start <= 1350 && _end > 1350 {
                        _buf[(1350 - _start) as usize] = value[2];
                    }
                    if _start <= 1351 && _end > 1351 {
                        _buf[(1351 - _start) as usize] = value[3];
                    }
                }
                if _start < 1356 && _end > 1352 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_txd_maxcnt4_read()?
                        .to_ne_bytes();
                    if _start <= 1352 && _end > 1352 {
                        _buf[(1352 - _start) as usize] = value[0];
                    }
                    if _start <= 1353 && _end > 1353 {
                        _buf[(1353 - _start) as usize] = value[1];
                    }
                    if _start <= 1354 && _end > 1354 {
                        _buf[(1354 - _start) as usize] = value[2];
                    }
                    if _start <= 1355 && _end > 1355 {
                        _buf[(1355 - _start) as usize] = value[3];
                    }
                }
                if _start < 1360 && _end > 1356 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_txd_amount8_read()?
                        .to_ne_bytes();
                    if _start <= 1356 && _end > 1356 {
                        _buf[(1356 - _start) as usize] = value[0];
                    }
                    if _start <= 1357 && _end > 1357 {
                        _buf[(1357 - _start) as usize] = value[1];
                    }
                    if _start <= 1358 && _end > 1358 {
                        _buf[(1358 - _start) as usize] = value[2];
                    }
                    if _start <= 1359 && _end > 1359 {
                        _buf[(1359 - _start) as usize] = value[3];
                    }
                }
                if _start < 1364 && _end > 1360 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_txd_listc_read()?
                        .to_ne_bytes();
                    if _start <= 1360 && _end > 1360 {
                        _buf[(1360 - _start) as usize] = value[0];
                    }
                    if _start <= 1361 && _end > 1361 {
                        _buf[(1361 - _start) as usize] = value[1];
                    }
                    if _start <= 1362 && _end > 1362 {
                        _buf[(1362 - _start) as usize] = value[2];
                    }
                    if _start <= 1363 && _end > 1363 {
                        _buf[(1363 - _start) as usize] = value[3];
                    }
                }
                if _start < 1368 && _end > 1364 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_config554_read()?
                        .to_ne_bytes();
                    if _start <= 1364 && _end > 1364 {
                        _buf[(1364 - _start) as usize] = value[0];
                    }
                    if _start <= 1365 && _end > 1365 {
                        _buf[(1365 - _start) as usize] = value[1];
                    }
                    if _start <= 1366 && _end > 1366 {
                        _buf[(1366 - _start) as usize] = value[2];
                    }
                    if _start <= 1367 && _end > 1367 {
                        _buf[(1367 - _start) as usize] = value[3];
                    }
                }
            }
            (1372..=1375, 1373..=1376) => {
                if _start < 1376 && _end > 1372 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_def55c_read()?
                        .to_ne_bytes();
                    if _start <= 1372 && _end > 1372 {
                        _buf[(1372 - _start) as usize] = value[0];
                    }
                    if _start <= 1373 && _end > 1373 {
                        _buf[(1373 - _start) as usize] = value[1];
                    }
                    if _start <= 1374 && _end > 1374 {
                        _buf[(1374 - _start) as usize] = value[2];
                    }
                    if _start <= 1375 && _end > 1375 {
                        _buf[(1375 - _start) as usize] = value[3];
                    }
                }
            }
            (1472..=1475, 1473..=1476) => {
                if _start < 1476 && _end > 1472 {
                    let value = self
                        .0
                        .lock()
                        .unwrap()
                        .apb35_orc5c0_read()?
                        .to_ne_bytes();
                    if _start <= 1472 && _end > 1472 {
                        _buf[(1472 - _start) as usize] = value[0];
                    }
                    if _start <= 1473 && _end > 1473 {
                        _buf[(1473 - _start) as usize] = value[1];
                    }
                    if _start <= 1474 && _end > 1474 {
                        _buf[(1474 - _start) as usize] = value[2];
                    }
                    if _start <= 1475 && _end > 1475 {
                        _buf[(1475 - _start) as usize] = value[3];
                    }
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
    fn write(&mut self, _addr: u64, _buf: &[u8]) -> MemResult<()> {
        let _instance_page =
            crate::peripheral::apb35::Apb35::page_to_index(_addr >> 12u32);
        let _start = _addr & 4095u64;
        let _end = _start + u64::try_from(_buf.len()).unwrap();
        match (_start, _end) {
            (16..=23, 17..=24) => {
                if _start < 20 && _end > 16 {
                    let offset = _start.saturating_sub(16);
                    let start = 16u64.saturating_sub(_start) as usize;
                    let end = ((_end - 16) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_tasks_start10_write(offset, &_buf[start..end])?;
                }
                if _start < 24 && _end > 20 {
                    let offset = _start.saturating_sub(20);
                    let start = 20u64.saturating_sub(_start) as usize;
                    let end = ((_end - 20) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_tasks_stop14_write(offset, &_buf[start..end])?;
                }
            }
            (28..=43, 29..=44) => {
                if _start < 32 && _end > 28 {
                    let offset = _start.saturating_sub(28);
                    let start = 28u64.saturating_sub(_start) as usize;
                    let end = ((_end - 28) - offset) as usize;
                    self.0.lock().unwrap().apb35_tasks_suspend1c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 36 && _end > 32 {
                    let offset = _start.saturating_sub(32);
                    let start = 32u64.saturating_sub(_start) as usize;
                    let end = ((_end - 32) - offset) as usize;
                    self.0.lock().unwrap().apb35_tasks_resume20_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 40 && _end > 36 {
                    let offset = _start.saturating_sub(36);
                    let start = 36u64.saturating_sub(_start) as usize;
                    let end = ((_end - 36) - offset) as usize;
                    self.0.lock().unwrap().apb35_tasks_acquire24_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 44 && _end > 40 {
                    let offset = _start.saturating_sub(40);
                    let start = 40u64.saturating_sub(_start) as usize;
                    let end = ((_end - 40) - offset) as usize;
                    self.0.lock().unwrap().apb35_tasks_release28_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (260..=267, 261..=268) => {
                if _start < 264 && _end > 260 {
                    let offset = _start.saturating_sub(260);
                    let start = 260u64.saturating_sub(_start) as usize;
                    let end = ((_end - 260) - offset) as usize;
                    self.0.lock().unwrap().apb35_events_stopped104_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
                if _start < 268 && _end > 264 {
                    let offset = _start.saturating_sub(264);
                    let start = 264u64.saturating_sub(_start) as usize;
                    let end = ((_end - 264) - offset) as usize;
                    self.0.lock().unwrap().apb35_events_ready108_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (272..=275, 273..=276) => {
                if _start < 276 && _end > 272 {
                    let offset = _start.saturating_sub(272);
                    let start = 272u64.saturating_sub(_start) as usize;
                    let end = ((_end - 272) - offset) as usize;
                    self.0.lock().unwrap().apb35_events_endrx110_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (280..=283, 281..=284) => {
                if _start < 284 && _end > 280 {
                    let offset = _start.saturating_sub(280);
                    let start = 280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 280) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_events_end118_write(offset, &_buf[start..end])?;
                }
            }
            (288..=291, 289..=292) => {
                if _start < 292 && _end > 288 {
                    let offset = _start.saturating_sub(288);
                    let start = 288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 288) - offset) as usize;
                    self.0.lock().unwrap().apb35_events_endtx120_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (296..=299, 297..=300) => {
                if _start < 300 && _end > 296 {
                    let offset = _start.saturating_sub(296);
                    let start = 296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 296) - offset) as usize;
                    self.0.lock().unwrap().apb35_events_acquired128_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (332..=335, 333..=336) => {
                if _start < 336 && _end > 332 {
                    let offset = _start.saturating_sub(332);
                    let start = 332u64.saturating_sub(_start) as usize;
                    let end = ((_end - 332) - offset) as usize;
                    self.0.lock().unwrap().apb35_events_started14c_write(
                        offset,
                        &_buf[start..end],
                    )?;
                }
            }
            (512..=515, 513..=516) => {
                if _start < 516 && _end > 512 {
                    let offset = _start.saturating_sub(512);
                    let start = 512u64.saturating_sub(_start) as usize;
                    let end = ((_end - 512) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_shorts200_write(offset, &_buf[start..end])?;
                }
            }
            (772..=779, 773..=780) => {
                if _start < 776 && _end > 772 {
                    let offset = _start.saturating_sub(772);
                    let start = 772u64.saturating_sub(_start) as usize;
                    let end = ((_end - 772) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_intenset304_write(offset, &_buf[start..end])?;
                }
                if _start < 780 && _end > 776 {
                    let offset = _start.saturating_sub(776);
                    let start = 776u64.saturating_sub(_start) as usize;
                    let end = ((_end - 776) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_intenclr308_write(offset, &_buf[start..end])?;
                }
            }
            (1024..=1027, 1025..=1028) => {
                return Err(MemError::WriteViolation);
            }
            (1088..=1091, 1089..=1092) => {
                if _start < 1092 && _end > 1088 {
                    let offset = _start.saturating_sub(1088);
                    let start = 1088u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1088) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_status440_write(offset, &_buf[start..end])?;
                }
            }
            (1280..=1283, 1281..=1284) => {
                if _start < 1284 && _end > 1280 {
                    let offset = _start.saturating_sub(1280);
                    let start = 1280u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1280) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_enable500_write(offset, &_buf[start..end])?;
                }
            }
            (1288..=1311, 1289..=1312) => {
                if _start < 1292 && _end > 1288 {
                    let offset = _start.saturating_sub(1288);
                    let start = 1288u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1288) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_psel_sck0_write(offset, &_buf[start..end])?;
                }
                if _start < 1296 && _end > 1292 {
                    let offset = _start.saturating_sub(1292);
                    let start = 1292u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1292) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_psel_miso4_write(offset, &_buf[start..end])?;
                }
                if _start < 1300 && _end > 1296 {
                    let offset = _start.saturating_sub(1296);
                    let start = 1296u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1296) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_psel_mosi8_write(offset, &_buf[start..end])?;
                }
                if _start < 1304 && _end > 1300 {
                    let offset = _start.saturating_sub(1300);
                    let start = 1300u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1300) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_psel_csnc_write(offset, &_buf[start..end])?;
                }
                if _start < 1308 && _end > 1304 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 1312 && _end > 1308 {
                    let offset = _start.saturating_sub(1308);
                    let start = 1308u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1308) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_txd51c_write(offset, &_buf[start..end])?;
                }
            }
            (1316..=1319, 1317..=1320) => {
                if _start < 1320 && _end > 1316 {
                    let offset = _start.saturating_sub(1316);
                    let start = 1316u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1316) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_frequency524_write(offset, &_buf[start..end])?;
                }
            }
            (1332..=1367, 1333..=1368) => {
                if _start < 1336 && _end > 1332 {
                    let offset = _start.saturating_sub(1332);
                    let start = 1332u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1332) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_rxd_ptr0_write(offset, &_buf[start..end])?;
                }
                if _start < 1340 && _end > 1336 {
                    let offset = _start.saturating_sub(1336);
                    let start = 1336u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1336) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_rxd_maxcnt4_write(offset, &_buf[start..end])?;
                }
                if _start < 1344 && _end > 1340 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 1348 && _end > 1344 {
                    let offset = _start.saturating_sub(1344);
                    let start = 1344u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1344) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_rxd_listc_write(offset, &_buf[start..end])?;
                }
                if _start < 1352 && _end > 1348 {
                    let offset = _start.saturating_sub(1348);
                    let start = 1348u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1348) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_txd_ptr0_write(offset, &_buf[start..end])?;
                }
                if _start < 1356 && _end > 1352 {
                    let offset = _start.saturating_sub(1352);
                    let start = 1352u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1352) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_txd_maxcnt4_write(offset, &_buf[start..end])?;
                }
                if _start < 1360 && _end > 1356 {
                    return Err(MemError::WriteViolation);
                }
                if _start < 1364 && _end > 1360 {
                    let offset = _start.saturating_sub(1360);
                    let start = 1360u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1360) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_txd_listc_write(offset, &_buf[start..end])?;
                }
                if _start < 1368 && _end > 1364 {
                    let offset = _start.saturating_sub(1364);
                    let start = 1364u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1364) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_config554_write(offset, &_buf[start..end])?;
                }
            }
            (1372..=1375, 1373..=1376) => {
                if _start < 1376 && _end > 1372 {
                    let offset = _start.saturating_sub(1372);
                    let start = 1372u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1372) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_def55c_write(offset, &_buf[start..end])?;
                }
            }
            (1472..=1475, 1473..=1476) => {
                if _start < 1476 && _end > 1472 {
                    let offset = _start.saturating_sub(1472);
                    let start = 1472u64.saturating_sub(_start) as usize;
                    let end = ((_end - 1472) - offset) as usize;
                    self.0
                        .lock()
                        .unwrap()
                        .apb35_orc5c0_write(offset, &_buf[start..end])?;
                }
            }
            _ => return Err(MemError::Unmapped),
        }
        #[allow(unreachable_code)]
        Ok(())
    }
}
